/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkems"] = self["webpackChunkems"] || []).push([["vendors-node_modules_helia_dist_src_index_js"],{

/***/ "./node_modules/@multiformats/base-x/src/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@multiformats/base-x/src/index.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/base-x/src/index.js?");

/***/ }),

/***/ "./node_modules/@vascosantos/moving-average/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@vascosantos/moving-average/index.js ***!
  \***********************************************************/
/***/ ((module, exports) => {

eval("\n\nconst exp = Math.exp\n\nexports =\nmodule.exports =\nfunction MovingAverage (timespan) {\n  if (typeof timespan !== 'number') { throw new Error('must provide a timespan to the moving average constructor') }\n\n  if (timespan <= 0) { throw new Error('must provide a timespan > 0 to the moving average constructor') }\n\n  let ma     // moving average\n  let v = 0  // variance\n  let d = 0  // deviation\n  let f = 0  // forecast\n\n  let previousTime\n\n  let ret = {}\n\n  function alpha (t, pt) {\n    return 1 - (exp(-(t - pt) / timespan))\n  }\n\n  ret.push =\n  function push (time, value) {\n    if (previousTime) {\n      // calculate moving average\n      const a = alpha(time, previousTime)\n      const diff = value - ma\n      const incr = a * diff\n      ma = a * value + (1 - a) * ma\n      // calculate variance & deviation\n      v = (1 - a) * (v + diff * incr)\n      d = Math.sqrt(v)\n      // calculate forecast\n      f = ma + a * diff\n    } else {\n      ma = value\n    }\n    previousTime = time\n  }\n\n  // Exponential Moving Average\n\n  ret.movingAverage =\n  function movingAverage () {\n    return ma\n  }\n\n  // Variance\n  ret.variance =\n  function variance () {\n    return v\n  }\n\n  ret.deviation =\n  function deviation () {\n    return d\n  }\n\n  ret.forecast =\n  function forecast () {\n    return f\n  }\n\n  return ret\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/@vascosantos/moving-average/index.js?");

/***/ }),

/***/ "./node_modules/asn1js/build/index.es.js":
/*!***********************************************!*\
  !*** ./node_modules/asn1js/build/index.es.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: () => (/* binding */ Any),\n/* harmony export */   BaseBlock: () => (/* binding */ BaseBlock),\n/* harmony export */   BaseStringBlock: () => (/* binding */ BaseStringBlock),\n/* harmony export */   BitString: () => (/* binding */ BitString),\n/* harmony export */   BmpString: () => (/* binding */ BmpString),\n/* harmony export */   Boolean: () => (/* binding */ Boolean),\n/* harmony export */   CharacterString: () => (/* binding */ CharacterString),\n/* harmony export */   Choice: () => (/* binding */ Choice),\n/* harmony export */   Constructed: () => (/* binding */ Constructed),\n/* harmony export */   DATE: () => (/* binding */ DATE),\n/* harmony export */   DateTime: () => (/* binding */ DateTime),\n/* harmony export */   Duration: () => (/* binding */ Duration),\n/* harmony export */   EndOfContent: () => (/* binding */ EndOfContent),\n/* harmony export */   Enumerated: () => (/* binding */ Enumerated),\n/* harmony export */   GeneralString: () => (/* binding */ GeneralString),\n/* harmony export */   GeneralizedTime: () => (/* binding */ GeneralizedTime),\n/* harmony export */   GraphicString: () => (/* binding */ GraphicString),\n/* harmony export */   HexBlock: () => (/* binding */ HexBlock),\n/* harmony export */   IA5String: () => (/* binding */ IA5String),\n/* harmony export */   Integer: () => (/* binding */ Integer),\n/* harmony export */   Null: () => (/* binding */ Null),\n/* harmony export */   NumericString: () => (/* binding */ NumericString),\n/* harmony export */   ObjectIdentifier: () => (/* binding */ ObjectIdentifier),\n/* harmony export */   OctetString: () => (/* binding */ OctetString),\n/* harmony export */   Primitive: () => (/* binding */ Primitive),\n/* harmony export */   PrintableString: () => (/* binding */ PrintableString),\n/* harmony export */   RawData: () => (/* binding */ RawData),\n/* harmony export */   RelativeObjectIdentifier: () => (/* binding */ RelativeObjectIdentifier),\n/* harmony export */   Repeated: () => (/* binding */ Repeated),\n/* harmony export */   Sequence: () => (/* binding */ Sequence),\n/* harmony export */   Set: () => (/* binding */ Set),\n/* harmony export */   TIME: () => (/* binding */ TIME),\n/* harmony export */   TeletexString: () => (/* binding */ TeletexString),\n/* harmony export */   TimeOfDay: () => (/* binding */ TimeOfDay),\n/* harmony export */   UTCTime: () => (/* binding */ UTCTime),\n/* harmony export */   UniversalString: () => (/* binding */ UniversalString),\n/* harmony export */   Utf8String: () => (/* binding */ Utf8String),\n/* harmony export */   ValueBlock: () => (/* binding */ ValueBlock),\n/* harmony export */   VideotexString: () => (/* binding */ VideotexString),\n/* harmony export */   ViewWriter: () => (/* binding */ ViewWriter),\n/* harmony export */   VisibleString: () => (/* binding */ VisibleString),\n/* harmony export */   compareSchema: () => (/* binding */ compareSchema),\n/* harmony export */   fromBER: () => (/* binding */ fromBER),\n/* harmony export */   verifySchema: () => (/* binding */ verifySchema)\n/* harmony export */ });\n/* harmony import */ var pvtsutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pvtsutils */ \"./node_modules/pvtsutils/build/index.js\");\n/* harmony import */ var pvutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pvutils */ \"./node_modules/pvutils/build/utils.es.js\");\n/*!\n * Copyright (c) 2014, GMO GlobalSign\n * Copyright (c) 2015-2022, Peculiar Ventures\n * All rights reserved.\n * \n * Author 2014-2019, Yury Strozhevsky\n * \n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * \n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n * \n * * Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n */\n\n\n\n\nfunction assertBigInt() {\r\n    if (typeof BigInt === \"undefined\") {\r\n        throw new Error(\"BigInt is not defined. Your environment doesn't implement BigInt.\");\r\n    }\r\n}\r\nfunction concat(buffers) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (let i = 0; i < buffers.length; i++) {\r\n        const buffer = buffers[i];\r\n        outputLength += buffer.byteLength;\r\n    }\r\n    const retView = new Uint8Array(outputLength);\r\n    for (let i = 0; i < buffers.length; i++) {\r\n        const buffer = buffers[i];\r\n        retView.set(new Uint8Array(buffer), prevLength);\r\n        prevLength += buffer.byteLength;\r\n    }\r\n    return retView.buffer;\r\n}\r\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\r\n    if (!(inputBuffer instanceof Uint8Array)) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer must be 'Uint8Array'\";\r\n        return false;\r\n    }\r\n    if (!inputBuffer.byteLength) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n        return false;\r\n    }\r\n    if (inputOffset < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n        return false;\r\n    }\r\n    if (inputLength < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n        return false;\r\n    }\r\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\r\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n        return false;\r\n    }\r\n    return true;\r\n}\n\nclass ViewWriter {\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n    write(buf) {\r\n        this.items.push(buf);\r\n    }\r\n    final() {\r\n        return concat(this.items);\r\n    }\r\n}\n\nconst powers2 = [new Uint8Array([1])];\r\nconst digitsString = \"0123456789\";\r\nconst NAME = \"name\";\r\nconst VALUE_HEX_VIEW = \"valueHexView\";\r\nconst IS_HEX_ONLY = \"isHexOnly\";\r\nconst ID_BLOCK = \"idBlock\";\r\nconst TAG_CLASS = \"tagClass\";\r\nconst TAG_NUMBER = \"tagNumber\";\r\nconst IS_CONSTRUCTED = \"isConstructed\";\r\nconst FROM_BER = \"fromBER\";\r\nconst TO_BER = \"toBER\";\r\nconst LOCAL = \"local\";\r\nconst EMPTY_STRING = \"\";\r\nconst EMPTY_BUFFER = new ArrayBuffer(0);\r\nconst EMPTY_VIEW = new Uint8Array(0);\r\nconst END_OF_CONTENT_NAME = \"EndOfContent\";\r\nconst OCTET_STRING_NAME = \"OCTET STRING\";\r\nconst BIT_STRING_NAME = \"BIT STRING\";\n\nfunction HexBlock(BaseClass) {\r\n    var _a;\r\n    return _a = class Some extends BaseClass {\r\n            constructor(...args) {\r\n                var _a;\r\n                super(...args);\r\n                const params = args[0] || {};\r\n                this.isHexOnly = (_a = params.isHexOnly) !== null && _a !== void 0 ? _a : false;\r\n                this.valueHexView = params.valueHex ? pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(params.valueHex) : EMPTY_VIEW;\r\n            }\r\n            get valueHex() {\r\n                return this.valueHexView.slice().buffer;\r\n            }\r\n            set valueHex(value) {\r\n                this.valueHexView = new Uint8Array(value);\r\n            }\r\n            fromBER(inputBuffer, inputOffset, inputLength) {\r\n                const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\r\n                if (!checkBufferParams(this, view, inputOffset, inputLength)) {\r\n                    return -1;\r\n                }\r\n                const endLength = inputOffset + inputLength;\r\n                this.valueHexView = view.subarray(inputOffset, endLength);\r\n                if (!this.valueHexView.length) {\r\n                    this.warnings.push(\"Zero buffer length\");\r\n                    return inputOffset;\r\n                }\r\n                this.blockLength = inputLength;\r\n                return endLength;\r\n            }\r\n            toBER(sizeOnly = false) {\r\n                if (!this.isHexOnly) {\r\n                    this.error = \"Flag 'isHexOnly' is not set, abort\";\r\n                    return EMPTY_BUFFER;\r\n                }\r\n                if (sizeOnly) {\r\n                    return new ArrayBuffer(this.valueHexView.byteLength);\r\n                }\r\n                return (this.valueHexView.byteLength === this.valueHexView.buffer.byteLength)\r\n                    ? this.valueHexView.buffer\r\n                    : this.valueHexView.slice().buffer;\r\n            }\r\n            toJSON() {\r\n                return {\r\n                    ...super.toJSON(),\r\n                    isHexOnly: this.isHexOnly,\r\n                    valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueHexView),\r\n                };\r\n            }\r\n        },\r\n        _a.NAME = \"hexBlock\",\r\n        _a;\r\n}\n\nclass LocalBaseBlock {\r\n    constructor({ blockLength = 0, error = EMPTY_STRING, warnings = [], valueBeforeDecode = EMPTY_VIEW, } = {}) {\r\n        this.blockLength = blockLength;\r\n        this.error = error;\r\n        this.warnings = warnings;\r\n        this.valueBeforeDecodeView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(valueBeforeDecode);\r\n    }\r\n    static blockName() {\r\n        return this.NAME;\r\n    }\r\n    get valueBeforeDecode() {\r\n        return this.valueBeforeDecodeView.slice().buffer;\r\n    }\r\n    set valueBeforeDecode(value) {\r\n        this.valueBeforeDecodeView = new Uint8Array(value);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            blockName: this.constructor.NAME,\r\n            blockLength: this.blockLength,\r\n            error: this.error,\r\n            warnings: this.warnings,\r\n            valueBeforeDecode: pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueBeforeDecodeView),\r\n        };\r\n    }\r\n}\r\nLocalBaseBlock.NAME = \"baseBlock\";\n\nclass ValueBlock extends LocalBaseBlock {\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\r\n    }\r\n}\r\nValueBlock.NAME = \"valueBlock\";\n\nclass LocalIdentificationBlock extends HexBlock(LocalBaseBlock) {\r\n    constructor({ idBlock = {}, } = {}) {\r\n        var _a, _b, _c, _d;\r\n        super();\r\n        if (idBlock) {\r\n            this.isHexOnly = (_a = idBlock.isHexOnly) !== null && _a !== void 0 ? _a : false;\r\n            this.valueHexView = idBlock.valueHex ? pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(idBlock.valueHex) : EMPTY_VIEW;\r\n            this.tagClass = (_b = idBlock.tagClass) !== null && _b !== void 0 ? _b : -1;\r\n            this.tagNumber = (_c = idBlock.tagNumber) !== null && _c !== void 0 ? _c : -1;\r\n            this.isConstructed = (_d = idBlock.isConstructed) !== null && _d !== void 0 ? _d : false;\r\n        }\r\n        else {\r\n            this.tagClass = -1;\r\n            this.tagNumber = -1;\r\n            this.isConstructed = false;\r\n        }\r\n    }\r\n    toBER(sizeOnly = false) {\r\n        let firstOctet = 0;\r\n        switch (this.tagClass) {\r\n            case 1:\r\n                firstOctet |= 0x00;\r\n                break;\r\n            case 2:\r\n                firstOctet |= 0x40;\r\n                break;\r\n            case 3:\r\n                firstOctet |= 0x80;\r\n                break;\r\n            case 4:\r\n                firstOctet |= 0xC0;\r\n                break;\r\n            default:\r\n                this.error = \"Unknown tag class\";\r\n                return EMPTY_BUFFER;\r\n        }\r\n        if (this.isConstructed)\r\n            firstOctet |= 0x20;\r\n        if (this.tagNumber < 31 && !this.isHexOnly) {\r\n            const retView = new Uint8Array(1);\r\n            if (!sizeOnly) {\r\n                let number = this.tagNumber;\r\n                number &= 0x1F;\r\n                firstOctet |= number;\r\n                retView[0] = firstOctet;\r\n            }\r\n            return retView.buffer;\r\n        }\r\n        if (!this.isHexOnly) {\r\n            const encodedBuf = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilToBase(this.tagNumber, 7);\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            const size = encodedBuf.byteLength;\r\n            const retView = new Uint8Array(size + 1);\r\n            retView[0] = (firstOctet | 0x1F);\r\n            if (!sizeOnly) {\r\n                for (let i = 0; i < (size - 1); i++)\r\n                    retView[i + 1] = encodedView[i] | 0x80;\r\n                retView[size] = encodedView[size - 1];\r\n            }\r\n            return retView.buffer;\r\n        }\r\n        const retView = new Uint8Array(this.valueHexView.byteLength + 1);\r\n        retView[0] = (firstOctet | 0x1F);\r\n        if (!sizeOnly) {\r\n            const curView = this.valueHexView;\r\n            for (let i = 0; i < (curView.length - 1); i++)\r\n                retView[i + 1] = curView[i] | 0x80;\r\n            retView[this.valueHexView.byteLength] = curView[curView.length - 1];\r\n        }\r\n        return retView.buffer;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const inputView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        if (intBuffer.length === 0) {\r\n            this.error = \"Zero buffer length\";\r\n            return -1;\r\n        }\r\n        const tagClassMask = intBuffer[0] & 0xC0;\r\n        switch (tagClassMask) {\r\n            case 0x00:\r\n                this.tagClass = (1);\r\n                break;\r\n            case 0x40:\r\n                this.tagClass = (2);\r\n                break;\r\n            case 0x80:\r\n                this.tagClass = (3);\r\n                break;\r\n            case 0xC0:\r\n                this.tagClass = (4);\r\n                break;\r\n            default:\r\n                this.error = \"Unknown tag class\";\r\n                return -1;\r\n        }\r\n        this.isConstructed = (intBuffer[0] & 0x20) === 0x20;\r\n        this.isHexOnly = false;\r\n        const tagNumberMask = intBuffer[0] & 0x1F;\r\n        if (tagNumberMask !== 0x1F) {\r\n            this.tagNumber = (tagNumberMask);\r\n            this.blockLength = 1;\r\n        }\r\n        else {\r\n            let count = 1;\r\n            let intTagNumberBuffer = this.valueHexView = new Uint8Array(255);\r\n            let tagNumberBufferMaxLength = 255;\r\n            while (intBuffer[count] & 0x80) {\r\n                intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\r\n                count++;\r\n                if (count >= intBuffer.length) {\r\n                    this.error = \"End of input reached before message was fully decoded\";\r\n                    return -1;\r\n                }\r\n                if (count === tagNumberBufferMaxLength) {\r\n                    tagNumberBufferMaxLength += 255;\r\n                    const tempBufferView = new Uint8Array(tagNumberBufferMaxLength);\r\n                    for (let i = 0; i < intTagNumberBuffer.length; i++)\r\n                        tempBufferView[i] = intTagNumberBuffer[i];\r\n                    intTagNumberBuffer = this.valueHexView = new Uint8Array(tagNumberBufferMaxLength);\r\n                }\r\n            }\r\n            this.blockLength = (count + 1);\r\n            intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\r\n            const tempBufferView = new Uint8Array(count);\r\n            for (let i = 0; i < count; i++)\r\n                tempBufferView[i] = intTagNumberBuffer[i];\r\n            intTagNumberBuffer = this.valueHexView = new Uint8Array(count);\r\n            intTagNumberBuffer.set(tempBufferView);\r\n            if (this.blockLength <= 9)\r\n                this.tagNumber = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilFromBase(intTagNumberBuffer, 7);\r\n            else {\r\n                this.isHexOnly = true;\r\n                this.warnings.push(\"Tag too long, represented as hex-coded\");\r\n            }\r\n        }\r\n        if (((this.tagClass === 1)) &&\r\n            (this.isConstructed)) {\r\n            switch (this.tagNumber) {\r\n                case 1:\r\n                case 2:\r\n                case 5:\r\n                case 6:\r\n                case 9:\r\n                case 13:\r\n                case 14:\r\n                case 23:\r\n                case 24:\r\n                case 31:\r\n                case 32:\r\n                case 33:\r\n                case 34:\r\n                    this.error = \"Constructed encoding used for primitive type\";\r\n                    return -1;\r\n            }\r\n        }\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            tagClass: this.tagClass,\r\n            tagNumber: this.tagNumber,\r\n            isConstructed: this.isConstructed,\r\n        };\r\n    }\r\n}\r\nLocalIdentificationBlock.NAME = \"identificationBlock\";\n\nclass LocalLengthBlock extends LocalBaseBlock {\r\n    constructor({ lenBlock = {}, } = {}) {\r\n        var _a, _b, _c;\r\n        super();\r\n        this.isIndefiniteForm = (_a = lenBlock.isIndefiniteForm) !== null && _a !== void 0 ? _a : false;\r\n        this.longFormUsed = (_b = lenBlock.longFormUsed) !== null && _b !== void 0 ? _b : false;\r\n        this.length = (_c = lenBlock.length) !== null && _c !== void 0 ? _c : 0;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const view = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = view.subarray(inputOffset, inputOffset + inputLength);\r\n        if (intBuffer.length === 0) {\r\n            this.error = \"Zero buffer length\";\r\n            return -1;\r\n        }\r\n        if (intBuffer[0] === 0xFF) {\r\n            this.error = \"Length block 0xFF is reserved by standard\";\r\n            return -1;\r\n        }\r\n        this.isIndefiniteForm = intBuffer[0] === 0x80;\r\n        if (this.isIndefiniteForm) {\r\n            this.blockLength = 1;\r\n            return (inputOffset + this.blockLength);\r\n        }\r\n        this.longFormUsed = !!(intBuffer[0] & 0x80);\r\n        if (this.longFormUsed === false) {\r\n            this.length = (intBuffer[0]);\r\n            this.blockLength = 1;\r\n            return (inputOffset + this.blockLength);\r\n        }\r\n        const count = intBuffer[0] & 0x7F;\r\n        if (count > 8) {\r\n            this.error = \"Too big integer\";\r\n            return -1;\r\n        }\r\n        if ((count + 1) > intBuffer.length) {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return -1;\r\n        }\r\n        const lenOffset = inputOffset + 1;\r\n        const lengthBufferView = view.subarray(lenOffset, lenOffset + count);\r\n        if (lengthBufferView[count - 1] === 0x00)\r\n            this.warnings.push(\"Needlessly long encoded length\");\r\n        this.length = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilFromBase(lengthBufferView, 8);\r\n        if (this.longFormUsed && (this.length <= 127))\r\n            this.warnings.push(\"Unnecessary usage of long length form\");\r\n        this.blockLength = count + 1;\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    toBER(sizeOnly = false) {\r\n        let retBuf;\r\n        let retView;\r\n        if (this.length > 127)\r\n            this.longFormUsed = true;\r\n        if (this.isIndefiniteForm) {\r\n            retBuf = new ArrayBuffer(1);\r\n            if (sizeOnly === false) {\r\n                retView = new Uint8Array(retBuf);\r\n                retView[0] = 0x80;\r\n            }\r\n            return retBuf;\r\n        }\r\n        if (this.longFormUsed) {\r\n            const encodedBuf = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilToBase(this.length, 8);\r\n            if (encodedBuf.byteLength > 127) {\r\n                this.error = \"Too big length\";\r\n                return (EMPTY_BUFFER);\r\n            }\r\n            retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\r\n            if (sizeOnly)\r\n                return retBuf;\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            retView = new Uint8Array(retBuf);\r\n            retView[0] = encodedBuf.byteLength | 0x80;\r\n            for (let i = 0; i < encodedBuf.byteLength; i++)\r\n                retView[i + 1] = encodedView[i];\r\n            return retBuf;\r\n        }\r\n        retBuf = new ArrayBuffer(1);\r\n        if (sizeOnly === false) {\r\n            retView = new Uint8Array(retBuf);\r\n            retView[0] = this.length;\r\n        }\r\n        return retBuf;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            isIndefiniteForm: this.isIndefiniteForm,\r\n            longFormUsed: this.longFormUsed,\r\n            length: this.length,\r\n        };\r\n    }\r\n}\r\nLocalLengthBlock.NAME = \"lengthBlock\";\n\nconst typeStore = {};\n\nclass BaseBlock extends LocalBaseBlock {\r\n    constructor({ name = EMPTY_STRING, optional = false, primitiveSchema, ...parameters } = {}, valueBlockType) {\r\n        super(parameters);\r\n        this.name = name;\r\n        this.optional = optional;\r\n        if (primitiveSchema) {\r\n            this.primitiveSchema = primitiveSchema;\r\n        }\r\n        this.idBlock = new LocalIdentificationBlock(parameters);\r\n        this.lenBlock = new LocalLengthBlock(parameters);\r\n        this.valueBlock = valueBlockType ? new valueBlockType(parameters) : new ValueBlock(parameters);\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\r\n        if (resultOffset === -1) {\r\n            this.error = this.valueBlock.error;\r\n            return resultOffset;\r\n        }\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        if (!this.valueBlock.error.length)\r\n            this.blockLength += this.valueBlock.blockLength;\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const _writer = writer || new ViewWriter();\r\n        if (!writer) {\r\n            prepareIndefiniteForm(this);\r\n        }\r\n        const idBlockBuf = this.idBlock.toBER(sizeOnly);\r\n        _writer.write(idBlockBuf);\r\n        if (this.lenBlock.isIndefiniteForm) {\r\n            _writer.write(new Uint8Array([0x80]).buffer);\r\n            this.valueBlock.toBER(sizeOnly, _writer);\r\n            _writer.write(new ArrayBuffer(2));\r\n        }\r\n        else {\r\n            const valueBlockBuf = this.valueBlock.toBER(sizeOnly);\r\n            this.lenBlock.length = valueBlockBuf.byteLength;\r\n            const lenBlockBuf = this.lenBlock.toBER(sizeOnly);\r\n            _writer.write(lenBlockBuf);\r\n            _writer.write(valueBlockBuf);\r\n        }\r\n        if (!writer) {\r\n            return _writer.final();\r\n        }\r\n        return EMPTY_BUFFER;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            idBlock: this.idBlock.toJSON(),\r\n            lenBlock: this.lenBlock.toJSON(),\r\n            valueBlock: this.valueBlock.toJSON(),\r\n            name: this.name,\r\n            optional: this.optional,\r\n        };\r\n        if (this.primitiveSchema)\r\n            object.primitiveSchema = this.primitiveSchema.toJSON();\r\n        return object;\r\n    }\r\n    toString(encoding = \"ascii\") {\r\n        if (encoding === \"ascii\") {\r\n            return this.onAsciiEncoding();\r\n        }\r\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.toBER());\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueBlock.valueBeforeDecodeView)}`;\r\n    }\r\n    isEqual(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (!(other instanceof this.constructor)) {\r\n            return false;\r\n        }\r\n        const thisRaw = this.toBER();\r\n        const otherRaw = other.toBER();\r\n        return pvutils__WEBPACK_IMPORTED_MODULE_1__.isEqualBuffer(thisRaw, otherRaw);\r\n    }\r\n}\r\nBaseBlock.NAME = \"BaseBlock\";\r\nfunction prepareIndefiniteForm(baseBlock) {\r\n    if (baseBlock instanceof typeStore.Constructed) {\r\n        for (const value of baseBlock.valueBlock.value) {\r\n            if (prepareIndefiniteForm(value)) {\r\n                baseBlock.lenBlock.isIndefiniteForm = true;\r\n            }\r\n        }\r\n    }\r\n    return !!baseBlock.lenBlock.isIndefiniteForm;\r\n}\n\nclass BaseStringBlock extends BaseBlock {\r\n    constructor({ value = EMPTY_STRING, ...parameters } = {}, stringValueBlockType) {\r\n        super(parameters, stringValueBlockType);\r\n        if (value) {\r\n            this.fromString(value);\r\n        }\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.value;\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.value = value;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\r\n        if (resultOffset === -1) {\r\n            this.error = this.valueBlock.error;\r\n            return resultOffset;\r\n        }\r\n        this.fromBuffer(this.valueBlock.valueHexView);\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        if (!this.valueBlock.error.length)\r\n            this.blockLength += this.valueBlock.blockLength;\r\n        return resultOffset;\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : '${this.valueBlock.value}'`;\r\n    }\r\n}\r\nBaseStringBlock.NAME = \"BaseStringBlock\";\n\nclass LocalPrimitiveValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ isHexOnly = true, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.isHexOnly = isHexOnly;\r\n    }\r\n}\r\nLocalPrimitiveValueBlock.NAME = \"PrimitiveValueBlock\";\n\nvar _a$w;\r\nclass Primitive extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalPrimitiveValueBlock);\r\n        this.idBlock.isConstructed = false;\r\n    }\r\n}\r\n_a$w = Primitive;\r\n(() => {\r\n    typeStore.Primitive = _a$w;\r\n})();\r\nPrimitive.NAME = \"PRIMITIVE\";\n\nfunction localChangeType(inputObject, newType) {\r\n    if (inputObject instanceof newType) {\r\n        return inputObject;\r\n    }\r\n    const newObject = new newType();\r\n    newObject.idBlock = inputObject.idBlock;\r\n    newObject.lenBlock = inputObject.lenBlock;\r\n    newObject.warnings = inputObject.warnings;\r\n    newObject.valueBeforeDecodeView = inputObject.valueBeforeDecodeView;\r\n    return newObject;\r\n}\r\nfunction localFromBER(inputBuffer, inputOffset = 0, inputLength = inputBuffer.length) {\r\n    const incomingOffset = inputOffset;\r\n    let returnObject = new BaseBlock({}, ValueBlock);\r\n    const baseBlock = new LocalBaseBlock();\r\n    if (!checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)) {\r\n        returnObject.error = baseBlock.error;\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    const intBuffer = inputBuffer.subarray(inputOffset, inputOffset + inputLength);\r\n    if (!intBuffer.length) {\r\n        returnObject.error = \"Zero buffer length\";\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    let resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n    if (returnObject.idBlock.warnings.length) {\r\n        returnObject.warnings.concat(returnObject.idBlock.warnings);\r\n    }\r\n    if (resultOffset === -1) {\r\n        returnObject.error = returnObject.idBlock.error;\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    inputOffset = resultOffset;\r\n    inputLength -= returnObject.idBlock.blockLength;\r\n    resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n    if (returnObject.lenBlock.warnings.length) {\r\n        returnObject.warnings.concat(returnObject.lenBlock.warnings);\r\n    }\r\n    if (resultOffset === -1) {\r\n        returnObject.error = returnObject.lenBlock.error;\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    inputOffset = resultOffset;\r\n    inputLength -= returnObject.lenBlock.blockLength;\r\n    if (!returnObject.idBlock.isConstructed &&\r\n        returnObject.lenBlock.isIndefiniteForm) {\r\n        returnObject.error = \"Indefinite length form used for primitive encoding form\";\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    let newASN1Type = BaseBlock;\r\n    switch (returnObject.idBlock.tagClass) {\r\n        case 1:\r\n            if ((returnObject.idBlock.tagNumber >= 37) &&\r\n                (returnObject.idBlock.isHexOnly === false)) {\r\n                returnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\r\n                return {\r\n                    offset: -1,\r\n                    result: returnObject\r\n                };\r\n            }\r\n            switch (returnObject.idBlock.tagNumber) {\r\n                case 0:\r\n                    if ((returnObject.idBlock.isConstructed) &&\r\n                        (returnObject.lenBlock.length > 0)) {\r\n                        returnObject.error = \"Type [UNIVERSAL 0] is reserved\";\r\n                        return {\r\n                            offset: -1,\r\n                            result: returnObject\r\n                        };\r\n                    }\r\n                    newASN1Type = typeStore.EndOfContent;\r\n                    break;\r\n                case 1:\r\n                    newASN1Type = typeStore.Boolean;\r\n                    break;\r\n                case 2:\r\n                    newASN1Type = typeStore.Integer;\r\n                    break;\r\n                case 3:\r\n                    newASN1Type = typeStore.BitString;\r\n                    break;\r\n                case 4:\r\n                    newASN1Type = typeStore.OctetString;\r\n                    break;\r\n                case 5:\r\n                    newASN1Type = typeStore.Null;\r\n                    break;\r\n                case 6:\r\n                    newASN1Type = typeStore.ObjectIdentifier;\r\n                    break;\r\n                case 10:\r\n                    newASN1Type = typeStore.Enumerated;\r\n                    break;\r\n                case 12:\r\n                    newASN1Type = typeStore.Utf8String;\r\n                    break;\r\n                case 13:\r\n                    newASN1Type = typeStore.RelativeObjectIdentifier;\r\n                    break;\r\n                case 14:\r\n                    newASN1Type = typeStore.TIME;\r\n                    break;\r\n                case 15:\r\n                    returnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\r\n                    return {\r\n                        offset: -1,\r\n                        result: returnObject\r\n                    };\r\n                case 16:\r\n                    newASN1Type = typeStore.Sequence;\r\n                    break;\r\n                case 17:\r\n                    newASN1Type = typeStore.Set;\r\n                    break;\r\n                case 18:\r\n                    newASN1Type = typeStore.NumericString;\r\n                    break;\r\n                case 19:\r\n                    newASN1Type = typeStore.PrintableString;\r\n                    break;\r\n                case 20:\r\n                    newASN1Type = typeStore.TeletexString;\r\n                    break;\r\n                case 21:\r\n                    newASN1Type = typeStore.VideotexString;\r\n                    break;\r\n                case 22:\r\n                    newASN1Type = typeStore.IA5String;\r\n                    break;\r\n                case 23:\r\n                    newASN1Type = typeStore.UTCTime;\r\n                    break;\r\n                case 24:\r\n                    newASN1Type = typeStore.GeneralizedTime;\r\n                    break;\r\n                case 25:\r\n                    newASN1Type = typeStore.GraphicString;\r\n                    break;\r\n                case 26:\r\n                    newASN1Type = typeStore.VisibleString;\r\n                    break;\r\n                case 27:\r\n                    newASN1Type = typeStore.GeneralString;\r\n                    break;\r\n                case 28:\r\n                    newASN1Type = typeStore.UniversalString;\r\n                    break;\r\n                case 29:\r\n                    newASN1Type = typeStore.CharacterString;\r\n                    break;\r\n                case 30:\r\n                    newASN1Type = typeStore.BmpString;\r\n                    break;\r\n                case 31:\r\n                    newASN1Type = typeStore.DATE;\r\n                    break;\r\n                case 32:\r\n                    newASN1Type = typeStore.TimeOfDay;\r\n                    break;\r\n                case 33:\r\n                    newASN1Type = typeStore.DateTime;\r\n                    break;\r\n                case 34:\r\n                    newASN1Type = typeStore.Duration;\r\n                    break;\r\n                default: {\r\n                    const newObject = returnObject.idBlock.isConstructed\r\n                        ? new typeStore.Constructed()\r\n                        : new typeStore.Primitive();\r\n                    newObject.idBlock = returnObject.idBlock;\r\n                    newObject.lenBlock = returnObject.lenBlock;\r\n                    newObject.warnings = returnObject.warnings;\r\n                    returnObject = newObject;\r\n                }\r\n            }\r\n            break;\r\n        case 2:\r\n        case 3:\r\n        case 4:\r\n        default: {\r\n            newASN1Type = returnObject.idBlock.isConstructed\r\n                ? typeStore.Constructed\r\n                : typeStore.Primitive;\r\n        }\r\n    }\r\n    returnObject = localChangeType(returnObject, newASN1Type);\r\n    resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm ? inputLength : returnObject.lenBlock.length);\r\n    returnObject.valueBeforeDecodeView = inputBuffer.subarray(incomingOffset, incomingOffset + returnObject.blockLength);\r\n    return {\r\n        offset: resultOffset,\r\n        result: returnObject\r\n    };\r\n}\r\nfunction fromBER(inputBuffer) {\r\n    if (!inputBuffer.byteLength) {\r\n        const result = new BaseBlock({}, ValueBlock);\r\n        result.error = \"Input buffer has zero length\";\r\n        return {\r\n            offset: -1,\r\n            result\r\n        };\r\n    }\r\n    return localFromBER(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer).slice(), 0, inputBuffer.byteLength);\r\n}\n\nfunction checkLen(indefiniteLength, length) {\r\n    if (indefiniteLength) {\r\n        return 1;\r\n    }\r\n    return length;\r\n}\r\nclass LocalConstructedValueBlock extends ValueBlock {\r\n    constructor({ value = [], isIndefiniteForm = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = value;\r\n        this.isIndefiniteForm = isIndefiniteForm;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const view = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        this.valueBeforeDecodeView = view.subarray(inputOffset, inputOffset + inputLength);\r\n        if (this.valueBeforeDecodeView.length === 0) {\r\n            this.warnings.push(\"Zero buffer length\");\r\n            return inputOffset;\r\n        }\r\n        let currentOffset = inputOffset;\r\n        while (checkLen(this.isIndefiniteForm, inputLength) > 0) {\r\n            const returnObject = localFromBER(view, currentOffset, inputLength);\r\n            if (returnObject.offset === -1) {\r\n                this.error = returnObject.result.error;\r\n                this.warnings.concat(returnObject.result.warnings);\r\n                return -1;\r\n            }\r\n            currentOffset = returnObject.offset;\r\n            this.blockLength += returnObject.result.blockLength;\r\n            inputLength -= returnObject.result.blockLength;\r\n            this.value.push(returnObject.result);\r\n            if (this.isIndefiniteForm && returnObject.result.constructor.NAME === END_OF_CONTENT_NAME) {\r\n                break;\r\n            }\r\n        }\r\n        if (this.isIndefiniteForm) {\r\n            if (this.value[this.value.length - 1].constructor.NAME === END_OF_CONTENT_NAME) {\r\n                this.value.pop();\r\n            }\r\n            else {\r\n                this.warnings.push(\"No EndOfContent block encoded\");\r\n            }\r\n        }\r\n        return currentOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const _writer = writer || new ViewWriter();\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            this.value[i].toBER(sizeOnly, _writer);\r\n        }\r\n        if (!writer) {\r\n            return _writer.final();\r\n        }\r\n        return EMPTY_BUFFER;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            isIndefiniteForm: this.isIndefiniteForm,\r\n            value: [],\r\n        };\r\n        for (const value of this.value) {\r\n            object.value.push(value.toJSON());\r\n        }\r\n        return object;\r\n    }\r\n}\r\nLocalConstructedValueBlock.NAME = \"ConstructedValueBlock\";\n\nvar _a$v;\r\nclass Constructed extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalConstructedValueBlock);\r\n        this.idBlock.isConstructed = true;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\r\n        if (resultOffset === -1) {\r\n            this.error = this.valueBlock.error;\r\n            return resultOffset;\r\n        }\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        if (!this.valueBlock.error.length)\r\n            this.blockLength += this.valueBlock.blockLength;\r\n        return resultOffset;\r\n    }\r\n    onAsciiEncoding() {\r\n        const values = [];\r\n        for (const value of this.valueBlock.value) {\r\n            values.push(value.toString(\"ascii\").split(\"\\n\").map(o => `  ${o}`).join(\"\\n\"));\r\n        }\r\n        const blockName = this.idBlock.tagClass === 3\r\n            ? `[${this.idBlock.tagNumber}]`\r\n            : this.constructor.NAME;\r\n        return values.length\r\n            ? `${blockName} :\\n${values.join(\"\\n\")}`\r\n            : `${blockName} :`;\r\n    }\r\n}\r\n_a$v = Constructed;\r\n(() => {\r\n    typeStore.Constructed = _a$v;\r\n})();\r\nConstructed.NAME = \"CONSTRUCTED\";\n\nclass LocalEndOfContentValueBlock extends ValueBlock {\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        return inputOffset;\r\n    }\r\n    toBER(sizeOnly) {\r\n        return EMPTY_BUFFER;\r\n    }\r\n}\r\nLocalEndOfContentValueBlock.override = \"EndOfContentValueBlock\";\n\nvar _a$u;\r\nclass EndOfContent extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalEndOfContentValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 0;\r\n    }\r\n}\r\n_a$u = EndOfContent;\r\n(() => {\r\n    typeStore.EndOfContent = _a$u;\r\n})();\r\nEndOfContent.NAME = END_OF_CONTENT_NAME;\n\nvar _a$t;\r\nclass Null extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, ValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 5;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (this.lenBlock.length > 0)\r\n            this.warnings.push(\"Non-zero length of value block for Null type\");\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        this.blockLength += inputLength;\r\n        if ((inputOffset + inputLength) > inputBuffer.byteLength) {\r\n            this.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n            return -1;\r\n        }\r\n        return (inputOffset + inputLength);\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const retBuf = new ArrayBuffer(2);\r\n        if (!sizeOnly) {\r\n            const retView = new Uint8Array(retBuf);\r\n            retView[0] = 0x05;\r\n            retView[1] = 0x00;\r\n        }\r\n        if (writer) {\r\n            writer.write(retBuf);\r\n        }\r\n        return retBuf;\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME}`;\r\n    }\r\n}\r\n_a$t = Null;\r\n(() => {\r\n    typeStore.Null = _a$t;\r\n})();\r\nNull.NAME = \"NULL\";\n\nclass LocalBooleanValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ value, ...parameters } = {}) {\r\n        super(parameters);\r\n        if (parameters.valueHex) {\r\n            this.valueHexView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(parameters.valueHex);\r\n        }\r\n        else {\r\n            this.valueHexView = new Uint8Array(1);\r\n        }\r\n        if (value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n    get value() {\r\n        for (const octet of this.valueHexView) {\r\n            if (octet > 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    set value(value) {\r\n        this.valueHexView[0] = value ? 0xFF : 0x00;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const inputView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        this.valueHexView = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        if (inputLength > 1)\r\n            this.warnings.push(\"Boolean value encoded in more then 1 octet\");\r\n        this.isHexOnly = true;\r\n        pvutils__WEBPACK_IMPORTED_MODULE_1__.utilDecodeTC.call(this);\r\n        this.blockLength = inputLength;\r\n        return (inputOffset + inputLength);\r\n    }\r\n    toBER() {\r\n        return this.valueHexView.slice();\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\nLocalBooleanValueBlock.NAME = \"BooleanValueBlock\";\n\nvar _a$s;\r\nclass Boolean extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalBooleanValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 1;\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.value;\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.value = value;\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.getValue}`;\r\n    }\r\n}\r\n_a$s = Boolean;\r\n(() => {\r\n    typeStore.Boolean = _a$s;\r\n})();\r\nBoolean.NAME = \"BOOLEAN\";\n\nclass LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\r\n    constructor({ isConstructed = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.isConstructed = isConstructed;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        let resultOffset = 0;\r\n        if (this.isConstructed) {\r\n            this.isHexOnly = false;\r\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n            if (resultOffset === -1)\r\n                return resultOffset;\r\n            for (let i = 0; i < this.value.length; i++) {\r\n                const currentBlockName = this.value[i].constructor.NAME;\r\n                if (currentBlockName === END_OF_CONTENT_NAME) {\r\n                    if (this.isIndefiniteForm)\r\n                        break;\r\n                    else {\r\n                        this.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\r\n                        return -1;\r\n                    }\r\n                }\r\n                if (currentBlockName !== OCTET_STRING_NAME) {\r\n                    this.error = \"OCTET STRING may consists of OCTET STRINGs only\";\r\n                    return -1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.isHexOnly = true;\r\n            resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n            this.blockLength = inputLength;\r\n        }\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        if (this.isConstructed)\r\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\r\n        return sizeOnly\r\n            ? new ArrayBuffer(this.valueHexView.byteLength)\r\n            : this.valueHexView.slice().buffer;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            isConstructed: this.isConstructed,\r\n        };\r\n    }\r\n}\r\nLocalOctetStringValueBlock.NAME = \"OctetStringValueBlock\";\n\nvar _a$r;\r\nclass OctetString extends BaseBlock {\r\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {\r\n        var _b, _c;\r\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));\r\n        super({\r\n            idBlock: {\r\n                isConstructed: parameters.isConstructed,\r\n                ...idBlock,\r\n            },\r\n            lenBlock: {\r\n                ...lenBlock,\r\n                isIndefiniteForm: !!parameters.isIndefiniteForm,\r\n            },\r\n            ...parameters,\r\n        }, LocalOctetStringValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 4;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n        if (inputLength === 0) {\r\n            if (this.idBlock.error.length === 0)\r\n                this.blockLength += this.idBlock.blockLength;\r\n            if (this.lenBlock.error.length === 0)\r\n                this.blockLength += this.lenBlock.blockLength;\r\n            return inputOffset;\r\n        }\r\n        if (!this.valueBlock.isConstructed) {\r\n            const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\r\n            const buf = view.subarray(inputOffset, inputOffset + inputLength);\r\n            try {\r\n                if (buf.byteLength) {\r\n                    const asn = localFromBER(buf, 0, buf.byteLength);\r\n                    if (asn.offset !== -1 && asn.offset === inputLength) {\r\n                        this.valueBlock.value = [asn.result];\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n            }\r\n        }\r\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\r\n    }\r\n    onAsciiEncoding() {\r\n        if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\r\n            return Constructed.prototype.onAsciiEncoding.call(this);\r\n        }\r\n        return `${this.constructor.NAME} : ${pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueBlock.valueHexView)}`;\r\n    }\r\n    getValue() {\r\n        if (!this.idBlock.isConstructed) {\r\n            return this.valueBlock.valueHexView.slice().buffer;\r\n        }\r\n        const array = [];\r\n        for (const content of this.valueBlock.value) {\r\n            if (content instanceof OctetString) {\r\n                array.push(content.valueBlock.valueHexView);\r\n            }\r\n        }\r\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.concat(array);\r\n    }\r\n}\r\n_a$r = OctetString;\r\n(() => {\r\n    typeStore.OctetString = _a$r;\r\n})();\r\nOctetString.NAME = OCTET_STRING_NAME;\n\nclass LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\r\n    constructor({ unusedBits = 0, isConstructed = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.unusedBits = unusedBits;\r\n        this.isConstructed = isConstructed;\r\n        this.blockLength = this.valueHexView.byteLength;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (!inputLength) {\r\n            return inputOffset;\r\n        }\r\n        let resultOffset = -1;\r\n        if (this.isConstructed) {\r\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n            if (resultOffset === -1)\r\n                return resultOffset;\r\n            for (const value of this.value) {\r\n                const currentBlockName = value.constructor.NAME;\r\n                if (currentBlockName === END_OF_CONTENT_NAME) {\r\n                    if (this.isIndefiniteForm)\r\n                        break;\r\n                    else {\r\n                        this.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\r\n                        return -1;\r\n                    }\r\n                }\r\n                if (currentBlockName !== BIT_STRING_NAME) {\r\n                    this.error = \"BIT STRING may consists of BIT STRINGs only\";\r\n                    return -1;\r\n                }\r\n                const valueBlock = value.valueBlock;\r\n                if ((this.unusedBits > 0) && (valueBlock.unusedBits > 0)) {\r\n                    this.error = \"Using of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\r\n                    return -1;\r\n                }\r\n                this.unusedBits = valueBlock.unusedBits;\r\n            }\r\n            return resultOffset;\r\n        }\r\n        const inputView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        this.unusedBits = intBuffer[0];\r\n        if (this.unusedBits > 7) {\r\n            this.error = \"Unused bits for BitString must be in range 0-7\";\r\n            return -1;\r\n        }\r\n        if (!this.unusedBits) {\r\n            const buf = intBuffer.subarray(1);\r\n            try {\r\n                if (buf.byteLength) {\r\n                    const asn = localFromBER(buf, 0, buf.byteLength);\r\n                    if (asn.offset !== -1 && asn.offset === (inputLength - 1)) {\r\n                        this.value = [asn.result];\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n            }\r\n        }\r\n        this.valueHexView = intBuffer.subarray(1);\r\n        this.blockLength = intBuffer.length;\r\n        return (inputOffset + inputLength);\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        if (this.isConstructed) {\r\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\r\n        }\r\n        if (sizeOnly) {\r\n            return new ArrayBuffer(this.valueHexView.byteLength + 1);\r\n        }\r\n        if (!this.valueHexView.byteLength) {\r\n            return EMPTY_BUFFER;\r\n        }\r\n        const retView = new Uint8Array(this.valueHexView.length + 1);\r\n        retView[0] = this.unusedBits;\r\n        retView.set(this.valueHexView, 1);\r\n        return retView.buffer;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            unusedBits: this.unusedBits,\r\n            isConstructed: this.isConstructed,\r\n        };\r\n    }\r\n}\r\nLocalBitStringValueBlock.NAME = \"BitStringValueBlock\";\n\nvar _a$q;\r\nclass BitString extends BaseBlock {\r\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {\r\n        var _b, _c;\r\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));\r\n        super({\r\n            idBlock: {\r\n                isConstructed: parameters.isConstructed,\r\n                ...idBlock,\r\n            },\r\n            lenBlock: {\r\n                ...lenBlock,\r\n                isIndefiniteForm: !!parameters.isIndefiniteForm,\r\n            },\r\n            ...parameters,\r\n        }, LocalBitStringValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 3;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\r\n    }\r\n    onAsciiEncoding() {\r\n        if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\r\n            return Constructed.prototype.onAsciiEncoding.call(this);\r\n        }\r\n        else {\r\n            const bits = [];\r\n            const valueHex = this.valueBlock.valueHexView;\r\n            for (const byte of valueHex) {\r\n                bits.push(byte.toString(2).padStart(8, \"0\"));\r\n            }\r\n            const bitsStr = bits.join(\"\");\r\n            return `${this.constructor.NAME} : ${bitsStr.substring(0, bitsStr.length - this.valueBlock.unusedBits)}`;\r\n        }\r\n    }\r\n}\r\n_a$q = BitString;\r\n(() => {\r\n    typeStore.BitString = _a$q;\r\n})();\r\nBitString.NAME = BIT_STRING_NAME;\n\nvar _a$p;\r\nfunction viewAdd(first, second) {\r\n    const c = new Uint8Array([0]);\r\n    const firstView = new Uint8Array(first);\r\n    const secondView = new Uint8Array(second);\r\n    let firstViewCopy = firstView.slice(0);\r\n    const firstViewCopyLength = firstViewCopy.length - 1;\r\n    const secondViewCopy = secondView.slice(0);\r\n    const secondViewCopyLength = secondViewCopy.length - 1;\r\n    let value = 0;\r\n    const max = (secondViewCopyLength < firstViewCopyLength) ? firstViewCopyLength : secondViewCopyLength;\r\n    let counter = 0;\r\n    for (let i = max; i >= 0; i--, counter++) {\r\n        switch (true) {\r\n            case (counter < secondViewCopy.length):\r\n                value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\r\n                break;\r\n            default:\r\n                value = firstViewCopy[firstViewCopyLength - counter] + c[0];\r\n        }\r\n        c[0] = value / 10;\r\n        switch (true) {\r\n            case (counter >= firstViewCopy.length):\r\n                firstViewCopy = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilConcatView(new Uint8Array([value % 10]), firstViewCopy);\r\n                break;\r\n            default:\r\n                firstViewCopy[firstViewCopyLength - counter] = value % 10;\r\n        }\r\n    }\r\n    if (c[0] > 0)\r\n        firstViewCopy = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilConcatView(c, firstViewCopy);\r\n    return firstViewCopy;\r\n}\r\nfunction power2(n) {\r\n    if (n >= powers2.length) {\r\n        for (let p = powers2.length; p <= n; p++) {\r\n            const c = new Uint8Array([0]);\r\n            let digits = (powers2[p - 1]).slice(0);\r\n            for (let i = (digits.length - 1); i >= 0; i--) {\r\n                const newValue = new Uint8Array([(digits[i] << 1) + c[0]]);\r\n                c[0] = newValue[0] / 10;\r\n                digits[i] = newValue[0] % 10;\r\n            }\r\n            if (c[0] > 0)\r\n                digits = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilConcatView(c, digits);\r\n            powers2.push(digits);\r\n        }\r\n    }\r\n    return powers2[n];\r\n}\r\nfunction viewSub(first, second) {\r\n    let b = 0;\r\n    const firstView = new Uint8Array(first);\r\n    const secondView = new Uint8Array(second);\r\n    const firstViewCopy = firstView.slice(0);\r\n    const firstViewCopyLength = firstViewCopy.length - 1;\r\n    const secondViewCopy = secondView.slice(0);\r\n    const secondViewCopyLength = secondViewCopy.length - 1;\r\n    let value;\r\n    let counter = 0;\r\n    for (let i = secondViewCopyLength; i >= 0; i--, counter++) {\r\n        value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\r\n        switch (true) {\r\n            case (value < 0):\r\n                b = 1;\r\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\r\n                break;\r\n            default:\r\n                b = 0;\r\n                firstViewCopy[firstViewCopyLength - counter] = value;\r\n        }\r\n    }\r\n    if (b > 0) {\r\n        for (let i = (firstViewCopyLength - secondViewCopyLength + 1); i >= 0; i--, counter++) {\r\n            value = firstViewCopy[firstViewCopyLength - counter] - b;\r\n            if (value < 0) {\r\n                b = 1;\r\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\r\n            }\r\n            else {\r\n                b = 0;\r\n                firstViewCopy[firstViewCopyLength - counter] = value;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return firstViewCopy.slice();\r\n}\r\nclass LocalIntegerValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ value, ...parameters } = {}) {\r\n        super(parameters);\r\n        this._valueDec = 0;\r\n        if (parameters.valueHex) {\r\n            this.setValueHex();\r\n        }\r\n        if (value !== undefined) {\r\n            this.valueDec = value;\r\n        }\r\n    }\r\n    setValueHex() {\r\n        if (this.valueHexView.length >= 4) {\r\n            this.warnings.push(\"Too big Integer for decoding, hex only\");\r\n            this.isHexOnly = true;\r\n            this._valueDec = 0;\r\n        }\r\n        else {\r\n            this.isHexOnly = false;\r\n            if (this.valueHexView.length > 0) {\r\n                this._valueDec = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilDecodeTC.call(this);\r\n            }\r\n        }\r\n    }\r\n    set valueDec(v) {\r\n        this._valueDec = v;\r\n        this.isHexOnly = false;\r\n        this.valueHexView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_1__.utilEncodeTC(v));\r\n    }\r\n    get valueDec() {\r\n        return this._valueDec;\r\n    }\r\n    fromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {\r\n        const offset = this.fromBER(inputBuffer, inputOffset, inputLength);\r\n        if (offset === -1)\r\n            return offset;\r\n        const view = this.valueHexView;\r\n        if ((view[0] === 0x00) && ((view[1] & 0x80) !== 0)) {\r\n            this.valueHexView = view.subarray(1);\r\n        }\r\n        else {\r\n            if (expectedLength !== 0) {\r\n                if (view.length < expectedLength) {\r\n                    if ((expectedLength - view.length) > 1)\r\n                        expectedLength = view.length + 1;\r\n                    this.valueHexView = view.subarray(expectedLength - view.length);\r\n                }\r\n            }\r\n        }\r\n        return offset;\r\n    }\r\n    toDER(sizeOnly = false) {\r\n        const view = this.valueHexView;\r\n        switch (true) {\r\n            case ((view[0] & 0x80) !== 0):\r\n                {\r\n                    const updatedView = new Uint8Array(this.valueHexView.length + 1);\r\n                    updatedView[0] = 0x00;\r\n                    updatedView.set(view, 1);\r\n                    this.valueHexView = updatedView;\r\n                }\r\n                break;\r\n            case ((view[0] === 0x00) && ((view[1] & 0x80) === 0)):\r\n                {\r\n                    this.valueHexView = this.valueHexView.subarray(1);\r\n                }\r\n                break;\r\n        }\r\n        return this.toBER(sizeOnly);\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n        if (resultOffset === -1) {\r\n            return resultOffset;\r\n        }\r\n        this.setValueHex();\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly) {\r\n        return sizeOnly\r\n            ? new ArrayBuffer(this.valueHexView.length)\r\n            : this.valueHexView.slice().buffer;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            valueDec: this.valueDec,\r\n        };\r\n    }\r\n    toString() {\r\n        const firstBit = (this.valueHexView.length * 8) - 1;\r\n        let digits = new Uint8Array((this.valueHexView.length * 8) / 3);\r\n        let bitNumber = 0;\r\n        let currentByte;\r\n        const asn1View = this.valueHexView;\r\n        let result = \"\";\r\n        let flag = false;\r\n        for (let byteNumber = (asn1View.byteLength - 1); byteNumber >= 0; byteNumber--) {\r\n            currentByte = asn1View[byteNumber];\r\n            for (let i = 0; i < 8; i++) {\r\n                if ((currentByte & 1) === 1) {\r\n                    switch (bitNumber) {\r\n                        case firstBit:\r\n                            digits = viewSub(power2(bitNumber), digits);\r\n                            result = \"-\";\r\n                            break;\r\n                        default:\r\n                            digits = viewAdd(digits, power2(bitNumber));\r\n                    }\r\n                }\r\n                bitNumber++;\r\n                currentByte >>= 1;\r\n            }\r\n        }\r\n        for (let i = 0; i < digits.length; i++) {\r\n            if (digits[i])\r\n                flag = true;\r\n            if (flag)\r\n                result += digitsString.charAt(digits[i]);\r\n        }\r\n        if (flag === false)\r\n            result += digitsString.charAt(0);\r\n        return result;\r\n    }\r\n}\r\n_a$p = LocalIntegerValueBlock;\r\nLocalIntegerValueBlock.NAME = \"IntegerValueBlock\";\r\n(() => {\r\n    Object.defineProperty(_a$p.prototype, \"valueHex\", {\r\n        set: function (v) {\r\n            this.valueHexView = new Uint8Array(v);\r\n            this.setValueHex();\r\n        },\r\n        get: function () {\r\n            return this.valueHexView.slice().buffer;\r\n        },\r\n    });\r\n})();\n\nvar _a$o;\r\nclass Integer extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalIntegerValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 2;\r\n    }\r\n    toBigInt() {\r\n        assertBigInt();\r\n        return BigInt(this.valueBlock.toString());\r\n    }\r\n    static fromBigInt(value) {\r\n        assertBigInt();\r\n        const bigIntValue = BigInt(value);\r\n        const writer = new ViewWriter();\r\n        const hex = bigIntValue.toString(16).replace(/^-/, \"\");\r\n        const view = new Uint8Array(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromHex(hex));\r\n        if (bigIntValue < 0) {\r\n            const first = new Uint8Array(view.length + (view[0] & 0x80 ? 1 : 0));\r\n            first[0] |= 0x80;\r\n            const firstInt = BigInt(`0x${pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(first)}`);\r\n            const secondInt = firstInt + bigIntValue;\r\n            const second = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromHex(secondInt.toString(16)));\r\n            second[0] |= 0x80;\r\n            writer.write(second);\r\n        }\r\n        else {\r\n            if (view[0] & 0x80) {\r\n                writer.write(new Uint8Array([0]));\r\n            }\r\n            writer.write(view);\r\n        }\r\n        const res = new Integer({\r\n            valueHex: writer.final(),\r\n        });\r\n        return res;\r\n    }\r\n    convertToDER() {\r\n        const integer = new Integer({ valueHex: this.valueBlock.valueHexView });\r\n        integer.valueBlock.toDER();\r\n        return integer;\r\n    }\r\n    convertFromDER() {\r\n        return new Integer({\r\n            valueHex: this.valueBlock.valueHexView[0] === 0\r\n                ? this.valueBlock.valueHexView.subarray(1)\r\n                : this.valueBlock.valueHexView,\r\n        });\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.valueBlock.toString()}`;\r\n    }\r\n}\r\n_a$o = Integer;\r\n(() => {\r\n    typeStore.Integer = _a$o;\r\n})();\r\nInteger.NAME = \"INTEGER\";\n\nvar _a$n;\r\nclass Enumerated extends Integer {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 10;\r\n    }\r\n}\r\n_a$n = Enumerated;\r\n(() => {\r\n    typeStore.Enumerated = _a$n;\r\n})();\r\nEnumerated.NAME = \"ENUMERATED\";\n\nclass LocalSidValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ valueDec = -1, isFirstSid = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.valueDec = valueDec;\r\n        this.isFirstSid = isFirstSid;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (!inputLength) {\r\n            return inputOffset;\r\n        }\r\n        const inputView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        this.valueHexView = new Uint8Array(inputLength);\r\n        for (let i = 0; i < inputLength; i++) {\r\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\r\n            this.blockLength++;\r\n            if ((intBuffer[i] & 0x80) === 0x00)\r\n                break;\r\n        }\r\n        const tempView = new Uint8Array(this.blockLength);\r\n        for (let i = 0; i < this.blockLength; i++) {\r\n            tempView[i] = this.valueHexView[i];\r\n        }\r\n        this.valueHexView = tempView;\r\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return -1;\r\n        }\r\n        if (this.valueHexView[0] === 0x00)\r\n            this.warnings.push(\"Needlessly long format of SID encoding\");\r\n        if (this.blockLength <= 8)\r\n            this.valueDec = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilFromBase(this.valueHexView, 7);\r\n        else {\r\n            this.isHexOnly = true;\r\n            this.warnings.push(\"Too big SID for decoding, hex only\");\r\n        }\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    set valueBigInt(value) {\r\n        assertBigInt();\r\n        let bits = BigInt(value).toString(2);\r\n        while (bits.length % 7) {\r\n            bits = \"0\" + bits;\r\n        }\r\n        const bytes = new Uint8Array(bits.length / 7);\r\n        for (let i = 0; i < bytes.length; i++) {\r\n            bytes[i] = parseInt(bits.slice(i * 7, i * 7 + 7), 2) + (i + 1 < bytes.length ? 0x80 : 0);\r\n        }\r\n        this.fromBER(bytes.buffer, 0, bytes.length);\r\n    }\r\n    toBER(sizeOnly) {\r\n        if (this.isHexOnly) {\r\n            if (sizeOnly)\r\n                return (new ArrayBuffer(this.valueHexView.byteLength));\r\n            const curView = this.valueHexView;\r\n            const retView = new Uint8Array(this.blockLength);\r\n            for (let i = 0; i < (this.blockLength - 1); i++)\r\n                retView[i] = curView[i] | 0x80;\r\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\r\n            return retView.buffer;\r\n        }\r\n        const encodedBuf = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilToBase(this.valueDec, 7);\r\n        if (encodedBuf.byteLength === 0) {\r\n            this.error = \"Error during encoding SID value\";\r\n            return EMPTY_BUFFER;\r\n        }\r\n        const retView = new Uint8Array(encodedBuf.byteLength);\r\n        if (!sizeOnly) {\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            const len = encodedBuf.byteLength - 1;\r\n            for (let i = 0; i < len; i++)\r\n                retView[i] = encodedView[i] | 0x80;\r\n            retView[len] = encodedView[len];\r\n        }\r\n        return retView;\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        if (this.isHexOnly)\r\n            result = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueHexView);\r\n        else {\r\n            if (this.isFirstSid) {\r\n                let sidValue = this.valueDec;\r\n                if (this.valueDec <= 39)\r\n                    result = \"0.\";\r\n                else {\r\n                    if (this.valueDec <= 79) {\r\n                        result = \"1.\";\r\n                        sidValue -= 40;\r\n                    }\r\n                    else {\r\n                        result = \"2.\";\r\n                        sidValue -= 80;\r\n                    }\r\n                }\r\n                result += sidValue.toString();\r\n            }\r\n            else\r\n                result = this.valueDec.toString();\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            valueDec: this.valueDec,\r\n            isFirstSid: this.isFirstSid,\r\n        };\r\n    }\r\n}\r\nLocalSidValueBlock.NAME = \"sidBlock\";\n\nclass LocalObjectIdentifierValueBlock extends ValueBlock {\r\n    constructor({ value = EMPTY_STRING, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = [];\r\n        if (value) {\r\n            this.fromString(value);\r\n        }\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        let resultOffset = inputOffset;\r\n        while (inputLength > 0) {\r\n            const sidBlock = new LocalSidValueBlock();\r\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\r\n            if (resultOffset === -1) {\r\n                this.blockLength = 0;\r\n                this.error = sidBlock.error;\r\n                return resultOffset;\r\n            }\r\n            if (this.value.length === 0)\r\n                sidBlock.isFirstSid = true;\r\n            this.blockLength += sidBlock.blockLength;\r\n            inputLength -= sidBlock.blockLength;\r\n            this.value.push(sidBlock);\r\n        }\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly) {\r\n        const retBuffers = [];\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            const valueBuf = this.value[i].toBER(sizeOnly);\r\n            if (valueBuf.byteLength === 0) {\r\n                this.error = this.value[i].error;\r\n                return EMPTY_BUFFER;\r\n            }\r\n            retBuffers.push(valueBuf);\r\n        }\r\n        return concat(retBuffers);\r\n    }\r\n    fromString(string) {\r\n        this.value = [];\r\n        let pos1 = 0;\r\n        let pos2 = 0;\r\n        let sid = \"\";\r\n        let flag = false;\r\n        do {\r\n            pos2 = string.indexOf(\".\", pos1);\r\n            if (pos2 === -1)\r\n                sid = string.substring(pos1);\r\n            else\r\n                sid = string.substring(pos1, pos2);\r\n            pos1 = pos2 + 1;\r\n            if (flag) {\r\n                const sidBlock = this.value[0];\r\n                let plus = 0;\r\n                switch (sidBlock.valueDec) {\r\n                    case 0:\r\n                        break;\r\n                    case 1:\r\n                        plus = 40;\r\n                        break;\r\n                    case 2:\r\n                        plus = 80;\r\n                        break;\r\n                    default:\r\n                        this.value = [];\r\n                        return;\r\n                }\r\n                const parsedSID = parseInt(sid, 10);\r\n                if (isNaN(parsedSID))\r\n                    return;\r\n                sidBlock.valueDec = parsedSID + plus;\r\n                flag = false;\r\n            }\r\n            else {\r\n                const sidBlock = new LocalSidValueBlock();\r\n                if (sid > Number.MAX_SAFE_INTEGER) {\r\n                    assertBigInt();\r\n                    const sidValue = BigInt(sid);\r\n                    sidBlock.valueBigInt = sidValue;\r\n                }\r\n                else {\r\n                    sidBlock.valueDec = parseInt(sid, 10);\r\n                    if (isNaN(sidBlock.valueDec))\r\n                        return;\r\n                }\r\n                if (!this.value.length) {\r\n                    sidBlock.isFirstSid = true;\r\n                    flag = true;\r\n                }\r\n                this.value.push(sidBlock);\r\n            }\r\n        } while (pos2 !== -1);\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        let isHexOnly = false;\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            isHexOnly = this.value[i].isHexOnly;\r\n            let sidStr = this.value[i].toString();\r\n            if (i !== 0)\r\n                result = `${result}.`;\r\n            if (isHexOnly) {\r\n                sidStr = `{${sidStr}}`;\r\n                if (this.value[i].isFirstSid)\r\n                    result = `2.{${sidStr} - 80}`;\r\n                else\r\n                    result += sidStr;\r\n            }\r\n            else\r\n                result += sidStr;\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            value: this.toString(),\r\n            sidArray: [],\r\n        };\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            object.sidArray.push(this.value[i].toJSON());\r\n        }\r\n        return object;\r\n    }\r\n}\r\nLocalObjectIdentifierValueBlock.NAME = \"ObjectIdentifierValueBlock\";\n\nvar _a$m;\r\nclass ObjectIdentifier extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalObjectIdentifierValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 6;\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.toString();\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.fromString(value);\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.getValue(),\r\n        };\r\n    }\r\n}\r\n_a$m = ObjectIdentifier;\r\n(() => {\r\n    typeStore.ObjectIdentifier = _a$m;\r\n})();\r\nObjectIdentifier.NAME = \"OBJECT IDENTIFIER\";\n\nclass LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock) {\r\n    constructor({ valueDec = 0, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.valueDec = valueDec;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (inputLength === 0)\r\n            return inputOffset;\r\n        const inputView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength))\r\n            return -1;\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        this.valueHexView = new Uint8Array(inputLength);\r\n        for (let i = 0; i < inputLength; i++) {\r\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\r\n            this.blockLength++;\r\n            if ((intBuffer[i] & 0x80) === 0x00)\r\n                break;\r\n        }\r\n        const tempView = new Uint8Array(this.blockLength);\r\n        for (let i = 0; i < this.blockLength; i++)\r\n            tempView[i] = this.valueHexView[i];\r\n        this.valueHexView = tempView;\r\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return -1;\r\n        }\r\n        if (this.valueHexView[0] === 0x00)\r\n            this.warnings.push(\"Needlessly long format of SID encoding\");\r\n        if (this.blockLength <= 8)\r\n            this.valueDec = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilFromBase(this.valueHexView, 7);\r\n        else {\r\n            this.isHexOnly = true;\r\n            this.warnings.push(\"Too big SID for decoding, hex only\");\r\n        }\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    toBER(sizeOnly) {\r\n        if (this.isHexOnly) {\r\n            if (sizeOnly)\r\n                return (new ArrayBuffer(this.valueHexView.byteLength));\r\n            const curView = this.valueHexView;\r\n            const retView = new Uint8Array(this.blockLength);\r\n            for (let i = 0; i < (this.blockLength - 1); i++)\r\n                retView[i] = curView[i] | 0x80;\r\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\r\n            return retView.buffer;\r\n        }\r\n        const encodedBuf = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilToBase(this.valueDec, 7);\r\n        if (encodedBuf.byteLength === 0) {\r\n            this.error = \"Error during encoding SID value\";\r\n            return EMPTY_BUFFER;\r\n        }\r\n        const retView = new Uint8Array(encodedBuf.byteLength);\r\n        if (!sizeOnly) {\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            const len = encodedBuf.byteLength - 1;\r\n            for (let i = 0; i < len; i++)\r\n                retView[i] = encodedView[i] | 0x80;\r\n            retView[len] = encodedView[len];\r\n        }\r\n        return retView.buffer;\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        if (this.isHexOnly)\r\n            result = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueHexView);\r\n        else {\r\n            result = this.valueDec.toString();\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            valueDec: this.valueDec,\r\n        };\r\n    }\r\n}\r\nLocalRelativeSidValueBlock.NAME = \"relativeSidBlock\";\n\nclass LocalRelativeObjectIdentifierValueBlock extends ValueBlock {\r\n    constructor({ value = EMPTY_STRING, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = [];\r\n        if (value) {\r\n            this.fromString(value);\r\n        }\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        let resultOffset = inputOffset;\r\n        while (inputLength > 0) {\r\n            const sidBlock = new LocalRelativeSidValueBlock();\r\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\r\n            if (resultOffset === -1) {\r\n                this.blockLength = 0;\r\n                this.error = sidBlock.error;\r\n                return resultOffset;\r\n            }\r\n            this.blockLength += sidBlock.blockLength;\r\n            inputLength -= sidBlock.blockLength;\r\n            this.value.push(sidBlock);\r\n        }\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const retBuffers = [];\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            const valueBuf = this.value[i].toBER(sizeOnly);\r\n            if (valueBuf.byteLength === 0) {\r\n                this.error = this.value[i].error;\r\n                return EMPTY_BUFFER;\r\n            }\r\n            retBuffers.push(valueBuf);\r\n        }\r\n        return concat(retBuffers);\r\n    }\r\n    fromString(string) {\r\n        this.value = [];\r\n        let pos1 = 0;\r\n        let pos2 = 0;\r\n        let sid = \"\";\r\n        do {\r\n            pos2 = string.indexOf(\".\", pos1);\r\n            if (pos2 === -1)\r\n                sid = string.substring(pos1);\r\n            else\r\n                sid = string.substring(pos1, pos2);\r\n            pos1 = pos2 + 1;\r\n            const sidBlock = new LocalRelativeSidValueBlock();\r\n            sidBlock.valueDec = parseInt(sid, 10);\r\n            if (isNaN(sidBlock.valueDec))\r\n                return true;\r\n            this.value.push(sidBlock);\r\n        } while (pos2 !== -1);\r\n        return true;\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        let isHexOnly = false;\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            isHexOnly = this.value[i].isHexOnly;\r\n            let sidStr = this.value[i].toString();\r\n            if (i !== 0)\r\n                result = `${result}.`;\r\n            if (isHexOnly) {\r\n                sidStr = `{${sidStr}}`;\r\n                result += sidStr;\r\n            }\r\n            else\r\n                result += sidStr;\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            value: this.toString(),\r\n            sidArray: [],\r\n        };\r\n        for (let i = 0; i < this.value.length; i++)\r\n            object.sidArray.push(this.value[i].toJSON());\r\n        return object;\r\n    }\r\n}\r\nLocalRelativeObjectIdentifierValueBlock.NAME = \"RelativeObjectIdentifierValueBlock\";\n\nvar _a$l;\r\nclass RelativeObjectIdentifier extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalRelativeObjectIdentifierValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 13;\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.toString();\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.fromString(value);\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.getValue(),\r\n        };\r\n    }\r\n}\r\n_a$l = RelativeObjectIdentifier;\r\n(() => {\r\n    typeStore.RelativeObjectIdentifier = _a$l;\r\n})();\r\nRelativeObjectIdentifier.NAME = \"RelativeObjectIdentifier\";\n\nvar _a$k;\r\nclass Sequence extends Constructed {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 16;\r\n    }\r\n}\r\n_a$k = Sequence;\r\n(() => {\r\n    typeStore.Sequence = _a$k;\r\n})();\r\nSequence.NAME = \"SEQUENCE\";\n\nvar _a$j;\r\nclass Set extends Constructed {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 17;\r\n    }\r\n}\r\n_a$j = Set;\r\n(() => {\r\n    typeStore.Set = _a$j;\r\n})();\r\nSet.NAME = \"SET\";\n\nclass LocalStringValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters);\r\n        this.isHexOnly = true;\r\n        this.value = EMPTY_STRING;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\nLocalStringValueBlock.NAME = \"StringValueBlock\";\n\nclass LocalSimpleStringValueBlock extends LocalStringValueBlock {\r\n}\r\nLocalSimpleStringValueBlock.NAME = \"SimpleStringValueBlock\";\n\nclass LocalSimpleStringBlock extends BaseStringBlock {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters, LocalSimpleStringValueBlock);\r\n    }\r\n    fromBuffer(inputBuffer) {\r\n        this.valueBlock.value = String.fromCharCode.apply(null, pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer));\r\n    }\r\n    fromString(inputString) {\r\n        const strLen = inputString.length;\r\n        const view = this.valueBlock.valueHexView = new Uint8Array(strLen);\r\n        for (let i = 0; i < strLen; i++)\r\n            view[i] = inputString.charCodeAt(i);\r\n        this.valueBlock.value = inputString;\r\n    }\r\n}\r\nLocalSimpleStringBlock.NAME = \"SIMPLE STRING\";\n\nclass LocalUtf8StringValueBlock extends LocalSimpleStringBlock {\r\n    fromBuffer(inputBuffer) {\r\n        this.valueBlock.valueHexView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        try {\r\n            this.valueBlock.value = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToUtf8String(inputBuffer);\r\n        }\r\n        catch (ex) {\r\n            this.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\r\n            this.valueBlock.value = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBinary(inputBuffer);\r\n        }\r\n    }\r\n    fromString(inputString) {\r\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromUtf8String(inputString));\r\n        this.valueBlock.value = inputString;\r\n    }\r\n}\r\nLocalUtf8StringValueBlock.NAME = \"Utf8StringValueBlock\";\n\nvar _a$i;\r\nclass Utf8String extends LocalUtf8StringValueBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 12;\r\n    }\r\n}\r\n_a$i = Utf8String;\r\n(() => {\r\n    typeStore.Utf8String = _a$i;\r\n})();\r\nUtf8String.NAME = \"UTF8String\";\n\nclass LocalBmpStringValueBlock extends LocalSimpleStringBlock {\r\n    fromBuffer(inputBuffer) {\r\n        this.valueBlock.value = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToUtf16String(inputBuffer);\r\n        this.valueBlock.valueHexView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\r\n    }\r\n    fromString(inputString) {\r\n        this.valueBlock.value = inputString;\r\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromUtf16String(inputString));\r\n    }\r\n}\r\nLocalBmpStringValueBlock.NAME = \"BmpStringValueBlock\";\n\nvar _a$h;\r\nclass BmpString extends LocalBmpStringValueBlock {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 30;\r\n    }\r\n}\r\n_a$h = BmpString;\r\n(() => {\r\n    typeStore.BmpString = _a$h;\r\n})();\r\nBmpString.NAME = \"BMPString\";\n\nclass LocalUniversalStringValueBlock extends LocalSimpleStringBlock {\r\n    fromBuffer(inputBuffer) {\r\n        const copyBuffer = ArrayBuffer.isView(inputBuffer) ? inputBuffer.slice().buffer : inputBuffer.slice(0);\r\n        const valueView = new Uint8Array(copyBuffer);\r\n        for (let i = 0; i < valueView.length; i += 4) {\r\n            valueView[i] = valueView[i + 3];\r\n            valueView[i + 1] = valueView[i + 2];\r\n            valueView[i + 2] = 0x00;\r\n            valueView[i + 3] = 0x00;\r\n        }\r\n        this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\r\n    }\r\n    fromString(inputString) {\r\n        const strLength = inputString.length;\r\n        const valueHexView = this.valueBlock.valueHexView = new Uint8Array(strLength * 4);\r\n        for (let i = 0; i < strLength; i++) {\r\n            const codeBuf = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilToBase(inputString.charCodeAt(i), 8);\r\n            const codeView = new Uint8Array(codeBuf);\r\n            if (codeView.length > 4)\r\n                continue;\r\n            const dif = 4 - codeView.length;\r\n            for (let j = (codeView.length - 1); j >= 0; j--)\r\n                valueHexView[i * 4 + j + dif] = codeView[j];\r\n        }\r\n        this.valueBlock.value = inputString;\r\n    }\r\n}\r\nLocalUniversalStringValueBlock.NAME = \"UniversalStringValueBlock\";\n\nvar _a$g;\r\nclass UniversalString extends LocalUniversalStringValueBlock {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 28;\r\n    }\r\n}\r\n_a$g = UniversalString;\r\n(() => {\r\n    typeStore.UniversalString = _a$g;\r\n})();\r\nUniversalString.NAME = \"UniversalString\";\n\nvar _a$f;\r\nclass NumericString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 18;\r\n    }\r\n}\r\n_a$f = NumericString;\r\n(() => {\r\n    typeStore.NumericString = _a$f;\r\n})();\r\nNumericString.NAME = \"NumericString\";\n\nvar _a$e;\r\nclass PrintableString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 19;\r\n    }\r\n}\r\n_a$e = PrintableString;\r\n(() => {\r\n    typeStore.PrintableString = _a$e;\r\n})();\r\nPrintableString.NAME = \"PrintableString\";\n\nvar _a$d;\r\nclass TeletexString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 20;\r\n    }\r\n}\r\n_a$d = TeletexString;\r\n(() => {\r\n    typeStore.TeletexString = _a$d;\r\n})();\r\nTeletexString.NAME = \"TeletexString\";\n\nvar _a$c;\r\nclass VideotexString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 21;\r\n    }\r\n}\r\n_a$c = VideotexString;\r\n(() => {\r\n    typeStore.VideotexString = _a$c;\r\n})();\r\nVideotexString.NAME = \"VideotexString\";\n\nvar _a$b;\r\nclass IA5String extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 22;\r\n    }\r\n}\r\n_a$b = IA5String;\r\n(() => {\r\n    typeStore.IA5String = _a$b;\r\n})();\r\nIA5String.NAME = \"IA5String\";\n\nvar _a$a;\r\nclass GraphicString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 25;\r\n    }\r\n}\r\n_a$a = GraphicString;\r\n(() => {\r\n    typeStore.GraphicString = _a$a;\r\n})();\r\nGraphicString.NAME = \"GraphicString\";\n\nvar _a$9;\r\nclass VisibleString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 26;\r\n    }\r\n}\r\n_a$9 = VisibleString;\r\n(() => {\r\n    typeStore.VisibleString = _a$9;\r\n})();\r\nVisibleString.NAME = \"VisibleString\";\n\nvar _a$8;\r\nclass GeneralString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 27;\r\n    }\r\n}\r\n_a$8 = GeneralString;\r\n(() => {\r\n    typeStore.GeneralString = _a$8;\r\n})();\r\nGeneralString.NAME = \"GeneralString\";\n\nvar _a$7;\r\nclass CharacterString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 29;\r\n    }\r\n}\r\n_a$7 = CharacterString;\r\n(() => {\r\n    typeStore.CharacterString = _a$7;\r\n})();\r\nCharacterString.NAME = \"CharacterString\";\n\nvar _a$6;\r\nclass UTCTime extends VisibleString {\r\n    constructor({ value, valueDate, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.year = 0;\r\n        this.month = 0;\r\n        this.day = 0;\r\n        this.hour = 0;\r\n        this.minute = 0;\r\n        this.second = 0;\r\n        if (value) {\r\n            this.fromString(value);\r\n            this.valueBlock.valueHexView = new Uint8Array(value.length);\r\n            for (let i = 0; i < value.length; i++)\r\n                this.valueBlock.valueHexView[i] = value.charCodeAt(i);\r\n        }\r\n        if (valueDate) {\r\n            this.fromDate(valueDate);\r\n            this.valueBlock.valueHexView = new Uint8Array(this.toBuffer());\r\n        }\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 23;\r\n    }\r\n    fromBuffer(inputBuffer) {\r\n        this.fromString(String.fromCharCode.apply(null, pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer)));\r\n    }\r\n    toBuffer() {\r\n        const str = this.toString();\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new Uint8Array(buffer);\r\n        for (let i = 0; i < str.length; i++)\r\n            view[i] = str.charCodeAt(i);\r\n        return buffer;\r\n    }\r\n    fromDate(inputDate) {\r\n        this.year = inputDate.getUTCFullYear();\r\n        this.month = inputDate.getUTCMonth() + 1;\r\n        this.day = inputDate.getUTCDate();\r\n        this.hour = inputDate.getUTCHours();\r\n        this.minute = inputDate.getUTCMinutes();\r\n        this.second = inputDate.getUTCSeconds();\r\n    }\r\n    toDate() {\r\n        return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));\r\n    }\r\n    fromString(inputString) {\r\n        const parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\r\n        const parserArray = parser.exec(inputString);\r\n        if (parserArray === null) {\r\n            this.error = \"Wrong input string for conversion\";\r\n            return;\r\n        }\r\n        const year = parseInt(parserArray[1], 10);\r\n        if (year >= 50)\r\n            this.year = 1900 + year;\r\n        else\r\n            this.year = 2000 + year;\r\n        this.month = parseInt(parserArray[2], 10);\r\n        this.day = parseInt(parserArray[3], 10);\r\n        this.hour = parseInt(parserArray[4], 10);\r\n        this.minute = parseInt(parserArray[5], 10);\r\n        this.second = parseInt(parserArray[6], 10);\r\n    }\r\n    toString(encoding = \"iso\") {\r\n        if (encoding === \"iso\") {\r\n            const outputArray = new Array(7);\r\n            outputArray[0] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);\r\n            outputArray[1] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.month, 2);\r\n            outputArray[2] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.day, 2);\r\n            outputArray[3] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.hour, 2);\r\n            outputArray[4] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.minute, 2);\r\n            outputArray[5] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.second, 2);\r\n            outputArray[6] = \"Z\";\r\n            return outputArray.join(\"\");\r\n        }\r\n        return super.toString(encoding);\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.toDate().toISOString()}`;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            year: this.year,\r\n            month: this.month,\r\n            day: this.day,\r\n            hour: this.hour,\r\n            minute: this.minute,\r\n            second: this.second,\r\n        };\r\n    }\r\n}\r\n_a$6 = UTCTime;\r\n(() => {\r\n    typeStore.UTCTime = _a$6;\r\n})();\r\nUTCTime.NAME = \"UTCTime\";\n\nvar _a$5;\r\nclass GeneralizedTime extends UTCTime {\r\n    constructor(parameters = {}) {\r\n        var _b;\r\n        super(parameters);\r\n        (_b = this.millisecond) !== null && _b !== void 0 ? _b : (this.millisecond = 0);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 24;\r\n    }\r\n    fromDate(inputDate) {\r\n        super.fromDate(inputDate);\r\n        this.millisecond = inputDate.getUTCMilliseconds();\r\n    }\r\n    toDate() {\r\n        return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)));\r\n    }\r\n    fromString(inputString) {\r\n        let isUTC = false;\r\n        let timeString = \"\";\r\n        let dateTimeString = \"\";\r\n        let fractionPart = 0;\r\n        let parser;\r\n        let hourDifference = 0;\r\n        let minuteDifference = 0;\r\n        if (inputString[inputString.length - 1] === \"Z\") {\r\n            timeString = inputString.substring(0, inputString.length - 1);\r\n            isUTC = true;\r\n        }\r\n        else {\r\n            const number = new Number(inputString[inputString.length - 1]);\r\n            if (isNaN(number.valueOf()))\r\n                throw new Error(\"Wrong input string for conversion\");\r\n            timeString = inputString;\r\n        }\r\n        if (isUTC) {\r\n            if (timeString.indexOf(\"+\") !== -1)\r\n                throw new Error(\"Wrong input string for conversion\");\r\n            if (timeString.indexOf(\"-\") !== -1)\r\n                throw new Error(\"Wrong input string for conversion\");\r\n        }\r\n        else {\r\n            let multiplier = 1;\r\n            let differencePosition = timeString.indexOf(\"+\");\r\n            let differenceString = \"\";\r\n            if (differencePosition === -1) {\r\n                differencePosition = timeString.indexOf(\"-\");\r\n                multiplier = -1;\r\n            }\r\n            if (differencePosition !== -1) {\r\n                differenceString = timeString.substring(differencePosition + 1);\r\n                timeString = timeString.substring(0, differencePosition);\r\n                if ((differenceString.length !== 2) && (differenceString.length !== 4))\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n                let number = parseInt(differenceString.substring(0, 2), 10);\r\n                if (isNaN(number.valueOf()))\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n                hourDifference = multiplier * number;\r\n                if (differenceString.length === 4) {\r\n                    number = parseInt(differenceString.substring(2, 4), 10);\r\n                    if (isNaN(number.valueOf()))\r\n                        throw new Error(\"Wrong input string for conversion\");\r\n                    minuteDifference = multiplier * number;\r\n                }\r\n            }\r\n        }\r\n        let fractionPointPosition = timeString.indexOf(\".\");\r\n        if (fractionPointPosition === -1)\r\n            fractionPointPosition = timeString.indexOf(\",\");\r\n        if (fractionPointPosition !== -1) {\r\n            const fractionPartCheck = new Number(`0${timeString.substring(fractionPointPosition)}`);\r\n            if (isNaN(fractionPartCheck.valueOf()))\r\n                throw new Error(\"Wrong input string for conversion\");\r\n            fractionPart = fractionPartCheck.valueOf();\r\n            dateTimeString = timeString.substring(0, fractionPointPosition);\r\n        }\r\n        else\r\n            dateTimeString = timeString;\r\n        switch (true) {\r\n            case (dateTimeString.length === 8):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1)\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n                break;\r\n            case (dateTimeString.length === 10):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1) {\r\n                    let fractionResult = 60 * fractionPart;\r\n                    this.minute = Math.floor(fractionResult);\r\n                    fractionResult = 60 * (fractionResult - this.minute);\r\n                    this.second = Math.floor(fractionResult);\r\n                    fractionResult = 1000 * (fractionResult - this.second);\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            case (dateTimeString.length === 12):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1) {\r\n                    let fractionResult = 60 * fractionPart;\r\n                    this.second = Math.floor(fractionResult);\r\n                    fractionResult = 1000 * (fractionResult - this.second);\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            case (dateTimeString.length === 14):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1) {\r\n                    const fractionResult = 1000 * fractionPart;\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Wrong input string for conversion\");\r\n        }\r\n        const parserArray = parser.exec(dateTimeString);\r\n        if (parserArray === null)\r\n            throw new Error(\"Wrong input string for conversion\");\r\n        for (let j = 1; j < parserArray.length; j++) {\r\n            switch (j) {\r\n                case 1:\r\n                    this.year = parseInt(parserArray[j], 10);\r\n                    break;\r\n                case 2:\r\n                    this.month = parseInt(parserArray[j], 10);\r\n                    break;\r\n                case 3:\r\n                    this.day = parseInt(parserArray[j], 10);\r\n                    break;\r\n                case 4:\r\n                    this.hour = parseInt(parserArray[j], 10) + hourDifference;\r\n                    break;\r\n                case 5:\r\n                    this.minute = parseInt(parserArray[j], 10) + minuteDifference;\r\n                    break;\r\n                case 6:\r\n                    this.second = parseInt(parserArray[j], 10);\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n            }\r\n        }\r\n        if (isUTC === false) {\r\n            const tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\r\n            this.year = tempDate.getUTCFullYear();\r\n            this.month = tempDate.getUTCMonth();\r\n            this.day = tempDate.getUTCDay();\r\n            this.hour = tempDate.getUTCHours();\r\n            this.minute = tempDate.getUTCMinutes();\r\n            this.second = tempDate.getUTCSeconds();\r\n            this.millisecond = tempDate.getUTCMilliseconds();\r\n        }\r\n    }\r\n    toString(encoding = \"iso\") {\r\n        if (encoding === \"iso\") {\r\n            const outputArray = [];\r\n            outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.year, 4));\r\n            outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.month, 2));\r\n            outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.day, 2));\r\n            outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.hour, 2));\r\n            outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.minute, 2));\r\n            outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.second, 2));\r\n            if (this.millisecond !== 0) {\r\n                outputArray.push(\".\");\r\n                outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.millisecond, 3));\r\n            }\r\n            outputArray.push(\"Z\");\r\n            return outputArray.join(\"\");\r\n        }\r\n        return super.toString(encoding);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            millisecond: this.millisecond,\r\n        };\r\n    }\r\n}\r\n_a$5 = GeneralizedTime;\r\n(() => {\r\n    typeStore.GeneralizedTime = _a$5;\r\n})();\r\nGeneralizedTime.NAME = \"GeneralizedTime\";\n\nvar _a$4;\r\nclass DATE extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 31;\r\n    }\r\n}\r\n_a$4 = DATE;\r\n(() => {\r\n    typeStore.DATE = _a$4;\r\n})();\r\nDATE.NAME = \"DATE\";\n\nvar _a$3;\r\nclass TimeOfDay extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 32;\r\n    }\r\n}\r\n_a$3 = TimeOfDay;\r\n(() => {\r\n    typeStore.TimeOfDay = _a$3;\r\n})();\r\nTimeOfDay.NAME = \"TimeOfDay\";\n\nvar _a$2;\r\nclass DateTime extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 33;\r\n    }\r\n}\r\n_a$2 = DateTime;\r\n(() => {\r\n    typeStore.DateTime = _a$2;\r\n})();\r\nDateTime.NAME = \"DateTime\";\n\nvar _a$1;\r\nclass Duration extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 34;\r\n    }\r\n}\r\n_a$1 = Duration;\r\n(() => {\r\n    typeStore.Duration = _a$1;\r\n})();\r\nDuration.NAME = \"Duration\";\n\nvar _a;\r\nclass TIME extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 14;\r\n    }\r\n}\r\n_a = TIME;\r\n(() => {\r\n    typeStore.TIME = _a;\r\n})();\r\nTIME.NAME = \"TIME\";\n\nclass Any {\r\n    constructor({ name = EMPTY_STRING, optional = false, } = {}) {\r\n        this.name = name;\r\n        this.optional = optional;\r\n    }\r\n}\n\nclass Choice extends Any {\r\n    constructor({ value = [], ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = value;\r\n    }\r\n}\n\nclass Repeated extends Any {\r\n    constructor({ value = new Any(), local = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = value;\r\n        this.local = local;\r\n    }\r\n}\n\nclass RawData {\r\n    constructor({ data = EMPTY_VIEW } = {}) {\r\n        this.dataView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(data);\r\n    }\r\n    get data() {\r\n        return this.dataView.slice().buffer;\r\n    }\r\n    set data(value) {\r\n        this.dataView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(value);\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const endLength = inputOffset + inputLength;\r\n        this.dataView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer).subarray(inputOffset, endLength);\r\n        return endLength;\r\n    }\r\n    toBER(sizeOnly) {\r\n        return this.dataView.slice().buffer;\r\n    }\r\n}\n\nfunction compareSchema(root, inputData, inputSchema) {\r\n    if (inputSchema instanceof Choice) {\r\n        for (let j = 0; j < inputSchema.value.length; j++) {\r\n            const result = compareSchema(root, inputData, inputSchema.value[j]);\r\n            if (result.verified) {\r\n                return {\r\n                    verified: true,\r\n                    result: root\r\n                };\r\n            }\r\n        }\r\n        {\r\n            const _result = {\r\n                verified: false,\r\n                result: {\r\n                    error: \"Wrong values for Choice type\"\r\n                },\r\n            };\r\n            if (inputSchema.hasOwnProperty(NAME))\r\n                _result.name = inputSchema.name;\r\n            return _result;\r\n        }\r\n    }\r\n    if (inputSchema instanceof Any) {\r\n        if (inputSchema.hasOwnProperty(NAME))\r\n            root[inputSchema.name] = inputData;\r\n        return {\r\n            verified: true,\r\n            result: root\r\n        };\r\n    }\r\n    if ((root instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong root object\" }\r\n        };\r\n    }\r\n    if ((inputData instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 data\" }\r\n        };\r\n    }\r\n    if ((inputSchema instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if ((ID_BLOCK in inputSchema) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if ((FROM_BER in inputSchema.idBlock) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if ((TO_BER in inputSchema.idBlock) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    const encodedId = inputSchema.idBlock.toBER(false);\r\n    if (encodedId.byteLength === 0) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Error encoding idBlock for ASN.1 schema\" }\r\n        };\r\n    }\r\n    const decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\r\n    if (decodedOffset === -1) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Error decoding idBlock for ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.hasOwnProperty(TAG_CLASS) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.hasOwnProperty(TAG_NUMBER) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.hasOwnProperty(IS_CONSTRUCTED) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (!(IS_HEX_ONLY in inputSchema.idBlock)) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.isHexOnly) {\r\n        if ((VALUE_HEX_VIEW in inputSchema.idBlock) === false) {\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Wrong ASN.1 schema\" }\r\n            };\r\n        }\r\n        const schemaView = inputSchema.idBlock.valueHexView;\r\n        const asn1View = inputData.idBlock.valueHexView;\r\n        if (schemaView.length !== asn1View.length) {\r\n            return {\r\n                verified: false,\r\n                result: root\r\n            };\r\n        }\r\n        for (let i = 0; i < schemaView.length; i++) {\r\n            if (schemaView[i] !== asn1View[1]) {\r\n                return {\r\n                    verified: false,\r\n                    result: root\r\n                };\r\n            }\r\n        }\r\n    }\r\n    if (inputSchema.name) {\r\n        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n        if (inputSchema.name)\r\n            root[inputSchema.name] = inputData;\r\n    }\r\n    if (inputSchema instanceof typeStore.Constructed) {\r\n        let admission = 0;\r\n        let result = {\r\n            verified: false,\r\n            result: {\r\n                error: \"Unknown error\",\r\n            }\r\n        };\r\n        let maxLength = inputSchema.valueBlock.value.length;\r\n        if (maxLength > 0) {\r\n            if (inputSchema.valueBlock.value[0] instanceof Repeated) {\r\n                maxLength = inputData.valueBlock.value.length;\r\n            }\r\n        }\r\n        if (maxLength === 0) {\r\n            return {\r\n                verified: true,\r\n                result: root\r\n            };\r\n        }\r\n        if ((inputData.valueBlock.value.length === 0) &&\r\n            (inputSchema.valueBlock.value.length !== 0)) {\r\n            let _optional = true;\r\n            for (let i = 0; i < inputSchema.valueBlock.value.length; i++)\r\n                _optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\r\n            if (_optional) {\r\n                return {\r\n                    verified: true,\r\n                    result: root\r\n                };\r\n            }\r\n            if (inputSchema.name) {\r\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                if (inputSchema.name)\r\n                    delete root[inputSchema.name];\r\n            }\r\n            root.error = \"Inconsistent object length\";\r\n            return {\r\n                verified: false,\r\n                result: root\r\n            };\r\n        }\r\n        for (let i = 0; i < maxLength; i++) {\r\n            if ((i - admission) >= inputData.valueBlock.value.length) {\r\n                if (inputSchema.valueBlock.value[i].optional === false) {\r\n                    const _result = {\r\n                        verified: false,\r\n                        result: root\r\n                    };\r\n                    root.error = \"Inconsistent length between ASN.1 data and schema\";\r\n                    if (inputSchema.name) {\r\n                        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                        if (inputSchema.name) {\r\n                            delete root[inputSchema.name];\r\n                            _result.name = inputSchema.name;\r\n                        }\r\n                    }\r\n                    return _result;\r\n                }\r\n            }\r\n            else {\r\n                if (inputSchema.valueBlock.value[0] instanceof Repeated) {\r\n                    result = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\r\n                    if (result.verified === false) {\r\n                        if (inputSchema.valueBlock.value[0].optional)\r\n                            admission++;\r\n                        else {\r\n                            if (inputSchema.name) {\r\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                                if (inputSchema.name)\r\n                                    delete root[inputSchema.name];\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                    if ((NAME in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].name.length > 0)) {\r\n                        let arrayRoot = {};\r\n                        if ((LOCAL in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].local))\r\n                            arrayRoot = inputData;\r\n                        else\r\n                            arrayRoot = root;\r\n                        if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\")\r\n                            arrayRoot[inputSchema.valueBlock.value[0].name] = [];\r\n                        arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\r\n                    }\r\n                }\r\n                else {\r\n                    result = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\r\n                    if (result.verified === false) {\r\n                        if (inputSchema.valueBlock.value[i].optional)\r\n                            admission++;\r\n                        else {\r\n                            if (inputSchema.name) {\r\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                                if (inputSchema.name)\r\n                                    delete root[inputSchema.name];\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (result.verified === false) {\r\n            const _result = {\r\n                verified: false,\r\n                result: root\r\n            };\r\n            if (inputSchema.name) {\r\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                if (inputSchema.name) {\r\n                    delete root[inputSchema.name];\r\n                    _result.name = inputSchema.name;\r\n                }\r\n            }\r\n            return _result;\r\n        }\r\n        return {\r\n            verified: true,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.primitiveSchema &&\r\n        (VALUE_HEX_VIEW in inputData.valueBlock)) {\r\n        const asn1 = localFromBER(inputData.valueBlock.valueHexView);\r\n        if (asn1.offset === -1) {\r\n            const _result = {\r\n                verified: false,\r\n                result: asn1.result\r\n            };\r\n            if (inputSchema.name) {\r\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                if (inputSchema.name) {\r\n                    delete root[inputSchema.name];\r\n                    _result.name = inputSchema.name;\r\n                }\r\n            }\r\n            return _result;\r\n        }\r\n        return compareSchema(root, asn1.result, inputSchema.primitiveSchema);\r\n    }\r\n    return {\r\n        verified: true,\r\n        result: root\r\n    };\r\n}\r\nfunction verifySchema(inputBuffer, inputSchema) {\r\n    if ((inputSchema instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema type\" }\r\n        };\r\n    }\r\n    const asn1 = localFromBER(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer));\r\n    if (asn1.offset === -1) {\r\n        return {\r\n            verified: false,\r\n            result: asn1.result\r\n        };\r\n    }\r\n    return compareSchema(asn1.result, asn1.result, inputSchema);\r\n}\n\n\n\n\n//# sourceURL=webpack://ems/./node_modules/asn1js/build/index.es.js?");

/***/ }),

/***/ "./node_modules/detect-browser/es/index.js":
/*!*************************************************!*\
  !*** ./node_modules/detect-browser/es/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BotInfo: () => (/* binding */ BotInfo),\n/* harmony export */   BrowserInfo: () => (/* binding */ BrowserInfo),\n/* harmony export */   NodeInfo: () => (/* binding */ NodeInfo),\n/* harmony export */   ReactNativeInfo: () => (/* binding */ ReactNativeInfo),\n/* harmony export */   SearchBotDeviceInfo: () => (/* binding */ SearchBotDeviceInfo),\n/* harmony export */   browserName: () => (/* binding */ browserName),\n/* harmony export */   detect: () => (/* binding */ detect),\n/* harmony export */   detectOS: () => (/* binding */ detectOS),\n/* harmony export */   getNodeVersion: () => (/* binding */ getNodeVersion),\n/* harmony export */   parseUserAgent: () => (/* binding */ parseUserAgent)\n/* harmony export */ });\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar BrowserInfo = /** @class */ (function () {\n    function BrowserInfo(name, version, os) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.type = 'browser';\n    }\n    return BrowserInfo;\n}());\n\nvar NodeInfo = /** @class */ (function () {\n    function NodeInfo(version) {\n        this.version = version;\n        this.type = 'node';\n        this.name = 'node';\n        this.os = process.platform;\n    }\n    return NodeInfo;\n}());\n\nvar SearchBotDeviceInfo = /** @class */ (function () {\n    function SearchBotDeviceInfo(name, version, os, bot) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.bot = bot;\n        this.type = 'bot-device';\n    }\n    return SearchBotDeviceInfo;\n}());\n\nvar BotInfo = /** @class */ (function () {\n    function BotInfo() {\n        this.type = 'bot';\n        this.bot = true; // NOTE: deprecated test name instead\n        this.name = 'bot';\n        this.version = null;\n        this.os = null;\n    }\n    return BotInfo;\n}());\n\nvar ReactNativeInfo = /** @class */ (function () {\n    function ReactNativeInfo() {\n        this.type = 'react-native';\n        this.name = 'react-native';\n        this.version = null;\n        this.os = null;\n    }\n    return ReactNativeInfo;\n}());\n\n// tslint:disable-next-line:max-line-length\nvar SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nvar SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\\ Jeeves\\/Teoma|ia_archiver)/;\nvar REQUIRED_VERSION_PARTS = 3;\nvar userAgentRules = [\n    ['aol', /AOLShield\\/([0-9\\._]+)/],\n    ['edge', /Edge\\/([0-9\\._]+)/],\n    ['edge-ios', /EdgiOS\\/([0-9\\._]+)/],\n    ['yandexbrowser', /YaBrowser\\/([0-9\\._]+)/],\n    ['kakaotalk', /KAKAOTALK\\s([0-9\\.]+)/],\n    ['samsung', /SamsungBrowser\\/([0-9\\.]+)/],\n    ['silk', /\\bSilk\\/([0-9._-]+)\\b/],\n    ['miui', /MiuiBrowser\\/([0-9\\.]+)$/],\n    ['beaker', /BeakerBrowser\\/([0-9\\.]+)/],\n    ['edge-chromium', /EdgA?\\/([0-9\\.]+)/],\n    [\n        'chromium-webview',\n        /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/,\n    ],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/],\n    ['phantomjs', /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['crios', /CriOS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9\\.]+)(?:\\s|$)/],\n    ['fxios', /FxiOS\\/([0-9\\.]+)/],\n    ['opera-mini', /Opera Mini.*Version\\/([0-9\\.]+)/],\n    ['opera', /Opera\\/([0-9\\.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9\\.]+)(:?\\s|$)/],\n    ['pie', /^Microsoft Pocket Internet Explorer\\/(\\d+\\.\\d+)$/],\n    ['pie', /^Mozilla\\/\\d\\.\\d+\\s\\(compatible;\\s(?:MSP?IE|MSInternet Explorer) (\\d+\\.\\d+);.*Windows CE.*\\)$/],\n    ['netfront', /^Mozilla\\/\\d\\.\\d+.*NetFront\\/(\\d.\\d)/],\n    ['ie', /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/],\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9\\.]+)/],\n    ['android', /Android\\s([0-9\\.]+)/],\n    ['ios', /Version\\/([0-9\\._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9\\._]+).*Safari/],\n    ['facebook', /FB[AS]V\\/([0-9\\.]+)/],\n    ['instagram', /Instagram\\s([0-9\\.]+)/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Mobile/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/],\n    ['curl', /^curl\\/([0-9\\.]+)$/],\n    ['searchbot', SEARCHBOX_UA_REGEX],\n];\nvar operatingSystemRules = [\n    ['iOS', /iP(hone|od|ad)/],\n    ['Android OS', /Android/],\n    ['BlackBerry OS', /BlackBerry|BB10/],\n    ['Windows Mobile', /IEMobile/],\n    ['Amazon OS', /Kindle/],\n    ['Windows 3.11', /Win16/],\n    ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],\n    ['Windows 98', /(Windows 98)|(Win98)/],\n    ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],\n    ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],\n    ['Windows Server 2003', /(Windows NT 5.2)/],\n    ['Windows Vista', /(Windows NT 6.0)/],\n    ['Windows 7', /(Windows NT 6.1)/],\n    ['Windows 8', /(Windows NT 6.2)/],\n    ['Windows 8.1', /(Windows NT 6.3)/],\n    ['Windows 10', /(Windows NT 10.0)/],\n    ['Windows ME', /Windows ME/],\n    ['Windows CE', /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],\n    ['Open BSD', /OpenBSD/],\n    ['Sun OS', /SunOS/],\n    ['Chrome OS', /CrOS/],\n    ['Linux', /(Linux)|(X11)/],\n    ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],\n    ['QNX', /QNX/],\n    ['BeOS', /BeOS/],\n    ['OS/2', /OS\\/2/],\n];\nfunction detect(userAgent) {\n    if (!!userAgent) {\n        return parseUserAgent(userAgent);\n    }\n    if (typeof document === 'undefined' &&\n        typeof navigator !== 'undefined' &&\n        navigator.product === 'ReactNative') {\n        return new ReactNativeInfo();\n    }\n    if (typeof navigator !== 'undefined') {\n        return parseUserAgent(navigator.userAgent);\n    }\n    return getNodeVersion();\n}\nfunction matchUserAgent(ua) {\n    // opted for using reduce here rather than Array#first with a regex.test call\n    // this is primarily because using the reduce we only perform the regex\n    // execution once rather than once for the test and for the exec again below\n    // probably something that needs to be benchmarked though\n    return (ua !== '' &&\n        userAgentRules.reduce(function (matched, _a) {\n            var browser = _a[0], regex = _a[1];\n            if (matched) {\n                return matched;\n            }\n            var uaMatch = regex.exec(ua);\n            return !!uaMatch && [browser, uaMatch];\n        }, false));\n}\nfunction browserName(ua) {\n    var data = matchUserAgent(ua);\n    return data ? data[0] : null;\n}\nfunction parseUserAgent(ua) {\n    var matchedRule = matchUserAgent(ua);\n    if (!matchedRule) {\n        return null;\n    }\n    var name = matchedRule[0], match = matchedRule[1];\n    if (name === 'searchbot') {\n        return new BotInfo();\n    }\n    // Do not use RegExp for split operation as some browser do not support it (See: http://blog.stevenlevithan.com/archives/cross-browser-split)\n    var versionParts = match[1] && match[1].split('.').join('_').split('_').slice(0, 3);\n    if (versionParts) {\n        if (versionParts.length < REQUIRED_VERSION_PARTS) {\n            versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);\n        }\n    }\n    else {\n        versionParts = [];\n    }\n    var version = versionParts.join('.');\n    var os = detectOS(ua);\n    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);\n    if (searchBotMatch && searchBotMatch[1]) {\n        return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);\n    }\n    return new BrowserInfo(name, version, os);\n}\nfunction detectOS(ua) {\n    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {\n        var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];\n        var match = regex.exec(ua);\n        if (match) {\n            return os;\n        }\n    }\n    return null;\n}\nfunction getNodeVersion() {\n    var isNode = typeof process !== 'undefined' && process.version;\n    return isNode ? new NodeInfo(process.version.slice(1)) : null;\n}\nfunction createVersionParts(count) {\n    var output = [];\n    for (var ii = 0; ii < count; ii++) {\n        output.push('0');\n    }\n    return output;\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/detect-browser/es/index.js?");

/***/ }),

/***/ "./node_modules/event-iterator/lib/dom.js":
/*!************************************************!*\
  !*** ./node_modules/event-iterator/lib/dom.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst event_iterator_1 = __webpack_require__(/*! ./event-iterator */ \"./node_modules/event-iterator/lib/event-iterator.js\");\nexports.EventIterator = event_iterator_1.EventIterator;\nfunction subscribe(event, options, evOptions) {\n    return new event_iterator_1.EventIterator(({ push }) => {\n        this.addEventListener(event, push, options);\n        return () => this.removeEventListener(event, push, options);\n    }, evOptions);\n}\nexports.subscribe = subscribe;\nexports[\"default\"] = event_iterator_1.EventIterator;\n\n\n//# sourceURL=webpack://ems/./node_modules/event-iterator/lib/dom.js?");

/***/ }),

/***/ "./node_modules/event-iterator/lib/event-iterator.js":
/*!***********************************************************!*\
  !*** ./node_modules/event-iterator/lib/event-iterator.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass EventQueue {\n    constructor() {\n        this.pullQueue = [];\n        this.pushQueue = [];\n        this.eventHandlers = {};\n        this.isPaused = false;\n        this.isStopped = false;\n    }\n    push(value) {\n        if (this.isStopped)\n            return;\n        const resolution = { value, done: false };\n        if (this.pullQueue.length) {\n            const placeholder = this.pullQueue.shift();\n            if (placeholder)\n                placeholder.resolve(resolution);\n        }\n        else {\n            this.pushQueue.push(Promise.resolve(resolution));\n            if (this.highWaterMark !== undefined &&\n                this.pushQueue.length >= this.highWaterMark &&\n                !this.isPaused) {\n                this.isPaused = true;\n                if (this.eventHandlers.highWater) {\n                    this.eventHandlers.highWater();\n                }\n                else if (console) {\n                    console.warn(`EventIterator queue reached ${this.pushQueue.length} items`);\n                }\n            }\n        }\n    }\n    stop() {\n        if (this.isStopped)\n            return;\n        this.isStopped = true;\n        this.remove();\n        for (const placeholder of this.pullQueue) {\n            placeholder.resolve({ value: undefined, done: true });\n        }\n        this.pullQueue.length = 0;\n    }\n    fail(error) {\n        if (this.isStopped)\n            return;\n        this.isStopped = true;\n        this.remove();\n        if (this.pullQueue.length) {\n            for (const placeholder of this.pullQueue) {\n                placeholder.reject(error);\n            }\n            this.pullQueue.length = 0;\n        }\n        else {\n            const rejection = Promise.reject(error);\n            /* Attach error handler to avoid leaking an unhandled promise rejection. */\n            rejection.catch(() => { });\n            this.pushQueue.push(rejection);\n        }\n    }\n    remove() {\n        Promise.resolve().then(() => {\n            if (this.removeCallback)\n                this.removeCallback();\n        });\n    }\n    [Symbol.asyncIterator]() {\n        return {\n            next: (value) => {\n                const result = this.pushQueue.shift();\n                if (result) {\n                    if (this.lowWaterMark !== undefined &&\n                        this.pushQueue.length <= this.lowWaterMark &&\n                        this.isPaused) {\n                        this.isPaused = false;\n                        if (this.eventHandlers.lowWater) {\n                            this.eventHandlers.lowWater();\n                        }\n                    }\n                    return result;\n                }\n                else if (this.isStopped) {\n                    return Promise.resolve({ value: undefined, done: true });\n                }\n                else {\n                    return new Promise((resolve, reject) => {\n                        this.pullQueue.push({ resolve, reject });\n                    });\n                }\n            },\n            return: () => {\n                this.isStopped = true;\n                this.pushQueue.length = 0;\n                this.remove();\n                return Promise.resolve({ value: undefined, done: true });\n            },\n        };\n    }\n}\nclass EventIterator {\n    constructor(listen, { highWaterMark = 100, lowWaterMark = 1 } = {}) {\n        const queue = new EventQueue();\n        queue.highWaterMark = highWaterMark;\n        queue.lowWaterMark = lowWaterMark;\n        queue.removeCallback =\n            listen({\n                push: value => queue.push(value),\n                stop: () => queue.stop(),\n                fail: error => queue.fail(error),\n                on: (event, fn) => {\n                    queue.eventHandlers[event] = fn;\n                },\n            }) || (() => { });\n        this[Symbol.asyncIterator] = () => queue[Symbol.asyncIterator]();\n        Object.freeze(this);\n    }\n}\nexports.EventIterator = EventIterator;\nexports[\"default\"] = EventIterator;\n\n\n//# sourceURL=webpack://ems/./node_modules/event-iterator/lib/event-iterator.js?");

/***/ }),

/***/ "./node_modules/hashlru/index.js":
/*!***************************************!*\
  !*** ./node_modules/hashlru/index.js ***!
  \***************************************/
/***/ ((module) => {

eval("module.exports = function (max) {\n\n  if (!max) throw Error('hashlru must have a max value, of type number, greater than 0')\n\n  var size = 0, cache = Object.create(null), _cache = Object.create(null)\n\n  function update (key, value) {\n    cache[key] = value\n    size ++\n    if(size >= max) {\n      size = 0\n      _cache = cache\n      cache = Object.create(null)\n    }\n  }\n\n  return {\n    has: function (key) {\n      return cache[key] !== undefined || _cache[key] !== undefined\n    },\n    remove: function (key) {\n      if(cache[key] !== undefined)\n        cache[key] = undefined\n      if(_cache[key] !== undefined)\n        _cache[key] = undefined\n    },\n    get: function (key) {\n      var v = cache[key]\n      if(v !== undefined) return v\n      if((v = _cache[key]) !== undefined) {\n        update(key, v)\n        return v\n      }\n    },\n    set: function (key, value) {\n      if(cache[key] !== undefined) cache[key] = value\n      else update(key, value)\n    },\n    clear: function () {\n      cache = Object.create(null)\n      _cache = Object.create(null)\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://ems/./node_modules/hashlru/index.js?");

/***/ }),

/***/ "./node_modules/is-electron/index.js":
/*!*******************************************!*\
  !*** ./node_modules/is-electron/index.js ***!
  \*******************************************/
/***/ ((module) => {

eval("// https://github.com/electron/electron/issues/2288\nfunction isElectron() {\n    // Renderer process\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\n        return true;\n    }\n\n    // Main process\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\n        return true;\n    }\n\n    // Detect the user agent when the `nodeIntegration` option is set to false\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\n        return true;\n    }\n\n    return false;\n}\n\nmodule.exports = isElectron;\n\n\n//# sourceURL=webpack://ems/./node_modules/is-electron/index.js?");

/***/ }),

/***/ "./node_modules/multibase/src/base.js":
/*!********************************************!*\
  !*** ./node_modules/multibase/src/base.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst { encodeText } = __webpack_require__(/*! ./util */ \"./node_modules/multibase/src/util.js\")\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\nclass Base {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  constructor (name, code, factory, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = encodeText(this.code)\n    this.alphabet = alphabet\n    this.codec = factory(alphabet)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode (buf) {\n    return this.codec.encode(buf)\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.codec.decode(string)\n  }\n}\n\nmodule.exports = Base\n\n\n//# sourceURL=webpack://ems/./node_modules/multibase/src/base.js?");

/***/ }),

/***/ "./node_modules/multibase/src/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/multibase/src/constants.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst baseX = __webpack_require__(/*! @multiformats/base-x */ \"./node_modules/@multiformats/base-x/src/index.js\")\nconst Base = __webpack_require__(/*! ./base.js */ \"./node_modules/multibase/src/base.js\")\nconst { rfc4648 } = __webpack_require__(/*! ./rfc4648 */ \"./node_modules/multibase/src/rfc4648.js\")\nconst { decodeText, encodeText } = __webpack_require__(/*! ./util */ \"./node_modules/multibase/src/util.js\")\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import('./types').Codec} Codec */\n/** @typedef {import('./types').BaseName} BaseName */\n/** @typedef {import('./types').BaseCode} BaseCode */\n\n/** @type {CodecFactory} */\nconst identity = () => {\n  return {\n    encode: decodeText,\n    decode: encodeText\n  }\n}\n\n/**\n *\n * name, code, implementation, alphabet\n *\n * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}\n */\nconst constants = [\n  ['identity', '\\x00', identity, ''],\n  ['base2', '0', rfc4648(1), '01'],\n  ['base8', '7', rfc4648(3), '01234567'],\n  ['base10', '9', baseX, '0123456789'],\n  ['base16', 'f', rfc4648(4), '0123456789abcdef'],\n  ['base16upper', 'F', rfc4648(4), '0123456789ABCDEF'],\n  ['base32hex', 'v', rfc4648(5), '0123456789abcdefghijklmnopqrstuv'],\n  ['base32hexupper', 'V', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV'],\n  ['base32hexpad', 't', rfc4648(5), '0123456789abcdefghijklmnopqrstuv='],\n  ['base32hexpadupper', 'T', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV='],\n  ['base32', 'b', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567'],\n  ['base32upper', 'B', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'],\n  ['base32pad', 'c', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567='],\n  ['base32padupper', 'C', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='],\n  ['base32z', 'h', rfc4648(5), 'ybndrfg8ejkmcpqxot1uwisza345h769'],\n  ['base36', 'k', baseX, '0123456789abcdefghijklmnopqrstuvwxyz'],\n  ['base36upper', 'K', baseX, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'],\n  ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],\n  ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],\n  ['base64', 'm', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],\n  ['base64pad', 'M', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],\n  ['base64url', 'u', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],\n  ['base64urlpad', 'U', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']\n]\n\n/** @type {Record<BaseName,Base>} */\nconst names = constants.reduce((prev, tupple) => {\n  prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])\n  return prev\n}, /** @type {Record<BaseName,Base>} */({}))\n\n/** @type {Record<BaseCode,Base>} */\nconst codes = constants.reduce((prev, tupple) => {\n  prev[tupple[1]] = names[tupple[0]]\n  return prev\n}, /** @type {Record<BaseCode,Base>} */({}))\n\nmodule.exports = {\n  names,\n  codes\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/multibase/src/constants.js?");

/***/ }),

/***/ "./node_modules/multibase/src/index.js":
/*!*********************************************!*\
  !*** ./node_modules/multibase/src/index.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n */\n\n\nconst constants = __webpack_require__(/*! ./constants */ \"./node_modules/multibase/src/constants.js\")\nconst { encodeText, decodeText, concat } = __webpack_require__(/*! ./util */ \"./node_modules/multibase/src/util.js\")\n\n/** @typedef {import('./base')} Base */\n/** @typedef {import(\"./types\").BaseNameOrCode} BaseNameOrCode */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n\n/**\n * Create a new Uint8Array with the multibase varint+code.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction multibase (nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded Uint8Array')\n  }\n  const { name, codeBuf } = encoding(nameOrCode)\n  validEncode(name, buf)\n\n  return concat([codeBuf, buf], codeBuf.length + buf.length)\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be encoded.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction encode (nameOrCode, buf) {\n  const enc = encoding(nameOrCode)\n  const data = encodeText(enc.encode(buf))\n\n  return concat([enc.codeBuf, data], enc.codeBuf.length + data.length)\n}\n\n/**\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Uint8Array|string} data\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction decode (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n  const prefix = data[0]\n\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase()\n  }\n  const enc = encoding(/** @type {BaseCode} */(data[0]))\n  return enc.decode(data.substring(1))\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Uint8Array|string} data\n */\nfunction isEncoded (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false\n  }\n\n  try {\n    const enc = encoding(/** @type {BaseCode} */(data[0]))\n    return enc.name\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Validate encoded data\n *\n * @param {BaseNameOrCode} name\n * @param {Uint8Array} buf\n * @returns {void}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction validEncode (name, buf) {\n  const enc = encoding(name)\n  enc.decode(decodeText(buf))\n}\n\n/**\n * Get the encoding by name or code\n *\n * @param {BaseNameOrCode} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encoding (nameOrCode) {\n  if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */(nameOrCode))) {\n    return constants.names[/** @type {BaseName} */(nameOrCode)]\n  } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */(nameOrCode))) {\n    return constants.codes[/** @type {BaseCode} */(nameOrCode)]\n  } else {\n    throw new Error(`Unsupported encoding: ${nameOrCode}`)\n  }\n}\n\n/**\n * Get encoding from data\n *\n * @param {string|Uint8Array} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encodingFromData (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  return encoding(/** @type {BaseCode} */(data[0]))\n}\n\nexports = module.exports = multibase\nexports.encode = encode\nexports.decode = decode\nexports.isEncoded = isEncoded\nexports.encoding = encoding\nexports.encodingFromData = encodingFromData\nconst names = Object.freeze(constants.names)\nconst codes = Object.freeze(constants.codes)\nexports.names = names\nexports.codes = codes\n\n\n//# sourceURL=webpack://ems/./node_modules/multibase/src/index.js?");

/***/ }),

/***/ "./node_modules/multibase/src/rfc4648.js":
/*!***********************************************!*\
  !*** ./node_modules/multibase/src/rfc4648.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[i])\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @param {number} bitsPerChar\n * @returns {CodecFactory}\n */\nconst rfc4648 = (bitsPerChar) => (alphabet) => {\n  return {\n    /**\n     * @param {Uint8Array} input\n     * @returns {string}\n     */\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    /**\n     * @param {string} input\n     * @returns {Uint8Array}\n     */\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar)\n    }\n  }\n}\n\nmodule.exports = { rfc4648 }\n\n\n//# sourceURL=webpack://ems/./node_modules/multibase/src/rfc4648.js?");

/***/ }),

/***/ "./node_modules/multibase/src/util.js":
/*!********************************************!*\
  !*** ./node_modules/multibase/src/util.js ***!
  \********************************************/
/***/ ((module) => {

eval("\n\nconst textDecoder = new TextDecoder()\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\nconst decodeText = (bytes) => textDecoder.decode(bytes)\n\nconst textEncoder = new TextEncoder()\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nconst encodeText = (text) => textEncoder.encode(text)\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<number>>} arrs\n * @param {number} length\n * @returns {Uint8Array}\n */\nfunction concat (arrs, length) {\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrs) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = { decodeText, encodeText, concat }\n\n\n//# sourceURL=webpack://ems/./node_modules/multibase/src/util.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/varint/decode.js":
/*!****************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/varint/decode.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/varint/decode.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/varint/encode.js":
/*!****************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/varint/encode.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/varint/encode.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/varint/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/varint/index.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = {\n    encode: __webpack_require__(/*! ./encode.js */ \"./node_modules/multihashes/node_modules/varint/encode.js\")\n  , decode: __webpack_require__(/*! ./decode.js */ \"./node_modules/multihashes/node_modules/varint/decode.js\")\n  , encodingLength: __webpack_require__(/*! ./length.js */ \"./node_modules/multihashes/node_modules/varint/length.js\")\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/varint/index.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/varint/length.js":
/*!****************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/varint/length.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/varint/length.js?");

/***/ }),

/***/ "./node_modules/multihashes/src/constants.js":
/*!***************************************************!*\
  !*** ./node_modules/multihashes/src/constants.js ***!
  \***************************************************/
/***/ ((module) => {

eval("/* eslint quote-props: off */\n\n\n/**\n * Names for all available hashes\n *\n * @typedef { \"identity\" | \"sha1\" | \"sha2-256\" | \"sha2-512\" | \"sha3-512\" | \"sha3-384\" | \"sha3-256\" | \"sha3-224\" | \"shake-128\" | \"shake-256\" | \"keccak-224\" | \"keccak-256\" | \"keccak-384\" | \"keccak-512\" | \"blake3\" | \"murmur3-128\" | \"murmur3-32\" | \"dbl-sha2-256\" | \"md4\" | \"md5\" | \"bmt\" | \"sha2-256-trunc254-padded\" | \"ripemd-128\" | \"ripemd-160\" | \"ripemd-256\" | \"ripemd-320\" | \"x11\" | \"kangarootwelve\" | \"sm3-256\" | \"blake2b-8\" | \"blake2b-16\" | \"blake2b-24\" | \"blake2b-32\" | \"blake2b-40\" | \"blake2b-48\" | \"blake2b-56\" | \"blake2b-64\" | \"blake2b-72\" | \"blake2b-80\" | \"blake2b-88\" | \"blake2b-96\" | \"blake2b-104\" | \"blake2b-112\" | \"blake2b-120\" | \"blake2b-128\" | \"blake2b-136\" | \"blake2b-144\" | \"blake2b-152\" | \"blake2b-160\" | \"blake2b-168\" | \"blake2b-176\" | \"blake2b-184\" | \"blake2b-192\" | \"blake2b-200\" | \"blake2b-208\" | \"blake2b-216\" | \"blake2b-224\" | \"blake2b-232\" | \"blake2b-240\" | \"blake2b-248\" | \"blake2b-256\" | \"blake2b-264\" | \"blake2b-272\" | \"blake2b-280\" | \"blake2b-288\" | \"blake2b-296\" | \"blake2b-304\" | \"blake2b-312\" | \"blake2b-320\" | \"blake2b-328\" | \"blake2b-336\" | \"blake2b-344\" | \"blake2b-352\" | \"blake2b-360\" | \"blake2b-368\" | \"blake2b-376\" | \"blake2b-384\" | \"blake2b-392\" | \"blake2b-400\" | \"blake2b-408\" | \"blake2b-416\" | \"blake2b-424\" | \"blake2b-432\" | \"blake2b-440\" | \"blake2b-448\" | \"blake2b-456\" | \"blake2b-464\" | \"blake2b-472\" | \"blake2b-480\" | \"blake2b-488\" | \"blake2b-496\" | \"blake2b-504\" | \"blake2b-512\" | \"blake2s-8\" | \"blake2s-16\" | \"blake2s-24\" | \"blake2s-32\" | \"blake2s-40\" | \"blake2s-48\" | \"blake2s-56\" | \"blake2s-64\" | \"blake2s-72\" | \"blake2s-80\" | \"blake2s-88\" | \"blake2s-96\" | \"blake2s-104\" | \"blake2s-112\" | \"blake2s-120\" | \"blake2s-128\" | \"blake2s-136\" | \"blake2s-144\" | \"blake2s-152\" | \"blake2s-160\" | \"blake2s-168\" | \"blake2s-176\" | \"blake2s-184\" | \"blake2s-192\" | \"blake2s-200\" | \"blake2s-208\" | \"blake2s-216\" | \"blake2s-224\" | \"blake2s-232\" | \"blake2s-240\" | \"blake2s-248\" | \"blake2s-256\" | \"skein256-8\" | \"skein256-16\" | \"skein256-24\" | \"skein256-32\" | \"skein256-40\" | \"skein256-48\" | \"skein256-56\" | \"skein256-64\" | \"skein256-72\" | \"skein256-80\" | \"skein256-88\" | \"skein256-96\" | \"skein256-104\" | \"skein256-112\" | \"skein256-120\" | \"skein256-128\" | \"skein256-136\" | \"skein256-144\" | \"skein256-152\" | \"skein256-160\" | \"skein256-168\" | \"skein256-176\" | \"skein256-184\" | \"skein256-192\" | \"skein256-200\" | \"skein256-208\" | \"skein256-216\" | \"skein256-224\" | \"skein256-232\" | \"skein256-240\" | \"skein256-248\" | \"skein256-256\" | \"skein512-8\" | \"skein512-16\" | \"skein512-24\" | \"skein512-32\" | \"skein512-40\" | \"skein512-48\" | \"skein512-56\" | \"skein512-64\" | \"skein512-72\" | \"skein512-80\" | \"skein512-88\" | \"skein512-96\" | \"skein512-104\" | \"skein512-112\" | \"skein512-120\" | \"skein512-128\" | \"skein512-136\" | \"skein512-144\" | \"skein512-152\" | \"skein512-160\" | \"skein512-168\" | \"skein512-176\" | \"skein512-184\" | \"skein512-192\" | \"skein512-200\" | \"skein512-208\" | \"skein512-216\" | \"skein512-224\" | \"skein512-232\" | \"skein512-240\" | \"skein512-248\" | \"skein512-256\" | \"skein512-264\" | \"skein512-272\" | \"skein512-280\" | \"skein512-288\" | \"skein512-296\" | \"skein512-304\" | \"skein512-312\" | \"skein512-320\" | \"skein512-328\" | \"skein512-336\" | \"skein512-344\" | \"skein512-352\" | \"skein512-360\" | \"skein512-368\" | \"skein512-376\" | \"skein512-384\" | \"skein512-392\" | \"skein512-400\" | \"skein512-408\" | \"skein512-416\" | \"skein512-424\" | \"skein512-432\" | \"skein512-440\" | \"skein512-448\" | \"skein512-456\" | \"skein512-464\" | \"skein512-472\" | \"skein512-480\" | \"skein512-488\" | \"skein512-496\" | \"skein512-504\" | \"skein512-512\" | \"skein1024-8\" | \"skein1024-16\" | \"skein1024-24\" | \"skein1024-32\" | \"skein1024-40\" | \"skein1024-48\" | \"skein1024-56\" | \"skein1024-64\" | \"skein1024-72\" | \"skein1024-80\" | \"skein1024-88\" | \"skein1024-96\" | \"skein1024-104\" | \"skein1024-112\" | \"skein1024-120\" | \"skein1024-128\" | \"skein1024-136\" | \"skein1024-144\" | \"skein1024-152\" | \"skein1024-160\" | \"skein1024-168\" | \"skein1024-176\" | \"skein1024-184\" | \"skein1024-192\" | \"skein1024-200\" | \"skein1024-208\" | \"skein1024-216\" | \"skein1024-224\" | \"skein1024-232\" | \"skein1024-240\" | \"skein1024-248\" | \"skein1024-256\" | \"skein1024-264\" | \"skein1024-272\" | \"skein1024-280\" | \"skein1024-288\" | \"skein1024-296\" | \"skein1024-304\" | \"skein1024-312\" | \"skein1024-320\" | \"skein1024-328\" | \"skein1024-336\" | \"skein1024-344\" | \"skein1024-352\" | \"skein1024-360\" | \"skein1024-368\" | \"skein1024-376\" | \"skein1024-384\" | \"skein1024-392\" | \"skein1024-400\" | \"skein1024-408\" | \"skein1024-416\" | \"skein1024-424\" | \"skein1024-432\" | \"skein1024-440\" | \"skein1024-448\" | \"skein1024-456\" | \"skein1024-464\" | \"skein1024-472\" | \"skein1024-480\" | \"skein1024-488\" | \"skein1024-496\" | \"skein1024-504\" | \"skein1024-512\" | \"skein1024-520\" | \"skein1024-528\" | \"skein1024-536\" | \"skein1024-544\" | \"skein1024-552\" | \"skein1024-560\" | \"skein1024-568\" | \"skein1024-576\" | \"skein1024-584\" | \"skein1024-592\" | \"skein1024-600\" | \"skein1024-608\" | \"skein1024-616\" | \"skein1024-624\" | \"skein1024-632\" | \"skein1024-640\" | \"skein1024-648\" | \"skein1024-656\" | \"skein1024-664\" | \"skein1024-672\" | \"skein1024-680\" | \"skein1024-688\" | \"skein1024-696\" | \"skein1024-704\" | \"skein1024-712\" | \"skein1024-720\" | \"skein1024-728\" | \"skein1024-736\" | \"skein1024-744\" | \"skein1024-752\" | \"skein1024-760\" | \"skein1024-768\" | \"skein1024-776\" | \"skein1024-784\" | \"skein1024-792\" | \"skein1024-800\" | \"skein1024-808\" | \"skein1024-816\" | \"skein1024-824\" | \"skein1024-832\" | \"skein1024-840\" | \"skein1024-848\" | \"skein1024-856\" | \"skein1024-864\" | \"skein1024-872\" | \"skein1024-880\" | \"skein1024-888\" | \"skein1024-896\" | \"skein1024-904\" | \"skein1024-912\" | \"skein1024-920\" | \"skein1024-928\" | \"skein1024-936\" | \"skein1024-944\" | \"skein1024-952\" | \"skein1024-960\" | \"skein1024-968\" | \"skein1024-976\" | \"skein1024-984\" | \"skein1024-992\" | \"skein1024-1000\" | \"skein1024-1008\" | \"skein1024-1016\" | \"skein1024-1024\" | \"poseidon-bls12_381-a2-fc1\" | \"poseidon-bls12_381-a2-fc1-sc\" } HashName\n */\n/**\n * Codes for all available hashes\n *\n * @typedef { 0x00 | 0x11 | 0x12 | 0x13 | 0x14 | 0x15 | 0x16 | 0x17 | 0x18 | 0x19 | 0x1a | 0x1b | 0x1c | 0x1d | 0x1e | 0x22 | 0x23 | 0x56 | 0xd4 | 0xd5 | 0xd6 | 0x1012 | 0x1052 | 0x1053 | 0x1054 | 0x1055 | 0x1100 | 0x1d01 | 0x534d | 0xb201 | 0xb202 | 0xb203 | 0xb204 | 0xb205 | 0xb206 | 0xb207 | 0xb208 | 0xb209 | 0xb20a | 0xb20b | 0xb20c | 0xb20d | 0xb20e | 0xb20f | 0xb210 | 0xb211 | 0xb212 | 0xb213 | 0xb214 | 0xb215 | 0xb216 | 0xb217 | 0xb218 | 0xb219 | 0xb21a | 0xb21b | 0xb21c | 0xb21d | 0xb21e | 0xb21f | 0xb220 | 0xb221 | 0xb222 | 0xb223 | 0xb224 | 0xb225 | 0xb226 | 0xb227 | 0xb228 | 0xb229 | 0xb22a | 0xb22b | 0xb22c | 0xb22d | 0xb22e | 0xb22f | 0xb230 | 0xb231 | 0xb232 | 0xb233 | 0xb234 | 0xb235 | 0xb236 | 0xb237 | 0xb238 | 0xb239 | 0xb23a | 0xb23b | 0xb23c | 0xb23d | 0xb23e | 0xb23f | 0xb240 | 0xb241 | 0xb242 | 0xb243 | 0xb244 | 0xb245 | 0xb246 | 0xb247 | 0xb248 | 0xb249 | 0xb24a | 0xb24b | 0xb24c | 0xb24d | 0xb24e | 0xb24f | 0xb250 | 0xb251 | 0xb252 | 0xb253 | 0xb254 | 0xb255 | 0xb256 | 0xb257 | 0xb258 | 0xb259 | 0xb25a | 0xb25b | 0xb25c | 0xb25d | 0xb25e | 0xb25f | 0xb260 | 0xb301 | 0xb302 | 0xb303 | 0xb304 | 0xb305 | 0xb306 | 0xb307 | 0xb308 | 0xb309 | 0xb30a | 0xb30b | 0xb30c | 0xb30d | 0xb30e | 0xb30f | 0xb310 | 0xb311 | 0xb312 | 0xb313 | 0xb314 | 0xb315 | 0xb316 | 0xb317 | 0xb318 | 0xb319 | 0xb31a | 0xb31b | 0xb31c | 0xb31d | 0xb31e | 0xb31f | 0xb320 | 0xb321 | 0xb322 | 0xb323 | 0xb324 | 0xb325 | 0xb326 | 0xb327 | 0xb328 | 0xb329 | 0xb32a | 0xb32b | 0xb32c | 0xb32d | 0xb32e | 0xb32f | 0xb330 | 0xb331 | 0xb332 | 0xb333 | 0xb334 | 0xb335 | 0xb336 | 0xb337 | 0xb338 | 0xb339 | 0xb33a | 0xb33b | 0xb33c | 0xb33d | 0xb33e | 0xb33f | 0xb340 | 0xb341 | 0xb342 | 0xb343 | 0xb344 | 0xb345 | 0xb346 | 0xb347 | 0xb348 | 0xb349 | 0xb34a | 0xb34b | 0xb34c | 0xb34d | 0xb34e | 0xb34f | 0xb350 | 0xb351 | 0xb352 | 0xb353 | 0xb354 | 0xb355 | 0xb356 | 0xb357 | 0xb358 | 0xb359 | 0xb35a | 0xb35b | 0xb35c | 0xb35d | 0xb35e | 0xb35f | 0xb360 | 0xb361 | 0xb362 | 0xb363 | 0xb364 | 0xb365 | 0xb366 | 0xb367 | 0xb368 | 0xb369 | 0xb36a | 0xb36b | 0xb36c | 0xb36d | 0xb36e | 0xb36f | 0xb370 | 0xb371 | 0xb372 | 0xb373 | 0xb374 | 0xb375 | 0xb376 | 0xb377 | 0xb378 | 0xb379 | 0xb37a | 0xb37b | 0xb37c | 0xb37d | 0xb37e | 0xb37f | 0xb380 | 0xb381 | 0xb382 | 0xb383 | 0xb384 | 0xb385 | 0xb386 | 0xb387 | 0xb388 | 0xb389 | 0xb38a | 0xb38b | 0xb38c | 0xb38d | 0xb38e | 0xb38f | 0xb390 | 0xb391 | 0xb392 | 0xb393 | 0xb394 | 0xb395 | 0xb396 | 0xb397 | 0xb398 | 0xb399 | 0xb39a | 0xb39b | 0xb39c | 0xb39d | 0xb39e | 0xb39f | 0xb3a0 | 0xb3a1 | 0xb3a2 | 0xb3a3 | 0xb3a4 | 0xb3a5 | 0xb3a6 | 0xb3a7 | 0xb3a8 | 0xb3a9 | 0xb3aa | 0xb3ab | 0xb3ac | 0xb3ad | 0xb3ae | 0xb3af | 0xb3b0 | 0xb3b1 | 0xb3b2 | 0xb3b3 | 0xb3b4 | 0xb3b5 | 0xb3b6 | 0xb3b7 | 0xb3b8 | 0xb3b9 | 0xb3ba | 0xb3bb | 0xb3bc | 0xb3bd | 0xb3be | 0xb3bf | 0xb3c0 | 0xb3c1 | 0xb3c2 | 0xb3c3 | 0xb3c4 | 0xb3c5 | 0xb3c6 | 0xb3c7 | 0xb3c8 | 0xb3c9 | 0xb3ca | 0xb3cb | 0xb3cc | 0xb3cd | 0xb3ce | 0xb3cf | 0xb3d0 | 0xb3d1 | 0xb3d2 | 0xb3d3 | 0xb3d4 | 0xb3d5 | 0xb3d6 | 0xb3d7 | 0xb3d8 | 0xb3d9 | 0xb3da | 0xb3db | 0xb3dc | 0xb3dd | 0xb3de | 0xb3df | 0xb3e0 | 0xb401 | 0xb402 } HashCode\n */\n\n/**\n * @type { Record<HashName,HashCode> }\n */\nconst names = Object.freeze({\n  'identity': 0x00,\n  'sha1': 0x11,\n  'sha2-256': 0x12,\n  'sha2-512': 0x13,\n  'sha3-512': 0x14,\n  'sha3-384': 0x15,\n  'sha3-256': 0x16,\n  'sha3-224': 0x17,\n  'shake-128': 0x18,\n  'shake-256': 0x19,\n  'keccak-224': 0x1a,\n  'keccak-256': 0x1b,\n  'keccak-384': 0x1c,\n  'keccak-512': 0x1d,\n  'blake3': 0x1e,\n  'murmur3-128': 0x22,\n  'murmur3-32': 0x23,\n  'dbl-sha2-256': 0x56,\n  'md4': 0xd4,\n  'md5': 0xd5,\n  'bmt': 0xd6,\n  'sha2-256-trunc254-padded': 0x1012,\n  'ripemd-128': 0x1052,\n  'ripemd-160': 0x1053,\n  'ripemd-256': 0x1054,\n  'ripemd-320': 0x1055,\n  'x11': 0x1100,\n  'kangarootwelve': 0x1d01,\n  'sm3-256': 0x534d,\n  'blake2b-8': 0xb201,\n  'blake2b-16': 0xb202,\n  'blake2b-24': 0xb203,\n  'blake2b-32': 0xb204,\n  'blake2b-40': 0xb205,\n  'blake2b-48': 0xb206,\n  'blake2b-56': 0xb207,\n  'blake2b-64': 0xb208,\n  'blake2b-72': 0xb209,\n  'blake2b-80': 0xb20a,\n  'blake2b-88': 0xb20b,\n  'blake2b-96': 0xb20c,\n  'blake2b-104': 0xb20d,\n  'blake2b-112': 0xb20e,\n  'blake2b-120': 0xb20f,\n  'blake2b-128': 0xb210,\n  'blake2b-136': 0xb211,\n  'blake2b-144': 0xb212,\n  'blake2b-152': 0xb213,\n  'blake2b-160': 0xb214,\n  'blake2b-168': 0xb215,\n  'blake2b-176': 0xb216,\n  'blake2b-184': 0xb217,\n  'blake2b-192': 0xb218,\n  'blake2b-200': 0xb219,\n  'blake2b-208': 0xb21a,\n  'blake2b-216': 0xb21b,\n  'blake2b-224': 0xb21c,\n  'blake2b-232': 0xb21d,\n  'blake2b-240': 0xb21e,\n  'blake2b-248': 0xb21f,\n  'blake2b-256': 0xb220,\n  'blake2b-264': 0xb221,\n  'blake2b-272': 0xb222,\n  'blake2b-280': 0xb223,\n  'blake2b-288': 0xb224,\n  'blake2b-296': 0xb225,\n  'blake2b-304': 0xb226,\n  'blake2b-312': 0xb227,\n  'blake2b-320': 0xb228,\n  'blake2b-328': 0xb229,\n  'blake2b-336': 0xb22a,\n  'blake2b-344': 0xb22b,\n  'blake2b-352': 0xb22c,\n  'blake2b-360': 0xb22d,\n  'blake2b-368': 0xb22e,\n  'blake2b-376': 0xb22f,\n  'blake2b-384': 0xb230,\n  'blake2b-392': 0xb231,\n  'blake2b-400': 0xb232,\n  'blake2b-408': 0xb233,\n  'blake2b-416': 0xb234,\n  'blake2b-424': 0xb235,\n  'blake2b-432': 0xb236,\n  'blake2b-440': 0xb237,\n  'blake2b-448': 0xb238,\n  'blake2b-456': 0xb239,\n  'blake2b-464': 0xb23a,\n  'blake2b-472': 0xb23b,\n  'blake2b-480': 0xb23c,\n  'blake2b-488': 0xb23d,\n  'blake2b-496': 0xb23e,\n  'blake2b-504': 0xb23f,\n  'blake2b-512': 0xb240,\n  'blake2s-8': 0xb241,\n  'blake2s-16': 0xb242,\n  'blake2s-24': 0xb243,\n  'blake2s-32': 0xb244,\n  'blake2s-40': 0xb245,\n  'blake2s-48': 0xb246,\n  'blake2s-56': 0xb247,\n  'blake2s-64': 0xb248,\n  'blake2s-72': 0xb249,\n  'blake2s-80': 0xb24a,\n  'blake2s-88': 0xb24b,\n  'blake2s-96': 0xb24c,\n  'blake2s-104': 0xb24d,\n  'blake2s-112': 0xb24e,\n  'blake2s-120': 0xb24f,\n  'blake2s-128': 0xb250,\n  'blake2s-136': 0xb251,\n  'blake2s-144': 0xb252,\n  'blake2s-152': 0xb253,\n  'blake2s-160': 0xb254,\n  'blake2s-168': 0xb255,\n  'blake2s-176': 0xb256,\n  'blake2s-184': 0xb257,\n  'blake2s-192': 0xb258,\n  'blake2s-200': 0xb259,\n  'blake2s-208': 0xb25a,\n  'blake2s-216': 0xb25b,\n  'blake2s-224': 0xb25c,\n  'blake2s-232': 0xb25d,\n  'blake2s-240': 0xb25e,\n  'blake2s-248': 0xb25f,\n  'blake2s-256': 0xb260,\n  'skein256-8': 0xb301,\n  'skein256-16': 0xb302,\n  'skein256-24': 0xb303,\n  'skein256-32': 0xb304,\n  'skein256-40': 0xb305,\n  'skein256-48': 0xb306,\n  'skein256-56': 0xb307,\n  'skein256-64': 0xb308,\n  'skein256-72': 0xb309,\n  'skein256-80': 0xb30a,\n  'skein256-88': 0xb30b,\n  'skein256-96': 0xb30c,\n  'skein256-104': 0xb30d,\n  'skein256-112': 0xb30e,\n  'skein256-120': 0xb30f,\n  'skein256-128': 0xb310,\n  'skein256-136': 0xb311,\n  'skein256-144': 0xb312,\n  'skein256-152': 0xb313,\n  'skein256-160': 0xb314,\n  'skein256-168': 0xb315,\n  'skein256-176': 0xb316,\n  'skein256-184': 0xb317,\n  'skein256-192': 0xb318,\n  'skein256-200': 0xb319,\n  'skein256-208': 0xb31a,\n  'skein256-216': 0xb31b,\n  'skein256-224': 0xb31c,\n  'skein256-232': 0xb31d,\n  'skein256-240': 0xb31e,\n  'skein256-248': 0xb31f,\n  'skein256-256': 0xb320,\n  'skein512-8': 0xb321,\n  'skein512-16': 0xb322,\n  'skein512-24': 0xb323,\n  'skein512-32': 0xb324,\n  'skein512-40': 0xb325,\n  'skein512-48': 0xb326,\n  'skein512-56': 0xb327,\n  'skein512-64': 0xb328,\n  'skein512-72': 0xb329,\n  'skein512-80': 0xb32a,\n  'skein512-88': 0xb32b,\n  'skein512-96': 0xb32c,\n  'skein512-104': 0xb32d,\n  'skein512-112': 0xb32e,\n  'skein512-120': 0xb32f,\n  'skein512-128': 0xb330,\n  'skein512-136': 0xb331,\n  'skein512-144': 0xb332,\n  'skein512-152': 0xb333,\n  'skein512-160': 0xb334,\n  'skein512-168': 0xb335,\n  'skein512-176': 0xb336,\n  'skein512-184': 0xb337,\n  'skein512-192': 0xb338,\n  'skein512-200': 0xb339,\n  'skein512-208': 0xb33a,\n  'skein512-216': 0xb33b,\n  'skein512-224': 0xb33c,\n  'skein512-232': 0xb33d,\n  'skein512-240': 0xb33e,\n  'skein512-248': 0xb33f,\n  'skein512-256': 0xb340,\n  'skein512-264': 0xb341,\n  'skein512-272': 0xb342,\n  'skein512-280': 0xb343,\n  'skein512-288': 0xb344,\n  'skein512-296': 0xb345,\n  'skein512-304': 0xb346,\n  'skein512-312': 0xb347,\n  'skein512-320': 0xb348,\n  'skein512-328': 0xb349,\n  'skein512-336': 0xb34a,\n  'skein512-344': 0xb34b,\n  'skein512-352': 0xb34c,\n  'skein512-360': 0xb34d,\n  'skein512-368': 0xb34e,\n  'skein512-376': 0xb34f,\n  'skein512-384': 0xb350,\n  'skein512-392': 0xb351,\n  'skein512-400': 0xb352,\n  'skein512-408': 0xb353,\n  'skein512-416': 0xb354,\n  'skein512-424': 0xb355,\n  'skein512-432': 0xb356,\n  'skein512-440': 0xb357,\n  'skein512-448': 0xb358,\n  'skein512-456': 0xb359,\n  'skein512-464': 0xb35a,\n  'skein512-472': 0xb35b,\n  'skein512-480': 0xb35c,\n  'skein512-488': 0xb35d,\n  'skein512-496': 0xb35e,\n  'skein512-504': 0xb35f,\n  'skein512-512': 0xb360,\n  'skein1024-8': 0xb361,\n  'skein1024-16': 0xb362,\n  'skein1024-24': 0xb363,\n  'skein1024-32': 0xb364,\n  'skein1024-40': 0xb365,\n  'skein1024-48': 0xb366,\n  'skein1024-56': 0xb367,\n  'skein1024-64': 0xb368,\n  'skein1024-72': 0xb369,\n  'skein1024-80': 0xb36a,\n  'skein1024-88': 0xb36b,\n  'skein1024-96': 0xb36c,\n  'skein1024-104': 0xb36d,\n  'skein1024-112': 0xb36e,\n  'skein1024-120': 0xb36f,\n  'skein1024-128': 0xb370,\n  'skein1024-136': 0xb371,\n  'skein1024-144': 0xb372,\n  'skein1024-152': 0xb373,\n  'skein1024-160': 0xb374,\n  'skein1024-168': 0xb375,\n  'skein1024-176': 0xb376,\n  'skein1024-184': 0xb377,\n  'skein1024-192': 0xb378,\n  'skein1024-200': 0xb379,\n  'skein1024-208': 0xb37a,\n  'skein1024-216': 0xb37b,\n  'skein1024-224': 0xb37c,\n  'skein1024-232': 0xb37d,\n  'skein1024-240': 0xb37e,\n  'skein1024-248': 0xb37f,\n  'skein1024-256': 0xb380,\n  'skein1024-264': 0xb381,\n  'skein1024-272': 0xb382,\n  'skein1024-280': 0xb383,\n  'skein1024-288': 0xb384,\n  'skein1024-296': 0xb385,\n  'skein1024-304': 0xb386,\n  'skein1024-312': 0xb387,\n  'skein1024-320': 0xb388,\n  'skein1024-328': 0xb389,\n  'skein1024-336': 0xb38a,\n  'skein1024-344': 0xb38b,\n  'skein1024-352': 0xb38c,\n  'skein1024-360': 0xb38d,\n  'skein1024-368': 0xb38e,\n  'skein1024-376': 0xb38f,\n  'skein1024-384': 0xb390,\n  'skein1024-392': 0xb391,\n  'skein1024-400': 0xb392,\n  'skein1024-408': 0xb393,\n  'skein1024-416': 0xb394,\n  'skein1024-424': 0xb395,\n  'skein1024-432': 0xb396,\n  'skein1024-440': 0xb397,\n  'skein1024-448': 0xb398,\n  'skein1024-456': 0xb399,\n  'skein1024-464': 0xb39a,\n  'skein1024-472': 0xb39b,\n  'skein1024-480': 0xb39c,\n  'skein1024-488': 0xb39d,\n  'skein1024-496': 0xb39e,\n  'skein1024-504': 0xb39f,\n  'skein1024-512': 0xb3a0,\n  'skein1024-520': 0xb3a1,\n  'skein1024-528': 0xb3a2,\n  'skein1024-536': 0xb3a3,\n  'skein1024-544': 0xb3a4,\n  'skein1024-552': 0xb3a5,\n  'skein1024-560': 0xb3a6,\n  'skein1024-568': 0xb3a7,\n  'skein1024-576': 0xb3a8,\n  'skein1024-584': 0xb3a9,\n  'skein1024-592': 0xb3aa,\n  'skein1024-600': 0xb3ab,\n  'skein1024-608': 0xb3ac,\n  'skein1024-616': 0xb3ad,\n  'skein1024-624': 0xb3ae,\n  'skein1024-632': 0xb3af,\n  'skein1024-640': 0xb3b0,\n  'skein1024-648': 0xb3b1,\n  'skein1024-656': 0xb3b2,\n  'skein1024-664': 0xb3b3,\n  'skein1024-672': 0xb3b4,\n  'skein1024-680': 0xb3b5,\n  'skein1024-688': 0xb3b6,\n  'skein1024-696': 0xb3b7,\n  'skein1024-704': 0xb3b8,\n  'skein1024-712': 0xb3b9,\n  'skein1024-720': 0xb3ba,\n  'skein1024-728': 0xb3bb,\n  'skein1024-736': 0xb3bc,\n  'skein1024-744': 0xb3bd,\n  'skein1024-752': 0xb3be,\n  'skein1024-760': 0xb3bf,\n  'skein1024-768': 0xb3c0,\n  'skein1024-776': 0xb3c1,\n  'skein1024-784': 0xb3c2,\n  'skein1024-792': 0xb3c3,\n  'skein1024-800': 0xb3c4,\n  'skein1024-808': 0xb3c5,\n  'skein1024-816': 0xb3c6,\n  'skein1024-824': 0xb3c7,\n  'skein1024-832': 0xb3c8,\n  'skein1024-840': 0xb3c9,\n  'skein1024-848': 0xb3ca,\n  'skein1024-856': 0xb3cb,\n  'skein1024-864': 0xb3cc,\n  'skein1024-872': 0xb3cd,\n  'skein1024-880': 0xb3ce,\n  'skein1024-888': 0xb3cf,\n  'skein1024-896': 0xb3d0,\n  'skein1024-904': 0xb3d1,\n  'skein1024-912': 0xb3d2,\n  'skein1024-920': 0xb3d3,\n  'skein1024-928': 0xb3d4,\n  'skein1024-936': 0xb3d5,\n  'skein1024-944': 0xb3d6,\n  'skein1024-952': 0xb3d7,\n  'skein1024-960': 0xb3d8,\n  'skein1024-968': 0xb3d9,\n  'skein1024-976': 0xb3da,\n  'skein1024-984': 0xb3db,\n  'skein1024-992': 0xb3dc,\n  'skein1024-1000': 0xb3dd,\n  'skein1024-1008': 0xb3de,\n  'skein1024-1016': 0xb3df,\n  'skein1024-1024': 0xb3e0,\n  'poseidon-bls12_381-a2-fc1': 0xb401,\n  'poseidon-bls12_381-a2-fc1-sc': 0xb402\n})\n\nmodule.exports = { names }\n\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/src/constants.js?");

/***/ }),

/***/ "./node_modules/multihashes/src/index.js":
/*!***********************************************!*\
  !*** ./node_modules/multihashes/src/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Multihash implementation in JavaScript.\n */\n\n\nconst multibase = __webpack_require__(/*! multibase */ \"./node_modules/multibase/src/index.js\")\nconst varint = __webpack_require__(/*! varint */ \"./node_modules/multihashes/node_modules/varint/index.js\")\nconst { names } = __webpack_require__(/*! ./constants */ \"./node_modules/multihashes/src/constants.js\")\nconst { toString: uint8ArrayToString } = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/multihashes/node_modules/uint8arrays/esm/src/to-string.js\")\nconst { fromString: uint8ArrayFromString } = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/multihashes/node_modules/uint8arrays/esm/src/from-string.js\")\nconst { concat: uint8ArrayConcat } = __webpack_require__(/*! uint8arrays/concat */ \"./node_modules/multihashes/node_modules/uint8arrays/esm/src/concat.js\")\n\nconst codes = /** @type {import('./types').CodeNameMap} */({})\n\n// eslint-disable-next-line guard-for-in\nfor (const key in names) {\n  const name = /** @type {HashName} */(key)\n  codes[names[name]] = name\n}\nObject.freeze(codes)\n\n/**\n * Convert the given multihash to a hex encoded string.\n *\n * @param {Uint8Array} hash\n * @returns {string}\n */\nfunction toHexString (hash) {\n  if (!(hash instanceof Uint8Array)) {\n    throw new Error('must be passed a Uint8Array')\n  }\n\n  return uint8ArrayToString(hash, 'base16')\n}\n\n/**\n * Convert the given hex encoded string to a multihash.\n *\n * @param {string} hash\n * @returns {Uint8Array}\n */\nfunction fromHexString (hash) {\n  return uint8ArrayFromString(hash, 'base16')\n}\n\n/**\n * Convert the given multihash to a base58 encoded string.\n *\n * @param {Uint8Array} hash\n * @returns {string}\n */\nfunction toB58String (hash) {\n  if (!(hash instanceof Uint8Array)) {\n    throw new Error('must be passed a Uint8Array')\n  }\n\n  return uint8ArrayToString(multibase.encode('base58btc', hash)).slice(1)\n}\n\n/**\n * Convert the given base58 encoded string to a multihash.\n *\n * @param {string|Uint8Array} hash\n * @returns {Uint8Array}\n */\nfunction fromB58String (hash) {\n  const encoded = hash instanceof Uint8Array\n    ? uint8ArrayToString(hash)\n    : hash\n\n  return multibase.decode('z' + encoded)\n}\n\n/**\n * Decode a hash from the given multihash.\n *\n * @param {Uint8Array} bytes\n * @returns {{code: HashCode, name: HashName, length: number, digest: Uint8Array}} result\n */\nfunction decode (bytes) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new Error('multihash must be a Uint8Array')\n  }\n\n  if (bytes.length < 2) {\n    throw new Error('multihash too short. must be > 2 bytes.')\n  }\n\n  const code = /** @type {HashCode} */(varint.decode(bytes))\n  if (!isValidCode(code)) {\n    throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)\n  }\n  bytes = bytes.slice(varint.decode.bytes)\n\n  const len = varint.decode(bytes)\n  if (len < 0) {\n    throw new Error(`multihash invalid length: ${len}`)\n  }\n  bytes = bytes.slice(varint.decode.bytes)\n\n  if (bytes.length !== len) {\n    throw new Error(`multihash length inconsistent: 0x${uint8ArrayToString(bytes, 'base16')}`)\n  }\n\n  return {\n    code,\n    name: codes[code],\n    length: len,\n    digest: bytes\n  }\n}\n\n/**\n * Encode a hash digest along with the specified function code.\n *\n * > **Note:** the length is derived from the length of the digest itself.\n *\n * @param {Uint8Array} digest\n * @param {HashName | HashCode} code\n * @param {number} [length]\n * @returns {Uint8Array}\n */\nfunction encode (digest, code, length) {\n  if (!digest || code === undefined) {\n    throw new Error('multihash encode requires at least two args: digest, code')\n  }\n\n  // ensure it's a hashfunction code.\n  const hashfn = coerceCode(code)\n\n  if (!(digest instanceof Uint8Array)) {\n    throw new Error('digest should be a Uint8Array')\n  }\n\n  if (length == null) {\n    length = digest.length\n  }\n\n  if (length && digest.length !== length) {\n    throw new Error('digest length should be equal to specified length.')\n  }\n\n  const hash = varint.encode(hashfn)\n  const len = varint.encode(length)\n  return uint8ArrayConcat([hash, len, digest], hash.length + len.length + digest.length)\n}\n\n/**\n * Converts a hash function name into the matching code.\n * If passed a number it will return the number if it's a valid code.\n *\n * @param {HashName | number} name\n * @returns {number}\n */\nfunction coerceCode (name) {\n  let code = name\n\n  if (typeof name === 'string') {\n    if (names[name] === undefined) {\n      throw new Error(`Unrecognized hash function named: ${name}`)\n    }\n    code = names[name]\n  }\n\n  if (typeof code !== 'number') {\n    throw new Error(`Hash function code should be a number. Got: ${code}`)\n  }\n\n  // @ts-ignore\n  if (codes[code] === undefined && !isAppCode(code)) {\n    throw new Error(`Unrecognized function code: ${code}`)\n  }\n\n  return code\n}\n\n/**\n * Checks if a code is part of the app range\n *\n * @param {number} code\n * @returns {boolean}\n */\nfunction isAppCode (code) {\n  return code > 0 && code < 0x10\n}\n\n/**\n * Checks whether a multihash code is valid.\n *\n * @param {HashCode} code\n * @returns {boolean}\n */\nfunction isValidCode (code) {\n  if (isAppCode(code)) {\n    return true\n  }\n\n  if (codes[code]) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check if the given buffer is a valid multihash. Throws an error if it is not valid.\n *\n * @param {Uint8Array} multihash\n * @returns {void}\n * @throws {Error}\n */\nfunction validate (multihash) {\n  decode(multihash) // throws if bad.\n}\n\n/**\n * Returns a prefix from a valid multihash. Throws an error if it is not valid.\n *\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n * @throws {Error}\n */\nfunction prefix (multihash) {\n  validate(multihash)\n\n  return multihash.subarray(0, 2)\n}\n\nmodule.exports = {\n  names,\n  codes,\n  toHexString,\n  fromHexString,\n  toB58String,\n  fromB58String,\n  decode,\n  encode,\n  coerceCode,\n  isAppCode,\n  validate,\n  prefix,\n  isValidCode\n}\n\n/**\n * @typedef { import(\"./constants\").HashCode } HashCode\n * @typedef { import(\"./constants\").HashName } HashName\n */\n\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/src/index.js?");

/***/ }),

/***/ "./node_modules/netmask/lib/netmask.js":
/*!*********************************************!*\
  !*** ./node_modules/netmask/lib/netmask.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("// Generated by CoffeeScript 1.12.7\n(function() {\n  var Netmask, atob, chr, chr0, chrA, chra, ip2long, long2ip;\n\n  long2ip = function(long) {\n    var a, b, c, d;\n    a = (long & (0xff << 24)) >>> 24;\n    b = (long & (0xff << 16)) >>> 16;\n    c = (long & (0xff << 8)) >>> 8;\n    d = long & 0xff;\n    return [a, b, c, d].join('.');\n  };\n\n  ip2long = function(ip) {\n    var b, c, i, j, n, ref;\n    b = [];\n    for (i = j = 0; j <= 3; i = ++j) {\n      if (ip.length === 0) {\n        break;\n      }\n      if (i > 0) {\n        if (ip[0] !== '.') {\n          throw new Error('Invalid IP');\n        }\n        ip = ip.substring(1);\n      }\n      ref = atob(ip), n = ref[0], c = ref[1];\n      ip = ip.substring(c);\n      b.push(n);\n    }\n    if (ip.length !== 0) {\n      throw new Error('Invalid IP');\n    }\n    switch (b.length) {\n      case 1:\n        if (b[0] > 0xFFFFFFFF) {\n          throw new Error('Invalid IP');\n        }\n        return b[0] >>> 0;\n      case 2:\n        if (b[0] > 0xFF || b[1] > 0xFFFFFF) {\n          throw new Error('Invalid IP');\n        }\n        return (b[0] << 24 | b[1]) >>> 0;\n      case 3:\n        if (b[0] > 0xFF || b[1] > 0xFF || b[2] > 0xFFFF) {\n          throw new Error('Invalid IP');\n        }\n        return (b[0] << 24 | b[1] << 16 | b[2]) >>> 0;\n      case 4:\n        if (b[0] > 0xFF || b[1] > 0xFF || b[2] > 0xFF || b[3] > 0xFF) {\n          throw new Error('Invalid IP');\n        }\n        return (b[0] << 24 | b[1] << 16 | b[2] << 8 | b[3]) >>> 0;\n      default:\n        throw new Error('Invalid IP');\n    }\n  };\n\n  chr = function(b) {\n    return b.charCodeAt(0);\n  };\n\n  chr0 = chr('0');\n\n  chra = chr('a');\n\n  chrA = chr('A');\n\n  atob = function(s) {\n    var base, dmax, i, n, start;\n    n = 0;\n    base = 10;\n    dmax = '9';\n    i = 0;\n    if (s.length > 1 && s[i] === '0') {\n      if (s[i + 1] === 'x' || s[i + 1] === 'X') {\n        i += 2;\n        base = 16;\n      } else if ('0' <= s[i + 1] && s[i + 1] <= '9') {\n        i++;\n        base = 8;\n        dmax = '7';\n      }\n    }\n    start = i;\n    while (i < s.length) {\n      if ('0' <= s[i] && s[i] <= dmax) {\n        n = (n * base + (chr(s[i]) - chr0)) >>> 0;\n      } else if (base === 16) {\n        if ('a' <= s[i] && s[i] <= 'f') {\n          n = (n * base + (10 + chr(s[i]) - chra)) >>> 0;\n        } else if ('A' <= s[i] && s[i] <= 'F') {\n          n = (n * base + (10 + chr(s[i]) - chrA)) >>> 0;\n        } else {\n          break;\n        }\n      } else {\n        break;\n      }\n      if (n > 0xFFFFFFFF) {\n        throw new Error('too large');\n      }\n      i++;\n    }\n    if (i === start) {\n      throw new Error('empty octet');\n    }\n    return [n, i];\n  };\n\n  Netmask = (function() {\n    function Netmask(net, mask) {\n      var error, i, j, ref;\n      if (typeof net !== 'string') {\n        throw new Error(\"Missing `net' parameter\");\n      }\n      if (!mask) {\n        ref = net.split('/', 2), net = ref[0], mask = ref[1];\n      }\n      if (!mask) {\n        mask = 32;\n      }\n      if (typeof mask === 'string' && mask.indexOf('.') > -1) {\n        try {\n          this.maskLong = ip2long(mask);\n        } catch (error1) {\n          error = error1;\n          throw new Error(\"Invalid mask: \" + mask);\n        }\n        for (i = j = 32; j >= 0; i = --j) {\n          if (this.maskLong === (0xffffffff << (32 - i)) >>> 0) {\n            this.bitmask = i;\n            break;\n          }\n        }\n      } else if (mask || mask === 0) {\n        this.bitmask = parseInt(mask, 10);\n        this.maskLong = 0;\n        if (this.bitmask > 0) {\n          this.maskLong = (0xffffffff << (32 - this.bitmask)) >>> 0;\n        }\n      } else {\n        throw new Error(\"Invalid mask: empty\");\n      }\n      try {\n        this.netLong = (ip2long(net) & this.maskLong) >>> 0;\n      } catch (error1) {\n        error = error1;\n        throw new Error(\"Invalid net address: \" + net);\n      }\n      if (!(this.bitmask <= 32)) {\n        throw new Error(\"Invalid mask for ip4: \" + mask);\n      }\n      this.size = Math.pow(2, 32 - this.bitmask);\n      this.base = long2ip(this.netLong);\n      this.mask = long2ip(this.maskLong);\n      this.hostmask = long2ip(~this.maskLong);\n      this.first = this.bitmask <= 30 ? long2ip(this.netLong + 1) : this.base;\n      this.last = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 2) : long2ip(this.netLong + this.size - 1);\n      this.broadcast = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 1) : void 0;\n    }\n\n    Netmask.prototype.contains = function(ip) {\n      if (typeof ip === 'string' && (ip.indexOf('/') > 0 || ip.split('.').length !== 4)) {\n        ip = new Netmask(ip);\n      }\n      if (ip instanceof Netmask) {\n        return this.contains(ip.base) && this.contains(ip.broadcast || ip.last);\n      } else {\n        return (ip2long(ip) & this.maskLong) >>> 0 === (this.netLong & this.maskLong) >>> 0;\n      }\n    };\n\n    Netmask.prototype.next = function(count) {\n      if (count == null) {\n        count = 1;\n      }\n      return new Netmask(long2ip(this.netLong + (this.size * count)), this.mask);\n    };\n\n    Netmask.prototype.forEach = function(fn) {\n      var index, lastLong, long;\n      long = ip2long(this.first);\n      lastLong = ip2long(this.last);\n      index = 0;\n      while (long <= lastLong) {\n        fn(long2ip(long), long, index);\n        index++;\n        long++;\n      }\n    };\n\n    Netmask.prototype.toString = function() {\n      return this.base + \"/\" + this.bitmask;\n    };\n\n    return Netmask;\n\n  })();\n\n  exports.ip2long = ip2long;\n\n  exports.long2ip = long2ip;\n\n  exports.Netmask = Netmask;\n\n}).call(this);\n\n\n//# sourceURL=webpack://ems/./node_modules/netmask/lib/netmask.js?");

/***/ }),

/***/ "./node_modules/pvtsutils/build/index.js":
/*!***********************************************!*\
  !*** ./node_modules/pvtsutils/build/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*!\n * MIT License\n * \n * Copyright (c) 2017-2022 Peculiar Ventures, LLC\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n */\n\n\n\nconst ARRAY_BUFFER_NAME = \"[object ArrayBuffer]\";\nclass BufferSourceConverter {\n    static isArrayBuffer(data) {\n        return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;\n    }\n    static toArrayBuffer(data) {\n        if (this.isArrayBuffer(data)) {\n            return data;\n        }\n        if (data.byteLength === data.buffer.byteLength) {\n            return data.buffer;\n        }\n        if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {\n            return data.buffer;\n        }\n        return this.toUint8Array(data.buffer)\n            .slice(data.byteOffset, data.byteOffset + data.byteLength)\n            .buffer;\n    }\n    static toUint8Array(data) {\n        return this.toView(data, Uint8Array);\n    }\n    static toView(data, type) {\n        if (data.constructor === type) {\n            return data;\n        }\n        if (this.isArrayBuffer(data)) {\n            return new type(data);\n        }\n        if (this.isArrayBufferView(data)) {\n            return new type(data.buffer, data.byteOffset, data.byteLength);\n        }\n        throw new TypeError(\"The provided value is not of type '(ArrayBuffer or ArrayBufferView)'\");\n    }\n    static isBufferSource(data) {\n        return this.isArrayBufferView(data)\n            || this.isArrayBuffer(data);\n    }\n    static isArrayBufferView(data) {\n        return ArrayBuffer.isView(data)\n            || (data && this.isArrayBuffer(data.buffer));\n    }\n    static isEqual(a, b) {\n        const aView = BufferSourceConverter.toUint8Array(a);\n        const bView = BufferSourceConverter.toUint8Array(b);\n        if (aView.length !== bView.byteLength) {\n            return false;\n        }\n        for (let i = 0; i < aView.length; i++) {\n            if (aView[i] !== bView[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static concat(...args) {\n        let buffers;\n        if (Array.isArray(args[0]) && !(args[1] instanceof Function)) {\n            buffers = args[0];\n        }\n        else if (Array.isArray(args[0]) && args[1] instanceof Function) {\n            buffers = args[0];\n        }\n        else {\n            if (args[args.length - 1] instanceof Function) {\n                buffers = args.slice(0, args.length - 1);\n            }\n            else {\n                buffers = args;\n            }\n        }\n        let size = 0;\n        for (const buffer of buffers) {\n            size += buffer.byteLength;\n        }\n        const res = new Uint8Array(size);\n        let offset = 0;\n        for (const buffer of buffers) {\n            const view = this.toUint8Array(buffer);\n            res.set(view, offset);\n            offset += view.length;\n        }\n        if (args[args.length - 1] instanceof Function) {\n            return this.toView(res, args[args.length - 1]);\n        }\n        return res.buffer;\n    }\n}\n\nconst STRING_TYPE = \"string\";\nconst HEX_REGEX = /^[0-9a-f]+$/i;\nconst BASE64_REGEX = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;\nconst BASE64URL_REGEX = /^[a-zA-Z0-9-_]+$/;\nclass Utf8Converter {\n    static fromString(text) {\n        const s = unescape(encodeURIComponent(text));\n        const uintArray = new Uint8Array(s.length);\n        for (let i = 0; i < s.length; i++) {\n            uintArray[i] = s.charCodeAt(i);\n        }\n        return uintArray.buffer;\n    }\n    static toString(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let encodedString = \"\";\n        for (let i = 0; i < buf.length; i++) {\n            encodedString += String.fromCharCode(buf[i]);\n        }\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n}\nclass Utf16Converter {\n    static toString(buffer, littleEndian = false) {\n        const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);\n        const dataView = new DataView(arrayBuffer);\n        let res = \"\";\n        for (let i = 0; i < arrayBuffer.byteLength; i += 2) {\n            const code = dataView.getUint16(i, littleEndian);\n            res += String.fromCharCode(code);\n        }\n        return res;\n    }\n    static fromString(text, littleEndian = false) {\n        const res = new ArrayBuffer(text.length * 2);\n        const dataView = new DataView(res);\n        for (let i = 0; i < text.length; i++) {\n            dataView.setUint16(i * 2, text.charCodeAt(i), littleEndian);\n        }\n        return res;\n    }\n}\nclass Convert {\n    static isHex(data) {\n        return typeof data === STRING_TYPE\n            && HEX_REGEX.test(data);\n    }\n    static isBase64(data) {\n        return typeof data === STRING_TYPE\n            && BASE64_REGEX.test(data);\n    }\n    static isBase64Url(data) {\n        return typeof data === STRING_TYPE\n            && BASE64URL_REGEX.test(data);\n    }\n    static ToString(buffer, enc = \"utf8\") {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        switch (enc.toLowerCase()) {\n            case \"utf8\":\n                return this.ToUtf8String(buf);\n            case \"binary\":\n                return this.ToBinary(buf);\n            case \"hex\":\n                return this.ToHex(buf);\n            case \"base64\":\n                return this.ToBase64(buf);\n            case \"base64url\":\n                return this.ToBase64Url(buf);\n            case \"utf16le\":\n                return Utf16Converter.toString(buf, true);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.toString(buf);\n            default:\n                throw new Error(`Unknown type of encoding '${enc}'`);\n        }\n    }\n    static FromString(str, enc = \"utf8\") {\n        if (!str) {\n            return new ArrayBuffer(0);\n        }\n        switch (enc.toLowerCase()) {\n            case \"utf8\":\n                return this.FromUtf8String(str);\n            case \"binary\":\n                return this.FromBinary(str);\n            case \"hex\":\n                return this.FromHex(str);\n            case \"base64\":\n                return this.FromBase64(str);\n            case \"base64url\":\n                return this.FromBase64Url(str);\n            case \"utf16le\":\n                return Utf16Converter.fromString(str, true);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.fromString(str);\n            default:\n                throw new Error(`Unknown type of encoding '${enc}'`);\n        }\n    }\n    static ToBase64(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        if (typeof btoa !== \"undefined\") {\n            const binary = this.ToString(buf, \"binary\");\n            return btoa(binary);\n        }\n        else {\n            return Buffer.from(buf).toString(\"base64\");\n        }\n    }\n    static FromBase64(base64) {\n        const formatted = this.formatString(base64);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isBase64(formatted)) {\n            throw new TypeError(\"Argument 'base64Text' is not Base64 encoded\");\n        }\n        if (typeof atob !== \"undefined\") {\n            return this.FromBinary(atob(formatted));\n        }\n        else {\n            return new Uint8Array(Buffer.from(formatted, \"base64\")).buffer;\n        }\n    }\n    static FromBase64Url(base64url) {\n        const formatted = this.formatString(base64url);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isBase64Url(formatted)) {\n            throw new TypeError(\"Argument 'base64url' is not Base64Url encoded\");\n        }\n        return this.FromBase64(this.Base64Padding(formatted.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\")));\n    }\n    static ToBase64Url(data) {\n        return this.ToBase64(data).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=/g, \"\");\n    }\n    static FromUtf8String(text, encoding = Convert.DEFAULT_UTF8_ENCODING) {\n        switch (encoding) {\n            case \"ascii\":\n                return this.FromBinary(text);\n            case \"utf8\":\n                return Utf8Converter.fromString(text);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.fromString(text);\n            case \"utf16le\":\n            case \"usc2\":\n                return Utf16Converter.fromString(text, true);\n            default:\n                throw new Error(`Unknown type of encoding '${encoding}'`);\n        }\n    }\n    static ToUtf8String(buffer, encoding = Convert.DEFAULT_UTF8_ENCODING) {\n        switch (encoding) {\n            case \"ascii\":\n                return this.ToBinary(buffer);\n            case \"utf8\":\n                return Utf8Converter.toString(buffer);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.toString(buffer);\n            case \"utf16le\":\n            case \"usc2\":\n                return Utf16Converter.toString(buffer, true);\n            default:\n                throw new Error(`Unknown type of encoding '${encoding}'`);\n        }\n    }\n    static FromBinary(text) {\n        const stringLength = text.length;\n        const resultView = new Uint8Array(stringLength);\n        for (let i = 0; i < stringLength; i++) {\n            resultView[i] = text.charCodeAt(i);\n        }\n        return resultView.buffer;\n    }\n    static ToBinary(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let res = \"\";\n        for (let i = 0; i < buf.length; i++) {\n            res += String.fromCharCode(buf[i]);\n        }\n        return res;\n    }\n    static ToHex(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let result = \"\";\n        const len = buf.length;\n        for (let i = 0; i < len; i++) {\n            const byte = buf[i];\n            if (byte < 16) {\n                result += \"0\";\n            }\n            result += byte.toString(16);\n        }\n        return result;\n    }\n    static FromHex(hexString) {\n        let formatted = this.formatString(hexString);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isHex(formatted)) {\n            throw new TypeError(\"Argument 'hexString' is not HEX encoded\");\n        }\n        if (formatted.length % 2) {\n            formatted = `0${formatted}`;\n        }\n        const res = new Uint8Array(formatted.length / 2);\n        for (let i = 0; i < formatted.length; i = i + 2) {\n            const c = formatted.slice(i, i + 2);\n            res[i / 2] = parseInt(c, 16);\n        }\n        return res.buffer;\n    }\n    static ToUtf16String(buffer, littleEndian = false) {\n        return Utf16Converter.toString(buffer, littleEndian);\n    }\n    static FromUtf16String(text, littleEndian = false) {\n        return Utf16Converter.fromString(text, littleEndian);\n    }\n    static Base64Padding(base64) {\n        const padCount = 4 - (base64.length % 4);\n        if (padCount < 4) {\n            for (let i = 0; i < padCount; i++) {\n                base64 += \"=\";\n            }\n        }\n        return base64;\n    }\n    static formatString(data) {\n        return (data === null || data === void 0 ? void 0 : data.replace(/[\\n\\r\\t ]/g, \"\")) || \"\";\n    }\n}\nConvert.DEFAULT_UTF8_ENCODING = \"utf8\";\n\nfunction assign(target, ...sources) {\n    const res = arguments[0];\n    for (let i = 1; i < arguments.length; i++) {\n        const obj = arguments[i];\n        for (const prop in obj) {\n            res[prop] = obj[prop];\n        }\n    }\n    return res;\n}\nfunction combine(...buf) {\n    const totalByteLength = buf.map((item) => item.byteLength).reduce((prev, cur) => prev + cur);\n    const res = new Uint8Array(totalByteLength);\n    let currentPos = 0;\n    buf.map((item) => new Uint8Array(item)).forEach((arr) => {\n        for (const item2 of arr) {\n            res[currentPos++] = item2;\n        }\n    });\n    return res.buffer;\n}\nfunction isEqual(bytes1, bytes2) {\n    if (!(bytes1 && bytes2)) {\n        return false;\n    }\n    if (bytes1.byteLength !== bytes2.byteLength) {\n        return false;\n    }\n    const b1 = new Uint8Array(bytes1);\n    const b2 = new Uint8Array(bytes2);\n    for (let i = 0; i < bytes1.byteLength; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexports.BufferSourceConverter = BufferSourceConverter;\nexports.Convert = Convert;\nexports.assign = assign;\nexports.combine = combine;\nexports.isEqual = isEqual;\n\n\n//# sourceURL=webpack://ems/./node_modules/pvtsutils/build/index.js?");

/***/ }),

/***/ "./node_modules/pvutils/build/utils.es.js":
/*!************************************************!*\
  !*** ./node_modules/pvutils/build/utils.es.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayBufferToString: () => (/* binding */ arrayBufferToString),\n/* harmony export */   bufferToHexCodes: () => (/* binding */ bufferToHexCodes),\n/* harmony export */   checkBufferParams: () => (/* binding */ checkBufferParams),\n/* harmony export */   clearProps: () => (/* binding */ clearProps),\n/* harmony export */   fromBase64: () => (/* binding */ fromBase64),\n/* harmony export */   getParametersValue: () => (/* binding */ getParametersValue),\n/* harmony export */   getUTCDate: () => (/* binding */ getUTCDate),\n/* harmony export */   isEqualBuffer: () => (/* binding */ isEqualBuffer),\n/* harmony export */   nearestPowerOf2: () => (/* binding */ nearestPowerOf2),\n/* harmony export */   padNumber: () => (/* binding */ padNumber),\n/* harmony export */   stringToArrayBuffer: () => (/* binding */ stringToArrayBuffer),\n/* harmony export */   toBase64: () => (/* binding */ toBase64),\n/* harmony export */   utilConcatBuf: () => (/* binding */ utilConcatBuf),\n/* harmony export */   utilConcatView: () => (/* binding */ utilConcatView),\n/* harmony export */   utilDecodeTC: () => (/* binding */ utilDecodeTC),\n/* harmony export */   utilEncodeTC: () => (/* binding */ utilEncodeTC),\n/* harmony export */   utilFromBase: () => (/* binding */ utilFromBase),\n/* harmony export */   utilToBase: () => (/* binding */ utilToBase)\n/* harmony export */ });\n/*!\n Copyright (c) Peculiar Ventures, LLC\n*/\n\nfunction getUTCDate(date) {\r\n    return new Date(date.getTime() + (date.getTimezoneOffset() * 60000));\r\n}\r\nfunction getParametersValue(parameters, name, defaultValue) {\r\n    var _a;\r\n    if ((parameters instanceof Object) === false) {\r\n        return defaultValue;\r\n    }\r\n    return (_a = parameters[name]) !== null && _a !== void 0 ? _a : defaultValue;\r\n}\r\nfunction bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = (inputBuffer.byteLength - inputOffset), insertSpace = false) {\r\n    let result = \"\";\r\n    for (const item of (new Uint8Array(inputBuffer, inputOffset, inputLength))) {\r\n        const str = item.toString(16).toUpperCase();\r\n        if (str.length === 1) {\r\n            result += \"0\";\r\n        }\r\n        result += str;\r\n        if (insertSpace) {\r\n            result += \" \";\r\n        }\r\n    }\r\n    return result.trim();\r\n}\r\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\r\n    if (!(inputBuffer instanceof ArrayBuffer)) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer must be \\\"ArrayBuffer\\\"\";\r\n        return false;\r\n    }\r\n    if (!inputBuffer.byteLength) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n        return false;\r\n    }\r\n    if (inputOffset < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n        return false;\r\n    }\r\n    if (inputLength < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n        return false;\r\n    }\r\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\r\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction utilFromBase(inputBuffer, inputBase) {\r\n    let result = 0;\r\n    if (inputBuffer.length === 1) {\r\n        return inputBuffer[0];\r\n    }\r\n    for (let i = (inputBuffer.length - 1); i >= 0; i--) {\r\n        result += inputBuffer[(inputBuffer.length - 1) - i] * Math.pow(2, inputBase * i);\r\n    }\r\n    return result;\r\n}\r\nfunction utilToBase(value, base, reserved = (-1)) {\r\n    const internalReserved = reserved;\r\n    let internalValue = value;\r\n    let result = 0;\r\n    let biggest = Math.pow(2, base);\r\n    for (let i = 1; i < 8; i++) {\r\n        if (value < biggest) {\r\n            let retBuf;\r\n            if (internalReserved < 0) {\r\n                retBuf = new ArrayBuffer(i);\r\n                result = i;\r\n            }\r\n            else {\r\n                if (internalReserved < i) {\r\n                    return (new ArrayBuffer(0));\r\n                }\r\n                retBuf = new ArrayBuffer(internalReserved);\r\n                result = internalReserved;\r\n            }\r\n            const retView = new Uint8Array(retBuf);\r\n            for (let j = (i - 1); j >= 0; j--) {\r\n                const basis = Math.pow(2, j * base);\r\n                retView[result - j - 1] = Math.floor(internalValue / basis);\r\n                internalValue -= (retView[result - j - 1]) * basis;\r\n            }\r\n            return retBuf;\r\n        }\r\n        biggest *= Math.pow(2, base);\r\n    }\r\n    return new ArrayBuffer(0);\r\n}\r\nfunction utilConcatBuf(...buffers) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const buffer of buffers) {\r\n        outputLength += buffer.byteLength;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const buffer of buffers) {\r\n        retView.set(new Uint8Array(buffer), prevLength);\r\n        prevLength += buffer.byteLength;\r\n    }\r\n    return retBuf;\r\n}\r\nfunction utilConcatView(...views) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const view of views) {\r\n        outputLength += view.length;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const view of views) {\r\n        retView.set(view, prevLength);\r\n        prevLength += view.length;\r\n    }\r\n    return retView;\r\n}\r\nfunction utilDecodeTC() {\r\n    const buf = new Uint8Array(this.valueHex);\r\n    if (this.valueHex.byteLength >= 2) {\r\n        const condition1 = (buf[0] === 0xFF) && (buf[1] & 0x80);\r\n        const condition2 = (buf[0] === 0x00) && ((buf[1] & 0x80) === 0x00);\r\n        if (condition1 || condition2) {\r\n            this.warnings.push(\"Needlessly long format\");\r\n        }\r\n    }\r\n    const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const bigIntView = new Uint8Array(bigIntBuffer);\r\n    for (let i = 0; i < this.valueHex.byteLength; i++) {\r\n        bigIntView[i] = 0;\r\n    }\r\n    bigIntView[0] = (buf[0] & 0x80);\r\n    const bigInt = utilFromBase(bigIntView, 8);\r\n    const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const smallIntView = new Uint8Array(smallIntBuffer);\r\n    for (let j = 0; j < this.valueHex.byteLength; j++) {\r\n        smallIntView[j] = buf[j];\r\n    }\r\n    smallIntView[0] &= 0x7F;\r\n    const smallInt = utilFromBase(smallIntView, 8);\r\n    return (smallInt - bigInt);\r\n}\r\nfunction utilEncodeTC(value) {\r\n    const modValue = (value < 0) ? (value * (-1)) : value;\r\n    let bigInt = 128;\r\n    for (let i = 1; i < 8; i++) {\r\n        if (modValue <= bigInt) {\r\n            if (value < 0) {\r\n                const smallInt = bigInt - modValue;\r\n                const retBuf = utilToBase(smallInt, 8, i);\r\n                const retView = new Uint8Array(retBuf);\r\n                retView[0] |= 0x80;\r\n                return retBuf;\r\n            }\r\n            let retBuf = utilToBase(modValue, 8, i);\r\n            let retView = new Uint8Array(retBuf);\r\n            if (retView[0] & 0x80) {\r\n                const tempBuf = retBuf.slice(0);\r\n                const tempView = new Uint8Array(tempBuf);\r\n                retBuf = new ArrayBuffer(retBuf.byteLength + 1);\r\n                retView = new Uint8Array(retBuf);\r\n                for (let k = 0; k < tempBuf.byteLength; k++) {\r\n                    retView[k + 1] = tempView[k];\r\n                }\r\n                retView[0] = 0x00;\r\n            }\r\n            return retBuf;\r\n        }\r\n        bigInt *= Math.pow(2, 8);\r\n    }\r\n    return (new ArrayBuffer(0));\r\n}\r\nfunction isEqualBuffer(inputBuffer1, inputBuffer2) {\r\n    if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {\r\n        return false;\r\n    }\r\n    const view1 = new Uint8Array(inputBuffer1);\r\n    const view2 = new Uint8Array(inputBuffer2);\r\n    for (let i = 0; i < view1.length; i++) {\r\n        if (view1[i] !== view2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction padNumber(inputNumber, fullLength) {\r\n    const str = inputNumber.toString(10);\r\n    if (fullLength < str.length) {\r\n        return \"\";\r\n    }\r\n    const dif = fullLength - str.length;\r\n    const padding = new Array(dif);\r\n    for (let i = 0; i < dif; i++) {\r\n        padding[i] = \"0\";\r\n    }\r\n    const paddingString = padding.join(\"\");\r\n    return paddingString.concat(str);\r\n}\r\nconst base64Template = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\nconst base64UrlTemplate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\";\r\nfunction toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false) {\r\n    let i = 0;\r\n    let flag1 = 0;\r\n    let flag2 = 0;\r\n    let output = \"\";\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    if (skipLeadingZeros) {\r\n        let nonZeroPosition = 0;\r\n        for (let i = 0; i < input.length; i++) {\r\n            if (input.charCodeAt(i) !== 0) {\r\n                nonZeroPosition = i;\r\n                break;\r\n            }\r\n        }\r\n        input = input.slice(nonZeroPosition);\r\n    }\r\n    while (i < input.length) {\r\n        const chr1 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag1 = 1;\r\n        }\r\n        const chr2 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag2 = 1;\r\n        }\r\n        const chr3 = input.charCodeAt(i++);\r\n        const enc1 = chr1 >> 2;\r\n        const enc2 = ((chr1 & 0x03) << 4) | (chr2 >> 4);\r\n        let enc3 = ((chr2 & 0x0F) << 2) | (chr3 >> 6);\r\n        let enc4 = chr3 & 0x3F;\r\n        if (flag1 === 1) {\r\n            enc3 = enc4 = 64;\r\n        }\r\n        else {\r\n            if (flag2 === 1) {\r\n                enc4 = 64;\r\n            }\r\n        }\r\n        if (skipPadding) {\r\n            if (enc3 === 64) {\r\n                output += `${template.charAt(enc1)}${template.charAt(enc2)}`;\r\n            }\r\n            else {\r\n                if (enc4 === 64) {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;\r\n                }\r\n                else {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction fromBase64(input, useUrlTemplate = false, cutTailZeros = false) {\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    function indexOf(toSearch) {\r\n        for (let i = 0; i < 64; i++) {\r\n            if (template.charAt(i) === toSearch)\r\n                return i;\r\n        }\r\n        return 64;\r\n    }\r\n    function test(incoming) {\r\n        return ((incoming === 64) ? 0x00 : incoming);\r\n    }\r\n    let i = 0;\r\n    let output = \"\";\r\n    while (i < input.length) {\r\n        const enc1 = indexOf(input.charAt(i++));\r\n        const enc2 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc3 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc4 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const chr1 = (test(enc1) << 2) | (test(enc2) >> 4);\r\n        const chr2 = ((test(enc2) & 0x0F) << 4) | (test(enc3) >> 2);\r\n        const chr3 = ((test(enc3) & 0x03) << 6) | test(enc4);\r\n        output += String.fromCharCode(chr1);\r\n        if (enc3 !== 64) {\r\n            output += String.fromCharCode(chr2);\r\n        }\r\n        if (enc4 !== 64) {\r\n            output += String.fromCharCode(chr3);\r\n        }\r\n    }\r\n    if (cutTailZeros) {\r\n        const outputLength = output.length;\r\n        let nonZeroStart = (-1);\r\n        for (let i = (outputLength - 1); i >= 0; i--) {\r\n            if (output.charCodeAt(i) !== 0) {\r\n                nonZeroStart = i;\r\n                break;\r\n            }\r\n        }\r\n        if (nonZeroStart !== (-1)) {\r\n            output = output.slice(0, nonZeroStart + 1);\r\n        }\r\n        else {\r\n            output = \"\";\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction arrayBufferToString(buffer) {\r\n    let resultString = \"\";\r\n    const view = new Uint8Array(buffer);\r\n    for (const element of view) {\r\n        resultString += String.fromCharCode(element);\r\n    }\r\n    return resultString;\r\n}\r\nfunction stringToArrayBuffer(str) {\r\n    const stringLength = str.length;\r\n    const resultBuffer = new ArrayBuffer(stringLength);\r\n    const resultView = new Uint8Array(resultBuffer);\r\n    for (let i = 0; i < stringLength; i++) {\r\n        resultView[i] = str.charCodeAt(i);\r\n    }\r\n    return resultBuffer;\r\n}\r\nconst log2 = Math.log(2);\r\nfunction nearestPowerOf2(length) {\r\n    const base = (Math.log(length) / log2);\r\n    const floor = Math.floor(base);\r\n    const round = Math.round(base);\r\n    return ((floor === round) ? floor : round);\r\n}\r\nfunction clearProps(object, propsArray) {\r\n    for (const prop of propsArray) {\r\n        delete object[prop];\r\n    }\r\n}\n\n\n\n\n//# sourceURL=webpack://ems/./node_modules/pvutils/build/utils.es.js?");

/***/ }),

/***/ "./node_modules/retimer/retimer.js":
/*!*****************************************!*\
  !*** ./node_modules/retimer/retimer.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst getTime = __webpack_require__(/*! ./time */ \"./node_modules/retimer/time-browser.js\")\n\nclass Retimer {\n  constructor (callback, timeout, args) {\n    const that = this\n\n    this._started = getTime()\n    this._rescheduled = 0\n    this._scheduled = timeout\n    this._args = args\n    this._triggered = false\n\n    this._timerWrapper = () => {\n      if (that._rescheduled > 0) {\n        that._scheduled = that._rescheduled - (getTime() - that._started)\n        that._schedule(that._scheduled)\n      } else {\n        that._triggered = true\n        callback.apply(null, that._args)\n      }\n    }\n\n    this._timer = setTimeout(this._timerWrapper, timeout)\n  }\n\n  reschedule (timeout) {\n    if (!timeout) {\n      timeout = this._scheduled\n    }\n    const now = getTime()\n    if ((now + timeout) - (this._started + this._scheduled) < 0) {\n      clearTimeout(this._timer)\n      this._schedule(timeout)\n    } else if (!this._triggered) {\n      this._started = now\n      this._rescheduled = timeout\n    } else {\n      this._schedule(timeout)\n    }\n  }\n\n  _schedule (timeout) {\n    this._triggered = false\n    this._started = getTime()\n    this._rescheduled = 0\n    this._scheduled = timeout\n    this._timer = setTimeout(this._timerWrapper, timeout)\n  }\n\n  clear () {\n    clearTimeout(this._timer)\n  }\n}\n\nfunction retimer () {\n  if (typeof arguments[0] !== 'function') {\n    throw new Error('callback needed')\n  }\n\n  if (typeof arguments[1] !== 'number') {\n    throw new Error('timeout needed')\n  }\n\n  let args\n\n  if (arguments.length > 0) {\n    args = new Array(arguments.length - 2)\n\n    /* eslint-disable no-var */\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i + 2]\n    }\n  }\n\n  return new Retimer(arguments[0], arguments[1], args)\n}\n\nmodule.exports = retimer\n\n\n//# sourceURL=webpack://ems/./node_modules/retimer/retimer.js?");

/***/ }),

/***/ "./node_modules/retimer/time-browser.js":
/*!**********************************************!*\
  !*** ./node_modules/retimer/time-browser.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = function getTime () {\n  return Date.now()\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/retimer/time-browser.js?");

/***/ }),

/***/ "./node_modules/sanitize-filename/index.js":
/*!*************************************************!*\
  !*** ./node_modules/sanitize-filename/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*jshint node:true*/\n\n\n/**\n * Replaces characters in strings that are illegal/unsafe for filenames.\n * Unsafe characters are either removed or replaced by a substitute set\n * in the optional `options` object.\n *\n * Illegal Characters on Various Operating Systems\n * / ? < > \\ : * | \"\n * https://kb.acronis.com/content/39790\n *\n * Unicode Control codes\n * C0 0x00-0x1f & C1 (0x80-0x9f)\n * http://en.wikipedia.org/wiki/C0_and_C1_control_codes\n *\n * Reserved filenames on Unix-based systems (\".\", \"..\")\n * Reserved filenames in Windows (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\",\n * \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\",\n * \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", and\n * \"LPT9\") case-insesitively and with or without filename extensions.\n *\n * Capped at 255 characters in length.\n * http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs\n *\n * @param  {String} input   Original filename\n * @param  {Object} options {replacement: String | Function }\n * @return {String}         Sanitized filename\n */\n\nvar truncate = __webpack_require__(/*! truncate-utf8-bytes */ \"./node_modules/truncate-utf8-bytes/browser.js\");\n\nvar illegalRe = /[\\/\\?<>\\\\:\\*\\|\"]/g;\nvar controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\nvar reservedRe = /^\\.+$/;\nvar windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\nvar windowsTrailingRe = /[\\. ]+$/;\n\nfunction sanitize(input, replacement) {\n  if (typeof input !== 'string') {\n    throw new Error('Input must be string');\n  }\n  var sanitized = input\n    .replace(illegalRe, replacement)\n    .replace(controlRe, replacement)\n    .replace(reservedRe, replacement)\n    .replace(windowsReservedRe, replacement)\n    .replace(windowsTrailingRe, replacement);\n  return truncate(sanitized, 255);\n}\n\nmodule.exports = function (input, options) {\n  var replacement = (options && options.replacement) || '';\n  var output = sanitize(input, replacement);\n  if (replacement === '') {\n    return output;\n  }\n  return sanitize(output, '');\n};\n\n\n//# sourceURL=webpack://ems/./node_modules/sanitize-filename/index.js?");

/***/ }),

/***/ "./node_modules/timeout-abort-controller/index.js":
/*!********************************************************!*\
  !*** ./node_modules/timeout-abort-controller/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst { AbortController } = globalThis\n\n// @ts-expect-error no types\nconst retimer = __webpack_require__(/*! retimer */ \"./node_modules/retimer/retimer.js\")\n\nclass TimeoutController extends AbortController {\n  /**\n   * @constructor\n   * @param {number} ms milliseconds\n   */\n  constructor (ms) {\n    super()\n    this._ms = ms\n    this._timer = retimer(() => this.abort(), ms)\n    // Patch for safari not supported extending built in classes\n    Object.setPrototypeOf(this, TimeoutController.prototype)\n  }\n\n  /**\n   * Aborts the controller and clears the timer\n   */\n  abort () {\n    this._timer.clear()\n    return super.abort()\n  }\n\n  /**\n   * Clears the timer\n   */\n  clear () {\n    this._timer.clear()\n  }\n\n  /**\n   * Resets the timer\n   */\n  reset () {\n    this._timer.clear()\n    this._timer = retimer(() => this.abort(), this._ms)\n  }\n}\n\nmodule.exports = {\n  TimeoutController\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/timeout-abort-controller/index.js?");

/***/ }),

/***/ "./node_modules/truncate-utf8-bytes/browser.js":
/*!*****************************************************!*\
  !*** ./node_modules/truncate-utf8-bytes/browser.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar truncate = __webpack_require__(/*! ./lib/truncate */ \"./node_modules/truncate-utf8-bytes/lib/truncate.js\");\nvar getLength = __webpack_require__(/*! utf8-byte-length/browser */ \"./node_modules/utf8-byte-length/browser.js\");\nmodule.exports = truncate.bind(null, getLength);\n\n\n//# sourceURL=webpack://ems/./node_modules/truncate-utf8-bytes/browser.js?");

/***/ }),

/***/ "./node_modules/truncate-utf8-bytes/lib/truncate.js":
/*!**********************************************************!*\
  !*** ./node_modules/truncate-utf8-bytes/lib/truncate.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("\n\nfunction isHighSurrogate(codePoint) {\n  return codePoint >= 0xd800 && codePoint <= 0xdbff;\n}\n\nfunction isLowSurrogate(codePoint) {\n  return codePoint >= 0xdc00 && codePoint <= 0xdfff;\n}\n\n// Truncate string by size in bytes\nmodule.exports = function truncate(getLength, string, byteLength) {\n  if (typeof string !== \"string\") {\n    throw new Error(\"Input must be string\");\n  }\n\n  var charLength = string.length;\n  var curByteLength = 0;\n  var codePoint;\n  var segment;\n\n  for (var i = 0; i < charLength; i += 1) {\n    codePoint = string.charCodeAt(i);\n    segment = string[i];\n\n    if (isHighSurrogate(codePoint) && isLowSurrogate(string.charCodeAt(i + 1))) {\n      i += 1;\n      segment += string[i];\n    }\n\n    curByteLength += getLength(segment);\n\n    if (curByteLength === byteLength) {\n      return string.slice(0, i + 1);\n    }\n    else if (curByteLength > byteLength) {\n      return string.slice(0, i - segment.length + 1);\n    }\n  }\n\n  return string;\n};\n\n\n\n//# sourceURL=webpack://ems/./node_modules/truncate-utf8-bytes/lib/truncate.js?");

/***/ }),

/***/ "./node_modules/utf8-byte-length/browser.js":
/*!**************************************************!*\
  !*** ./node_modules/utf8-byte-length/browser.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\n\nfunction isHighSurrogate(codePoint) {\n  return codePoint >= 0xd800 && codePoint <= 0xdbff;\n}\n\nfunction isLowSurrogate(codePoint) {\n  return codePoint >= 0xdc00 && codePoint <= 0xdfff;\n}\n\n// Truncate string by size in bytes\nmodule.exports = function getByteLength(string) {\n  if (typeof string !== \"string\") {\n    throw new Error(\"Input must be string\");\n  }\n\n  var charLength = string.length;\n  var byteLength = 0;\n  var codePoint = null;\n  var prevCodePoint = null;\n  for (var i = 0; i < charLength; i++) {\n    codePoint = string.charCodeAt(i);\n    // handle 4-byte non-BMP chars\n    // low surrogate\n    if (isLowSurrogate(codePoint)) {\n      // when parsing previous hi-surrogate, 3 is added to byteLength\n      if (prevCodePoint != null && isHighSurrogate(prevCodePoint)) {\n        byteLength += 1;\n      }\n      else {\n        byteLength += 3;\n      }\n    }\n    else if (codePoint <= 0x7f ) {\n      byteLength += 1;\n    }\n    else if (codePoint >= 0x80 && codePoint <= 0x7ff) {\n      byteLength += 2;\n    }\n    else if (codePoint >= 0x800 && codePoint <= 0xffff) {\n      byteLength += 3;\n    }\n    prevCodePoint = codePoint;\n  }\n\n  return byteLength;\n};\n\n\n//# sourceURL=webpack://ems/./node_modules/utf8-byte-length/browser.js?");

/***/ }),

/***/ "./node_modules/varint-decoder/node_modules/varint/decode.js":
/*!*******************************************************************!*\
  !*** ./node_modules/varint-decoder/node_modules/varint/decode.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/varint-decoder/node_modules/varint/decode.js?");

/***/ }),

/***/ "./node_modules/varint-decoder/node_modules/varint/encode.js":
/*!*******************************************************************!*\
  !*** ./node_modules/varint-decoder/node_modules/varint/encode.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/varint-decoder/node_modules/varint/encode.js?");

/***/ }),

/***/ "./node_modules/varint-decoder/node_modules/varint/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/varint-decoder/node_modules/varint/index.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = {\n    encode: __webpack_require__(/*! ./encode.js */ \"./node_modules/varint-decoder/node_modules/varint/encode.js\")\n  , decode: __webpack_require__(/*! ./decode.js */ \"./node_modules/varint-decoder/node_modules/varint/decode.js\")\n  , encodingLength: __webpack_require__(/*! ./length.js */ \"./node_modules/varint-decoder/node_modules/varint/length.js\")\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/varint-decoder/node_modules/varint/index.js?");

/***/ }),

/***/ "./node_modules/varint-decoder/node_modules/varint/length.js":
/*!*******************************************************************!*\
  !*** ./node_modules/varint-decoder/node_modules/varint/length.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/varint-decoder/node_modules/varint/length.js?");

/***/ }),

/***/ "./node_modules/varint-decoder/src/index.js":
/*!**************************************************!*\
  !*** ./node_modules/varint-decoder/src/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst varint = __webpack_require__(/*! varint */ \"./node_modules/varint-decoder/node_modules/varint/index.js\")\n\nmodule.exports = (buf) => {\n  if (!(buf instanceof Uint8Array)) {\n    throw new Error('arg needs to be a Uint8Array')\n  }\n\n  const result = []\n\n  while (buf.length > 0) {\n    const num = varint.decode(buf)\n    result.push(num)\n    buf = buf.slice(varint.decode.bytes)\n  }\n\n  return result\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/varint-decoder/src/index.js?");

/***/ }),

/***/ "./node_modules/varint/decode.js":
/*!***************************************!*\
  !*** ./node_modules/varint/decode.js ***!
  \***************************************/
/***/ ((module) => {

eval("module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l || shift > 49) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/varint/decode.js?");

/***/ }),

/***/ "./node_modules/varint/encode.js":
/*!***************************************!*\
  !*** ./node_modules/varint/encode.js ***!
  \***************************************/
/***/ ((module) => {

eval("module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {\n    encode.bytes = 0\n    throw new RangeError('Could not encode varint')\n  }\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/varint/encode.js?");

/***/ }),

/***/ "./node_modules/varint/index.js":
/*!**************************************!*\
  !*** ./node_modules/varint/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = {\n    encode: __webpack_require__(/*! ./encode.js */ \"./node_modules/varint/encode.js\")\n  , decode: __webpack_require__(/*! ./decode.js */ \"./node_modules/varint/decode.js\")\n  , encodingLength: __webpack_require__(/*! ./length.js */ \"./node_modules/varint/length.js\")\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/varint/index.js?");

/***/ }),

/***/ "./node_modules/varint/length.js":
/*!***************************************!*\
  !*** ./node_modules/varint/length.js ***!
  \***************************************/
/***/ ((module) => {

eval("\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/varint/length.js?");

/***/ }),

/***/ "./node_modules/timestamp-nano/dist/timestamp.min.js":
/*!***********************************************************!*\
  !*** ./node_modules/timestamp-nano/dist/timestamp.min.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("var Timestamp=function(){ true&&(module.exports=d);var l=86400,s=3200,T=146097*s/400,e=l*T,f=1e3*e,c=864e13,g=4294967296,h=1e6,u=\"000000000\",m=Math.trunc||function(n){var t=n-n%1;return 0==t&&(n<0||0===n&&1/n!=1/0)?-0:t},n=d.prototype,o=(d.fromDate=function(n){return new d(+n)},d.fromInt64BE=r(0,1,2,3,0,4),d.fromInt64LE=r(3,2,1,0,4,0),d.fromString=function(n){var e,r=new d,n=(n+=\"\").replace(/^\\s*[+\\-]?\\d+/,function(n){var n=+n,t=1970+(n-1970)%400;return r.year=n-t,t}).replace(/(?:Z|([+\\-]\\d{2}):?(\\d{2}))$/,function(n,t,r){return t<0&&(r*=-1),e=6e4*(60*+t+ +r),\"\"}).replace(/\\.\\d+$/,function(n){return r.nano=+(n+u).substr(1,9),\"\"}).split(/\\D+/);1<n.length?n[1]--:n[1]=0;if(r.time=e=Date.UTC.apply(Date,n)-(e||0),isNaN(e))throw new TypeError(\"Invalid Date\");return p(r)},d.fromTimeT=function(n){return y(n,0)},n.year=0,n.time=0,n.nano=0,n.addNano=function(n){return this.nano+=+n||0,this},n.getNano=function(){var n=p(this);return(n.time%1e3*h+ +n.nano+1e9)%1e9},n.getTimeT=function(){var n=p(this),t=Math.floor(n.time/1e3),n=n.year;n&&(t+=n*T*l/s);return t},n.getYear=function(){return this.toDate().getUTCFullYear()+this.year},n.toDate=function(){return M(p(this).time)},n.toJSON=function(){return this.toString().replace(/0{1,6}Z$/,\"Z\")},n.toString=function(n){var t=this,r=t.toDate(),u={H:function(){return C(r.getUTCHours())},L:function(){return D(r.getUTCMilliseconds(),3)},M:function(){return C(r.getUTCMinutes())},N:function(){return D(t.getNano(),9)},S:function(){return C(r.getUTCSeconds())},Y:function(){var n=t.getYear();return 999999<n?\"+\"+n:9999<n?\"+\"+D(n,6):0<=n?D(n,4):-999999<=n?\"-\"+D(-n,6):n},a:function(){return a[r.getUTCDay()]},b:function(){return i[r.getUTCMonth()]},d:function(){return C(r.getUTCDate())},e:function(){return function(n){return(9<n?\"\":\" \")+(0|n)}(r.getUTCDate())},m:function(){return C(r.getUTCMonth()+1)}};return function e(n){return n.replace(/%./g,function(n){var t=n[1],r=v[t],t=u[t];return r?e(r):t?t():n})}(n||o)},n.writeInt64BE=t(0,1,2,3,0,4),n.writeInt64LE=t(3,2,1,0,4,0),\"%Y-%m-%dT%H:%M:%S.%NZ\"),i=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],a=[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],v={\"%\":\"%\",F:\"%Y-%m-%d\",n:\"\\n\",R:\"%H:%M\",T:\"%H:%M:%S\",t:\"\\t\",X:\"%T\",Z:\"GMT\",z:\"+0000\"};return d;function d(n,t,r){var e=this;if(!(e instanceof d))return new d(n,t,r);e.time=+n||0,e.nano=+t||0,e.year=+r||0,p(e)}function p(n){var t,r,e,u=n.year,o=n.time,i=n.nano,a=((i<0||h<=i)&&(i-=(r=Math.floor(i/h))*h,o+=r,r=1),u%s);return(o<-c||c<o||a)&&((t=m(o/f))&&(u+=t*s,o-=t*f),(e=M(o)).setUTCFullYear(a+e.getUTCFullYear()),e=(o=+e)+(t=m((u-=a)/s))*f,t&&-c<=e&&e<=c&&(u-=t*s,o=e),r=1),r&&(n.year=u,n.time=o,n.nano=i),n}function M(n){var t=new Date(0);return t.setTime(n),t}function y(n,t){n=+n||0;var r=m((t=(t|0)*g)/e)+m(n/e),t=t%e+n%e,n=m(t/e);return n&&(r+=n,t-=n*e),new d(1e3*t,0,r*s)}function t(e,u,o,i,a,f){return function(n,t){var r=p(this);n=n||new Array(8);w(n,t|=0);var e=Math.floor(r.time/1e3),r=r.year*(T*l/s),u=m(r/g)+m(e/g),r=r%g+e%g,e=Math.floor(r/g);e&&(u+=e,r-=e*g);return c(n,t+a,u),c(n,t+f,r),n};function c(n,t,r){n[t+e]=r>>24&255,n[t+u]=r>>16&255,n[t+o]=r>>8&255,n[t+i]=255&r}}function r(r,e,u,o,i,a){return function(n,t){w(n,t|=0);var r=f(n,t+i);return y(f(n,t+a),r)};function f(n,t){return 16777216*n[t+r]+(n[t+e]<<16|n[t+u]<<8|n[t+o])}}function w(n,t){n=n&&n.length;if(null==n)throw new TypeError(\"Invalid Buffer\");if(n<t+8)throw new RangeError(\"Out of range\")}function C(n){return(9<n?\"\":\"0\")+(0|n)}function D(n,t){return(u+(0|n)).substr(-t)}}();\n\n//# sourceURL=webpack://ems/./node_modules/timestamp-nano/dist/timestamp.min.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/is-ip/lib/is-ip.js":
/*!****************************************************!*\
  !*** ./node_modules/@chainsafe/is-ip/lib/is-ip.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ipVersion: () => (/* binding */ ipVersion),\n/* harmony export */   isIP: () => (/* binding */ isIP),\n/* harmony export */   isIPv4: () => (/* binding */ isIPv4),\n/* harmony export */   isIPv6: () => (/* binding */ isIPv6)\n/* harmony export */ });\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"./node_modules/@chainsafe/is-ip/lib/parse.js\");\n\n/** Check if `input` is IPv4. */\nfunction isIPv4(input) {\n    return Boolean((0,_parse_js__WEBPACK_IMPORTED_MODULE_0__.parseIPv4)(input));\n}\n/** Check if `input` is IPv6. */\nfunction isIPv6(input) {\n    return Boolean((0,_parse_js__WEBPACK_IMPORTED_MODULE_0__.parseIPv6)(input));\n}\n/** Check if `input` is IPv4 or IPv6. */\nfunction isIP(input) {\n    return Boolean((0,_parse_js__WEBPACK_IMPORTED_MODULE_0__.parseIP)(input));\n}\n/**\n * @returns `6` if `input` is IPv6, `4` if `input` is IPv4, or `undefined` if `input` is neither.\n */\nfunction ipVersion(input) {\n    if (isIPv4(input)) {\n        return 4;\n    }\n    else if (isIPv6(input)) {\n        return 6;\n    }\n    else {\n        return undefined;\n    }\n}\n//# sourceMappingURL=is-ip.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/is-ip/lib/is-ip.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/is-ip/lib/parse.js":
/*!****************************************************!*\
  !*** ./node_modules/@chainsafe/is-ip/lib/parse.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseIP: () => (/* binding */ parseIP),\n/* harmony export */   parseIPv4: () => (/* binding */ parseIPv4),\n/* harmony export */   parseIPv6: () => (/* binding */ parseIPv6)\n/* harmony export */ });\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parser.js */ \"./node_modules/@chainsafe/is-ip/lib/parser.js\");\n\n// See https://stackoverflow.com/questions/166132/maximum-length-of-the-textual-representation-of-an-ipv6-address\nconst MAX_IPV6_LENGTH = 45;\nconst MAX_IPV4_LENGTH = 15;\nconst parser = new _parser_js__WEBPACK_IMPORTED_MODULE_0__.Parser();\n/** Parse `input` into IPv4 bytes. */\nfunction parseIPv4(input) {\n    if (input.length > MAX_IPV4_LENGTH) {\n        return undefined;\n    }\n    return parser.new(input).parseWith(() => parser.readIPv4Addr());\n}\n/** Parse `input` into IPv6 bytes. */\nfunction parseIPv6(input) {\n    // strip zone index if it is present\n    if (input.includes(\"%\")) {\n        input = input.split(\"%\")[0];\n    }\n    if (input.length > MAX_IPV6_LENGTH) {\n        return undefined;\n    }\n    return parser.new(input).parseWith(() => parser.readIPv6Addr());\n}\n/** Parse `input` into IPv4 or IPv6 bytes. */\nfunction parseIP(input) {\n    // strip zone index if it is present\n    if (input.includes(\"%\")) {\n        input = input.split(\"%\")[0];\n    }\n    if (input.length > MAX_IPV6_LENGTH) {\n        return undefined;\n    }\n    return parser.new(input).parseWith(() => parser.readIPAddr());\n}\n//# sourceMappingURL=parse.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/is-ip/lib/parse.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/is-ip/lib/parser.js":
/*!*****************************************************!*\
  !*** ./node_modules/@chainsafe/is-ip/lib/parser.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parser: () => (/* binding */ Parser)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-unsafe-return */\nclass Parser {\n    index = 0;\n    input = \"\";\n    new(input) {\n        this.index = 0;\n        this.input = input;\n        return this;\n    }\n    /** Run a parser, and restore the pre-parse state if it fails. */\n    readAtomically(fn) {\n        const index = this.index;\n        const result = fn();\n        if (result === undefined) {\n            this.index = index;\n        }\n        return result;\n    }\n    /** Run a parser, but fail if the entire input wasn't consumed. Doesn't run atomically. */\n    parseWith(fn) {\n        const result = fn();\n        if (this.index !== this.input.length) {\n            return undefined;\n        }\n        return result;\n    }\n    /** Peek the next character from the input */\n    peekChar() {\n        if (this.index >= this.input.length) {\n            return undefined;\n        }\n        return this.input[this.index];\n    }\n    /** Read the next character from the input */\n    readChar() {\n        if (this.index >= this.input.length) {\n            return undefined;\n        }\n        return this.input[this.index++];\n    }\n    /** Read the next character from the input if it matches the target. */\n    readGivenChar(target) {\n        return this.readAtomically(() => {\n            const char = this.readChar();\n            if (char !== target) {\n                return undefined;\n            }\n            return char;\n        });\n    }\n    /**\n     * Helper for reading separators in an indexed loop. Reads the separator\n     * character iff index > 0, then runs the parser. When used in a loop,\n     * the separator character will only be read on index > 0 (see\n     * readIPv4Addr for an example)\n     */\n    readSeparator(sep, index, inner) {\n        return this.readAtomically(() => {\n            if (index > 0) {\n                if (this.readGivenChar(sep) === undefined) {\n                    return undefined;\n                }\n            }\n            return inner();\n        });\n    }\n    /**\n     * Read a number off the front of the input in the given radix, stopping\n     * at the first non-digit character or eof. Fails if the number has more\n     * digits than max_digits or if there is no number.\n     */\n    readNumber(radix, maxDigits, allowZeroPrefix, maxBytes) {\n        return this.readAtomically(() => {\n            let result = 0;\n            let digitCount = 0;\n            const leadingChar = this.peekChar();\n            if (leadingChar === undefined) {\n                return undefined;\n            }\n            const hasLeadingZero = leadingChar === \"0\";\n            const maxValue = 2 ** (8 * maxBytes) - 1;\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                const digit = this.readAtomically(() => {\n                    const char = this.readChar();\n                    if (char === undefined) {\n                        return undefined;\n                    }\n                    const num = Number.parseInt(char, radix);\n                    if (Number.isNaN(num)) {\n                        return undefined;\n                    }\n                    return num;\n                });\n                if (digit === undefined) {\n                    break;\n                }\n                result *= radix;\n                result += digit;\n                if (result > maxValue) {\n                    return undefined;\n                }\n                digitCount += 1;\n                if (maxDigits !== undefined) {\n                    if (digitCount > maxDigits) {\n                        return undefined;\n                    }\n                }\n            }\n            if (digitCount === 0) {\n                return undefined;\n            }\n            else if (!allowZeroPrefix && hasLeadingZero && digitCount > 1) {\n                return undefined;\n            }\n            else {\n                return result;\n            }\n        });\n    }\n    /** Read an IPv4 address. */\n    readIPv4Addr() {\n        return this.readAtomically(() => {\n            const out = new Uint8Array(4);\n            for (let i = 0; i < out.length; i++) {\n                const ix = this.readSeparator(\".\", i, () => this.readNumber(10, 3, false, 1));\n                if (ix === undefined) {\n                    return undefined;\n                }\n                out[i] = ix;\n            }\n            return out;\n        });\n    }\n    /** Read an IPv6 Address. */\n    readIPv6Addr() {\n        /**\n         * Read a chunk of an IPv6 address into `groups`. Returns the number\n         * of groups read, along with a bool indicating if an embedded\n         * trailing IPv4 address was read. Specifically, read a series of\n         * colon-separated IPv6 groups (0x0000 - 0xFFFF), with an optional\n         * trailing embedded IPv4 address.\n         */\n        const readGroups = (groups) => {\n            for (let i = 0; i < groups.length / 2; i++) {\n                const ix = i * 2;\n                // Try to read a trailing embedded IPv4 address. There must be at least 4 groups left.\n                if (i < groups.length - 3) {\n                    const ipv4 = this.readSeparator(\":\", i, () => this.readIPv4Addr());\n                    if (ipv4 !== undefined) {\n                        groups[ix] = ipv4[0];\n                        groups[ix + 1] = ipv4[1];\n                        groups[ix + 2] = ipv4[2];\n                        groups[ix + 3] = ipv4[3];\n                        return [ix + 4, true];\n                    }\n                }\n                const group = this.readSeparator(\":\", i, () => this.readNumber(16, 4, true, 2));\n                if (group === undefined) {\n                    return [ix, false];\n                }\n                groups[ix] = group >> 8;\n                groups[ix + 1] = group & 255;\n            }\n            return [groups.length, false];\n        };\n        return this.readAtomically(() => {\n            // Read the front part of the address; either the whole thing, or up to the first ::\n            const head = new Uint8Array(16);\n            const [headSize, headIp4] = readGroups(head);\n            if (headSize === 16) {\n                return head;\n            }\n            // IPv4 part is not allowed before `::`\n            if (headIp4) {\n                return undefined;\n            }\n            // Read `::` if previous code parsed less than 8 groups.\n            // `::` indicates one or more groups of 16 bits of zeros.\n            if (this.readGivenChar(\":\") === undefined) {\n                return undefined;\n            }\n            if (this.readGivenChar(\":\") === undefined) {\n                return undefined;\n            }\n            // Read the back part of the address. The :: must contain at least one\n            // set of zeroes, so our max length is 7.\n            const tail = new Uint8Array(14);\n            const limit = 16 - (headSize + 2);\n            const [tailSize] = readGroups(tail.subarray(0, limit));\n            // Concat the head and tail of the IP address\n            head.set(tail.subarray(0, tailSize), 16 - tailSize);\n            return head;\n        });\n    }\n    /** Read an IP Address, either IPv4 or IPv6. */\n    readIPAddr() {\n        return this.readIPv4Addr() ?? this.readIPv6Addr();\n    }\n}\n//# sourceMappingURL=parser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/is-ip/lib/parser.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-noise/dist/src/constants.js":
/*!********************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/constants.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DUMP_SESSION_KEYS: () => (/* binding */ DUMP_SESSION_KEYS),\n/* harmony export */   NOISE_MSG_MAX_LENGTH_BYTES: () => (/* binding */ NOISE_MSG_MAX_LENGTH_BYTES),\n/* harmony export */   NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG: () => (/* binding */ NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG)\n/* harmony export */ });\nconst NOISE_MSG_MAX_LENGTH_BYTES = 65535;\nconst NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG = NOISE_MSG_MAX_LENGTH_BYTES - 16;\nconst DUMP_SESSION_KEYS = Boolean(globalThis.process?.env?.DUMP_SESSION_KEYS);\n//# sourceMappingURL=constants.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-noise/dist/src/constants.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-noise/dist/src/crypto.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/crypto.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapCrypto: () => (/* binding */ wrapCrypto)\n/* harmony export */ });\nfunction wrapCrypto(crypto) {\n    return {\n        generateKeypair: crypto.generateX25519KeyPair,\n        dh: (keypair, publicKey) => crypto.generateX25519SharedKey(keypair.privateKey, publicKey).subarray(0, 32),\n        encrypt: crypto.chaCha20Poly1305Encrypt,\n        decrypt: crypto.chaCha20Poly1305Decrypt,\n        hash: crypto.hashSHA256,\n        hkdf: crypto.getHKDF\n    };\n}\n//# sourceMappingURL=crypto.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-noise/dist/src/crypto.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/index.browser.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/index.browser.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultCrypto: () => (/* binding */ defaultCrypto)\n/* harmony export */ });\n/* harmony import */ var _js_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/js.js\");\n\nconst defaultCrypto = _js_js__WEBPACK_IMPORTED_MODULE_0__.pureJsCrypto;\n//# sourceMappingURL=index.browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/index.browser.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/js.js":
/*!********************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/js.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pureJsCrypto: () => (/* binding */ pureJsCrypto)\n/* harmony export */ });\n/* harmony import */ var _noble_ciphers_chacha__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/ciphers/chacha */ \"./node_modules/@noble/ciphers/esm/chacha.js\");\n/* harmony import */ var _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/curves/ed25519 */ \"./node_modules/@noble/curves/esm/ed25519.js\");\n/* harmony import */ var _noble_hashes_hkdf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/hkdf */ \"./node_modules/@noble/hashes/esm/hkdf.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"./node_modules/@noble/hashes/esm/sha256.js\");\n\n\n\n\nconst pureJsCrypto = {\n    hashSHA256(data) {\n        return (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256)(data.subarray());\n    },\n    getHKDF(ck, ikm) {\n        const prk = (0,_noble_hashes_hkdf__WEBPACK_IMPORTED_MODULE_2__.extract)(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256, ikm, ck);\n        const okmU8Array = (0,_noble_hashes_hkdf__WEBPACK_IMPORTED_MODULE_2__.expand)(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_1__.sha256, prk, undefined, 96);\n        const okm = okmU8Array;\n        const k1 = okm.subarray(0, 32);\n        const k2 = okm.subarray(32, 64);\n        const k3 = okm.subarray(64, 96);\n        return [k1, k2, k3];\n    },\n    generateX25519KeyPair() {\n        const secretKey = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_3__.x25519.utils.randomPrivateKey();\n        const publicKey = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_3__.x25519.getPublicKey(secretKey);\n        return {\n            publicKey,\n            privateKey: secretKey\n        };\n    },\n    generateX25519KeyPairFromSeed(seed) {\n        const publicKey = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_3__.x25519.getPublicKey(seed);\n        return {\n            publicKey,\n            privateKey: seed\n        };\n    },\n    generateX25519SharedKey(privateKey, publicKey) {\n        return _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_3__.x25519.getSharedSecret(privateKey.subarray(), publicKey.subarray());\n    },\n    chaCha20Poly1305Encrypt(plaintext, nonce, ad, k) {\n        return (0,_noble_ciphers_chacha__WEBPACK_IMPORTED_MODULE_0__.chacha20poly1305)(k, nonce, ad).encrypt(plaintext.subarray());\n    },\n    chaCha20Poly1305Decrypt(ciphertext, nonce, ad, k, dst) {\n        return (0,_noble_ciphers_chacha__WEBPACK_IMPORTED_MODULE_0__.chacha20poly1305)(k, nonce, ad).decrypt(ciphertext.subarray(), dst);\n    }\n};\n//# sourceMappingURL=js.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/js.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-noise/dist/src/encoder.js":
/*!******************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/encoder.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uint16BEDecode: () => (/* binding */ uint16BEDecode),\n/* harmony export */   uint16BEEncode: () => (/* binding */ uint16BEEncode)\n/* harmony export */ });\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/alloc */ \"./node_modules/uint8arrays/dist/src/alloc.js\");\n\n\nconst uint16BEEncode = (value) => {\n    const target = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__.allocUnsafe)(2);\n    target[0] = value >> 8;\n    target[1] = value;\n    return target;\n};\nuint16BEEncode.bytes = 2;\nconst uint16BEDecode = (data) => {\n    if (data.length < 2)\n        throw RangeError('Could not decode int16BE');\n    if (data instanceof Uint8Array) {\n        let value = 0;\n        value += data[0] << 8;\n        value += data[1];\n        return value;\n    }\n    return data.getUint16(0);\n};\nuint16BEDecode.bytes = 2;\n//# sourceMappingURL=encoder.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-noise/dist/src/encoder.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-noise/dist/src/errors.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/errors.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidCryptoExchangeError: () => (/* binding */ InvalidCryptoExchangeError),\n/* harmony export */   UnexpectedPeerError: () => (/* binding */ UnexpectedPeerError)\n/* harmony export */ });\nclass UnexpectedPeerError extends Error {\n    code;\n    constructor(message = 'Unexpected Peer') {\n        super(message);\n        this.code = UnexpectedPeerError.code;\n    }\n    static code = 'ERR_UNEXPECTED_PEER';\n}\nclass InvalidCryptoExchangeError extends Error {\n    code;\n    constructor(message = 'Invalid crypto exchange') {\n        super(message);\n        this.code = InvalidCryptoExchangeError.code;\n    }\n    static code = 'ERR_INVALID_CRYPTO_EXCHANGE';\n}\n//# sourceMappingURL=errors.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-noise/dist/src/errors.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-noise/dist/src/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   noise: () => (/* binding */ noise),\n/* harmony export */   pureJsCrypto: () => (/* reexport safe */ _crypto_js_js__WEBPACK_IMPORTED_MODULE_1__.pureJsCrypto)\n/* harmony export */ });\n/* harmony import */ var _noise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./noise.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/noise.js\");\n/* harmony import */ var _crypto_js_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./crypto/js.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/js.js\");\n\n\nfunction noise(init = {}) {\n    return (components) => new _noise_js__WEBPACK_IMPORTED_MODULE_0__.Noise(components, init);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-noise/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-noise/dist/src/logger.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/logger.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logCipherState: () => (/* binding */ logCipherState),\n/* harmony export */   logLocalEphemeralKeys: () => (/* binding */ logLocalEphemeralKeys),\n/* harmony export */   logLocalStaticKeys: () => (/* binding */ logLocalStaticKeys),\n/* harmony export */   logRemoteEphemeralKey: () => (/* binding */ logRemoteEphemeralKey),\n/* harmony export */   logRemoteStaticKey: () => (/* binding */ logRemoteStaticKey)\n/* harmony export */ });\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/constants.js\");\n\n\nfunction logLocalStaticKeys(s, keyLogger) {\n    if (!keyLogger.enabled || !_constants_js__WEBPACK_IMPORTED_MODULE_1__.DUMP_SESSION_KEYS) {\n        return;\n    }\n    if (s) {\n        keyLogger(`LOCAL_STATIC_PUBLIC_KEY ${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(s.publicKey, 'hex')}`);\n        keyLogger(`LOCAL_STATIC_PRIVATE_KEY ${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(s.privateKey, 'hex')}`);\n    }\n    else {\n        keyLogger('Missing local static keys.');\n    }\n}\nfunction logLocalEphemeralKeys(e, keyLogger) {\n    if (!keyLogger.enabled || !_constants_js__WEBPACK_IMPORTED_MODULE_1__.DUMP_SESSION_KEYS) {\n        return;\n    }\n    if (e) {\n        keyLogger(`LOCAL_PUBLIC_EPHEMERAL_KEY ${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(e.publicKey, 'hex')}`);\n        keyLogger(`LOCAL_PRIVATE_EPHEMERAL_KEY ${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(e.privateKey, 'hex')}`);\n    }\n    else {\n        keyLogger('Missing local ephemeral keys.');\n    }\n}\nfunction logRemoteStaticKey(rs, keyLogger) {\n    if (!keyLogger.enabled || !_constants_js__WEBPACK_IMPORTED_MODULE_1__.DUMP_SESSION_KEYS) {\n        return;\n    }\n    if (rs) {\n        keyLogger(`REMOTE_STATIC_PUBLIC_KEY ${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(rs.subarray(), 'hex')}`);\n    }\n    else {\n        keyLogger('Missing remote static public key.');\n    }\n}\nfunction logRemoteEphemeralKey(re, keyLogger) {\n    if (!keyLogger.enabled || !_constants_js__WEBPACK_IMPORTED_MODULE_1__.DUMP_SESSION_KEYS) {\n        return;\n    }\n    if (re) {\n        keyLogger(`REMOTE_EPHEMERAL_PUBLIC_KEY ${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(re.subarray(), 'hex')}`);\n    }\n    else {\n        keyLogger('Missing remote ephemeral keys.');\n    }\n}\nfunction logCipherState(cs1, cs2, keyLogger) {\n    if (!keyLogger.enabled || !_constants_js__WEBPACK_IMPORTED_MODULE_1__.DUMP_SESSION_KEYS) {\n        return;\n    }\n    keyLogger(`CIPHER_STATE_1 ${cs1.n.getUint64()} ${cs1.k && (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(cs1.k, 'hex')}`);\n    keyLogger(`CIPHER_STATE_2 ${cs2.n.getUint64()} ${cs2.k && (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(cs2.k, 'hex')}`);\n}\n//# sourceMappingURL=logger.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-noise/dist/src/logger.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-noise/dist/src/metrics.js":
/*!******************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/metrics.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   registerMetrics: () => (/* binding */ registerMetrics)\n/* harmony export */ });\nfunction registerMetrics(metrics) {\n    return {\n        xxHandshakeSuccesses: metrics.registerCounter('libp2p_noise_xxhandshake_successes_total', {\n            help: 'Total count of noise xxHandshakes successes_'\n        }),\n        xxHandshakeErrors: metrics.registerCounter('libp2p_noise_xxhandshake_error_total', {\n            help: 'Total count of noise xxHandshakes errors'\n        }),\n        encryptedPackets: metrics.registerCounter('libp2p_noise_encrypted_packets_total', {\n            help: 'Total count of noise encrypted packets successfully'\n        }),\n        decryptedPackets: metrics.registerCounter('libp2p_noise_decrypted_packets_total', {\n            help: 'Total count of noise decrypted packets'\n        }),\n        decryptErrors: metrics.registerCounter('libp2p_noise_decrypt_errors_total', {\n            help: 'Total count of noise decrypt errors'\n        })\n    };\n}\n//# sourceMappingURL=metrics.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-noise/dist/src/metrics.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-noise/dist/src/noise.js":
/*!****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/noise.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Noise: () => (/* binding */ Noise)\n/* harmony export */ });\n/* harmony import */ var _libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @libp2p/crypto/keys */ \"./node_modules/@libp2p/crypto/dist/src/keys/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-length-prefixed */ \"./node_modules/it-length-prefixed/dist/src/index.js\");\n/* harmony import */ var it_length_prefixed_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-length-prefixed-stream */ \"./node_modules/it-length-prefixed-stream/dist/src/index.js\");\n/* harmony import */ var it_pair_duplex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! it-pair/duplex */ \"./node_modules/it-pair/dist/src/duplex.js\");\n/* harmony import */ var it_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! it-pipe */ \"./node_modules/it-pipe/dist/src/index.js\");\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uint8arrays/alloc */ \"./node_modules/uint8arrays/dist/src/alloc.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/constants.js\");\n/* harmony import */ var _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./crypto/index.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/crypto/index.browser.js\");\n/* harmony import */ var _crypto_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./crypto.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/crypto.js\");\n/* harmony import */ var _encoder_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./encoder.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/encoder.js\");\n/* harmony import */ var _metrics_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./metrics.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/metrics.js\");\n/* harmony import */ var _performHandshake_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./performHandshake.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/performHandshake.js\");\n/* harmony import */ var _streaming_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./streaming.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/streaming.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Noise {\n    protocol = '/noise';\n    crypto;\n    prologue;\n    staticKey;\n    extensions;\n    metrics;\n    components;\n    constructor(components, init = {}) {\n        const { staticNoiseKey, extensions, crypto, prologueBytes } = init;\n        const { metrics } = components;\n        this.components = components;\n        const _crypto = crypto ?? _crypto_index_js__WEBPACK_IMPORTED_MODULE_6__.defaultCrypto;\n        this.crypto = (0,_crypto_js__WEBPACK_IMPORTED_MODULE_7__.wrapCrypto)(_crypto);\n        this.extensions = extensions;\n        this.metrics = metrics ? (0,_metrics_js__WEBPACK_IMPORTED_MODULE_9__.registerMetrics)(metrics) : undefined;\n        if (staticNoiseKey) {\n            // accepts x25519 private key of length 32\n            this.staticKey = _crypto.generateX25519KeyPairFromSeed(staticNoiseKey);\n        }\n        else {\n            this.staticKey = _crypto.generateX25519KeyPair();\n        }\n        this.prologue = prologueBytes ?? (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_4__.alloc)(0);\n    }\n    /**\n     * Encrypt outgoing data to the remote party (handshake as initiator)\n     *\n     * @param localPeer - PeerId of the receiving peer\n     * @param connection - streaming iterable duplex that will be encrypted\n     * @param remotePeer - PeerId of the remote peer. Used to validate the integrity of the remote peer.\n     */\n    async secureOutbound(localPeer, connection, remotePeer) {\n        const wrappedConnection = (0,it_length_prefixed_stream__WEBPACK_IMPORTED_MODULE_1__.lpStream)(connection, {\n            lengthEncoder: _encoder_js__WEBPACK_IMPORTED_MODULE_8__.uint16BEEncode,\n            lengthDecoder: _encoder_js__WEBPACK_IMPORTED_MODULE_8__.uint16BEDecode,\n            maxDataLength: _constants_js__WEBPACK_IMPORTED_MODULE_5__.NOISE_MSG_MAX_LENGTH_BYTES\n        });\n        if (!localPeer.privateKey) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_12__.CodeError('local peerId does not contain private key', 'ERR_NO_PRIVATE_KEY');\n        }\n        const privateKey = await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_13__.unmarshalPrivateKey)(localPeer.privateKey);\n        const remoteIdentityKey = remotePeer?.publicKey;\n        const handshake = await this.performHandshakeInitiator(wrappedConnection, privateKey, remoteIdentityKey);\n        const conn = await this.createSecureConnection(wrappedConnection, handshake);\n        connection.source = conn.source;\n        connection.sink = conn.sink;\n        return {\n            conn: connection,\n            remoteExtensions: handshake.payload.extensions,\n            remotePeer: await (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_14__.peerIdFromKeys)(handshake.payload.identityKey)\n        };\n    }\n    /**\n     * Decrypt incoming data (handshake as responder).\n     *\n     * @param localPeer - PeerId of the receiving peer.\n     * @param connection - streaming iterable duplex that will be encrypted.\n     * @param remotePeer - optional PeerId of the initiating peer, if known. This may only exist during transport upgrades.\n     */\n    async secureInbound(localPeer, connection, remotePeer) {\n        const wrappedConnection = (0,it_length_prefixed_stream__WEBPACK_IMPORTED_MODULE_1__.lpStream)(connection, {\n            lengthEncoder: _encoder_js__WEBPACK_IMPORTED_MODULE_8__.uint16BEEncode,\n            lengthDecoder: _encoder_js__WEBPACK_IMPORTED_MODULE_8__.uint16BEDecode,\n            maxDataLength: _constants_js__WEBPACK_IMPORTED_MODULE_5__.NOISE_MSG_MAX_LENGTH_BYTES\n        });\n        if (!localPeer.privateKey) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_12__.CodeError('local peerId does not contain private key', 'ERR_NO_PRIVATE_KEY');\n        }\n        const privateKey = await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_13__.unmarshalPrivateKey)(localPeer.privateKey);\n        const remoteIdentityKey = remotePeer?.publicKey;\n        const handshake = await this.performHandshakeResponder(wrappedConnection, privateKey, remoteIdentityKey);\n        const conn = await this.createSecureConnection(wrappedConnection, handshake);\n        connection.source = conn.source;\n        connection.sink = conn.sink;\n        return {\n            conn: connection,\n            remoteExtensions: handshake.payload.extensions,\n            remotePeer: await (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_14__.peerIdFromKeys)(handshake.payload.identityKey)\n        };\n    }\n    /**\n     * Perform XX handshake as initiator.\n     */\n    async performHandshakeInitiator(connection, \n    // TODO: pass private key in noise constructor via Components\n    privateKey, remoteIdentityKey) {\n        let result;\n        try {\n            result = await (0,_performHandshake_js__WEBPACK_IMPORTED_MODULE_10__.performHandshakeInitiator)({\n                connection,\n                privateKey,\n                remoteIdentityKey,\n                log: this.components.logger.forComponent('libp2p:noise:xxhandshake'),\n                crypto: this.crypto,\n                prologue: this.prologue,\n                s: this.staticKey,\n                extensions: this.extensions\n            });\n            this.metrics?.xxHandshakeSuccesses.increment();\n        }\n        catch (e) {\n            this.metrics?.xxHandshakeErrors.increment();\n            throw e;\n        }\n        return result;\n    }\n    /**\n     * Perform XX handshake as responder.\n     */\n    async performHandshakeResponder(connection, \n    // TODO: pass private key in noise constructor via Components\n    privateKey, remoteIdentityKey) {\n        let result;\n        try {\n            result = await (0,_performHandshake_js__WEBPACK_IMPORTED_MODULE_10__.performHandshakeResponder)({\n                connection,\n                privateKey,\n                remoteIdentityKey,\n                log: this.components.logger.forComponent('libp2p:noise:xxhandshake'),\n                crypto: this.crypto,\n                prologue: this.prologue,\n                s: this.staticKey,\n                extensions: this.extensions\n            });\n            this.metrics?.xxHandshakeSuccesses.increment();\n        }\n        catch (e) {\n            this.metrics?.xxHandshakeErrors.increment();\n            throw e;\n        }\n        return result;\n    }\n    async createSecureConnection(connection, handshake) {\n        // Create encryption box/unbox wrapper\n        const [secure, user] = (0,it_pair_duplex__WEBPACK_IMPORTED_MODULE_2__.duplexPair)();\n        const network = connection.unwrap();\n        await (0,it_pipe__WEBPACK_IMPORTED_MODULE_3__.pipe)(secure, // write to wrapper\n        (0,_streaming_js__WEBPACK_IMPORTED_MODULE_11__.encryptStream)(handshake, this.metrics), // encrypt data + prefix with message length\n        network, // send to the remote peer\n        (source) => (0,it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__.decode)(source, { lengthDecoder: _encoder_js__WEBPACK_IMPORTED_MODULE_8__.uint16BEDecode }), // read message length prefix\n        (0,_streaming_js__WEBPACK_IMPORTED_MODULE_11__.decryptStream)(handshake, this.metrics), // decrypt the incoming data\n        secure // pipe to the wrapper\n        );\n        return user;\n    }\n}\n//# sourceMappingURL=noise.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-noise/dist/src/noise.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-noise/dist/src/nonce.js":
/*!****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/nonce.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_NONCE: () => (/* binding */ MAX_NONCE),\n/* harmony export */   MIN_NONCE: () => (/* binding */ MIN_NONCE),\n/* harmony export */   Nonce: () => (/* binding */ Nonce)\n/* harmony export */ });\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/alloc */ \"./node_modules/uint8arrays/dist/src/alloc.js\");\n\nconst MIN_NONCE = 0;\n// For performance reasons, the nonce is represented as a JS `number`\n// Although JS `number` can safely represent integers up to 2 ** 53 - 1, we choose to only use\n// 4 bytes to store the data for performance reason.\n// This is a slight deviation from the noise spec, which describes the max nonce as 2 ** 64 - 2\n// The effect is that this implementation will need a new handshake to be performed after fewer messages are exchanged than other implementations with full uint64 nonces.\n// this MAX_NONCE is still a large number of messages, so the practical effect of this is negligible.\nconst MAX_NONCE = 0xffffffff;\nconst ERR_MAX_NONCE = 'Cipherstate has reached maximum n, a new handshake must be performed';\n/**\n * The nonce is an uint that's increased over time.\n * Maintaining different representations help improve performance.\n */\nclass Nonce {\n    n;\n    bytes;\n    view;\n    constructor(n = MIN_NONCE) {\n        this.n = n;\n        this.bytes = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_0__.alloc)(12);\n        this.view = new DataView(this.bytes.buffer, this.bytes.byteOffset, this.bytes.byteLength);\n        this.view.setUint32(4, n, true);\n    }\n    increment() {\n        this.n++;\n        // Even though we're treating the nonce as 8 bytes, RFC7539 specifies 12 bytes for a nonce.\n        this.view.setUint32(4, this.n, true);\n    }\n    getBytes() {\n        return this.bytes;\n    }\n    getUint64() {\n        return this.n;\n    }\n    assertValue() {\n        if (this.n > MAX_NONCE) {\n            throw new Error(ERR_MAX_NONCE);\n        }\n    }\n}\n//# sourceMappingURL=nonce.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-noise/dist/src/nonce.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-noise/dist/src/performHandshake.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/performHandshake.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   performHandshakeInitiator: () => (/* binding */ performHandshakeInitiator),\n/* harmony export */   performHandshakeResponder: () => (/* binding */ performHandshakeResponder)\n/* harmony export */ });\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/logger.js\");\n/* harmony import */ var _protocol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./protocol.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/protocol.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/utils.js\");\n\n\n\nasync function performHandshakeInitiator(init) {\n    const { log, connection, crypto, privateKey, prologue, s, remoteIdentityKey, extensions } = init;\n    const payload = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.createHandshakePayload)(privateKey, s.publicKey, extensions);\n    const xx = new _protocol_js__WEBPACK_IMPORTED_MODULE_1__.XXHandshakeState({\n        crypto,\n        protocolName: 'Noise_XX_25519_ChaChaPoly_SHA256',\n        initiator: true,\n        prologue,\n        s\n    });\n    (0,_logger_js__WEBPACK_IMPORTED_MODULE_0__.logLocalStaticKeys)(xx.s, log);\n    log.trace('Stage 0 - Initiator starting to send first message.');\n    await connection.write(xx.writeMessageA(_protocol_js__WEBPACK_IMPORTED_MODULE_1__.ZEROLEN));\n    log.trace('Stage 0 - Initiator finished sending first message.');\n    (0,_logger_js__WEBPACK_IMPORTED_MODULE_0__.logLocalEphemeralKeys)(xx.e, log);\n    log.trace('Stage 1 - Initiator waiting to receive first message from responder...');\n    const plaintext = xx.readMessageB(await connection.read());\n    log.trace('Stage 1 - Initiator received the message.');\n    (0,_logger_js__WEBPACK_IMPORTED_MODULE_0__.logRemoteEphemeralKey)(xx.re, log);\n    (0,_logger_js__WEBPACK_IMPORTED_MODULE_0__.logRemoteStaticKey)(xx.rs, log);\n    log.trace(\"Initiator going to check remote's signature...\");\n    const receivedPayload = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.decodeHandshakePayload)(plaintext, xx.rs, remoteIdentityKey);\n    log.trace('All good with the signature!');\n    log.trace('Stage 2 - Initiator sending third handshake message.');\n    await connection.write(xx.writeMessageC(payload));\n    log.trace('Stage 2 - Initiator sent message with signed payload.');\n    const [cs1, cs2] = xx.ss.split();\n    (0,_logger_js__WEBPACK_IMPORTED_MODULE_0__.logCipherState)(cs1, cs2, log);\n    return {\n        payload: receivedPayload,\n        encrypt: (plaintext) => cs1.encryptWithAd(_protocol_js__WEBPACK_IMPORTED_MODULE_1__.ZEROLEN, plaintext),\n        decrypt: (ciphertext, dst) => cs2.decryptWithAd(_protocol_js__WEBPACK_IMPORTED_MODULE_1__.ZEROLEN, ciphertext, dst)\n    };\n}\nasync function performHandshakeResponder(init) {\n    const { log, connection, crypto, privateKey, prologue, s, remoteIdentityKey, extensions } = init;\n    const payload = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.createHandshakePayload)(privateKey, s.publicKey, extensions);\n    const xx = new _protocol_js__WEBPACK_IMPORTED_MODULE_1__.XXHandshakeState({\n        crypto,\n        protocolName: 'Noise_XX_25519_ChaChaPoly_SHA256',\n        initiator: false,\n        prologue,\n        s\n    });\n    (0,_logger_js__WEBPACK_IMPORTED_MODULE_0__.logLocalStaticKeys)(xx.s, log);\n    log.trace('Stage 0 - Responder waiting to receive first message.');\n    xx.readMessageA(await connection.read());\n    log.trace('Stage 0 - Responder received first message.');\n    (0,_logger_js__WEBPACK_IMPORTED_MODULE_0__.logRemoteEphemeralKey)(xx.re, log);\n    log.trace('Stage 1 - Responder sending out first message with signed payload and static key.');\n    await connection.write(xx.writeMessageB(payload));\n    log.trace('Stage 1 - Responder sent the second handshake message with signed payload.');\n    (0,_logger_js__WEBPACK_IMPORTED_MODULE_0__.logLocalEphemeralKeys)(xx.e, log);\n    log.trace('Stage 2 - Responder waiting for third handshake message...');\n    const plaintext = xx.readMessageC(await connection.read());\n    log.trace('Stage 2 - Responder received the message, finished handshake.');\n    const receivedPayload = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.decodeHandshakePayload)(plaintext, xx.rs, remoteIdentityKey);\n    const [cs1, cs2] = xx.ss.split();\n    (0,_logger_js__WEBPACK_IMPORTED_MODULE_0__.logCipherState)(cs1, cs2, log);\n    return {\n        payload: receivedPayload,\n        encrypt: (plaintext) => cs2.encryptWithAd(_protocol_js__WEBPACK_IMPORTED_MODULE_1__.ZEROLEN, plaintext),\n        decrypt: (ciphertext, dst) => cs1.decryptWithAd(_protocol_js__WEBPACK_IMPORTED_MODULE_1__.ZEROLEN, ciphertext, dst)\n    };\n}\n//# sourceMappingURL=performHandshake.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-noise/dist/src/performHandshake.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-noise/dist/src/proto/payload.js":
/*!************************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/proto/payload.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoiseExtensions: () => (/* binding */ NoiseExtensions),\n/* harmony export */   NoiseHandshakePayload: () => (/* binding */ NoiseHandshakePayload)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/alloc */ \"./node_modules/uint8arrays/dist/src/alloc.js\");\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n\nvar NoiseExtensions;\n(function (NoiseExtensions) {\n    let _codec;\n    NoiseExtensions.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.webtransportCerthashes != null) {\n                    for (const value of obj.webtransportCerthashes) {\n                        w.uint32(10);\n                        w.bytes(value);\n                    }\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    webtransportCerthashes: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1: {\n                            obj.webtransportCerthashes.push(reader.bytes());\n                            break;\n                        }\n                        default: {\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    NoiseExtensions.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, NoiseExtensions.codec());\n    };\n    NoiseExtensions.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, NoiseExtensions.codec());\n    };\n})(NoiseExtensions || (NoiseExtensions = {}));\nvar NoiseHandshakePayload;\n(function (NoiseHandshakePayload) {\n    let _codec;\n    NoiseHandshakePayload.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.identityKey != null && obj.identityKey.byteLength > 0)) {\n                    w.uint32(10);\n                    w.bytes(obj.identityKey);\n                }\n                if ((obj.identitySig != null && obj.identitySig.byteLength > 0)) {\n                    w.uint32(18);\n                    w.bytes(obj.identitySig);\n                }\n                if (obj.extensions != null) {\n                    w.uint32(34);\n                    NoiseExtensions.codec().encode(obj.extensions, w);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    identityKey: (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__.alloc)(0),\n                    identitySig: (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__.alloc)(0)\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1: {\n                            obj.identityKey = reader.bytes();\n                            break;\n                        }\n                        case 2: {\n                            obj.identitySig = reader.bytes();\n                            break;\n                        }\n                        case 4: {\n                            obj.extensions = NoiseExtensions.codec().decode(reader, reader.uint32());\n                            break;\n                        }\n                        default: {\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    NoiseHandshakePayload.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, NoiseHandshakePayload.codec());\n    };\n    NoiseHandshakePayload.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, NoiseHandshakePayload.codec());\n    };\n})(NoiseHandshakePayload || (NoiseHandshakePayload = {}));\n//# sourceMappingURL=payload.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-noise/dist/src/proto/payload.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-noise/dist/src/protocol.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/protocol.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractHandshakeState: () => (/* binding */ AbstractHandshakeState),\n/* harmony export */   CipherState: () => (/* binding */ CipherState),\n/* harmony export */   SymmetricState: () => (/* binding */ SymmetricState),\n/* harmony export */   XXHandshakeState: () => (/* binding */ XXHandshakeState),\n/* harmony export */   ZEROLEN: () => (/* binding */ ZEROLEN)\n/* harmony export */ });\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays */ \"./node_modules/uint8arrays/dist/src/index.js\");\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/alloc */ \"./node_modules/uint8arrays/dist/src/alloc.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/errors.js\");\n/* harmony import */ var _nonce_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nonce.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/nonce.js\");\n\n\n\n\n\n// Code in this file is a direct translation of a subset of the noise protocol https://noiseprotocol.org/noise.html,\n// agnostic to libp2p's usage of noise\nconst ZEROLEN = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__.alloc)(0);\nclass CipherState {\n    k;\n    n;\n    crypto;\n    constructor(crypto, k = undefined, n = 0) {\n        this.crypto = crypto;\n        this.k = k;\n        this.n = new _nonce_js__WEBPACK_IMPORTED_MODULE_4__.Nonce(n);\n    }\n    hasKey() {\n        return Boolean(this.k);\n    }\n    encryptWithAd(ad, plaintext) {\n        if (!this.hasKey()) {\n            return plaintext;\n        }\n        this.n.assertValue();\n        const e = this.crypto.encrypt(plaintext, this.n.getBytes(), ad, this.k);\n        this.n.increment();\n        return e;\n    }\n    decryptWithAd(ad, ciphertext, dst) {\n        if (!this.hasKey()) {\n            return ciphertext;\n        }\n        this.n.assertValue();\n        const plaintext = this.crypto.decrypt(ciphertext, this.n.getBytes(), ad, this.k, dst);\n        this.n.increment();\n        return plaintext;\n    }\n}\nclass SymmetricState {\n    cs;\n    ck;\n    h;\n    crypto;\n    constructor(crypto, protocolName) {\n        this.crypto = crypto;\n        const protocolNameBytes = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_1__.fromString)(protocolName, 'utf-8');\n        this.h = hashProtocolName(crypto, protocolNameBytes);\n        this.ck = this.h;\n        this.cs = new CipherState(crypto);\n    }\n    mixKey(ikm) {\n        const [ck, tempK] = this.crypto.hkdf(this.ck, ikm);\n        this.ck = ck;\n        this.cs = new CipherState(this.crypto, tempK);\n    }\n    mixHash(data) {\n        this.h = this.crypto.hash(new uint8arraylist__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayList(this.h, data));\n    }\n    encryptAndHash(plaintext) {\n        const ciphertext = this.cs.encryptWithAd(this.h, plaintext);\n        this.mixHash(ciphertext);\n        return ciphertext;\n    }\n    decryptAndHash(ciphertext) {\n        const plaintext = this.cs.decryptWithAd(this.h, ciphertext);\n        this.mixHash(ciphertext);\n        return plaintext;\n    }\n    split() {\n        const [tempK1, tempK2] = this.crypto.hkdf(this.ck, ZEROLEN);\n        return [new CipherState(this.crypto, tempK1), new CipherState(this.crypto, tempK2)];\n    }\n}\nclass AbstractHandshakeState {\n    ss;\n    s;\n    e;\n    rs;\n    re;\n    initiator;\n    crypto;\n    constructor(init) {\n        const { crypto, protocolName, prologue, initiator, s, e, rs, re } = init;\n        this.crypto = crypto;\n        this.ss = new SymmetricState(crypto, protocolName);\n        this.ss.mixHash(prologue);\n        this.initiator = initiator;\n        this.s = s;\n        this.e = e;\n        this.rs = rs;\n        this.re = re;\n    }\n    writeE() {\n        if (this.e) {\n            throw new Error('ephemeral keypair is already set');\n        }\n        const e = this.crypto.generateKeypair();\n        this.ss.mixHash(e.publicKey);\n        this.e = e;\n        return e.publicKey;\n    }\n    writeS() {\n        if (!this.s) {\n            throw new Error('static keypair is not set');\n        }\n        return this.ss.encryptAndHash(this.s.publicKey);\n    }\n    writeEE() {\n        if (!this.e) {\n            throw new Error('ephemeral keypair is not set');\n        }\n        if (!this.re) {\n            throw new Error('remote ephemeral public key is not set');\n        }\n        this.ss.mixKey(this.crypto.dh(this.e, this.re));\n    }\n    writeES() {\n        if (this.initiator) {\n            if (!this.e) {\n                throw new Error('ephemeral keypair is not set');\n            }\n            if (!this.rs) {\n                throw new Error('remote static public key is not set');\n            }\n            this.ss.mixKey(this.crypto.dh(this.e, this.rs));\n        }\n        else {\n            if (!this.s) {\n                throw new Error('static keypair is not set');\n            }\n            if (!this.re) {\n                throw new Error('remote ephemeral public key is not set');\n            }\n            this.ss.mixKey(this.crypto.dh(this.s, this.re));\n        }\n    }\n    writeSE() {\n        if (this.initiator) {\n            if (!this.s) {\n                throw new Error('static keypair is not set');\n            }\n            if (!this.re) {\n                throw new Error('remote ephemeral public key is not set');\n            }\n            this.ss.mixKey(this.crypto.dh(this.s, this.re));\n        }\n        else {\n            if (!this.e) {\n                throw new Error('ephemeral keypair is not set');\n            }\n            if (!this.rs) {\n                throw new Error('remote static public key is not set');\n            }\n            this.ss.mixKey(this.crypto.dh(this.e, this.rs));\n        }\n    }\n    readE(message, offset = 0) {\n        if (this.re) {\n            throw new Error('remote ephemeral public key is already set');\n        }\n        if (message.byteLength < offset + 32) {\n            throw new Error('message is not long enough');\n        }\n        this.re = message.sublist(offset, offset + 32);\n        this.ss.mixHash(this.re);\n    }\n    readS(message, offset = 0) {\n        if (this.rs) {\n            throw new Error('remote static public key is already set');\n        }\n        const cipherLength = 32 + (this.ss.cs.hasKey() ? 16 : 0);\n        if (message.byteLength < offset + cipherLength) {\n            throw new Error('message is not long enough');\n        }\n        const temp = message.sublist(offset, offset + cipherLength);\n        this.rs = this.ss.decryptAndHash(temp);\n        return cipherLength;\n    }\n    readEE() {\n        this.writeEE();\n    }\n    readES() {\n        this.writeES();\n    }\n    readSE() {\n        this.writeSE();\n    }\n}\n/**\n * A IHandshakeState that's optimized for the XX pattern\n */\nclass XXHandshakeState extends AbstractHandshakeState {\n    // e\n    writeMessageA(payload) {\n        return new uint8arraylist__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayList(this.writeE(), this.ss.encryptAndHash(payload));\n    }\n    // e, ee, s, es\n    writeMessageB(payload) {\n        const e = this.writeE();\n        this.writeEE();\n        const encS = this.writeS();\n        this.writeES();\n        return new uint8arraylist__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayList(e, encS, this.ss.encryptAndHash(payload));\n    }\n    // s, se\n    writeMessageC(payload) {\n        const encS = this.writeS();\n        this.writeSE();\n        return new uint8arraylist__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayList(encS, this.ss.encryptAndHash(payload));\n    }\n    // e\n    readMessageA(message) {\n        try {\n            this.readE(message);\n            return this.ss.decryptAndHash(message.sublist(32));\n        }\n        catch (e) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.InvalidCryptoExchangeError(`handshake stage 0 validation fail: ${e.message}`);\n        }\n    }\n    // e, ee, s, es\n    readMessageB(message) {\n        try {\n            this.readE(message);\n            this.readEE();\n            const consumed = this.readS(message, 32);\n            this.readES();\n            return this.ss.decryptAndHash(message.sublist(32 + consumed));\n        }\n        catch (e) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.InvalidCryptoExchangeError(`handshake stage 1 validation fail: ${e.message}`);\n        }\n    }\n    // s, se\n    readMessageC(message) {\n        try {\n            const consumed = this.readS(message);\n            this.readSE();\n            return this.ss.decryptAndHash(message.sublist(consumed));\n        }\n        catch (e) {\n            throw new _errors_js__WEBPACK_IMPORTED_MODULE_3__.InvalidCryptoExchangeError(`handshake stage 2 validation fail: ${e.message}`);\n        }\n    }\n}\nfunction hashProtocolName(crypto, protocolName) {\n    if (protocolName.length <= 32) {\n        const h = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__.alloc)(32);\n        h.set(protocolName);\n        return h;\n    }\n    else {\n        return crypto.hash(protocolName);\n    }\n}\n//# sourceMappingURL=protocol.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-noise/dist/src/protocol.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-noise/dist/src/streaming.js":
/*!********************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/streaming.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decryptStream: () => (/* binding */ decryptStream),\n/* harmony export */   encryptStream: () => (/* binding */ encryptStream)\n/* harmony export */ });\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/constants.js\");\n/* harmony import */ var _encoder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoder.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/encoder.js\");\n\n\n\nconst CHACHA_TAG_LENGTH = 16;\n// Returns generator that encrypts payload from the user\nfunction encryptStream(handshake, metrics) {\n    return async function* (source) {\n        for await (const chunk of source) {\n            for (let i = 0; i < chunk.length; i += _constants_js__WEBPACK_IMPORTED_MODULE_1__.NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG) {\n                let end = i + _constants_js__WEBPACK_IMPORTED_MODULE_1__.NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG;\n                if (end > chunk.length) {\n                    end = chunk.length;\n                }\n                let data;\n                if (chunk instanceof Uint8Array) {\n                    data = handshake.encrypt(chunk.subarray(i, end));\n                }\n                else {\n                    data = handshake.encrypt(chunk.sublist(i, end));\n                }\n                metrics?.encryptedPackets.increment();\n                yield new uint8arraylist__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayList((0,_encoder_js__WEBPACK_IMPORTED_MODULE_2__.uint16BEEncode)(data.byteLength), data);\n            }\n        }\n    };\n}\n// Decrypt received payload to the user\nfunction decryptStream(handshake, metrics) {\n    return async function* (source) {\n        for await (const chunk of source) {\n            for (let i = 0; i < chunk.length; i += _constants_js__WEBPACK_IMPORTED_MODULE_1__.NOISE_MSG_MAX_LENGTH_BYTES) {\n                let end = i + _constants_js__WEBPACK_IMPORTED_MODULE_1__.NOISE_MSG_MAX_LENGTH_BYTES;\n                if (end > chunk.length) {\n                    end = chunk.length;\n                }\n                if (end - CHACHA_TAG_LENGTH < i) {\n                    throw new Error('Invalid chunk');\n                }\n                const encrypted = chunk.sublist(i, end);\n                // memory allocation is not cheap so reuse the encrypted Uint8Array\n                // see https://github.com/ChainSafe/js-libp2p-noise/pull/242#issue-1422126164\n                // this is ok because chacha20 reads bytes one by one and don't reread after that\n                // it's also tested in https://github.com/ChainSafe/as-chacha20poly1305/pull/1/files#diff-25252846b58979dcaf4e41d47b3eadd7e4f335e7fb98da6c049b1f9cd011f381R48\n                const dst = chunk.subarray(i, end - CHACHA_TAG_LENGTH);\n                try {\n                    const plaintext = handshake.decrypt(encrypted, dst);\n                    metrics?.decryptedPackets.increment();\n                    yield plaintext;\n                }\n                catch (e) {\n                    metrics?.decryptErrors.increment();\n                    throw e;\n                }\n            }\n        }\n    };\n}\n//# sourceMappingURL=streaming.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-noise/dist/src/streaming.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-noise/dist/src/utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-noise/dist/src/utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHandshakePayload: () => (/* binding */ createHandshakePayload),\n/* harmony export */   decodeHandshakePayload: () => (/* binding */ decodeHandshakePayload),\n/* harmony export */   getSignaturePayload: () => (/* binding */ getSignaturePayload)\n/* harmony export */ });\n/* harmony import */ var _libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/crypto/keys */ \"./node_modules/@libp2p/crypto/dist/src/keys/index.js\");\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays */ \"./node_modules/uint8arrays/dist/src/index.js\");\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/concat */ \"./node_modules/uint8arrays/dist/src/concat.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/errors.js\");\n/* harmony import */ var _proto_payload_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./proto/payload.js */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/proto/payload.js\");\n\n\n\n\n\n\n\nasync function createHandshakePayload(privateKey, staticPublicKey, extensions) {\n    const identitySig = await privateKey.sign(getSignaturePayload(staticPublicKey));\n    return _proto_payload_js__WEBPACK_IMPORTED_MODULE_5__.NoiseHandshakePayload.encode({\n        identityKey: privateKey.public.bytes,\n        identitySig,\n        extensions\n    });\n}\nasync function decodeHandshakePayload(payloadBytes, remoteStaticKey, remoteIdentityKey) {\n    try {\n        const payload = _proto_payload_js__WEBPACK_IMPORTED_MODULE_5__.NoiseHandshakePayload.decode(payloadBytes);\n        if (remoteIdentityKey) {\n            const remoteIdentityKeyBytes = remoteIdentityKey.subarray();\n            if (!(0,uint8arrays__WEBPACK_IMPORTED_MODULE_1__.equals)(remoteIdentityKeyBytes, payload.identityKey)) {\n                throw new Error(`Payload identity key ${(0,uint8arrays__WEBPACK_IMPORTED_MODULE_1__.toString)(payload.identityKey, 'hex')} does not match expected remote identity key ${(0,uint8arrays__WEBPACK_IMPORTED_MODULE_1__.toString)(remoteIdentityKeyBytes, 'hex')}`);\n            }\n        }\n        if (!remoteStaticKey) {\n            throw new Error('Remote static does not exist');\n        }\n        const signaturePayload = getSignaturePayload(remoteStaticKey);\n        const publicKey = (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_6__.unmarshalPublicKey)(payload.identityKey);\n        if (!(await publicKey.verify(signaturePayload, payload.identitySig))) {\n            throw new Error('Invalid payload signature');\n        }\n        return payload;\n    }\n    catch (e) {\n        throw new _errors_js__WEBPACK_IMPORTED_MODULE_4__.UnexpectedPeerError(e.message);\n    }\n}\nfunction getSignaturePayload(publicKey) {\n    const prefix = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)('noise-libp2p-static-key:');\n    if (publicKey instanceof Uint8Array) {\n        return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_2__.concat)([prefix, publicKey], prefix.length + publicKey.length);\n    }\n    publicKey.prepend(prefix);\n    return publicKey;\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-noise/dist/src/utils.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-yamux/dist/src/config.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-yamux/dist/src/config.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultConfig: () => (/* binding */ defaultConfig),\n/* harmony export */   verifyConfig: () => (/* binding */ verifyConfig)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@chainsafe/libp2p-yamux/dist/src/constants.js\");\n\n\nconst defaultConfig = {\n    enableKeepAlive: true,\n    keepAliveInterval: 30000,\n    maxInboundStreams: 1000,\n    maxOutboundStreams: 1000,\n    initialStreamWindowSize: _constants_js__WEBPACK_IMPORTED_MODULE_0__.INITIAL_STREAM_WINDOW,\n    maxStreamWindowSize: _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_STREAM_WINDOW,\n    maxMessageSize: 64 * 1024\n};\nfunction verifyConfig(config) {\n    if (config.keepAliveInterval <= 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('keep-alive interval must be positive', _constants_js__WEBPACK_IMPORTED_MODULE_0__.ERR_INVALID_CONFIG);\n    }\n    if (config.maxInboundStreams < 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('max inbound streams must be larger or equal 0', _constants_js__WEBPACK_IMPORTED_MODULE_0__.ERR_INVALID_CONFIG);\n    }\n    if (config.maxOutboundStreams < 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('max outbound streams must be larger or equal 0', _constants_js__WEBPACK_IMPORTED_MODULE_0__.ERR_INVALID_CONFIG);\n    }\n    if (config.initialStreamWindowSize < _constants_js__WEBPACK_IMPORTED_MODULE_0__.INITIAL_STREAM_WINDOW) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('InitialStreamWindowSize must be larger or equal 256 kB', _constants_js__WEBPACK_IMPORTED_MODULE_0__.ERR_INVALID_CONFIG);\n    }\n    if (config.maxStreamWindowSize < config.initialStreamWindowSize) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('MaxStreamWindowSize must be larger than the InitialStreamWindowSize', _constants_js__WEBPACK_IMPORTED_MODULE_0__.ERR_INVALID_CONFIG);\n    }\n    if (config.maxStreamWindowSize > 2 ** 32 - 1) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('MaxStreamWindowSize must be less than equal MAX_UINT32', _constants_js__WEBPACK_IMPORTED_MODULE_0__.ERR_INVALID_CONFIG);\n    }\n    if (config.maxMessageSize < 1024) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('MaxMessageSize must be greater than a kilobyte', _constants_js__WEBPACK_IMPORTED_MODULE_0__.ERR_INVALID_CONFIG);\n    }\n}\n//# sourceMappingURL=config.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-yamux/dist/src/config.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-yamux/dist/src/constants.js":
/*!********************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-yamux/dist/src/constants.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERR_BOTH_CLIENTS: () => (/* binding */ ERR_BOTH_CLIENTS),\n/* harmony export */   ERR_DECODE_INVALID_VERSION: () => (/* binding */ ERR_DECODE_INVALID_VERSION),\n/* harmony export */   ERR_DECODE_IN_PROGRESS: () => (/* binding */ ERR_DECODE_IN_PROGRESS),\n/* harmony export */   ERR_INVALID_CONFIG: () => (/* binding */ ERR_INVALID_CONFIG),\n/* harmony export */   ERR_INVALID_FRAME: () => (/* binding */ ERR_INVALID_FRAME),\n/* harmony export */   ERR_MAX_OUTBOUND_STREAMS_EXCEEDED: () => (/* binding */ ERR_MAX_OUTBOUND_STREAMS_EXCEEDED),\n/* harmony export */   ERR_MUXER_LOCAL_CLOSED: () => (/* binding */ ERR_MUXER_LOCAL_CLOSED),\n/* harmony export */   ERR_MUXER_REMOTE_CLOSED: () => (/* binding */ ERR_MUXER_REMOTE_CLOSED),\n/* harmony export */   ERR_NOT_MATCHING_PING: () => (/* binding */ ERR_NOT_MATCHING_PING),\n/* harmony export */   ERR_RECV_WINDOW_EXCEEDED: () => (/* binding */ ERR_RECV_WINDOW_EXCEEDED),\n/* harmony export */   ERR_STREAM_ABORT: () => (/* binding */ ERR_STREAM_ABORT),\n/* harmony export */   ERR_STREAM_ALREADY_EXISTS: () => (/* binding */ ERR_STREAM_ALREADY_EXISTS),\n/* harmony export */   ERR_STREAM_RESET: () => (/* binding */ ERR_STREAM_RESET),\n/* harmony export */   ERR_UNREQUESTED_PING: () => (/* binding */ ERR_UNREQUESTED_PING),\n/* harmony export */   INITIAL_STREAM_WINDOW: () => (/* binding */ INITIAL_STREAM_WINDOW),\n/* harmony export */   MAX_STREAM_WINDOW: () => (/* binding */ MAX_STREAM_WINDOW),\n/* harmony export */   PROTOCOL_ERRORS: () => (/* binding */ PROTOCOL_ERRORS)\n/* harmony export */ });\n// Protocol violation errors\nconst ERR_INVALID_FRAME = 'ERR_INVALID_FRAME';\nconst ERR_UNREQUESTED_PING = 'ERR_UNREQUESTED_PING';\nconst ERR_NOT_MATCHING_PING = 'ERR_NOT_MATCHING_PING';\nconst ERR_STREAM_ALREADY_EXISTS = 'ERR_STREAM_ALREADY_EXISTS';\nconst ERR_DECODE_INVALID_VERSION = 'ERR_DECODE_INVALID_VERSION';\nconst ERR_BOTH_CLIENTS = 'ERR_BOTH_CLIENTS';\nconst ERR_RECV_WINDOW_EXCEEDED = 'ERR_RECV_WINDOW_EXCEEDED';\nconst PROTOCOL_ERRORS = new Set([\n    ERR_INVALID_FRAME,\n    ERR_UNREQUESTED_PING,\n    ERR_NOT_MATCHING_PING,\n    ERR_STREAM_ALREADY_EXISTS,\n    ERR_DECODE_INVALID_VERSION,\n    ERR_BOTH_CLIENTS,\n    ERR_RECV_WINDOW_EXCEEDED\n]);\n// local errors\nconst ERR_INVALID_CONFIG = 'ERR_INVALID_CONFIG';\nconst ERR_MUXER_LOCAL_CLOSED = 'ERR_MUXER_LOCAL_CLOSED';\nconst ERR_MUXER_REMOTE_CLOSED = 'ERR_MUXER_REMOTE_CLOSED';\nconst ERR_STREAM_RESET = 'ERR_STREAM_RESET';\nconst ERR_STREAM_ABORT = 'ERR_STREAM_ABORT';\nconst ERR_MAX_OUTBOUND_STREAMS_EXCEEDED = 'ERROR_MAX_OUTBOUND_STREAMS_EXCEEDED';\nconst ERR_DECODE_IN_PROGRESS = 'ERR_DECODE_IN_PROGRESS';\n/**\n * INITIAL_STREAM_WINDOW is the initial stream window size.\n *\n * Not an implementation choice, this is defined in the specification\n */\nconst INITIAL_STREAM_WINDOW = 256 * 1024;\n/**\n * Default max stream window\n */\nconst MAX_STREAM_WINDOW = 16 * 1024 * 1024;\n//# sourceMappingURL=constants.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-yamux/dist/src/constants.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-yamux/dist/src/decode.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-yamux/dist/src/decode.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Decoder: () => (/* binding */ Decoder),\n/* harmony export */   decodeHeader: () => (/* binding */ decodeHeader),\n/* harmony export */   returnlessSource: () => (/* binding */ returnlessSource)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@chainsafe/libp2p-yamux/dist/src/constants.js\");\n/* harmony import */ var _frame_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./frame.js */ \"./node_modules/@chainsafe/libp2p-yamux/dist/src/frame.js\");\n\n\n\n\n// used to bitshift in decoding\n// native bitshift can overflow into a negative number, so we bitshift by multiplying by a power of 2\nconst twoPow24 = 2 ** 24;\n/**\n * Decode a header from the front of a buffer\n *\n * @param data - Assumed to have enough bytes for a header\n */\nfunction decodeHeader(data) {\n    if (data[0] !== _frame_js__WEBPACK_IMPORTED_MODULE_2__.YAMUX_VERSION) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Invalid frame version', _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_DECODE_INVALID_VERSION);\n    }\n    return {\n        type: data[1],\n        flag: (data[2] << 8) + data[3],\n        streamID: (data[4] * twoPow24) + (data[5] << 16) + (data[6] << 8) + data[7],\n        length: (data[8] * twoPow24) + (data[9] << 16) + (data[10] << 8) + data[11]\n    };\n}\n/**\n * Decodes yamux frames from a source\n */\nclass Decoder {\n    source;\n    /** Buffer for in-progress frames */\n    buffer;\n    /** Used to sanity check against decoding while in an inconsistent state */\n    frameInProgress;\n    constructor(source) {\n        // Normally, when entering a for-await loop with an iterable/async iterable, the only ways to exit the loop are:\n        // 1. exhaust the iterable\n        // 2. throw an error - slow, undesirable if there's not actually an error\n        // 3. break or return - calls the iterable's `return` method, finalizing the iterable, no more iteration possible\n        //\n        // In this case, we want to enter (and exit) a for-await loop per chunked data frame and continue processing the iterable.\n        // To do this, we strip the `return` method from the iterator and can now `break` early and continue iterating.\n        // Exiting the main for-await is still possible via 1. and 2.\n        this.source = returnlessSource(source);\n        this.buffer = new uint8arraylist__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayList();\n        this.frameInProgress = false;\n    }\n    /**\n     * Emits frames from the decoder source.\n     *\n     * Note: If `readData` is emitted, it _must_ be called before the next iteration\n     * Otherwise an error is thrown\n     */\n    async *emitFrames() {\n        for await (const chunk of this.source) {\n            this.buffer.append(chunk);\n            // Loop to consume as many bytes from the buffer as possible\n            // Eg: when a single chunk contains several frames\n            while (true) {\n                const header = this.readHeader();\n                if (header === undefined) {\n                    break;\n                }\n                const { type, length } = header;\n                if (type === _frame_js__WEBPACK_IMPORTED_MODULE_2__.FrameType.Data) {\n                    // This is a data frame, the frame body must still be read\n                    // `readData` must be called before the next iteration here\n                    this.frameInProgress = true;\n                    yield {\n                        header,\n                        readData: this.readBytes.bind(this, length)\n                    };\n                }\n                else {\n                    yield { header };\n                }\n            }\n        }\n    }\n    readHeader() {\n        // Sanity check to ensure a header isn't read when another frame is partially decoded\n        // In practice this shouldn't happen\n        if (this.frameInProgress) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('decoding frame already in progress', _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_DECODE_IN_PROGRESS);\n        }\n        if (this.buffer.length < _frame_js__WEBPACK_IMPORTED_MODULE_2__.HEADER_LENGTH) {\n            // not enough data yet\n            return;\n        }\n        const header = decodeHeader(this.buffer.subarray(0, _frame_js__WEBPACK_IMPORTED_MODULE_2__.HEADER_LENGTH));\n        this.buffer.consume(_frame_js__WEBPACK_IMPORTED_MODULE_2__.HEADER_LENGTH);\n        return header;\n    }\n    async readBytes(length) {\n        if (this.buffer.length < length) {\n            for await (const chunk of this.source) {\n                this.buffer.append(chunk);\n                if (this.buffer.length >= length) {\n                    // see note above, the iterator is not `return`ed here\n                    break;\n                }\n            }\n        }\n        const out = this.buffer.sublist(0, length);\n        this.buffer.consume(length);\n        // The next frame can now be decoded\n        this.frameInProgress = false;\n        return out;\n    }\n}\n/**\n * Strip the `return` method from a `Source`\n */\nfunction returnlessSource(source) {\n    if (source[Symbol.iterator] !== undefined) {\n        const iterator = source[Symbol.iterator]();\n        iterator.return = undefined;\n        return {\n            [Symbol.iterator]() { return iterator; }\n        };\n    }\n    else if (source[Symbol.asyncIterator] !== undefined) {\n        const iterator = source[Symbol.asyncIterator]();\n        iterator.return = undefined;\n        return {\n            [Symbol.asyncIterator]() { return iterator; }\n        };\n    }\n    else {\n        throw new Error('a source must be either an iterable or an async iterable');\n    }\n}\n//# sourceMappingURL=decode.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-yamux/dist/src/decode.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-yamux/dist/src/encode.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-yamux/dist/src/encode.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeHeader: () => (/* binding */ encodeHeader)\n/* harmony export */ });\n/* harmony import */ var _frame_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./frame.js */ \"./node_modules/@chainsafe/libp2p-yamux/dist/src/frame.js\");\n\nfunction encodeHeader(header) {\n    const frame = new Uint8Array(_frame_js__WEBPACK_IMPORTED_MODULE_0__.HEADER_LENGTH);\n    // always assume version 0\n    // frameView.setUint8(0, header.version)\n    frame[1] = header.type;\n    frame[2] = header.flag >>> 8;\n    frame[3] = header.flag;\n    frame[4] = header.streamID >>> 24;\n    frame[5] = header.streamID >>> 16;\n    frame[6] = header.streamID >>> 8;\n    frame[7] = header.streamID;\n    frame[8] = header.length >>> 24;\n    frame[9] = header.length >>> 16;\n    frame[10] = header.length >>> 8;\n    frame[11] = header.length;\n    return frame;\n}\n//# sourceMappingURL=encode.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-yamux/dist/src/encode.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-yamux/dist/src/frame.js":
/*!****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-yamux/dist/src/frame.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Flag: () => (/* binding */ Flag),\n/* harmony export */   FrameType: () => (/* binding */ FrameType),\n/* harmony export */   GoAwayCode: () => (/* binding */ GoAwayCode),\n/* harmony export */   HEADER_LENGTH: () => (/* binding */ HEADER_LENGTH),\n/* harmony export */   YAMUX_VERSION: () => (/* binding */ YAMUX_VERSION),\n/* harmony export */   stringifyHeader: () => (/* binding */ stringifyHeader)\n/* harmony export */ });\nvar FrameType;\n(function (FrameType) {\n    /** Used to transmit data. May transmit zero length payloads depending on the flags. */\n    FrameType[FrameType[\"Data\"] = 0] = \"Data\";\n    /** Used to updated the senders receive window size. This is used to implement per-session flow control. */\n    FrameType[FrameType[\"WindowUpdate\"] = 1] = \"WindowUpdate\";\n    /** Used to measure RTT. It can also be used to heart-beat and do keep-alives over TCP. */\n    FrameType[FrameType[\"Ping\"] = 2] = \"Ping\";\n    /** Used to close a session. */\n    FrameType[FrameType[\"GoAway\"] = 3] = \"GoAway\";\n})(FrameType || (FrameType = {}));\nvar Flag;\n(function (Flag) {\n    /** Signals the start of a new stream. May be sent with a data or window update message. Also sent with a ping to indicate outbound. */\n    Flag[Flag[\"SYN\"] = 1] = \"SYN\";\n    /** Acknowledges the start of a new stream. May be sent with a data or window update message. Also sent with a ping to indicate response. */\n    Flag[Flag[\"ACK\"] = 2] = \"ACK\";\n    /** Performs a half-close of a stream. May be sent with a data message or window update. */\n    Flag[Flag[\"FIN\"] = 4] = \"FIN\";\n    /** Reset a stream immediately. May be sent with a data or window update message. */\n    Flag[Flag[\"RST\"] = 8] = \"RST\";\n})(Flag || (Flag = {}));\nconst flagCodes = Object.values(Flag).filter((x) => typeof x !== 'string');\nconst YAMUX_VERSION = 0;\nvar GoAwayCode;\n(function (GoAwayCode) {\n    GoAwayCode[GoAwayCode[\"NormalTermination\"] = 0] = \"NormalTermination\";\n    GoAwayCode[GoAwayCode[\"ProtocolError\"] = 1] = \"ProtocolError\";\n    GoAwayCode[GoAwayCode[\"InternalError\"] = 2] = \"InternalError\";\n})(GoAwayCode || (GoAwayCode = {}));\nconst HEADER_LENGTH = 12;\nfunction stringifyHeader(header) {\n    const flags = flagCodes.filter(f => (header.flag & f) === f).map(f => Flag[f]).join('|');\n    return `streamID=${header.streamID} type=${FrameType[header.type]} flag=${flags} length=${header.length}`;\n}\n//# sourceMappingURL=frame.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-yamux/dist/src/frame.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-yamux/dist/src/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-yamux/dist/src/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoAwayCode: () => (/* reexport safe */ _frame_js__WEBPACK_IMPORTED_MODULE_1__.GoAwayCode),\n/* harmony export */   yamux: () => (/* binding */ yamux)\n/* harmony export */ });\n/* harmony import */ var _muxer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./muxer.js */ \"./node_modules/@chainsafe/libp2p-yamux/dist/src/muxer.js\");\n/* harmony import */ var _frame_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./frame.js */ \"./node_modules/@chainsafe/libp2p-yamux/dist/src/frame.js\");\n/**\n * @packageDocumentation\n *\n * This module is a JavaScript implementation of [Yamux from Hashicorp](https://github.com/hashicorp/yamux/blob/master/spec.md) designed to be used with [js-libp2p](https://github.com/libp2p/js-libp2p).\n *\n * @example Configure libp2p with Yamux\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n * import { yamux } from '@chainsafe/libp2p-yamux'\n *\n * const node = await createLibp2p({\n *   // ... other options\n *   streamMuxers: [\n *     yamux()\n *   ]\n * })\n * ```\n *\n * @example Using the low-level API\n *\n * ```js\n * import { yamux } from '@chainsafe/libp2p-yamux'\n * import { pipe } from 'it-pipe'\n * import { duplexPair } from 'it-pair/duplex'\n * import all from 'it-all'\n *\n * // Connect two yamux muxers to demo basic stream multiplexing functionality\n *\n * const clientMuxer = yamux({\n *   client: true,\n *   onIncomingStream: stream => {\n *     // echo data on incoming streams\n *     pipe(stream, stream)\n *   },\n *   onStreamEnd: stream => {\n *     // do nothing\n *   }\n * })()\n *\n * const serverMuxer = yamux({\n *   client: false,\n *   onIncomingStream: stream => {\n *     // echo data on incoming streams\n *     pipe(stream, stream)\n *   },\n *   onStreamEnd: stream => {\n *     // do nothing\n *   }\n * })()\n *\n * // `p` is our \"connections\", what we use to connect the two sides\n * // In a real application, a connection is usually to a remote computer\n * const p = duplexPair()\n *\n * // connect the muxers together\n * pipe(p[0], clientMuxer, p[0])\n * pipe(p[1], serverMuxer, p[1])\n *\n * // now either side can open streams\n * const stream0 = clientMuxer.newStream()\n * const stream1 = serverMuxer.newStream()\n *\n * // Send some data to the other side\n * const encoder = new TextEncoder()\n * const data = [encoder.encode('hello'), encoder.encode('world')]\n * pipe(data, stream0)\n *\n * // Receive data back\n * const result = await pipe(stream0, all)\n *\n * // close a stream\n * stream1.close()\n *\n * // close the muxer\n * clientMuxer.close()\n * ```\n */\n\n\nfunction yamux(init = {}) {\n    return (components) => new _muxer_js__WEBPACK_IMPORTED_MODULE_0__.Yamux(components, init);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-yamux/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-yamux/dist/src/muxer.js":
/*!****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-yamux/dist/src/muxer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Yamux: () => (/* binding */ Yamux),\n/* harmony export */   YamuxMuxer: () => (/* binding */ YamuxMuxer)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/events.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var get_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! get-iterator */ \"./node_modules/get-iterator/dist/src/index.js\");\n/* harmony import */ var it_pushable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-pushable */ \"./node_modules/it-pushable/dist/src/index.js\");\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config.js */ \"./node_modules/@chainsafe/libp2p-yamux/dist/src/config.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@chainsafe/libp2p-yamux/dist/src/constants.js\");\n/* harmony import */ var _decode_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./decode.js */ \"./node_modules/@chainsafe/libp2p-yamux/dist/src/decode.js\");\n/* harmony import */ var _encode_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./encode.js */ \"./node_modules/@chainsafe/libp2p-yamux/dist/src/encode.js\");\n/* harmony import */ var _frame_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./frame.js */ \"./node_modules/@chainsafe/libp2p-yamux/dist/src/frame.js\");\n/* harmony import */ var _stream_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./stream.js */ \"./node_modules/@chainsafe/libp2p-yamux/dist/src/stream.js\");\n\n\n\n\n\n\n\n\n\n\nconst YAMUX_PROTOCOL_ID = '/yamux/1.0.0';\nconst CLOSE_TIMEOUT = 500;\nclass Yamux {\n    protocol = YAMUX_PROTOCOL_ID;\n    _components;\n    _init;\n    constructor(components, init = {}) {\n        this._components = components;\n        this._init = init;\n    }\n    createStreamMuxer(init) {\n        return new YamuxMuxer(this._components, {\n            ...this._init,\n            ...init\n        });\n    }\n}\nclass YamuxMuxer {\n    protocol = YAMUX_PROTOCOL_ID;\n    source;\n    sink;\n    config;\n    log;\n    logger;\n    /** Used to close the muxer from either the sink or source */\n    closeController;\n    /** The next stream id to be used when initiating a new stream */\n    nextStreamID;\n    /** Primary stream mapping, streamID => stream */\n    _streams;\n    /** The next ping id to be used when pinging */\n    nextPingID;\n    /** Tracking info for the currently active ping */\n    activePing;\n    /** Round trip time */\n    rtt;\n    /** True if client, false if server */\n    client;\n    localGoAway;\n    remoteGoAway;\n    /** Number of tracked inbound streams */\n    numInboundStreams;\n    /** Number of tracked outbound streams */\n    numOutboundStreams;\n    onIncomingStream;\n    onStreamEnd;\n    constructor(components, init) {\n        this.client = init.direction === 'outbound';\n        this.config = { ..._config_js__WEBPACK_IMPORTED_MODULE_3__.defaultConfig, ...init };\n        this.logger = components.logger;\n        this.log = this.logger.forComponent('libp2p:yamux');\n        (0,_config_js__WEBPACK_IMPORTED_MODULE_3__.verifyConfig)(this.config);\n        this.closeController = new AbortController();\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.setMaxListeners)(Infinity, this.closeController.signal);\n        this.onIncomingStream = init.onIncomingStream;\n        this.onStreamEnd = init.onStreamEnd;\n        this._streams = new Map();\n        this.source = (0,it_pushable__WEBPACK_IMPORTED_MODULE_1__.pushable)({\n            onEnd: () => {\n                this.log?.trace('muxer source ended');\n                this._streams.forEach(stream => {\n                    stream.destroy();\n                });\n            }\n        });\n        this.sink = async (source) => {\n            const shutDownListener = () => {\n                const iterator = (0,get_iterator__WEBPACK_IMPORTED_MODULE_0__.getIterator)(source);\n                if (iterator.return != null) {\n                    const res = iterator.return();\n                    if (isPromise(res)) {\n                        res.catch(err => {\n                            this.log?.('could not cause sink source to return', err);\n                        });\n                    }\n                }\n            };\n            let reason, error;\n            try {\n                const decoder = new _decode_js__WEBPACK_IMPORTED_MODULE_5__.Decoder(source);\n                try {\n                    this.closeController.signal.addEventListener('abort', shutDownListener);\n                    for await (const frame of decoder.emitFrames()) {\n                        await this.handleFrame(frame.header, frame.readData);\n                    }\n                }\n                finally {\n                    this.closeController.signal.removeEventListener('abort', shutDownListener);\n                }\n                reason = _frame_js__WEBPACK_IMPORTED_MODULE_7__.GoAwayCode.NormalTermination;\n            }\n            catch (err) {\n                // either a protocol or internal error\n                const errCode = err.code;\n                if (_constants_js__WEBPACK_IMPORTED_MODULE_4__.PROTOCOL_ERRORS.has(errCode)) {\n                    this.log?.error('protocol error in sink', err);\n                    reason = _frame_js__WEBPACK_IMPORTED_MODULE_7__.GoAwayCode.ProtocolError;\n                }\n                else {\n                    this.log?.error('internal error in sink', err);\n                    reason = _frame_js__WEBPACK_IMPORTED_MODULE_7__.GoAwayCode.InternalError;\n                }\n                error = err;\n            }\n            this.log?.trace('muxer sink ended');\n            if (error != null) {\n                this.abort(error, reason);\n            }\n            else {\n                await this.close({ reason });\n            }\n        };\n        this.numInboundStreams = 0;\n        this.numOutboundStreams = 0;\n        // client uses odd streamIDs, server uses even streamIDs\n        this.nextStreamID = this.client ? 1 : 2;\n        this.nextPingID = 0;\n        this.rtt = -1;\n        this.log?.trace('muxer created');\n        if (this.config.enableKeepAlive) {\n            this.keepAliveLoop().catch(e => this.log?.error('keepalive error: %s', e));\n        }\n        // send an initial ping to establish RTT\n        this.ping().catch(e => this.log?.error('ping error: %s', e));\n    }\n    get streams() {\n        return Array.from(this._streams.values());\n    }\n    newStream(name) {\n        if (this.remoteGoAway !== undefined) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('muxer closed remotely', _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_MUXER_REMOTE_CLOSED);\n        }\n        if (this.localGoAway !== undefined) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('muxer closed locally', _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_MUXER_LOCAL_CLOSED);\n        }\n        const id = this.nextStreamID;\n        this.nextStreamID += 2;\n        // check against our configured maximum number of outbound streams\n        if (this.numOutboundStreams >= this.config.maxOutboundStreams) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('max outbound streams exceeded', _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_MAX_OUTBOUND_STREAMS_EXCEEDED);\n        }\n        this.log?.trace('new outgoing stream id=%s', id);\n        const stream = this._newStream(id, name, _stream_js__WEBPACK_IMPORTED_MODULE_8__.StreamState.Init, 'outbound');\n        this._streams.set(id, stream);\n        this.numOutboundStreams++;\n        // send a window update to open the stream on the receiver end\n        stream.sendWindowUpdate();\n        return stream;\n    }\n    /**\n     * Initiate a ping and wait for a response\n     *\n     * Note: only a single ping will be initiated at a time.\n     * If a ping is already in progress, a new ping will not be initiated.\n     *\n     * @returns the round-trip-time in milliseconds\n     */\n    async ping() {\n        if (this.remoteGoAway !== undefined) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('muxer closed remotely', _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_MUXER_REMOTE_CLOSED);\n        }\n        if (this.localGoAway !== undefined) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('muxer closed locally', _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_MUXER_LOCAL_CLOSED);\n        }\n        // An active ping does not yet exist, handle the process here\n        if (this.activePing === undefined) {\n            // create active ping\n            let _resolve = () => { };\n            this.activePing = {\n                id: this.nextPingID++,\n                // this promise awaits resolution or the close controller aborting\n                promise: new Promise((resolve, reject) => {\n                    const closed = () => {\n                        reject(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('muxer closed locally', _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_MUXER_LOCAL_CLOSED));\n                    };\n                    this.closeController.signal.addEventListener('abort', closed, { once: true });\n                    _resolve = () => {\n                        this.closeController.signal.removeEventListener('abort', closed);\n                        resolve();\n                    };\n                }),\n                resolve: _resolve\n            };\n            // send ping\n            const start = Date.now();\n            this.sendPing(this.activePing.id);\n            // await pong\n            try {\n                await this.activePing.promise;\n            }\n            finally {\n                // clean-up active ping\n                delete this.activePing;\n            }\n            // update rtt\n            const end = Date.now();\n            this.rtt = end - start;\n        }\n        else {\n            // an active ping is already in progress, piggyback off that\n            await this.activePing.promise;\n        }\n        return this.rtt;\n    }\n    /**\n     * Get the ping round trip time\n     *\n     * Note: Will return 0 if no successful ping has yet been completed\n     *\n     * @returns the round-trip-time in milliseconds\n     */\n    getRTT() {\n        return this.rtt;\n    }\n    /**\n     * Close the muxer\n     */\n    async close(options = {}) {\n        if (this.closeController.signal.aborted) {\n            // already closed\n            return;\n        }\n        const reason = options?.reason ?? _frame_js__WEBPACK_IMPORTED_MODULE_7__.GoAwayCode.NormalTermination;\n        this.log?.trace('muxer close reason=%s', reason);\n        if (options.signal == null) {\n            const signal = AbortSignal.timeout(CLOSE_TIMEOUT);\n            (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.setMaxListeners)(Infinity, signal);\n            options = {\n                ...options,\n                signal\n            };\n        }\n        try {\n            await Promise.all([...this._streams.values()].map(async (s) => s.close(options)));\n            // send reason to the other side, allow the other side to close gracefully\n            this.sendGoAway(reason);\n            this._closeMuxer();\n        }\n        catch (err) {\n            this.abort(err);\n        }\n    }\n    abort(err, reason) {\n        if (this.closeController.signal.aborted) {\n            // already closed\n            return;\n        }\n        reason = reason ?? _frame_js__WEBPACK_IMPORTED_MODULE_7__.GoAwayCode.InternalError;\n        // If reason was provided, use that, otherwise use the presence of `err` to determine the reason\n        this.log?.error('muxer abort reason=%s error=%s', reason, err);\n        // Abort all underlying streams\n        for (const stream of this._streams.values()) {\n            stream.abort(err);\n        }\n        // send reason to the other side, allow the other side to close gracefully\n        this.sendGoAway(reason);\n        this._closeMuxer();\n    }\n    isClosed() {\n        return this.closeController.signal.aborted;\n    }\n    /**\n     * Called when either the local or remote shuts down the muxer\n     */\n    _closeMuxer() {\n        // stop the sink and any other processes\n        this.closeController.abort();\n        // stop the source\n        this.source.end();\n    }\n    /** Create a new stream */\n    _newStream(id, name, state, direction) {\n        if (this._streams.get(id) != null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('Stream already exists', _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_STREAM_ALREADY_EXISTS, { id });\n        }\n        const stream = new _stream_js__WEBPACK_IMPORTED_MODULE_8__.YamuxStream({\n            id: id.toString(),\n            name,\n            state,\n            direction,\n            sendFrame: this.sendFrame.bind(this),\n            onEnd: () => {\n                this.closeStream(id);\n                this.onStreamEnd?.(stream);\n            },\n            log: this.logger.forComponent(`libp2p:yamux:${direction}:${id}`),\n            config: this.config,\n            getRTT: this.getRTT.bind(this)\n        });\n        return stream;\n    }\n    /**\n     * closeStream is used to close a stream once both sides have\n     * issued a close.\n     */\n    closeStream(id) {\n        if (this.client === (id % 2 === 0)) {\n            this.numInboundStreams--;\n        }\n        else {\n            this.numOutboundStreams--;\n        }\n        this._streams.delete(id);\n    }\n    async keepAliveLoop() {\n        const abortPromise = new Promise((_resolve, reject) => { this.closeController.signal.addEventListener('abort', reject, { once: true }); });\n        this.log?.trace('muxer keepalive enabled interval=%s', this.config.keepAliveInterval);\n        while (true) {\n            let timeoutId;\n            try {\n                await Promise.race([\n                    abortPromise,\n                    new Promise((resolve) => {\n                        timeoutId = setTimeout(resolve, this.config.keepAliveInterval);\n                    })\n                ]);\n                this.ping().catch(e => this.log?.error('ping error: %s', e));\n            }\n            catch (e) {\n                // closed\n                clearInterval(timeoutId);\n                return;\n            }\n        }\n    }\n    async handleFrame(header, readData) {\n        const { streamID, type, length } = header;\n        this.log?.trace('received frame %o', header);\n        if (streamID === 0) {\n            switch (type) {\n                case _frame_js__WEBPACK_IMPORTED_MODULE_7__.FrameType.Ping:\n                    {\n                        this.handlePing(header);\n                        return;\n                    }\n                case _frame_js__WEBPACK_IMPORTED_MODULE_7__.FrameType.GoAway:\n                    {\n                        this.handleGoAway(length);\n                        return;\n                    }\n                default:\n                    // Invalid state\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('Invalid frame type', _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_INVALID_FRAME, { header });\n            }\n        }\n        else {\n            switch (header.type) {\n                case _frame_js__WEBPACK_IMPORTED_MODULE_7__.FrameType.Data:\n                case _frame_js__WEBPACK_IMPORTED_MODULE_7__.FrameType.WindowUpdate:\n                    {\n                        await this.handleStreamMessage(header, readData);\n                        return;\n                    }\n                default:\n                    // Invalid state\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('Invalid frame type', _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_INVALID_FRAME, { header });\n            }\n        }\n    }\n    handlePing(header) {\n        // If the ping  is initiated by the sender, send a response\n        if (header.flag === _frame_js__WEBPACK_IMPORTED_MODULE_7__.Flag.SYN) {\n            this.log?.trace('received ping request pingId=%s', header.length);\n            this.sendPing(header.length, _frame_js__WEBPACK_IMPORTED_MODULE_7__.Flag.ACK);\n        }\n        else if (header.flag === _frame_js__WEBPACK_IMPORTED_MODULE_7__.Flag.ACK) {\n            this.log?.trace('received ping response pingId=%s', header.length);\n            this.handlePingResponse(header.length);\n        }\n        else {\n            // Invalid state\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('Invalid frame flag', _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_INVALID_FRAME, { header });\n        }\n    }\n    handlePingResponse(pingId) {\n        if (this.activePing === undefined) {\n            // this ping was not requested\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('ping not requested', _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_UNREQUESTED_PING);\n        }\n        if (this.activePing.id !== pingId) {\n            // this ping doesn't match our active ping request\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('ping doesn\\'t match our id', _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_NOT_MATCHING_PING);\n        }\n        // valid ping response\n        this.activePing.resolve();\n    }\n    handleGoAway(reason) {\n        this.log?.trace('received GoAway reason=%s', _frame_js__WEBPACK_IMPORTED_MODULE_7__.GoAwayCode[reason] ?? 'unknown');\n        this.remoteGoAway = reason;\n        // If the other side is friendly, they would have already closed all streams before sending a GoAway\n        // In case they weren't, reset all streams\n        for (const stream of this._streams.values()) {\n            stream.reset();\n        }\n        this._closeMuxer();\n    }\n    async handleStreamMessage(header, readData) {\n        const { streamID, flag, type } = header;\n        if ((flag & _frame_js__WEBPACK_IMPORTED_MODULE_7__.Flag.SYN) === _frame_js__WEBPACK_IMPORTED_MODULE_7__.Flag.SYN) {\n            this.incomingStream(streamID);\n        }\n        const stream = this._streams.get(streamID);\n        if (stream === undefined) {\n            if (type === _frame_js__WEBPACK_IMPORTED_MODULE_7__.FrameType.Data) {\n                this.log?.('discarding data for stream id=%s', streamID);\n                if (readData === undefined) {\n                    throw new Error('unreachable');\n                }\n                await readData();\n            }\n            else {\n                this.log?.('frame for missing stream id=%s', streamID);\n            }\n            return;\n        }\n        switch (type) {\n            case _frame_js__WEBPACK_IMPORTED_MODULE_7__.FrameType.WindowUpdate: {\n                stream.handleWindowUpdate(header);\n                return;\n            }\n            case _frame_js__WEBPACK_IMPORTED_MODULE_7__.FrameType.Data: {\n                if (readData === undefined) {\n                    throw new Error('unreachable');\n                }\n                await stream.handleData(header, readData);\n                return;\n            }\n            default:\n                throw new Error('unreachable');\n        }\n    }\n    incomingStream(id) {\n        if (this.client !== (id % 2 === 0)) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('both endpoints are clients', _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_BOTH_CLIENTS);\n        }\n        if (this._streams.has(id)) {\n            return;\n        }\n        this.log?.trace('new incoming stream id=%s', id);\n        if (this.localGoAway !== undefined) {\n            // reject (reset) immediately if we are doing a go away\n            this.sendFrame({\n                type: _frame_js__WEBPACK_IMPORTED_MODULE_7__.FrameType.WindowUpdate,\n                flag: _frame_js__WEBPACK_IMPORTED_MODULE_7__.Flag.RST,\n                streamID: id,\n                length: 0\n            });\n            return;\n        }\n        // check against our configured maximum number of inbound streams\n        if (this.numInboundStreams >= this.config.maxInboundStreams) {\n            this.log?.('maxIncomingStreams exceeded, forcing stream reset');\n            this.sendFrame({\n                type: _frame_js__WEBPACK_IMPORTED_MODULE_7__.FrameType.WindowUpdate,\n                flag: _frame_js__WEBPACK_IMPORTED_MODULE_7__.Flag.RST,\n                streamID: id,\n                length: 0\n            });\n            return;\n        }\n        // allocate a new stream\n        const stream = this._newStream(id, undefined, _stream_js__WEBPACK_IMPORTED_MODULE_8__.StreamState.SYNReceived, 'inbound');\n        this.numInboundStreams++;\n        // the stream should now be tracked\n        this._streams.set(id, stream);\n        this.onIncomingStream?.(stream);\n    }\n    sendFrame(header, data) {\n        this.log?.trace('sending frame %o', header);\n        if (header.type === _frame_js__WEBPACK_IMPORTED_MODULE_7__.FrameType.Data) {\n            if (data === undefined) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('invalid frame', _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_INVALID_FRAME);\n            }\n            this.source.push(new uint8arraylist__WEBPACK_IMPORTED_MODULE_2__.Uint8ArrayList((0,_encode_js__WEBPACK_IMPORTED_MODULE_6__.encodeHeader)(header), data));\n        }\n        else {\n            this.source.push((0,_encode_js__WEBPACK_IMPORTED_MODULE_6__.encodeHeader)(header));\n        }\n    }\n    sendPing(pingId, flag = _frame_js__WEBPACK_IMPORTED_MODULE_7__.Flag.SYN) {\n        if (flag === _frame_js__WEBPACK_IMPORTED_MODULE_7__.Flag.SYN) {\n            this.log?.trace('sending ping request pingId=%s', pingId);\n        }\n        else {\n            this.log?.trace('sending ping response pingId=%s', pingId);\n        }\n        this.sendFrame({\n            type: _frame_js__WEBPACK_IMPORTED_MODULE_7__.FrameType.Ping,\n            flag,\n            streamID: 0,\n            length: pingId\n        });\n    }\n    sendGoAway(reason = _frame_js__WEBPACK_IMPORTED_MODULE_7__.GoAwayCode.NormalTermination) {\n        this.log?.('sending GoAway reason=%s', _frame_js__WEBPACK_IMPORTED_MODULE_7__.GoAwayCode[reason]);\n        this.localGoAway = reason;\n        this.sendFrame({\n            type: _frame_js__WEBPACK_IMPORTED_MODULE_7__.FrameType.GoAway,\n            flag: 0,\n            streamID: 0,\n            length: reason\n        });\n    }\n}\nfunction isPromise(thing) {\n    return thing != null && typeof thing.then === 'function';\n}\n//# sourceMappingURL=muxer.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-yamux/dist/src/muxer.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/libp2p-yamux/dist/src/stream.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@chainsafe/libp2p-yamux/dist/src/stream.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StreamState: () => (/* binding */ StreamState),\n/* harmony export */   YamuxStream: () => (/* binding */ YamuxStream)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_utils_abstract_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/utils/abstract-stream */ \"./node_modules/@libp2p/utils/dist/src/abstract-stream.js\");\n/* harmony import */ var it_foreach__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-foreach */ \"./node_modules/it-foreach/dist/src/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@chainsafe/libp2p-yamux/dist/src/constants.js\");\n/* harmony import */ var _frame_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./frame.js */ \"./node_modules/@chainsafe/libp2p-yamux/dist/src/frame.js\");\n\n\n\n\n\nvar StreamState;\n(function (StreamState) {\n    StreamState[StreamState[\"Init\"] = 0] = \"Init\";\n    StreamState[StreamState[\"SYNSent\"] = 1] = \"SYNSent\";\n    StreamState[StreamState[\"SYNReceived\"] = 2] = \"SYNReceived\";\n    StreamState[StreamState[\"Established\"] = 3] = \"Established\";\n    StreamState[StreamState[\"Finished\"] = 4] = \"Finished\";\n})(StreamState || (StreamState = {}));\n/** YamuxStream is used to represent a logical stream within a session */\nclass YamuxStream extends _libp2p_utils_abstract_stream__WEBPACK_IMPORTED_MODULE_3__.AbstractStream {\n    name;\n    state;\n    config;\n    _id;\n    /** The number of available bytes to send */\n    sendWindowCapacity;\n    /** Callback to notify that the sendWindowCapacity has been updated */\n    sendWindowCapacityUpdate;\n    /** The number of bytes available to receive in a full window */\n    recvWindow;\n    /** The number of available bytes to receive */\n    recvWindowCapacity;\n    /**\n     * An 'epoch' is the time it takes to process and read data\n     *\n     * Used in conjunction with RTT to determine whether to increase the recvWindow\n     */\n    epochStart;\n    getRTT;\n    sendFrame;\n    constructor(init) {\n        super({\n            ...init,\n            onEnd: (err) => {\n                this.state = StreamState.Finished;\n                init.onEnd?.(err);\n            }\n        });\n        this.config = init.config;\n        this._id = parseInt(init.id, 10);\n        this.name = init.name;\n        this.state = init.state;\n        this.sendWindowCapacity = _constants_js__WEBPACK_IMPORTED_MODULE_1__.INITIAL_STREAM_WINDOW;\n        this.recvWindow = this.config.initialStreamWindowSize;\n        this.recvWindowCapacity = this.recvWindow;\n        this.epochStart = Date.now();\n        this.getRTT = init.getRTT;\n        this.sendFrame = init.sendFrame;\n        this.source = (0,it_foreach__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.source, () => {\n            this.sendWindowUpdate();\n        });\n    }\n    /**\n     * Send a message to the remote muxer informing them a new stream is being\n     * opened.\n     *\n     * This is a noop for Yamux because the first window update is sent when\n     * .newStream is called on the muxer which opens the stream on the remote.\n     */\n    async sendNewStream() {\n    }\n    /**\n     * Send a data message to the remote muxer\n     */\n    async sendData(buf, options = {}) {\n        buf = buf.sublist();\n        // send in chunks, waiting for window updates\n        while (buf.byteLength !== 0) {\n            // wait for the send window to refill\n            if (this.sendWindowCapacity === 0) {\n                this.log?.trace('wait for send window capacity, status %s', this.status);\n                await this.waitForSendWindowCapacity(options);\n                // check we didn't close while waiting for send window capacity\n                if (this.status === 'closed' || this.status === 'aborted' || this.status === 'reset') {\n                    this.log?.trace('%s while waiting for send window capacity', this.status);\n                    return;\n                }\n            }\n            // send as much as we can\n            const toSend = Math.min(this.sendWindowCapacity, this.config.maxMessageSize - _frame_js__WEBPACK_IMPORTED_MODULE_2__.HEADER_LENGTH, buf.length);\n            const flags = this.getSendFlags();\n            this.sendFrame({\n                type: _frame_js__WEBPACK_IMPORTED_MODULE_2__.FrameType.Data,\n                flag: flags,\n                streamID: this._id,\n                length: toSend\n            }, buf.sublist(0, toSend));\n            this.sendWindowCapacity -= toSend;\n            buf.consume(toSend);\n        }\n    }\n    /**\n     * Send a reset message to the remote muxer\n     */\n    async sendReset() {\n        this.sendFrame({\n            type: _frame_js__WEBPACK_IMPORTED_MODULE_2__.FrameType.WindowUpdate,\n            flag: _frame_js__WEBPACK_IMPORTED_MODULE_2__.Flag.RST,\n            streamID: this._id,\n            length: 0\n        });\n    }\n    /**\n     * Send a message to the remote muxer, informing them no more data messages\n     * will be sent by this end of the stream\n     */\n    async sendCloseWrite() {\n        const flags = this.getSendFlags() | _frame_js__WEBPACK_IMPORTED_MODULE_2__.Flag.FIN;\n        this.sendFrame({\n            type: _frame_js__WEBPACK_IMPORTED_MODULE_2__.FrameType.WindowUpdate,\n            flag: flags,\n            streamID: this._id,\n            length: 0\n        });\n    }\n    /**\n     * Send a message to the remote muxer, informing them no more data messages\n     * will be read by this end of the stream\n     */\n    async sendCloseRead() {\n    }\n    /**\n     * Wait for the send window to be non-zero\n     *\n     * Will throw with ERR_STREAM_ABORT if the stream gets aborted\n     */\n    async waitForSendWindowCapacity(options = {}) {\n        if (this.sendWindowCapacity > 0) {\n            return;\n        }\n        let resolve;\n        let reject;\n        const abort = () => {\n            if (this.status === 'open' || this.status === 'closing') {\n                reject(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError('stream aborted', _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_STREAM_ABORT));\n            }\n            else {\n                // the stream was closed already, ignore the failure to send\n                resolve();\n            }\n        };\n        options.signal?.addEventListener('abort', abort);\n        try {\n            await new Promise((_resolve, _reject) => {\n                this.sendWindowCapacityUpdate = () => {\n                    _resolve();\n                };\n                reject = _reject;\n                resolve = _resolve;\n            });\n        }\n        finally {\n            options.signal?.removeEventListener('abort', abort);\n        }\n    }\n    /**\n     * handleWindowUpdate is called when the stream receives a window update frame\n     */\n    handleWindowUpdate(header) {\n        this.log?.trace('stream received window update id=%s', this._id);\n        this.processFlags(header.flag);\n        // increase send window\n        const available = this.sendWindowCapacity;\n        this.sendWindowCapacity += header.length;\n        // if the update increments a 0 availability, notify the stream that sending can resume\n        if (available === 0 && header.length > 0) {\n            this.sendWindowCapacityUpdate?.();\n        }\n    }\n    /**\n     * handleData is called when the stream receives a data frame\n     */\n    async handleData(header, readData) {\n        this.log?.trace('stream received data id=%s', this._id);\n        this.processFlags(header.flag);\n        // check that our recv window is not exceeded\n        if (this.recvWindowCapacity < header.length) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError('receive window exceeded', _constants_js__WEBPACK_IMPORTED_MODULE_1__.ERR_RECV_WINDOW_EXCEEDED, { available: this.recvWindowCapacity, recv: header.length });\n        }\n        const data = await readData();\n        this.recvWindowCapacity -= header.length;\n        this.sourcePush(data);\n    }\n    /**\n     * processFlags is used to update the state of the stream based on set flags, if any.\n     */\n    processFlags(flags) {\n        if ((flags & _frame_js__WEBPACK_IMPORTED_MODULE_2__.Flag.ACK) === _frame_js__WEBPACK_IMPORTED_MODULE_2__.Flag.ACK) {\n            if (this.state === StreamState.SYNSent) {\n                this.state = StreamState.Established;\n            }\n        }\n        if ((flags & _frame_js__WEBPACK_IMPORTED_MODULE_2__.Flag.FIN) === _frame_js__WEBPACK_IMPORTED_MODULE_2__.Flag.FIN) {\n            this.remoteCloseWrite();\n        }\n        if ((flags & _frame_js__WEBPACK_IMPORTED_MODULE_2__.Flag.RST) === _frame_js__WEBPACK_IMPORTED_MODULE_2__.Flag.RST) {\n            this.reset();\n        }\n    }\n    /**\n     * getSendFlags determines any flags that are appropriate\n     * based on the current stream state.\n     *\n     * The state is updated as a side-effect.\n     */\n    getSendFlags() {\n        switch (this.state) {\n            case StreamState.Init:\n                this.state = StreamState.SYNSent;\n                return _frame_js__WEBPACK_IMPORTED_MODULE_2__.Flag.SYN;\n            case StreamState.SYNReceived:\n                this.state = StreamState.Established;\n                return _frame_js__WEBPACK_IMPORTED_MODULE_2__.Flag.ACK;\n            default:\n                return 0;\n        }\n    }\n    /**\n     * potentially sends a window update enabling further writes to take place.\n     */\n    sendWindowUpdate() {\n        // determine the flags if any\n        const flags = this.getSendFlags();\n        // If the stream has already been established\n        // and we've processed data within the time it takes for 4 round trips\n        // then we (up to) double the recvWindow\n        const now = Date.now();\n        const rtt = this.getRTT();\n        if (flags === 0 && rtt > -1 && now - this.epochStart < rtt * 4) {\n            // we've already validated that maxStreamWindowSize can't be more than MAX_UINT32\n            this.recvWindow = Math.min(this.recvWindow * 2, this.config.maxStreamWindowSize);\n        }\n        if (this.recvWindowCapacity >= this.recvWindow && flags === 0) {\n            // a window update isn't needed\n            return;\n        }\n        // update the receive window\n        const delta = this.recvWindow - this.recvWindowCapacity;\n        this.recvWindowCapacity = this.recvWindow;\n        // update the epoch start\n        this.epochStart = now;\n        // send window update\n        this.sendFrame({\n            type: _frame_js__WEBPACK_IMPORTED_MODULE_2__.FrameType.WindowUpdate,\n            flag: flags,\n            streamID: this._id,\n            length: delta\n        });\n    }\n}\n//# sourceMappingURL=stream.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/libp2p-yamux/dist/src/stream.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/netmask/dist/src/cidr.js":
/*!**********************************************************!*\
  !*** ./node_modules/@chainsafe/netmask/dist/src/cidr.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cidrMask: () => (/* binding */ cidrMask),\n/* harmony export */   parseCidr: () => (/* binding */ parseCidr)\n/* harmony export */ });\n/* harmony import */ var _chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chainsafe/is-ip/parse */ \"./node_modules/@chainsafe/is-ip/lib/parse.js\");\n/* harmony import */ var _ip_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ip.js */ \"./node_modules/@chainsafe/netmask/dist/src/ip.js\");\n\n\nfunction parseCidr(s) {\n    const [address, maskString] = s.split(\"/\");\n    if (!address || !maskString)\n        throw new Error(\"Failed to parse given CIDR: \" + s);\n    let ipLength = _ip_js__WEBPACK_IMPORTED_MODULE_1__.IPv4Len;\n    let ip = (0,_chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__.parseIPv4)(address);\n    if (ip == null) {\n        ipLength = _ip_js__WEBPACK_IMPORTED_MODULE_1__.IPv6Len;\n        ip = (0,_chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__.parseIPv6)(address);\n        if (ip == null)\n            throw new Error(\"Failed to parse given CIDR: \" + s);\n    }\n    const m = parseInt(maskString, 10);\n    if (Number.isNaN(m) ||\n        String(m).length !== maskString.length ||\n        m < 0 ||\n        m > ipLength * 8) {\n        throw new Error(\"Failed to parse given CIDR: \" + s);\n    }\n    const mask = cidrMask(m, 8 * ipLength);\n    return {\n        network: (0,_ip_js__WEBPACK_IMPORTED_MODULE_1__.maskIp)(ip, mask),\n        mask,\n    };\n}\nfunction cidrMask(ones, bits) {\n    if (bits !== 8 * _ip_js__WEBPACK_IMPORTED_MODULE_1__.IPv4Len && bits !== 8 * _ip_js__WEBPACK_IMPORTED_MODULE_1__.IPv6Len)\n        throw new Error(\"Invalid CIDR mask\");\n    if (ones < 0 || ones > bits)\n        throw new Error(\"Invalid CIDR mask\");\n    const l = bits / 8;\n    const m = new Uint8Array(l);\n    for (let i = 0; i < l; i++) {\n        if (ones >= 8) {\n            m[i] = 0xff;\n            ones -= 8;\n            continue;\n        }\n        m[i] = 255 - (0xff >> ones);\n        ones = 0;\n    }\n    return m;\n}\n//# sourceMappingURL=cidr.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/netmask/dist/src/cidr.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/netmask/dist/src/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@chainsafe/netmask/dist/src/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IpNet: () => (/* reexport safe */ _ipnet_js__WEBPACK_IMPORTED_MODULE_0__.IpNet),\n/* harmony export */   cidrContains: () => (/* binding */ cidrContains),\n/* harmony export */   iPv4FromIPv6: () => (/* reexport safe */ _ip_js__WEBPACK_IMPORTED_MODULE_2__.iPv4FromIPv6),\n/* harmony export */   ipToString: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_1__.ipToString),\n/* harmony export */   isIPv4mappedIPv6: () => (/* reexport safe */ _ip_js__WEBPACK_IMPORTED_MODULE_2__.isIPv4mappedIPv6),\n/* harmony export */   maskIp: () => (/* reexport safe */ _ip_js__WEBPACK_IMPORTED_MODULE_2__.maskIp),\n/* harmony export */   parseCidr: () => (/* reexport safe */ _cidr_js__WEBPACK_IMPORTED_MODULE_3__.parseCidr)\n/* harmony export */ });\n/* harmony import */ var _ipnet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ipnet.js */ \"./node_modules/@chainsafe/netmask/dist/src/ipnet.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@chainsafe/netmask/dist/src/util.js\");\n/* harmony import */ var _ip_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ip.js */ \"./node_modules/@chainsafe/netmask/dist/src/ip.js\");\n/* harmony import */ var _cidr_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cidr.js */ \"./node_modules/@chainsafe/netmask/dist/src/cidr.js\");\n\n\n\n\n\n/**\n * Checks if cidr block contains ip address\n * @param cidr ipv4 or ipv6 formatted cidr . Example 198.51.100.14/24 or 2001:db8::/48\n * @param ip ipv4 or ipv6 address Example 198.51.100.14 or 2001:db8::\n *\n */\nfunction cidrContains(cidr, ip) {\n    const ipnet = new _ipnet_js__WEBPACK_IMPORTED_MODULE_0__.IpNet(cidr);\n    return ipnet.contains(ip);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/netmask/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/netmask/dist/src/ip.js":
/*!********************************************************!*\
  !*** ./node_modules/@chainsafe/netmask/dist/src/ip.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IPv4Len: () => (/* binding */ IPv4Len),\n/* harmony export */   IPv6Len: () => (/* binding */ IPv6Len),\n/* harmony export */   containsIp: () => (/* binding */ containsIp),\n/* harmony export */   iPv4FromIPv6: () => (/* binding */ iPv4FromIPv6),\n/* harmony export */   ipv4Prefix: () => (/* binding */ ipv4Prefix),\n/* harmony export */   isIPv4mappedIPv6: () => (/* binding */ isIPv4mappedIPv6),\n/* harmony export */   maskIp: () => (/* binding */ maskIp),\n/* harmony export */   maxIPv6Octet: () => (/* binding */ maxIPv6Octet)\n/* harmony export */ });\n/* harmony import */ var _chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chainsafe/is-ip/parse */ \"./node_modules/@chainsafe/is-ip/lib/parse.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@chainsafe/netmask/dist/src/util.js\");\n\n\nconst IPv4Len = 4;\nconst IPv6Len = 16;\nconst maxIPv6Octet = parseInt(\"0xFFFF\", 16);\nconst ipv4Prefix = new Uint8Array([\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255,\n]);\nfunction maskIp(ip, mask) {\n    if (mask.length === IPv6Len && ip.length === IPv4Len && (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.allFF)(mask, 0, 11)) {\n        mask = mask.slice(12);\n    }\n    if (mask.length === IPv4Len &&\n        ip.length === IPv6Len &&\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(ip, ipv4Prefix, 0, 11)) {\n        ip = ip.slice(12);\n    }\n    const n = ip.length;\n    if (n != mask.length) {\n        throw new Error(\"Failed to mask ip\");\n    }\n    const out = new Uint8Array(n);\n    for (let i = 0; i < n; i++) {\n        out[i] = ip[i] & mask[i];\n    }\n    return out;\n}\nfunction containsIp(net, ip) {\n    if (typeof ip === \"string\") {\n        ip = (0,_chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__.parseIP)(ip);\n    }\n    if (ip == null)\n        throw new Error(\"Invalid ip\");\n    if (ip.length !== net.network.length) {\n        return false;\n    }\n    for (let i = 0; i < ip.length; i++) {\n        if ((net.network[i] & net.mask[i]) !== (ip[i] & net.mask[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction iPv4FromIPv6(ip) {\n    if (!isIPv4mappedIPv6(ip)) {\n        throw new Error(\"Must have 0xffff prefix\");\n    }\n    return ip.slice(12);\n}\nfunction isIPv4mappedIPv6(ip) {\n    return (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(ip, ipv4Prefix, 0, 11);\n}\n//# sourceMappingURL=ip.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/netmask/dist/src/ip.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/netmask/dist/src/ipnet.js":
/*!***********************************************************!*\
  !*** ./node_modules/@chainsafe/netmask/dist/src/ipnet.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IpNet: () => (/* binding */ IpNet)\n/* harmony export */ });\n/* harmony import */ var _chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chainsafe/is-ip/parse */ \"./node_modules/@chainsafe/is-ip/lib/parse.js\");\n/* harmony import */ var _cidr_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cidr.js */ \"./node_modules/@chainsafe/netmask/dist/src/cidr.js\");\n/* harmony import */ var _ip_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ip.js */ \"./node_modules/@chainsafe/netmask/dist/src/ip.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@chainsafe/netmask/dist/src/util.js\");\n\n\n\n\nclass IpNet {\n    /**\n     *\n     * @param ipOrCidr either network ip or full cidr address\n     * @param mask in case ipOrCidr is network this can be either mask in decimal format or as ip address\n     */\n    constructor(ipOrCidr, mask) {\n        if (mask == null) {\n            ({ network: this.network, mask: this.mask } = (0,_cidr_js__WEBPACK_IMPORTED_MODULE_1__.parseCidr)(ipOrCidr));\n        }\n        else {\n            const ipResult = (0,_chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__.parseIP)(ipOrCidr);\n            if (ipResult == null) {\n                throw new Error(\"Failed to parse network\");\n            }\n            mask = String(mask);\n            const m = parseInt(mask, 10);\n            if (Number.isNaN(m) ||\n                String(m).length !== mask.length ||\n                m < 0 ||\n                m > ipResult.length * 8) {\n                const maskResult = (0,_chainsafe_is_ip_parse__WEBPACK_IMPORTED_MODULE_0__.parseIP)(mask);\n                if (maskResult == null) {\n                    throw new Error(\"Failed to parse mask\");\n                }\n                this.mask = maskResult;\n            }\n            else {\n                this.mask = (0,_cidr_js__WEBPACK_IMPORTED_MODULE_1__.cidrMask)(m, 8 * ipResult.length);\n            }\n            this.network = (0,_ip_js__WEBPACK_IMPORTED_MODULE_2__.maskIp)(ipResult, this.mask);\n        }\n    }\n    /**\n     * Checks if netmask contains ip address\n     * @param ip\n     * @returns\n     */\n    contains(ip) {\n        return (0,_ip_js__WEBPACK_IMPORTED_MODULE_2__.containsIp)({ network: this.network, mask: this.mask }, ip);\n    }\n    /**Serializes back to string format */\n    toString() {\n        const l = (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.simpleMaskLength)(this.mask);\n        const mask = l !== -1 ? String(l) : (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.maskToHex)(this.mask);\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.ipToString)(this.network) + \"/\" + mask;\n    }\n}\n//# sourceMappingURL=ipnet.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/netmask/dist/src/ipnet.js?");

/***/ }),

/***/ "./node_modules/@chainsafe/netmask/dist/src/util.js":
/*!**********************************************************!*\
  !*** ./node_modules/@chainsafe/netmask/dist/src/util.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   allFF: () => (/* binding */ allFF),\n/* harmony export */   deepEqual: () => (/* binding */ deepEqual),\n/* harmony export */   ipToString: () => (/* binding */ ipToString),\n/* harmony export */   maskToHex: () => (/* binding */ maskToHex),\n/* harmony export */   simpleMaskLength: () => (/* binding */ simpleMaskLength)\n/* harmony export */ });\n/* harmony import */ var _ip_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ip.js */ \"./node_modules/@chainsafe/netmask/dist/src/ip.js\");\n\nfunction allFF(a, from, to) {\n    let i = 0;\n    for (const e of a) {\n        if (i < from)\n            continue;\n        if (i > to)\n            break;\n        if (e !== 0xff)\n            return false;\n        i++;\n    }\n    return true;\n}\nfunction deepEqual(a, b, from, to) {\n    let i = 0;\n    for (const e of a) {\n        if (i < from)\n            continue;\n        if (i > to)\n            break;\n        if (e !== b[i])\n            return false;\n        i++;\n    }\n    return true;\n}\n/***\n * Returns long ip format\n */\nfunction ipToString(ip) {\n    switch (ip.length) {\n        case _ip_js__WEBPACK_IMPORTED_MODULE_0__.IPv4Len: {\n            return ip.join(\".\");\n        }\n        case _ip_js__WEBPACK_IMPORTED_MODULE_0__.IPv6Len: {\n            const result = [];\n            for (let i = 0; i < ip.length; i++) {\n                if (i % 2 === 0) {\n                    result.push(ip[i].toString(16).padStart(2, \"0\") +\n                        ip[i + 1].toString(16).padStart(2, \"0\"));\n                }\n            }\n            return result.join(\":\");\n        }\n        default: {\n            throw new Error(\"Invalid ip length\");\n        }\n    }\n}\n/**\n * If mask is a sequence of 1 bits followed by 0 bits, return number of 1 bits else -1\n */\nfunction simpleMaskLength(mask) {\n    let ones = 0;\n    // eslint-disable-next-line prefer-const\n    for (let [index, byte] of mask.entries()) {\n        if (byte === 0xff) {\n            ones += 8;\n            continue;\n        }\n        while ((byte & 0x80) != 0) {\n            ones++;\n            byte = byte << 1;\n        }\n        if ((byte & 0x80) != 0) {\n            return -1;\n        }\n        for (let i = index + 1; i < mask.length; i++) {\n            if (mask[i] != 0) {\n                return -1;\n            }\n        }\n        break;\n    }\n    return ones;\n}\nfunction maskToHex(mask) {\n    let hex = \"0x\";\n    for (const byte of mask) {\n        hex += (byte >> 4).toString(16) + (byte & 0x0f).toString(16);\n    }\n    return hex;\n}\n//# sourceMappingURL=util.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@chainsafe/netmask/dist/src/util.js?");

/***/ }),

/***/ "./node_modules/@helia/block-brokers/dist/src/bitswap.js":
/*!***************************************************************!*\
  !*** ./node_modules/@helia/block-brokers/dist/src/bitswap.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bitswap: () => (/* binding */ bitswap)\n/* harmony export */ });\n/* harmony import */ var ipfs_bitswap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ipfs-bitswap */ \"./node_modules/ipfs-bitswap/dist/src/index.js\");\n\nclass BitswapBlockBroker {\n    bitswap;\n    started;\n    constructor(components, init = {}) {\n        const { libp2p, blockstore, hashers } = components;\n        this.bitswap = (0,ipfs_bitswap__WEBPACK_IMPORTED_MODULE_0__.createBitswap)(libp2p, blockstore, {\n            hashLoader: {\n                getHasher: async (codecOrName) => {\n                    let hasher;\n                    if (typeof codecOrName === 'string') {\n                        hasher = Object.values(hashers).find(hasher => {\n                            return hasher.name === codecOrName;\n                        });\n                    }\n                    else {\n                        hasher = hashers[codecOrName];\n                    }\n                    if (hasher != null) {\n                        return hasher;\n                    }\n                    throw new Error(`Could not load hasher for code/name \"${codecOrName}\"`);\n                }\n            },\n            ...init\n        });\n        this.started = false;\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        await this.bitswap.start();\n        this.started = true;\n    }\n    async stop() {\n        await this.bitswap.stop();\n        this.started = false;\n    }\n    announce(cid, block, options) {\n        this.bitswap.notify(cid, block, options);\n    }\n    async retrieve(cid, { validateFn, ...options } = {}) {\n        return this.bitswap.want(cid, options);\n    }\n}\n/**\n * A helper factory for users who want to override Helia `blockBrokers` but\n * still want to use the default `BitswapBlockBroker`.\n */\nfunction bitswap(init = {}) {\n    return (components) => new BitswapBlockBroker(components, init);\n}\n//# sourceMappingURL=bitswap.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/block-brokers/dist/src/bitswap.js?");

/***/ }),

/***/ "./node_modules/@helia/block-brokers/dist/src/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@helia/block-brokers/dist/src/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bitswap: () => (/* reexport safe */ _bitswap_js__WEBPACK_IMPORTED_MODULE_0__.bitswap),\n/* harmony export */   trustlessGateway: () => (/* reexport safe */ _trustless_gateway_index_js__WEBPACK_IMPORTED_MODULE_1__.trustlessGateway)\n/* harmony export */ });\n/* harmony import */ var _bitswap_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bitswap.js */ \"./node_modules/@helia/block-brokers/dist/src/bitswap.js\");\n/* harmony import */ var _trustless_gateway_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./trustless-gateway/index.js */ \"./node_modules/@helia/block-brokers/dist/src/trustless-gateway/index.js\");\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/block-brokers/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@helia/block-brokers/dist/src/trustless-gateway/broker.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@helia/block-brokers/dist/src/trustless-gateway/broker.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TrustlessGatewayBlockBroker: () => (/* binding */ TrustlessGatewayBlockBroker)\n/* harmony export */ });\n/* harmony import */ var _trustless_gateway_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./trustless-gateway.js */ \"./node_modules/@helia/block-brokers/dist/src/trustless-gateway/trustless-gateway.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ \"./node_modules/@helia/block-brokers/dist/src/trustless-gateway/index.js\");\n\n\n/**\n * A class that accepts a list of trustless gateways that are queried\n * for blocks.\n */\nclass TrustlessGatewayBlockBroker {\n    gateways;\n    log;\n    constructor(components, init = {}) {\n        this.log = components.logger.forComponent('helia:trustless-gateway-block-broker');\n        this.gateways = (init.gateways ?? _index_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_TRUSTLESS_GATEWAYS)\n            .map((gatewayOrUrl) => {\n            return new _trustless_gateway_js__WEBPACK_IMPORTED_MODULE_0__.TrustlessGateway(gatewayOrUrl);\n        });\n    }\n    async retrieve(cid, options = {}) {\n        // Loop through the gateways until we get a block or run out of gateways\n        // TODO: switch to toSorted when support is better\n        const sortedGateways = this.gateways.sort((a, b) => b.reliability() - a.reliability());\n        const aggregateErrors = [];\n        for (const gateway of sortedGateways) {\n            this.log('getting block for %c from %s', cid, gateway.url);\n            try {\n                const block = await gateway.getRawBlock(cid, options.signal);\n                this.log.trace('got block for %c from %s', cid, gateway.url);\n                try {\n                    await options.validateFn?.(block);\n                }\n                catch (err) {\n                    this.log.error('failed to validate block for %c from %s', cid, gateway.url, err);\n                    gateway.incrementInvalidBlocks();\n                    throw new Error(`unable to validate block for CID ${cid} from gateway ${gateway.url}`);\n                }\n                return block;\n            }\n            catch (err) {\n                this.log.error('failed to get block for %c from %s', cid, gateway.url, err);\n                if (err instanceof Error) {\n                    aggregateErrors.push(err);\n                }\n                else {\n                    aggregateErrors.push(new Error(`unable to fetch raw block for CID ${cid} from gateway ${gateway.url}`));\n                }\n                // if signal was aborted, exit the loop\n                if (options.signal?.aborted === true) {\n                    this.log.trace('request aborted while fetching raw block for CID %c from gateway %s', cid, gateway.url);\n                    break;\n                }\n            }\n        }\n        throw new AggregateError(aggregateErrors, `unable to fetch raw block for CID ${cid} from any gateway`);\n    }\n}\n//# sourceMappingURL=broker.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/block-brokers/dist/src/trustless-gateway/broker.js?");

/***/ }),

/***/ "./node_modules/@helia/block-brokers/dist/src/trustless-gateway/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@helia/block-brokers/dist/src/trustless-gateway/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_TRUSTLESS_GATEWAYS: () => (/* binding */ DEFAULT_TRUSTLESS_GATEWAYS),\n/* harmony export */   trustlessGateway: () => (/* binding */ trustlessGateway)\n/* harmony export */ });\n/* harmony import */ var _broker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./broker.js */ \"./node_modules/@helia/block-brokers/dist/src/trustless-gateway/broker.js\");\n\nconst DEFAULT_TRUSTLESS_GATEWAYS = [\n    // 2023-10-03: IPNS, Origin, and Block/CAR support from https://ipfs-public-gateway-checker.on.fleek.co/\n    'https://trustless-gateway.link',\n    // 2023-10-03: IPNS, Origin, and Block/CAR support from https://ipfs-public-gateway-checker.on.fleek.co/\n    'https://cloudflare-ipfs.com',\n    // 2023-10-03: IPNS, Origin, and Block/CAR support from https://ipfs-public-gateway-checker.on.fleek.co/\n    'https://4everland.io'\n];\nfunction trustlessGateway(init = {}) {\n    return (components) => new _broker_js__WEBPACK_IMPORTED_MODULE_0__.TrustlessGatewayBlockBroker(components, init);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/block-brokers/dist/src/trustless-gateway/index.js?");

/***/ }),

/***/ "./node_modules/@helia/block-brokers/dist/src/trustless-gateway/trustless-gateway.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@helia/block-brokers/dist/src/trustless-gateway/trustless-gateway.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TrustlessGateway: () => (/* binding */ TrustlessGateway)\n/* harmony export */ });\n/**\n * A `TrustlessGateway` keeps track of the number of attempts, errors, and\n * successes for a given gateway url so that we can prioritize gateways that\n * have been more reliable in the past, and ensure that requests are distributed\n * across all gateways within a given `TrustlessGatewayBlockBroker` instance.\n */\nclass TrustlessGateway {\n    url;\n    /**\n     * The number of times this gateway has been attempted to be used to fetch a\n     * block. This includes successful, errored, and aborted attempts. By counting\n     * even aborted attempts, slow gateways that are out-raced by others will be\n     * considered less reliable.\n     */\n    #attempts = 0;\n    /**\n     * The number of times this gateway has errored while attempting to fetch a\n     * block. This includes `response.ok === false` and any other errors that\n     * throw while attempting to fetch a block. This does not include aborted\n     * attempts.\n     */\n    #errors = 0;\n    /**\n     * The number of times this gateway has returned an invalid block. A gateway\n     * that returns the wrong blocks for a CID should be considered for removal\n     * from the list of gateways to fetch blocks from.\n     */\n    #invalidBlocks = 0;\n    /**\n     * The number of times this gateway has successfully fetched a block.\n     */\n    #successes = 0;\n    constructor(url) {\n        this.url = url instanceof URL ? url : new URL(url);\n    }\n    /**\n     * Fetch a raw block from `this.url` following the specification defined at\n     * https://specs.ipfs.tech/http-gateways/trustless-gateway/\n     */\n    async getRawBlock(cid, signal) {\n        const gwUrl = this.url;\n        gwUrl.pathname = `/ipfs/${cid.toString()}`;\n        // necessary as not every gateway supports dag-cbor, but every should support\n        // sending raw block as-is\n        gwUrl.search = '?format=raw';\n        if (signal?.aborted === true) {\n            throw new Error(`Signal to fetch raw block for CID ${cid} from gateway ${this.url} was aborted prior to fetch`);\n        }\n        try {\n            this.#attempts++;\n            const res = await fetch(gwUrl.toString(), {\n                signal,\n                headers: {\n                    // also set header, just in case ?format= is filtered out by some\n                    // reverse proxy\n                    Accept: 'application/vnd.ipld.raw'\n                },\n                cache: 'force-cache'\n            });\n            if (!res.ok) {\n                this.#errors++;\n                throw new Error(`unable to fetch raw block for CID ${cid} from gateway ${this.url}`);\n            }\n            this.#successes++;\n            return new Uint8Array(await res.arrayBuffer());\n        }\n        catch (cause) {\n            // @ts-expect-error - TS thinks signal?.aborted can only be false now\n            // because it was checked for true above.\n            if (signal?.aborted === true) {\n                throw new Error(`fetching raw block for CID ${cid} from gateway ${this.url} was aborted`);\n            }\n            this.#errors++;\n            throw new Error(`unable to fetch raw block for CID ${cid}`);\n        }\n    }\n    /**\n     * Encapsulate the logic for determining whether a gateway is considered\n     * reliable, for prioritization. This is based on the number of successful attempts made\n     * and the number of errors encountered.\n     *\n     * Unused gateways have 100% reliability; They will be prioritized over\n     * gateways with a 100% success rate to ensure that we attempt all gateways.\n     */\n    reliability() {\n        /**\n         * if we have never tried to use this gateway, it is considered the most\n         * reliable until we determine otherwise (prioritize unused gateways)\n         */\n        if (this.#attempts === 0) {\n            return 1;\n        }\n        if (this.#invalidBlocks > 0) {\n            // this gateway may not be trustworthy..\n            return -Infinity;\n        }\n        /**\n         * We have attempted the gateway, so we need to calculate the reliability\n         * based on the number of attempts, errors, and successes. Gateways that\n         * return a single error should drop their reliability score more than a\n         * single success increases it.\n         *\n         * Play around with the below reliability function at https://www.desmos.com/calculator/d6hfhf5ukm\n         */\n        return this.#successes / (this.#attempts + (this.#errors * 3));\n    }\n    /**\n     * Increment the number of invalid blocks returned by this gateway.\n     */\n    incrementInvalidBlocks() {\n        this.#invalidBlocks++;\n    }\n}\n//# sourceMappingURL=trustless-gateway.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/block-brokers/dist/src/trustless-gateway/trustless-gateway.js?");

/***/ }),

/***/ "./node_modules/@helia/delegated-routing-v1-http-api-client/dist/src/client.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@helia/delegated-routing-v1-http-api-client/dist/src/client.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultDelegatedRoutingV1HttpApiClient: () => (/* binding */ DefaultDelegatedRoutingV1HttpApiClient)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/events.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/content-routing/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/peer-routing/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/logger */ \"./node_modules/@libp2p/logger/dist/src/index.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var any_signal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! any-signal */ \"./node_modules/any-signal/dist/src/index.js\");\n/* harmony import */ var browser_readablestream_to_it__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! browser-readablestream-to-it */ \"./node_modules/browser-readablestream-to-it/dist/src/index.js\");\n/* harmony import */ var ipns__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ipns */ \"./node_modules/ipns/dist/src/utils.js\");\n/* harmony import */ var ipns_validator__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ipns/validator */ \"./node_modules/ipns/dist/src/validator.js\");\n/* harmony import */ var it_ndjson__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! it-ndjson */ \"./node_modules/it-ndjson/dist/src/index.js\");\n/* harmony import */ var p_defer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! p-defer */ \"./node_modules/p-defer/index.js\");\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! p-queue */ \"./node_modules/p-queue/dist/index.js\");\n/* harmony import */ var _routings_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./routings.js */ \"./node_modules/@helia/delegated-routing-v1-http-api-client/dist/src/routings.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst log = (0,_libp2p_logger__WEBPACK_IMPORTED_MODULE_4__.logger)('delegated-routing-v1-http-api-client');\nconst defaultValues = {\n    concurrentRequests: 4,\n    timeout: 30e3\n};\nclass DefaultDelegatedRoutingV1HttpApiClient {\n    started;\n    httpQueue;\n    shutDownController;\n    clientUrl;\n    timeout;\n    contentRouting;\n    peerRouting;\n    /**\n     * Create a new DelegatedContentRouting instance\n     */\n    constructor(url, init = {}) {\n        this.started = false;\n        this.shutDownController = new AbortController();\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.setMaxListeners)(Infinity, this.shutDownController.signal);\n        this.httpQueue = new p_queue__WEBPACK_IMPORTED_MODULE_6__[\"default\"]({\n            concurrency: init.concurrentRequests ?? defaultValues.concurrentRequests\n        });\n        this.clientUrl = url instanceof URL ? url : new URL(url);\n        this.timeout = init.timeout ?? defaultValues.timeout;\n        this.contentRouting = new _routings_js__WEBPACK_IMPORTED_MODULE_7__.DelegatedRoutingV1HttpApiClientContentRouting(this);\n        this.peerRouting = new _routings_js__WEBPACK_IMPORTED_MODULE_7__.DelegatedRoutingV1HttpApiClientPeerRouting(this);\n    }\n    get [_libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.contentRoutingSymbol]() {\n        return this.contentRouting;\n    }\n    get [_libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.peerRoutingSymbol]() {\n        return this.peerRouting;\n    }\n    isStarted() {\n        return this.started;\n    }\n    start() {\n        this.started = true;\n    }\n    stop() {\n        this.httpQueue.clear();\n        this.shutDownController.abort();\n        this.started = false;\n    }\n    async *getProviders(cid, options = {}) {\n        log('getProviders starts: %c', cid);\n        const signal = (0,any_signal__WEBPACK_IMPORTED_MODULE_1__.anySignal)([this.shutDownController.signal, options.signal, AbortSignal.timeout(this.timeout)]);\n        const onStart = (0,p_defer__WEBPACK_IMPORTED_MODULE_10__[\"default\"])();\n        const onFinish = (0,p_defer__WEBPACK_IMPORTED_MODULE_10__[\"default\"])();\n        void this.httpQueue.add(async () => {\n            onStart.resolve();\n            return onFinish.promise;\n        });\n        try {\n            await onStart.promise;\n            // https://specs.ipfs.tech/routing/http-routing-v1/\n            const resource = `${this.clientUrl}routing/v1/providers/${cid.toString()}`;\n            const getOptions = { headers: { Accept: 'application/x-ndjson' }, signal };\n            const res = await fetch(resource, getOptions);\n            if (res.status === 404) {\n                // https://specs.ipfs.tech/routing/http-routing-v1/#response-status-codes\n                // 404 (Not Found): must be returned if no matching records are found.\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('No matching records found.', 'ERR_NOT_FOUND');\n            }\n            if (res.status === 422) {\n                // https://specs.ipfs.tech/routing/http-routing-v1/#response-status-codes\n                // 422 (Unprocessable Entity): request does not conform to schema or semantic constraints.\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('Request does not conform to schema or semantic constraints.', 'ERR_INVALID_REQUEST');\n            }\n            if (res.body == null) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('Routing response had no body', 'ERR_BAD_RESPONSE');\n            }\n            const contentType = res.headers.get('Content-Type');\n            if (contentType === 'application/json') {\n                const body = await res.json();\n                for (const provider of body.Providers) {\n                    const record = this.#conformToPeerSchema(provider);\n                    if (record != null) {\n                        yield record;\n                    }\n                }\n            }\n            else {\n                for await (const provider of (0,it_ndjson__WEBPACK_IMPORTED_MODULE_3__.parse)((0,browser_readablestream_to_it__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(res.body))) {\n                    const record = this.#conformToPeerSchema(provider);\n                    if (record != null) {\n                        yield record;\n                    }\n                }\n            }\n        }\n        catch (err) {\n            log.error('getProviders errored:', err);\n        }\n        finally {\n            signal.clear();\n            onFinish.resolve();\n            log('getProviders finished: %c', cid);\n        }\n    }\n    async *getPeers(peerId, options = {}) {\n        log('getPeers starts: %c', peerId);\n        const signal = (0,any_signal__WEBPACK_IMPORTED_MODULE_1__.anySignal)([this.shutDownController.signal, options.signal, AbortSignal.timeout(this.timeout)]);\n        const onStart = (0,p_defer__WEBPACK_IMPORTED_MODULE_10__[\"default\"])();\n        const onFinish = (0,p_defer__WEBPACK_IMPORTED_MODULE_10__[\"default\"])();\n        void this.httpQueue.add(async () => {\n            onStart.resolve();\n            return onFinish.promise;\n        });\n        try {\n            await onStart.promise;\n            // https://specs.ipfs.tech/routing/http-routing-v1/\n            const resource = `${this.clientUrl}routing/v1/peers/${peerId.toCID().toString()}`;\n            const getOptions = { headers: { Accept: 'application/x-ndjson' }, signal };\n            const res = await fetch(resource, getOptions);\n            if (res.status === 404) {\n                // https://specs.ipfs.tech/routing/http-routing-v1/#response-status-codes\n                // 404 (Not Found): must be returned if no matching records are found.\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('No matching records found.', 'ERR_NOT_FOUND');\n            }\n            if (res.status === 422) {\n                // https://specs.ipfs.tech/routing/http-routing-v1/#response-status-codes\n                // 422 (Unprocessable Entity): request does not conform to schema or semantic constraints.\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('Request does not conform to schema or semantic constraints.', 'ERR_INVALID_REQUEST');\n            }\n            if (res.body == null) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('Routing response had no body', 'ERR_BAD_RESPONSE');\n            }\n            const contentType = res.headers.get('Content-Type');\n            if (contentType === 'application/json') {\n                const body = await res.json();\n                for (const peer of body.Peers) {\n                    const record = this.#conformToPeerSchema(peer);\n                    if (record != null) {\n                        yield record;\n                    }\n                }\n            }\n            else {\n                for await (const peer of (0,it_ndjson__WEBPACK_IMPORTED_MODULE_3__.parse)((0,browser_readablestream_to_it__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(res.body))) {\n                    const record = this.#conformToPeerSchema(peer);\n                    if (record != null) {\n                        yield record;\n                    }\n                }\n            }\n        }\n        catch (err) {\n            log.error('getPeers errored:', err);\n        }\n        finally {\n            signal.clear();\n            onFinish.resolve();\n            log('getPeers finished: %c', peerId);\n        }\n    }\n    async getIPNS(peerId, options = {}) {\n        log('getIPNS starts: %c', peerId);\n        const signal = (0,any_signal__WEBPACK_IMPORTED_MODULE_1__.anySignal)([this.shutDownController.signal, options.signal, AbortSignal.timeout(this.timeout)]);\n        const onStart = (0,p_defer__WEBPACK_IMPORTED_MODULE_10__[\"default\"])();\n        const onFinish = (0,p_defer__WEBPACK_IMPORTED_MODULE_10__[\"default\"])();\n        void this.httpQueue.add(async () => {\n            onStart.resolve();\n            return onFinish.promise;\n        });\n        // https://specs.ipfs.tech/routing/http-routing-v1/\n        const resource = `${this.clientUrl}routing/v1/ipns/${peerId.toCID().toString()}`;\n        try {\n            await onStart.promise;\n            const getOptions = { headers: { Accept: 'application/vnd.ipfs.ipns-record' }, signal };\n            const res = await fetch(resource, getOptions);\n            log('getIPNS GET %s %d', resource, res.status);\n            if (res.status === 404) {\n                // https://specs.ipfs.tech/routing/http-routing-v1/#response-status-codes\n                // 404 (Not Found): must be returned if no matching records are found.\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('No matching records found.', 'ERR_NOT_FOUND');\n            }\n            if (res.status === 422) {\n                // https://specs.ipfs.tech/routing/http-routing-v1/#response-status-codes\n                // 422 (Unprocessable Entity): request does not conform to schema or semantic constraints.\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('Request does not conform to schema or semantic constraints.', 'ERR_INVALID_REQUEST');\n            }\n            if (res.body == null) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('GET ipns response had no body', 'ERR_BAD_RESPONSE');\n            }\n            const buf = await res.arrayBuffer();\n            const body = new Uint8Array(buf, 0, buf.byteLength);\n            if (options.validate !== false) {\n                await (0,ipns_validator__WEBPACK_IMPORTED_MODULE_12__.ipnsValidator)((0,ipns__WEBPACK_IMPORTED_MODULE_13__.peerIdToRoutingKey)(peerId), body);\n            }\n            return (0,ipns__WEBPACK_IMPORTED_MODULE_13__.unmarshal)(body);\n        }\n        catch (err) {\n            log.error('getIPNS GET %s error:', resource, err);\n            throw err;\n        }\n        finally {\n            signal.clear();\n            onFinish.resolve();\n            log('getIPNS finished: %c', peerId);\n        }\n    }\n    async putIPNS(peerId, record, options = {}) {\n        log('putIPNS starts: %c', peerId);\n        const signal = (0,any_signal__WEBPACK_IMPORTED_MODULE_1__.anySignal)([this.shutDownController.signal, options.signal, AbortSignal.timeout(this.timeout)]);\n        const onStart = (0,p_defer__WEBPACK_IMPORTED_MODULE_10__[\"default\"])();\n        const onFinish = (0,p_defer__WEBPACK_IMPORTED_MODULE_10__[\"default\"])();\n        void this.httpQueue.add(async () => {\n            onStart.resolve();\n            return onFinish.promise;\n        });\n        // https://specs.ipfs.tech/routing/http-routing-v1/\n        const resource = `${this.clientUrl}routing/v1/ipns/${peerId.toCID().toString()}`;\n        try {\n            await onStart.promise;\n            const body = (0,ipns__WEBPACK_IMPORTED_MODULE_13__.marshal)(record);\n            const getOptions = { method: 'PUT', headers: { 'Content-Type': 'application/vnd.ipfs.ipns-record' }, body, signal };\n            const res = await fetch(resource, getOptions);\n            log('putIPNS PUT %s %d', resource, res.status);\n            if (res.status !== 200) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('PUT ipns response had status other than 200', 'ERR_BAD_RESPONSE');\n            }\n        }\n        catch (err) {\n            log.error('putIPNS PUT %s error:', resource, err.stack);\n            throw err;\n        }\n        finally {\n            signal.clear();\n            onFinish.resolve();\n            log('putIPNS finished: %c', peerId);\n        }\n    }\n    #conformToPeerSchema(record) {\n        const protocols = [];\n        const multiaddrs = record.Addrs?.map(_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr) ?? [];\n        if (record.Protocols != null) {\n            protocols.push(...record.Protocols);\n        }\n        if (record.Protocol != null) {\n            protocols.push(record.Protocol);\n            delete record.Protocol;\n        }\n        return {\n            ...record,\n            Schema: 'peer',\n            ID: (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_14__.peerIdFromString)(record.ID),\n            Addrs: multiaddrs,\n            Protocols: protocols\n        };\n    }\n}\n//# sourceMappingURL=client.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/delegated-routing-v1-http-api-client/dist/src/client.js?");

/***/ }),

/***/ "./node_modules/@helia/delegated-routing-v1-http-api-client/dist/src/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@helia/delegated-routing-v1-http-api-client/dist/src/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDelegatedRoutingV1HttpApiClient: () => (/* binding */ createDelegatedRoutingV1HttpApiClient)\n/* harmony export */ });\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client.js */ \"./node_modules/@helia/delegated-routing-v1-http-api-client/dist/src/client.js\");\n/**\n * @packageDocumentation\n *\n * A client implementation of the IPFS [Delegated Routing V1 HTTP API](https://specs.ipfs.tech/routing/http-routing-v1/) that can be used to interact with any compliant server implementation.\n *\n * @example\n *\n * ```typescript\n * import { createDelegatedRoutingV1HttpApiClient } from '@helia/delegated-routing-v1-http-api-client'\n * import { CID } from 'multiformats/cid'\n *\n * const client = createDelegatedRoutingV1HttpApiClient('https://example.org')\n *\n * for await (const prov of getProviders(CID.parse('QmFoo'))) {\n *   // ...\n * }\n * ```\n *\n * ### How to use with libp2p\n *\n * The client can be configured as a libp2p service, this will enable it as both a {@link https://libp2p.github.io/js-libp2p/interfaces/_libp2p_interface.content_routing.ContentRouting.html | ContentRouting} and a {@link https://libp2p.github.io/js-libp2p/interfaces/_libp2p_interface.peer_routing.PeerRouting.html | PeerRouting} implementation\n *\n * @example\n *\n * ```typescript\n * import { createDelegatedRoutingV1HttpApiClient } from '@helia/delegated-routing-v1-http-api-client'\n * import { createLibp2p } from 'libp2p'\n * import { peerIdFromString } from '@libp2p/peer-id'\n *\n * const client = createDelegatedRoutingV1HttpApiClient('https://example.org')\n * const libp2p = await createLibp2p({\n *   // other config here\n *   services: {\n *     delegatedRouting: client\n *   }\n * })\n *\n * // later this will use the configured HTTP gateway\n * await libp2p.peerRouting.findPeer(peerIdFromString('QmFoo'))\n * ```\n */\n\n/**\n * Create and return a client to use with a Routing V1 HTTP API server\n */\nfunction createDelegatedRoutingV1HttpApiClient(url, init = {}) {\n    return new _client_js__WEBPACK_IMPORTED_MODULE_0__.DefaultDelegatedRoutingV1HttpApiClient(new URL(url), init);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/delegated-routing-v1-http-api-client/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@helia/delegated-routing-v1-http-api-client/dist/src/routings.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@helia/delegated-routing-v1-http-api-client/dist/src/routings.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DelegatedRoutingV1HttpApiClientContentRouting: () => (/* binding */ DelegatedRoutingV1HttpApiClientContentRouting),\n/* harmony export */   DelegatedRoutingV1HttpApiClientPeerRouting: () => (/* binding */ DelegatedRoutingV1HttpApiClientPeerRouting)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var ipns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ipns */ \"./node_modules/ipns/dist/src/utils.js\");\n/* harmony import */ var it_first__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-first */ \"./node_modules/it-first/dist/src/index.js\");\n/* harmony import */ var it_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-map */ \"./node_modules/it-map/dist/src/index.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n\n\n\n\n\n\n\n\nconst IPNS_PREFIX = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)('/ipns/');\nfunction isIPNSKey(key) {\n    return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_2__.equals)(key.subarray(0, IPNS_PREFIX.byteLength), IPNS_PREFIX);\n}\nconst peerIdFromRoutingKey = (key) => {\n    return (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_4__.peerIdFromBytes)(key.slice(IPNS_PREFIX.length));\n};\n/**\n * Wrapper class to convert [http-routing-v1 content events](https://specs.ipfs.tech/routing/http-routing-v1/#response-body) into returned values\n */\nclass DelegatedRoutingV1HttpApiClientContentRouting {\n    client;\n    constructor(client) {\n        this.client = client;\n    }\n    async *findProviders(cid, options = {}) {\n        yield* (0,it_map__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this.client.getProviders(cid, options), (record) => {\n            return {\n                id: record.ID,\n                multiaddrs: record.Addrs ?? []\n            };\n        });\n    }\n    async provide() {\n        // noop\n    }\n    async put(key, value, options) {\n        if (!isIPNSKey(key)) {\n            return;\n        }\n        const peerId = peerIdFromRoutingKey(key);\n        const record = (0,ipns__WEBPACK_IMPORTED_MODULE_5__.unmarshal)(value);\n        await this.client.putIPNS(peerId, record, options);\n    }\n    async get(key, options) {\n        if (!isIPNSKey(key)) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__.CodeError('Not found', 'ERR_NOT_FOUND');\n        }\n        const peerId = peerIdFromRoutingKey(key);\n        try {\n            const record = await this.client.getIPNS(peerId, options);\n            return (0,ipns__WEBPACK_IMPORTED_MODULE_5__.marshal)(record);\n        }\n        catch (err) {\n            // ERR_BAD_RESPONSE is thrown when the response had no body, which means\n            // the record couldn't be found\n            if (err.code === 'ERR_BAD_RESPONSE') {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__.CodeError('Not found', 'ERR_NOT_FOUND');\n            }\n            throw err;\n        }\n    }\n}\n/**\n * Wrapper class to convert [http-routing-v1](https://specs.ipfs.tech/routing/http-routing-v1/#response-body-0) events into expected libp2p values\n */\nclass DelegatedRoutingV1HttpApiClientPeerRouting {\n    client;\n    constructor(client) {\n        this.client = client;\n    }\n    async findPeer(peerId, options = {}) {\n        const peer = await (0,it_first__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.client.getPeers(peerId, options));\n        if (peer != null) {\n            return {\n                id: peer.ID,\n                multiaddrs: peer.Addrs ?? []\n            };\n        }\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__.CodeError('Not found', 'ERR_NOT_FOUND');\n    }\n    async *getClosestPeers(key, options = {}) {\n        // noop\n    }\n}\n//# sourceMappingURL=routings.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/delegated-routing-v1-http-api-client/dist/src/routings.js?");

/***/ }),

/***/ "./node_modules/@helia/interface/dist/src/blocks.js":
/*!**********************************************************!*\
  !*** ./node_modules/@helia/interface/dist/src/blocks.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=blocks.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/interface/dist/src/blocks.js?");

/***/ }),

/***/ "./node_modules/@helia/interface/dist/src/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@helia/interface/dist/src/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blocks.js */ \"./node_modules/@helia/interface/dist/src/blocks.js\");\n/* harmony import */ var _pins_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pins.js */ \"./node_modules/@helia/interface/dist/src/pins.js\");\n/* harmony import */ var _routing_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./routing.js */ \"./node_modules/@helia/interface/dist/src/routing.js\");\n/**\n * @packageDocumentation\n *\n * The API defined by a {@link Helia} node\n *\n * @example\n *\n * ```typescript\n * import type { Helia } from '@helia/interface'\n *\n * export function doSomething(helia: Helia) {\n *   // use helia node functions here\n * }\n * ```\n */\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/interface/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@helia/interface/dist/src/pins.js":
/*!********************************************************!*\
  !*** ./node_modules/@helia/interface/dist/src/pins.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=pins.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/interface/dist/src/pins.js?");

/***/ }),

/***/ "./node_modules/@helia/interface/dist/src/routing.js":
/*!***********************************************************!*\
  !*** ./node_modules/@helia/interface/dist/src/routing.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=routing.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/interface/dist/src/routing.js?");

/***/ }),

/***/ "./node_modules/@helia/routers/dist/src/libp2p-routing.js":
/*!****************************************************************!*\
  !*** ./node_modules/@helia/routers/dist/src/libp2p-routing.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   libp2pRouting: () => (/* binding */ libp2pRouting)\n/* harmony export */ });\nclass Libp2pRouter {\n    libp2p;\n    constructor(libp2p) {\n        this.libp2p = libp2p;\n    }\n    async provide(cid, options) {\n        await this.libp2p.contentRouting.provide(cid, options);\n    }\n    async *findProviders(cid, options) {\n        yield* this.libp2p.contentRouting.findProviders(cid, options);\n    }\n    async put(key, value, options) {\n        await this.libp2p.contentRouting.put(key, value, options);\n    }\n    async get(key, options) {\n        return this.libp2p.contentRouting.get(key, options);\n    }\n    async findPeer(peerId, options) {\n        return this.libp2p.peerRouting.findPeer(peerId, options);\n    }\n    async *getClosestPeers(key, options) {\n        yield* this.libp2p.peerRouting.getClosestPeers(key, options);\n    }\n}\nfunction libp2pRouting(libp2p) {\n    return new Libp2pRouter(libp2p);\n}\n//# sourceMappingURL=libp2p-routing.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/routers/dist/src/libp2p-routing.js?");

/***/ }),

/***/ "./node_modules/@helia/utils/dist/src/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@helia/utils/dist/src/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Helia: () => (/* binding */ Helia)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/content-routing/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/peer-routing/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/startable.js\");\n/* harmony import */ var _libp2p_logger__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @libp2p/logger */ \"./node_modules/@libp2p/logger/dist/src/index.js\");\n/* harmony import */ var _multiformats_dns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/dns */ \"./node_modules/@multiformats/dns/dist/src/index.js\");\n/* harmony import */ var it_drain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-drain */ \"./node_modules/it-drain/dist/src/index.js\");\n/* harmony import */ var progress_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! progress-events */ \"./node_modules/progress-events/dist/src/index.js\");\n/* harmony import */ var _pins_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pins.js */ \"./node_modules/@helia/utils/dist/src/pins.js\");\n/* harmony import */ var _routing_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./routing.js */ \"./node_modules/@helia/utils/dist/src/routing.js\");\n/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./storage.js */ \"./node_modules/@helia/utils/dist/src/storage.js\");\n/* harmony import */ var _utils_dag_walkers_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/dag-walkers.js */ \"./node_modules/@helia/utils/dist/src/utils/dag-walkers.js\");\n/* harmony import */ var _utils_datastore_version_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/datastore-version.js */ \"./node_modules/@helia/utils/dist/src/utils/datastore-version.js\");\n/* harmony import */ var _utils_default_hashers_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/default-hashers.js */ \"./node_modules/@helia/utils/dist/src/utils/default-hashers.js\");\n/* harmony import */ var _utils_networked_storage_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/networked-storage.js */ \"./node_modules/@helia/utils/dist/src/utils/networked-storage.js\");\n/**\n * @packageDocumentation\n *\n * Exports a `Helia` class that implements the {@link HeliaInterface} API.\n *\n * In general you should use the `helia` or `@helia/http` modules instead which\n * pre-configure Helia for certain use-cases (p2p or pure-HTTP).\n *\n * @example\n *\n * ```typescript\n * import { Helia } from '@helia/utils'\n *\n * const node = new Helia({\n *   // ...options\n * })\n * ```\n */\n\n\n\n\n\n\n\n\n\n\n\n\nclass Helia {\n    blockstore;\n    datastore;\n    pins;\n    logger;\n    routing;\n    dagWalkers;\n    hashers;\n    dns;\n    log;\n    constructor(init) {\n        this.logger = init.logger ?? (0,_libp2p_logger__WEBPACK_IMPORTED_MODULE_10__.defaultLogger)();\n        this.log = this.logger.forComponent('helia');\n        this.hashers = (0,_utils_default_hashers_js__WEBPACK_IMPORTED_MODULE_8__.defaultHashers)(init.hashers);\n        this.dagWalkers = (0,_utils_dag_walkers_js__WEBPACK_IMPORTED_MODULE_6__.defaultDagWalkers)(init.dagWalkers);\n        this.dns = init.dns ?? (0,_multiformats_dns__WEBPACK_IMPORTED_MODULE_0__.dns)();\n        const components = {\n            blockstore: init.blockstore,\n            datastore: init.datastore,\n            hashers: this.hashers,\n            dagWalkers: this.dagWalkers,\n            logger: this.logger,\n            blockBrokers: [],\n            dns: this.dns,\n            ...(init.components ?? {})\n        };\n        components.blockBrokers = init.blockBrokers.map((fn) => {\n            return fn(components);\n        });\n        const networkedStorage = new _utils_networked_storage_js__WEBPACK_IMPORTED_MODULE_9__.NetworkedStorage(components);\n        this.pins = new _pins_js__WEBPACK_IMPORTED_MODULE_3__.PinsImpl(init.datastore, networkedStorage, this.dagWalkers);\n        this.blockstore = new _storage_js__WEBPACK_IMPORTED_MODULE_5__.BlockStorage(networkedStorage, this.pins, {\n            holdGcLock: init.holdGcLock ?? true\n        });\n        this.datastore = init.datastore;\n        this.routing = new _routing_js__WEBPACK_IMPORTED_MODULE_4__.Routing(components, {\n            routers: (init.routers ?? []).flatMap((router) => {\n                // if the router itself is a router\n                const routers = [\n                    router\n                ];\n                // if the router provides a libp2p-style ContentRouter\n                if (router[_libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.contentRoutingSymbol] != null) {\n                    routers.push(router[_libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.contentRoutingSymbol]);\n                }\n                // if the router provides a libp2p-style PeerRouter\n                if (router[_libp2p_interface__WEBPACK_IMPORTED_MODULE_12__.peerRoutingSymbol] != null) {\n                    routers.push(router[_libp2p_interface__WEBPACK_IMPORTED_MODULE_12__.peerRoutingSymbol]);\n                }\n                return routers;\n            })\n        });\n    }\n    async start() {\n        await (0,_utils_datastore_version_js__WEBPACK_IMPORTED_MODULE_7__.assertDatastoreVersionIsCurrent)(this.datastore);\n        await (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_13__.start)(this.blockstore, this.datastore, this.routing);\n    }\n    async stop() {\n        await (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_13__.stop)(this.blockstore, this.datastore, this.routing);\n    }\n    async gc(options = {}) {\n        const releaseLock = await this.blockstore.lock.writeLock();\n        try {\n            const helia = this;\n            const blockstore = this.blockstore.unwrap();\n            this.log('gc start');\n            await (0,it_drain__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(blockstore.deleteMany((async function* () {\n                for await (const { cid } of blockstore.getAll()) {\n                    try {\n                        if (await helia.pins.isPinned(cid, options)) {\n                            continue;\n                        }\n                        yield cid;\n                        options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_2__.CustomProgressEvent('helia:gc:deleted', cid));\n                    }\n                    catch (err) {\n                        helia.log.error('Error during gc', err);\n                        options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_2__.CustomProgressEvent('helia:gc:error', err));\n                    }\n                }\n            }())));\n        }\n        finally {\n            releaseLock();\n        }\n        this.log('gc finished');\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/utils/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@helia/utils/dist/src/pins.js":
/*!****************************************************!*\
  !*** ./node_modules/@helia/utils/dist/src/pins.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PinsImpl: () => (/* binding */ PinsImpl)\n/* harmony export */ });\n/* harmony import */ var _libp2p_utils_queue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/utils/queue */ \"./node_modules/@libp2p/utils/dist/src/queue/index.js\");\n/* harmony import */ var cborg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cborg */ \"./node_modules/cborg/cborg.js\");\n/* harmony import */ var interface_datastore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! interface-datastore */ \"./node_modules/interface-datastore/dist/src/index.js\");\n/* harmony import */ var multiformats_bases_base36__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! multiformats/bases/base36 */ \"./node_modules/multiformats/dist/src/bases/base36.js\");\n/* harmony import */ var multiformats_cid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! multiformats/cid */ \"./node_modules/multiformats/dist/src/cid.js\");\n/* harmony import */ var progress_events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! progress-events */ \"./node_modules/progress-events/dist/src/index.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n\n\n\n\n\n\n\nconst DATASTORE_PIN_PREFIX = '/pin/';\nconst DATASTORE_BLOCK_PREFIX = '/pinned-block/';\nconst DATASTORE_ENCODING = multiformats_bases_base36__WEBPACK_IMPORTED_MODULE_2__.base36;\nconst DAG_WALK_QUEUE_CONCURRENCY = 1;\nfunction toDSKey(cid) {\n    if (cid.version === 0) {\n        cid = cid.toV1();\n    }\n    return new interface_datastore__WEBPACK_IMPORTED_MODULE_1__.Key(`${DATASTORE_PIN_PREFIX}${cid.toString(DATASTORE_ENCODING)}`);\n}\nclass PinsImpl {\n    datastore;\n    blockstore;\n    dagWalkers;\n    constructor(datastore, blockstore, dagWalkers) {\n        this.datastore = datastore;\n        this.blockstore = blockstore;\n        this.dagWalkers = dagWalkers;\n    }\n    async *add(cid, options = {}) {\n        const pinKey = toDSKey(cid);\n        if (await this.datastore.has(pinKey)) {\n            throw new Error('Already pinned');\n        }\n        const depth = Math.round(options.depth ?? Infinity);\n        if (depth < 0) {\n            throw new Error('Depth must be greater than or equal to 0');\n        }\n        // use a queue to walk the DAG instead of recursion so we can traverse very large DAGs\n        const queue = new _libp2p_utils_queue__WEBPACK_IMPORTED_MODULE_6__.Queue({\n            concurrency: DAG_WALK_QUEUE_CONCURRENCY\n        });\n        for await (const childCid of this.#walkDag(cid, queue, {\n            ...options,\n            depth\n        })) {\n            await this.#updatePinnedBlock(childCid, (pinnedBlock) => {\n                // do not update pinned block if this block is already pinned by this CID\n                if (pinnedBlock.pinnedBy.find(c => (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_5__.equals)(c, cid.bytes)) != null) {\n                    return false;\n                }\n                pinnedBlock.pinCount++;\n                pinnedBlock.pinnedBy.push(cid.bytes);\n                return true;\n            }, options);\n            yield childCid;\n        }\n        const pin = {\n            depth,\n            metadata: options.metadata ?? {}\n        };\n        await this.datastore.put(pinKey, cborg__WEBPACK_IMPORTED_MODULE_0__.encode(pin), options);\n    }\n    /**\n     * Walk a DAG in an iterable fashion\n     */\n    async *#walkDag(cid, queue, options) {\n        if (options.depth === -1) {\n            return;\n        }\n        const dagWalker = this.dagWalkers[cid.code];\n        if (dagWalker == null) {\n            throw new Error(`No dag walker found for cid codec ${cid.code}`);\n        }\n        const block = await this.blockstore.get(cid, options);\n        yield cid;\n        // walk dag, ensure all blocks are present\n        for await (const cid of dagWalker.walk(block)) {\n            yield* await queue.add(async () => {\n                return this.#walkDag(cid, queue, {\n                    ...options,\n                    depth: options.depth - 1\n                });\n            });\n        }\n    }\n    /**\n     * Update the pin count for the CID\n     */\n    async #updatePinnedBlock(cid, withPinnedBlock, options) {\n        const blockKey = new interface_datastore__WEBPACK_IMPORTED_MODULE_1__.Key(`${DATASTORE_BLOCK_PREFIX}${DATASTORE_ENCODING.encode(cid.multihash.bytes)}`);\n        let pinnedBlock = {\n            pinCount: 0,\n            pinnedBy: []\n        };\n        try {\n            pinnedBlock = cborg__WEBPACK_IMPORTED_MODULE_0__.decode(await this.datastore.get(blockKey, options));\n        }\n        catch (err) {\n            if (err.code !== 'ERR_NOT_FOUND') {\n                throw err;\n            }\n        }\n        const shouldContinue = withPinnedBlock(pinnedBlock);\n        if (!shouldContinue) {\n            return;\n        }\n        if (pinnedBlock.pinCount === 0) {\n            if (await this.datastore.has(blockKey)) {\n                await this.datastore.delete(blockKey);\n                return;\n            }\n        }\n        await this.datastore.put(blockKey, cborg__WEBPACK_IMPORTED_MODULE_0__.encode(pinnedBlock), options);\n        options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_4__.CustomProgressEvent('helia:pin:add', cid));\n    }\n    async *rm(cid, options = {}) {\n        const pinKey = toDSKey(cid);\n        const buf = await this.datastore.get(pinKey, options);\n        const pin = cborg__WEBPACK_IMPORTED_MODULE_0__.decode(buf);\n        await this.datastore.delete(pinKey, options);\n        // use a queue to walk the DAG instead of recursion so we can traverse very large DAGs\n        const queue = new _libp2p_utils_queue__WEBPACK_IMPORTED_MODULE_6__.Queue({\n            concurrency: DAG_WALK_QUEUE_CONCURRENCY\n        });\n        for await (const childCid of this.#walkDag(cid, queue, {\n            ...options,\n            depth: pin.depth\n        })) {\n            await this.#updatePinnedBlock(childCid, (pinnedBlock) => {\n                pinnedBlock.pinCount--;\n                pinnedBlock.pinnedBy = pinnedBlock.pinnedBy.filter(c => (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_5__.equals)(c, cid.bytes));\n                return true;\n            }, {\n                ...options,\n                depth: pin.depth\n            });\n            yield childCid;\n        }\n    }\n    async *ls(options = {}) {\n        for await (const { key, value } of this.datastore.query({\n            prefix: DATASTORE_PIN_PREFIX + (options.cid != null ? `${options.cid.toString(multiformats_bases_base36__WEBPACK_IMPORTED_MODULE_2__.base36)}` : '')\n        }, options)) {\n            const cid = multiformats_cid__WEBPACK_IMPORTED_MODULE_3__.CID.parse(key.toString().substring(5), multiformats_bases_base36__WEBPACK_IMPORTED_MODULE_2__.base36);\n            const pin = cborg__WEBPACK_IMPORTED_MODULE_0__.decode(value);\n            yield {\n                cid,\n                ...pin\n            };\n        }\n    }\n    async isPinned(cid, options = {}) {\n        const blockKey = new interface_datastore__WEBPACK_IMPORTED_MODULE_1__.Key(`${DATASTORE_BLOCK_PREFIX}${DATASTORE_ENCODING.encode(cid.multihash.bytes)}`);\n        return this.datastore.has(blockKey, options);\n    }\n}\n//# sourceMappingURL=pins.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/utils/dist/src/pins.js?");

/***/ }),

/***/ "./node_modules/@helia/utils/dist/src/routing.js":
/*!*******************************************************!*\
  !*** ./node_modules/@helia/utils/dist/src/routing.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Routing: () => (/* binding */ Routing)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/startable.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/peer-collections */ \"./node_modules/@libp2p/peer-collections/dist/src/set.js\");\n/* harmony import */ var it_merge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-merge */ \"./node_modules/it-merge/dist/src/index.js\");\n\n\n\nclass Routing {\n    log;\n    routers;\n    constructor(components, init) {\n        this.log = components.logger.forComponent('helia:routing');\n        this.routers = init.routers ?? [];\n    }\n    async start() {\n        await (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.start)(...this.routers);\n    }\n    async stop() {\n        await (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.stop)(...this.routers);\n    }\n    /**\n     * Iterates over all content routers in parallel to find providers of the given key\n     */\n    async *findProviders(key, options = {}) {\n        if (this.routers.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('No content routers available', 'ERR_NO_ROUTERS_AVAILABLE');\n        }\n        const seen = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_3__.PeerSet();\n        for await (const peer of (0,it_merge__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(...supports(this.routers, 'findProviders')\n            .map(router => router.findProviders(key, options)))) {\n            // the peer was yielded by a content router without multiaddrs and we\n            // failed to load them\n            if (peer == null) {\n                continue;\n            }\n            // deduplicate peers\n            if (seen.has(peer.id)) {\n                continue;\n            }\n            seen.add(peer.id);\n            yield peer;\n        }\n    }\n    /**\n     * Iterates over all content routers in parallel to notify it is\n     * a provider of the given key\n     */\n    async provide(key, options = {}) {\n        if (this.routers.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('No content routers available', 'ERR_NO_ROUTERS_AVAILABLE');\n        }\n        await Promise.all(supports(this.routers, 'provide')\n            .map(async (router) => {\n            await router.provide(key, options);\n        }));\n    }\n    /**\n     * Store the given key/value pair in the available content routings\n     */\n    async put(key, value, options) {\n        await Promise.all(supports(this.routers, 'put')\n            .map(async (router) => {\n            await router.put(key, value, options);\n        }));\n    }\n    /**\n     * Get the value to the given key.\n     * Times out after 1 minute by default.\n     */\n    async get(key, options) {\n        return Promise.any(supports(this.routers, 'get')\n            .map(async (router) => {\n            return router.get(key, options);\n        }));\n    }\n    /**\n     * Iterates over all peer routers in parallel to find the given peer\n     */\n    async findPeer(id, options) {\n        if (this.routers.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('No peer routers available', 'ERR_NO_ROUTERS_AVAILABLE');\n        }\n        const self = this;\n        const source = (0,it_merge__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(...supports(this.routers, 'findPeer')\n            .map(router => (async function* () {\n            try {\n                yield await router.findPeer(id, options);\n            }\n            catch (err) {\n                self.log.error(err);\n            }\n        })()));\n        for await (const peer of source) {\n            if (peer == null) {\n                continue;\n            }\n            return peer;\n        }\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('Could not find peer in routing', 'ERR_NOT_FOUND');\n    }\n    /**\n     * Attempt to find the closest peers on the network to the given key\n     */\n    async *getClosestPeers(key, options = {}) {\n        if (this.routers.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('No peer routers available', 'ERR_NO_ROUTERS_AVAILABLE');\n        }\n        const seen = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_3__.PeerSet();\n        for await (const peer of (0,it_merge__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(...supports(this.routers, 'getClosestPeers')\n            .map(router => router.getClosestPeers(key, options)))) {\n            if (peer == null) {\n                continue;\n            }\n            // deduplicate peers\n            if (seen.has(peer.id)) {\n                continue;\n            }\n            seen.add(peer.id);\n            yield peer;\n        }\n    }\n}\nfunction supports(routers, key) {\n    return routers.filter(router => router[key] != null);\n}\n//# sourceMappingURL=routing.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/utils/dist/src/routing.js?");

/***/ }),

/***/ "./node_modules/@helia/utils/dist/src/storage.js":
/*!*******************************************************!*\
  !*** ./node_modules/@helia/utils/dist/src/storage.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockStorage: () => (/* binding */ BlockStorage)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/startable.js\");\n/* harmony import */ var mortice__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mortice */ \"./node_modules/mortice/dist/src/index.js\");\n\n\n/**\n * BlockStorage is a hybrid blockstore that puts/gets blocks from a configured\n * blockstore (that may be on disk, s3, or something else). If the blocks are\n * not present Bitswap will be used to fetch them from network peers.\n */\nclass BlockStorage {\n    lock;\n    child;\n    pins;\n    started;\n    /**\n     * Create a new BlockStorage\n     */\n    constructor(blockstore, pins, options = {}) {\n        this.child = blockstore;\n        this.pins = pins;\n        this.lock = (0,mortice__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            singleProcess: options.holdGcLock\n        });\n        this.started = false;\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        await (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.start)(this.child);\n        this.started = true;\n    }\n    async stop() {\n        await (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.stop)(this.child);\n        this.started = false;\n    }\n    unwrap() {\n        return this.child;\n    }\n    /**\n     * Put a block to the underlying datastore\n     */\n    async put(cid, block, options = {}) {\n        const releaseLock = await this.lock.readLock();\n        try {\n            return await this.child.put(cid, block, options);\n        }\n        finally {\n            releaseLock();\n        }\n    }\n    /**\n     * Put a multiple blocks to the underlying datastore\n     */\n    async *putMany(blocks, options = {}) {\n        const releaseLock = await this.lock.readLock();\n        try {\n            yield* this.child.putMany(blocks, options);\n        }\n        finally {\n            releaseLock();\n        }\n    }\n    /**\n     * Get a block by cid\n     */\n    async get(cid, options = {}) {\n        const releaseLock = await this.lock.readLock();\n        try {\n            return await this.child.get(cid, options);\n        }\n        finally {\n            releaseLock();\n        }\n    }\n    /**\n     * Get multiple blocks back from an (async) iterable of cids\n     */\n    async *getMany(cids, options = {}) {\n        const releaseLock = await this.lock.readLock();\n        try {\n            yield* this.child.getMany(cids, options);\n        }\n        finally {\n            releaseLock();\n        }\n    }\n    /**\n     * Delete a block from the blockstore\n     */\n    async delete(cid, options = {}) {\n        const releaseLock = await this.lock.writeLock();\n        try {\n            if (await this.pins.isPinned(cid)) {\n                throw new Error('CID was pinned');\n            }\n            await this.child.delete(cid, options);\n        }\n        finally {\n            releaseLock();\n        }\n    }\n    /**\n     * Delete multiple blocks from the blockstore\n     */\n    async *deleteMany(cids, options = {}) {\n        const releaseLock = await this.lock.writeLock();\n        try {\n            const storage = this;\n            yield* this.child.deleteMany((async function* () {\n                for await (const cid of cids) {\n                    if (await storage.pins.isPinned(cid)) {\n                        throw new Error('CID was pinned');\n                    }\n                    yield cid;\n                }\n            }()), options);\n        }\n        finally {\n            releaseLock();\n        }\n    }\n    async has(cid, options = {}) {\n        const releaseLock = await this.lock.readLock();\n        try {\n            return await this.child.has(cid, options);\n        }\n        finally {\n            releaseLock();\n        }\n    }\n    async *getAll(options = {}) {\n        const releaseLock = await this.lock.readLock();\n        try {\n            yield* this.child.getAll(options);\n        }\n        finally {\n            releaseLock();\n        }\n    }\n}\n//# sourceMappingURL=storage.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/utils/dist/src/storage.js?");

/***/ }),

/***/ "./node_modules/@helia/utils/dist/src/utils/dag-walkers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@helia/utils/dist/src/utils/dag-walkers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dagCborWalker: () => (/* binding */ dagCborWalker),\n/* harmony export */   dagJsonWalker: () => (/* binding */ dagJsonWalker),\n/* harmony export */   dagPbWalker: () => (/* binding */ dagPbWalker),\n/* harmony export */   defaultDagWalkers: () => (/* binding */ defaultDagWalkers),\n/* harmony export */   jsonWalker: () => (/* binding */ jsonWalker),\n/* harmony export */   rawWalker: () => (/* binding */ rawWalker)\n/* harmony export */ });\n/* harmony import */ var _ipld_dag_cbor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ipld/dag-cbor */ \"./node_modules/@ipld/dag-cbor/src/index.js\");\n/* harmony import */ var _ipld_dag_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ipld/dag-json */ \"./node_modules/@ipld/dag-json/src/index.js\");\n/* harmony import */ var _ipld_dag_pb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ipld/dag-pb */ \"./node_modules/@ipld/dag-pb/src/index.js\");\n/* harmony import */ var cborg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cborg */ \"./node_modules/cborg/cborg.js\");\n/* harmony import */ var cborg_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cborg/json */ \"./node_modules/cborg/lib/json/json.js\");\n/* harmony import */ var multiformats__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! multiformats */ \"./node_modules/multiformats/dist/src/index.js\");\n/* harmony import */ var multiformats_bases_base64__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! multiformats/bases/base64 */ \"./node_modules/multiformats/dist/src/bases/base64.js\");\n/* harmony import */ var multiformats_codecs_json__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! multiformats/codecs/json */ \"./node_modules/multiformats/dist/src/codecs/json.js\");\n/* harmony import */ var multiformats_codecs_raw__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! multiformats/codecs/raw */ \"./node_modules/multiformats/dist/src/codecs/raw.js\");\n/* eslint max-depth: [\"error\", 7] */\n\n\n\n\n\n\n\n\n\n\n/**\n * Dag walker for dag-pb CIDs\n */\nconst dagPbWalker = {\n    codec: _ipld_dag_pb__WEBPACK_IMPORTED_MODULE_2__.code,\n    *walk(block) {\n        const node = _ipld_dag_pb__WEBPACK_IMPORTED_MODULE_2__.decode(block);\n        yield* node.Links.map(l => l.Hash);\n    }\n};\n/**\n * Dag walker for raw CIDs\n */\nconst rawWalker = {\n    codec: multiformats_codecs_raw__WEBPACK_IMPORTED_MODULE_8__.code,\n    *walk() {\n        // no embedded CIDs in a raw block\n    }\n};\n// https://github.com/ipfs/go-ipfs/issues/3570#issuecomment-273931692\nconst CID_TAG = 42;\n/**\n * Dag walker for dag-cbor CIDs. Does not actually use dag-cbor since\n * all we are interested in is extracting the the CIDs from the block\n * so we can just use cborg for that.\n */\nconst dagCborWalker = {\n    codec: _ipld_dag_cbor__WEBPACK_IMPORTED_MODULE_0__.code,\n    *walk(block) {\n        const cids = [];\n        const tags = [];\n        tags[CID_TAG] = (bytes) => {\n            if (bytes[0] !== 0) {\n                throw new Error('Invalid CID for CBOR tag 42; expected leading 0x00');\n            }\n            const cid = multiformats__WEBPACK_IMPORTED_MODULE_5__.CID.decode(bytes.subarray(1)); // ignore leading 0x00\n            cids.push(cid);\n            return cid;\n        };\n        cborg__WEBPACK_IMPORTED_MODULE_3__.decode(block, {\n            tags\n        });\n        yield* cids;\n    }\n};\n/**\n * Borrowed from @ipld/dag-json\n */\nclass DagJsonTokenizer extends cborg_json__WEBPACK_IMPORTED_MODULE_4__.Tokenizer {\n    tokenBuffer;\n    constructor(data, options) {\n        super(data, options);\n        this.tokenBuffer = [];\n    }\n    done() {\n        return this.tokenBuffer.length === 0 && super.done();\n    }\n    _next() {\n        if (this.tokenBuffer.length > 0) {\n            // @ts-expect-error https://github.com/Microsoft/TypeScript/issues/30406\n            return this.tokenBuffer.pop();\n        }\n        return super.next();\n    }\n    /**\n     * Implements rules outlined in https://github.com/ipld/specs/pull/356\n     */\n    next() {\n        const token = this._next();\n        if (token.type === cborg__WEBPACK_IMPORTED_MODULE_3__.Type.map) {\n            const keyToken = this._next();\n            if (keyToken.type === cborg__WEBPACK_IMPORTED_MODULE_3__.Type.string && keyToken.value === '/') {\n                const valueToken = this._next();\n                if (valueToken.type === cborg__WEBPACK_IMPORTED_MODULE_3__.Type.string) { // *must* be a CID\n                    const breakToken = this._next(); // swallow the end-of-map token\n                    if (breakToken.type !== cborg__WEBPACK_IMPORTED_MODULE_3__.Type.break) {\n                        throw new Error('Invalid encoded CID form');\n                    }\n                    this.tokenBuffer.push(valueToken); // CID.parse will pick this up after our tag token\n                    return new cborg__WEBPACK_IMPORTED_MODULE_3__.Token(cborg__WEBPACK_IMPORTED_MODULE_3__.Type.tag, 42, 0);\n                }\n                if (valueToken.type === cborg__WEBPACK_IMPORTED_MODULE_3__.Type.map) {\n                    const innerKeyToken = this._next();\n                    if (innerKeyToken.type === cborg__WEBPACK_IMPORTED_MODULE_3__.Type.string && innerKeyToken.value === 'bytes') {\n                        const innerValueToken = this._next();\n                        if (innerValueToken.type === cborg__WEBPACK_IMPORTED_MODULE_3__.Type.string) { // *must* be Bytes\n                            for (let i = 0; i < 2; i++) {\n                                const breakToken = this._next(); // swallow two end-of-map tokens\n                                if (breakToken.type !== cborg__WEBPACK_IMPORTED_MODULE_3__.Type.break) {\n                                    throw new Error('Invalid encoded Bytes form');\n                                }\n                            }\n                            const bytes = multiformats_bases_base64__WEBPACK_IMPORTED_MODULE_6__.base64.decode(`m${innerValueToken.value}`);\n                            return new cborg__WEBPACK_IMPORTED_MODULE_3__.Token(cborg__WEBPACK_IMPORTED_MODULE_3__.Type.bytes, bytes, innerValueToken.value.length);\n                        }\n                        this.tokenBuffer.push(innerValueToken); // bail\n                    }\n                    this.tokenBuffer.push(innerKeyToken); // bail\n                }\n                this.tokenBuffer.push(valueToken); // bail\n            }\n            this.tokenBuffer.push(keyToken); // bail\n        }\n        return token;\n    }\n}\n/**\n * Dag walker for dag-json CIDs. Does not actually use dag-json since\n * all we are interested in is extracting the the CIDs from the block\n * so we can just use cborg/json for that.\n */\nconst dagJsonWalker = {\n    codec: _ipld_dag_json__WEBPACK_IMPORTED_MODULE_1__.code,\n    *walk(block) {\n        const cids = [];\n        const tags = [];\n        tags[CID_TAG] = (string) => {\n            const cid = multiformats__WEBPACK_IMPORTED_MODULE_5__.CID.parse(string);\n            cids.push(cid);\n            return cid;\n        };\n        cborg_json__WEBPACK_IMPORTED_MODULE_4__.decode(block, {\n            tags,\n            tokenizer: new DagJsonTokenizer(block, {\n                tags,\n                allowIndefinite: true,\n                allowUndefined: true,\n                allowNaN: true,\n                allowInfinity: true,\n                allowBigInt: true,\n                strict: false,\n                rejectDuplicateMapKeys: false\n            })\n        });\n        yield* cids;\n    }\n};\n/**\n * Dag walker for json CIDs. JSON has no facility for linking to\n * external blocks so the walker is a no-op.\n */\nconst jsonWalker = {\n    codec: multiformats_codecs_json__WEBPACK_IMPORTED_MODULE_7__.code,\n    *walk() { }\n};\nfunction defaultDagWalkers(walkers = []) {\n    const output = {};\n    [\n        dagPbWalker,\n        rawWalker,\n        dagCborWalker,\n        dagJsonWalker,\n        jsonWalker,\n        ...walkers\n    ].forEach(dagWalker => {\n        output[dagWalker.codec] = dagWalker;\n    });\n    return output;\n}\n//# sourceMappingURL=dag-walkers.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/utils/dist/src/utils/dag-walkers.js?");

/***/ }),

/***/ "./node_modules/@helia/utils/dist/src/utils/datastore-version.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@helia/utils/dist/src/utils/datastore-version.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertDatastoreVersionIsCurrent: () => (/* binding */ assertDatastoreVersionIsCurrent)\n/* harmony export */ });\n/* harmony import */ var interface_datastore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! interface-datastore */ \"./node_modules/interface-datastore/dist/src/index.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n\n\n\nconst DS_VERSION_KEY = new interface_datastore__WEBPACK_IMPORTED_MODULE_0__.Key('/version');\nconst CURRENT_VERSION = 1;\nasync function assertDatastoreVersionIsCurrent(datastore) {\n    if (!(await datastore.has(DS_VERSION_KEY))) {\n        await datastore.put(DS_VERSION_KEY, (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(`${CURRENT_VERSION}`));\n        return;\n    }\n    const buf = await datastore.get(DS_VERSION_KEY);\n    const str = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(buf);\n    const version = parseInt(str, 10);\n    if (version !== CURRENT_VERSION) {\n        // TODO: write migrations when we break compatibility - for an example, see https://github.com/ipfs/js-ipfs-repo/tree/master/packages/ipfs-repo-migrations\n        throw new Error('Unknown datastore version, a datastore migration may be required');\n    }\n}\n//# sourceMappingURL=datastore-version.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/utils/dist/src/utils/datastore-version.js?");

/***/ }),

/***/ "./node_modules/@helia/utils/dist/src/utils/default-hashers.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@helia/utils/dist/src/utils/default-hashers.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultHashers: () => (/* binding */ defaultHashers)\n/* harmony export */ });\n/* harmony import */ var multiformats_hashes_identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/hashes/identity */ \"./node_modules/multiformats/dist/src/hashes/identity.js\");\n/* harmony import */ var multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/hashes/sha2 */ \"./node_modules/multiformats/dist/src/hashes/sha2-browser.js\");\n\n\nfunction defaultHashers(hashers = []) {\n    const output = {};\n    [\n        multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_1__.sha256,\n        multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_1__.sha512,\n        multiformats_hashes_identity__WEBPACK_IMPORTED_MODULE_0__.identity,\n        ...hashers\n    ].forEach(hasher => {\n        output[hasher.code] = hasher;\n    });\n    return output;\n}\n//# sourceMappingURL=default-hashers.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/utils/dist/src/utils/default-hashers.js?");

/***/ }),

/***/ "./node_modules/@helia/utils/dist/src/utils/networked-storage.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@helia/utils/dist/src/utils/networked-storage.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NetworkedStorage: () => (/* binding */ NetworkedStorage),\n/* harmony export */   getCidBlockVerifierFunction: () => (/* binding */ getCidBlockVerifierFunction)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/startable.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var any_signal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! any-signal */ \"./node_modules/any-signal/dist/src/index.js\");\n/* harmony import */ var blockstore_core_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! blockstore-core/identity */ \"./node_modules/blockstore-core/dist/src/identity.js\");\n/* harmony import */ var blockstore_core_tiered__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! blockstore-core/tiered */ \"./node_modules/blockstore-core/dist/src/tiered.js\");\n/* harmony import */ var it_filter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! it-filter */ \"./node_modules/it-filter/dist/src/index.js\");\n/* harmony import */ var it_foreach__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! it-foreach */ \"./node_modules/it-foreach/dist/src/index.js\");\n/* harmony import */ var progress_events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! progress-events */ \"./node_modules/progress-events/dist/src/index.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n\n\n\n\n\n\n\n\nfunction isBlockRetriever(b) {\n    return typeof b.retrieve === 'function';\n}\nfunction isBlockAnnouncer(b) {\n    return typeof b.announce === 'function';\n}\n/**\n * Networked storage wraps a regular blockstore - when getting blocks if the\n * blocks are not present Bitswap will be used to fetch them from network peers.\n */\nclass NetworkedStorage {\n    child;\n    blockRetrievers;\n    blockAnnouncers;\n    hashers;\n    started;\n    log;\n    /**\n     * Create a new BlockStorage\n     */\n    constructor(components) {\n        this.log = components.logger.forComponent('helia:networked-storage');\n        this.child = new blockstore_core_tiered__WEBPACK_IMPORTED_MODULE_2__.TieredBlockstore([\n            new blockstore_core_identity__WEBPACK_IMPORTED_MODULE_1__.IdentityBlockstore(),\n            components.blockstore\n        ]);\n        this.blockRetrievers = (components.blockBrokers ?? []).filter(isBlockRetriever);\n        this.blockAnnouncers = (components.blockBrokers ?? []).filter(isBlockAnnouncer);\n        this.hashers = components.hashers ?? {};\n        this.started = false;\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        await (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.start)(this.child, ...new Set([...this.blockRetrievers, ...this.blockAnnouncers]));\n        this.started = true;\n    }\n    async stop() {\n        await (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.stop)(this.child, ...new Set([...this.blockRetrievers, ...this.blockAnnouncers]));\n        this.started = false;\n    }\n    unwrap() {\n        return this.child;\n    }\n    /**\n     * Put a block to the underlying datastore\n     */\n    async put(cid, block, options = {}) {\n        if (await this.child.has(cid)) {\n            options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:put:duplicate', cid));\n            return cid;\n        }\n        options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:put:providers:notify', cid));\n        this.blockAnnouncers.forEach(provider => {\n            provider.announce(cid, block, options);\n        });\n        options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:put:blockstore:put', cid));\n        return this.child.put(cid, block, options);\n    }\n    /**\n     * Put a multiple blocks to the underlying datastore\n     */\n    async *putMany(blocks, options = {}) {\n        const missingBlocks = (0,it_filter__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(blocks, async ({ cid }) => {\n            const has = await this.child.has(cid);\n            if (has) {\n                options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:put-many:duplicate', cid));\n            }\n            return !has;\n        });\n        const notifyEach = (0,it_foreach__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(missingBlocks, ({ cid, block }) => {\n            options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:put-many:providers:notify', cid));\n            this.blockAnnouncers.forEach(provider => {\n                provider.announce(cid, block, options);\n            });\n        });\n        options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:put-many:blockstore:put-many'));\n        yield* this.child.putMany(notifyEach, options);\n    }\n    /**\n     * Get a block by cid\n     */\n    async get(cid, options = {}) {\n        if (options.offline !== true && !(await this.child.has(cid))) {\n            // we do not have the block locally, get it from a block provider\n            options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:get:providers:get', cid));\n            const block = await raceBlockRetrievers(cid, this.blockRetrievers, this.hashers[cid.multihash.code], {\n                ...options,\n                log: this.log\n            });\n            options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:get:blockstore:put', cid));\n            await this.child.put(cid, block, options);\n            // notify other block providers of the new block\n            options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:get:providers:notify', cid));\n            this.blockAnnouncers.forEach(provider => {\n                provider.announce(cid, block, options);\n            });\n            return block;\n        }\n        options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:get:blockstore:get', cid));\n        return this.child.get(cid, options);\n    }\n    /**\n     * Get multiple blocks back from an (async) iterable of cids\n     */\n    async *getMany(cids, options = {}) {\n        options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:get-many:blockstore:get-many'));\n        yield* this.child.getMany((0,it_foreach__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(cids, async (cid) => {\n            if (options.offline !== true && !(await this.child.has(cid))) {\n                // we do not have the block locally, get it from a block provider\n                options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:get-many:providers:get', cid));\n                const block = await raceBlockRetrievers(cid, this.blockRetrievers, this.hashers[cid.multihash.code], {\n                    ...options,\n                    log: this.log\n                });\n                options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:get-many:blockstore:put', cid));\n                await this.child.put(cid, block, options);\n                // notify other block providers of the new block\n                options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:get-many:providers:notify', cid));\n                this.blockAnnouncers.forEach(provider => {\n                    provider.announce(cid, block, options);\n                });\n            }\n        }));\n    }\n    /**\n     * Delete a block from the blockstore\n     */\n    async delete(cid, options = {}) {\n        options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:delete:blockstore:delete', cid));\n        await this.child.delete(cid, options);\n    }\n    /**\n     * Delete multiple blocks from the blockstore\n     */\n    async *deleteMany(cids, options = {}) {\n        options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:delete-many:blockstore:delete-many'));\n        yield* this.child.deleteMany((async function* () {\n            for await (const cid of cids) {\n                yield cid;\n            }\n        }()), options);\n    }\n    async has(cid, options = {}) {\n        return this.child.has(cid, options);\n    }\n    async *getAll(options = {}) {\n        options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('blocks:get-all:blockstore:get-many'));\n        yield* this.child.getAll(options);\n    }\n}\nconst getCidBlockVerifierFunction = (cid, hasher) => {\n    if (hasher == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.CodeError(`No hasher configured for multihash code 0x${cid.multihash.code.toString(16)}, please configure one. You can look up which hash this is at https://github.com/multiformats/multicodec/blob/master/table.csv`, 'ERR_UNKNOWN_HASH_ALG');\n    }\n    return async (block) => {\n        // verify block\n        const hash = await hasher.digest(block);\n        if (!(0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_6__.equals)(hash.digest, cid.multihash.digest)) {\n            // if a hash mismatch occurs for a TrustlessGatewayBlockBroker, we should try another gateway\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.CodeError('Hash of downloaded block did not match multihash from passed CID', 'ERR_HASH_MISMATCH');\n        }\n    };\n};\n/**\n * Race block providers cancelling any pending requests once the block has been\n * found.\n */\nasync function raceBlockRetrievers(cid, providers, hasher, options) {\n    const validateFn = getCidBlockVerifierFunction(cid, hasher);\n    const controller = new AbortController();\n    const signal = (0,any_signal__WEBPACK_IMPORTED_MODULE_0__.anySignal)([controller.signal, options.signal]);\n    try {\n        return await Promise.any(providers.map(async (provider) => {\n            try {\n                let blocksWereValidated = false;\n                const block = await provider.retrieve(cid, {\n                    ...options,\n                    signal,\n                    validateFn: async (block) => {\n                        await validateFn(block);\n                        blocksWereValidated = true;\n                    }\n                });\n                if (!blocksWereValidated) {\n                    // the blockBroker either did not throw an error when attempting to validate the block\n                    // or did not call the validateFn at all. We should validate the block ourselves\n                    await validateFn(block);\n                }\n                return block;\n            }\n            catch (err) {\n                options.log.error('could not retrieve verified block for %c', cid, err);\n                throw err;\n            }\n        }));\n    }\n    finally {\n        signal.clear();\n    }\n}\n//# sourceMappingURL=networked-storage.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@helia/utils/dist/src/utils/networked-storage.js?");

/***/ }),

/***/ "./node_modules/@libp2p/autonat/dist/src/autonat.js":
/*!**********************************************************!*\
  !*** ./node_modules/@libp2p/autonat/dist/src/autonat.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AutoNATService: () => (/* binding */ AutoNATService)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/events.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _libp2p_peer_id_factory__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @libp2p/peer-id-factory */ \"./node_modules/@libp2p/peer-id-factory/dist/src/index.js\");\n/* harmony import */ var _libp2p_utils_private_ip__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @libp2p/utils/private-ip */ \"./node_modules/@libp2p/utils/dist/src/private-ip.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var it_first__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-first */ \"./node_modules/it-first/dist/src/index.js\");\n/* harmony import */ var it_length_prefixed__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! it-length-prefixed */ \"./node_modules/it-length-prefixed/dist/src/index.js\");\n/* harmony import */ var it_map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! it-map */ \"./node_modules/it-map/dist/src/index.js\");\n/* harmony import */ var it_parallel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! it-parallel */ \"./node_modules/it-parallel/dist/src/index.js\");\n/* harmony import */ var it_pipe__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! it-pipe */ \"./node_modules/it-pipe/dist/src/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@libp2p/autonat/dist/src/constants.js\");\n/* harmony import */ var _pb_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pb/index.js */ \"./node_modules/@libp2p/autonat/dist/src/pb/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n// if more than 3 peers manage to dial us on what we believe to be our external\n// IP then we are convinced that it is, in fact, our external IP\n// https://github.com/libp2p/specs/blob/master/autonat/README.md#autonat-protocol\nconst REQUIRED_SUCCESSFUL_DIALS = 4;\nclass AutoNATService {\n    components;\n    startupDelay;\n    refreshInterval;\n    protocol;\n    timeout;\n    maxInboundStreams;\n    maxOutboundStreams;\n    verifyAddressTimeout;\n    started;\n    log;\n    constructor(components, init) {\n        this.components = components;\n        this.log = components.logger.forComponent('libp2p:autonat');\n        this.started = false;\n        this.protocol = `/${init.protocolPrefix ?? _constants_js__WEBPACK_IMPORTED_MODULE_6__.PROTOCOL_PREFIX}/${_constants_js__WEBPACK_IMPORTED_MODULE_6__.PROTOCOL_NAME}/${_constants_js__WEBPACK_IMPORTED_MODULE_6__.PROTOCOL_VERSION}`;\n        this.timeout = init.timeout ?? _constants_js__WEBPACK_IMPORTED_MODULE_6__.TIMEOUT;\n        this.maxInboundStreams = init.maxInboundStreams ?? _constants_js__WEBPACK_IMPORTED_MODULE_6__.MAX_INBOUND_STREAMS;\n        this.maxOutboundStreams = init.maxOutboundStreams ?? _constants_js__WEBPACK_IMPORTED_MODULE_6__.MAX_OUTBOUND_STREAMS;\n        this.startupDelay = init.startupDelay ?? _constants_js__WEBPACK_IMPORTED_MODULE_6__.STARTUP_DELAY;\n        this.refreshInterval = init.refreshInterval ?? _constants_js__WEBPACK_IMPORTED_MODULE_6__.REFRESH_INTERVAL;\n        this._verifyExternalAddresses = this._verifyExternalAddresses.bind(this);\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        if (this.started) {\n            return;\n        }\n        await this.components.registrar.handle(this.protocol, (data) => {\n            void this.handleIncomingAutonatStream(data)\n                .catch(err => {\n                this.log.error('error handling incoming autonat stream', err);\n            });\n        }, {\n            maxInboundStreams: this.maxInboundStreams,\n            maxOutboundStreams: this.maxOutboundStreams\n        });\n        this.verifyAddressTimeout = setTimeout(this._verifyExternalAddresses, this.startupDelay);\n        this.started = true;\n    }\n    async stop() {\n        await this.components.registrar.unhandle(this.protocol);\n        clearTimeout(this.verifyAddressTimeout);\n        this.started = false;\n    }\n    /**\n     * Handle an incoming AutoNAT request\n     */\n    async handleIncomingAutonatStream(data) {\n        const signal = AbortSignal.timeout(this.timeout);\n        const onAbort = () => {\n            data.stream.abort(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('handleIncomingAutonatStream timeout', _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.ERR_TIMEOUT));\n        };\n        signal.addEventListener('abort', onAbort, { once: true });\n        // this controller may be used while dialing lots of peers so prevent MaxListenersExceededWarning\n        // appearing in the console\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.setMaxListeners)(Infinity, signal);\n        const ourHosts = this.components.addressManager.getAddresses()\n            .map(ma => ma.toOptions().host);\n        try {\n            const self = this;\n            await (0,it_pipe__WEBPACK_IMPORTED_MODULE_5__.pipe)(data.stream, (source) => it_length_prefixed__WEBPACK_IMPORTED_MODULE_2__.decode(source), async function* (stream) {\n                const buf = await (0,it_first__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(stream);\n                if (buf == null) {\n                    self.log('no message received');\n                    yield _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.encode({\n                        type: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.MessageType.DIAL_RESPONSE,\n                        dialResponse: {\n                            status: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.ResponseStatus.E_BAD_REQUEST,\n                            statusText: 'No message was sent'\n                        }\n                    });\n                    return;\n                }\n                let request;\n                try {\n                    request = _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.decode(buf);\n                }\n                catch (err) {\n                    self.log.error('could not decode message', err);\n                    yield _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.encode({\n                        type: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.MessageType.DIAL_RESPONSE,\n                        dialResponse: {\n                            status: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.ResponseStatus.E_BAD_REQUEST,\n                            statusText: 'Could not decode message'\n                        }\n                    });\n                    return;\n                }\n                const dialRequest = request.dial;\n                if (dialRequest == null) {\n                    self.log.error('dial was missing from message');\n                    yield _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.encode({\n                        type: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.MessageType.DIAL_RESPONSE,\n                        dialResponse: {\n                            status: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.ResponseStatus.E_BAD_REQUEST,\n                            statusText: 'No Dial message found in message'\n                        }\n                    });\n                    return;\n                }\n                let peerId;\n                const peer = dialRequest.peer;\n                if (peer == null || peer.id == null) {\n                    self.log.error('PeerId missing from message');\n                    yield _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.encode({\n                        type: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.MessageType.DIAL_RESPONSE,\n                        dialResponse: {\n                            status: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.ResponseStatus.E_BAD_REQUEST,\n                            statusText: 'missing peer info'\n                        }\n                    });\n                    return;\n                }\n                try {\n                    peerId = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_10__.peerIdFromBytes)(peer.id);\n                }\n                catch (err) {\n                    self.log.error('invalid PeerId', err);\n                    yield _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.encode({\n                        type: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.MessageType.DIAL_RESPONSE,\n                        dialResponse: {\n                            status: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.ResponseStatus.E_BAD_REQUEST,\n                            statusText: 'bad peer id'\n                        }\n                    });\n                    return;\n                }\n                self.log('incoming request from %p', peerId);\n                // reject any dial requests that arrive via relays\n                if (!data.connection.remotePeer.equals(peerId)) {\n                    self.log('target peer %p did not equal sending peer %p', peerId, data.connection.remotePeer);\n                    yield _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.encode({\n                        type: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.MessageType.DIAL_RESPONSE,\n                        dialResponse: {\n                            status: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.ResponseStatus.E_BAD_REQUEST,\n                            statusText: 'peer id mismatch'\n                        }\n                    });\n                    return;\n                }\n                // get a list of multiaddrs to dial\n                const multiaddrs = peer.addrs\n                    .map(buf => (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(buf))\n                    .filter(ma => {\n                    const isFromSameHost = ma.toOptions().host === data.connection.remoteAddr.toOptions().host;\n                    self.log.trace('request to dial %a was sent from %a is same host %s', ma, data.connection.remoteAddr, isFromSameHost);\n                    // skip any Multiaddrs where the target node's IP does not match the sending node's IP\n                    return isFromSameHost;\n                })\n                    .filter(ma => {\n                    const host = ma.toOptions().host;\n                    const isPublicIp = !((0,_libp2p_utils_private_ip__WEBPACK_IMPORTED_MODULE_11__.isPrivateIp)(host) ?? false);\n                    self.log.trace('host %s was public %s', host, isPublicIp);\n                    // don't try to dial private addresses\n                    return isPublicIp;\n                })\n                    .filter(ma => {\n                    const host = ma.toOptions().host;\n                    const isNotOurHost = !ourHosts.includes(host);\n                    self.log.trace('host %s was not our host %s', host, isNotOurHost);\n                    // don't try to dial nodes on the same host as us\n                    return isNotOurHost;\n                })\n                    .filter(ma => {\n                    const isSupportedTransport = Boolean(self.components.transportManager.transportForMultiaddr(ma));\n                    self.log.trace('transport for %a is supported %s', ma, isSupportedTransport);\n                    // skip any Multiaddrs that have transports we do not support\n                    return isSupportedTransport;\n                })\n                    .map(ma => {\n                    if (ma.getPeerId() == null) {\n                        // make sure we have the PeerId as part of the Multiaddr\n                        ma = ma.encapsulate(`/p2p/${peerId.toString()}`);\n                    }\n                    return ma;\n                });\n                // make sure we have something to dial\n                if (multiaddrs.length === 0) {\n                    self.log('no valid multiaddrs for %p in message', peerId);\n                    yield _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.encode({\n                        type: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.MessageType.DIAL_RESPONSE,\n                        dialResponse: {\n                            status: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.ResponseStatus.E_DIAL_REFUSED,\n                            statusText: 'no dialable addresses'\n                        }\n                    });\n                    return;\n                }\n                self.log('dial multiaddrs %s for peer %p', multiaddrs.map(ma => ma.toString()).join(', '), peerId);\n                let errorMessage = '';\n                let lastMultiaddr = multiaddrs[0];\n                for await (const multiaddr of multiaddrs) {\n                    let connection;\n                    lastMultiaddr = multiaddr;\n                    try {\n                        connection = await self.components.connectionManager.openConnection(multiaddr, {\n                            signal\n                        });\n                        if (!connection.remoteAddr.equals(multiaddr)) {\n                            self.log.error('tried to dial %a but dialed %a', multiaddr, connection.remoteAddr);\n                            throw new Error('Unexpected remote address');\n                        }\n                        self.log('Success %p', peerId);\n                        yield _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.encode({\n                            type: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.MessageType.DIAL_RESPONSE,\n                            dialResponse: {\n                                status: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.ResponseStatus.OK,\n                                addr: connection.remoteAddr.decapsulateCode((0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)('p2p').code).bytes\n                            }\n                        });\n                        return;\n                    }\n                    catch (err) {\n                        self.log('could not dial %p', peerId, err);\n                        errorMessage = err.message;\n                    }\n                    finally {\n                        if (connection != null) {\n                            await connection.close();\n                        }\n                    }\n                }\n                yield _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.encode({\n                    type: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.MessageType.DIAL_RESPONSE,\n                    dialResponse: {\n                        status: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.ResponseStatus.E_DIAL_ERROR,\n                        statusText: errorMessage,\n                        addr: lastMultiaddr.bytes\n                    }\n                });\n            }, (source) => it_length_prefixed__WEBPACK_IMPORTED_MODULE_2__.encode(source), data.stream);\n        }\n        catch (err) {\n            this.log.error('error handling incoming autonat stream', err);\n        }\n        finally {\n            signal.removeEventListener('abort', onAbort);\n        }\n    }\n    _verifyExternalAddresses() {\n        void this.verifyExternalAddresses()\n            .catch(err => {\n            this.log.error('error verifying external address', err);\n        });\n    }\n    /**\n     * Our multicodec topology noticed a new peer that supports autonat\n     */\n    async verifyExternalAddresses() {\n        clearTimeout(this.verifyAddressTimeout);\n        // Do not try to push if we are not running\n        if (!this.isStarted()) {\n            return;\n        }\n        const addressManager = this.components.addressManager;\n        const multiaddrs = addressManager.getObservedAddrs()\n            .filter(ma => {\n            const options = ma.toOptions();\n            return !((0,_libp2p_utils_private_ip__WEBPACK_IMPORTED_MODULE_11__.isPrivateIp)(options.host) ?? false);\n        });\n        if (multiaddrs.length === 0) {\n            this.log('no public addresses found, not requesting verification');\n            this.verifyAddressTimeout = setTimeout(this._verifyExternalAddresses, this.refreshInterval);\n            return;\n        }\n        const signal = AbortSignal.timeout(this.timeout);\n        // this controller may be used while dialing lots of peers so prevent MaxListenersExceededWarning\n        // appearing in the console\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.setMaxListeners)(Infinity, signal);\n        const self = this;\n        try {\n            this.log('verify multiaddrs %s', multiaddrs.map(ma => ma.toString()).join(', '));\n            const request = _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.encode({\n                type: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.MessageType.DIAL,\n                dial: {\n                    peer: {\n                        id: this.components.peerId.toBytes(),\n                        addrs: multiaddrs.map(map => map.bytes)\n                    }\n                }\n            });\n            // find some random peers\n            const randomPeer = await (0,_libp2p_peer_id_factory__WEBPACK_IMPORTED_MODULE_12__.createEd25519PeerId)();\n            const randomCid = randomPeer.toBytes();\n            const results = {};\n            const networkSegments = [];\n            const verifyAddress = async (peer) => {\n                let onAbort = () => { };\n                try {\n                    this.log('asking %p to verify multiaddr', peer.id);\n                    const connection = await self.components.connectionManager.openConnection(peer.id, {\n                        signal\n                    });\n                    const stream = await connection.newStream(this.protocol, {\n                        signal\n                    });\n                    onAbort = () => { stream.abort(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('verifyAddress timeout', _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.ERR_TIMEOUT)); };\n                    signal.addEventListener('abort', onAbort, { once: true });\n                    const buf = await (0,it_pipe__WEBPACK_IMPORTED_MODULE_5__.pipe)([request], (source) => it_length_prefixed__WEBPACK_IMPORTED_MODULE_2__.encode(source), stream, (source) => it_length_prefixed__WEBPACK_IMPORTED_MODULE_2__.decode(source), async (stream) => (0,it_first__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(stream));\n                    if (buf == null) {\n                        this.log('no response received from %p', connection.remotePeer);\n                        return undefined;\n                    }\n                    const response = _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.decode(buf);\n                    if (response.type !== _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.MessageType.DIAL_RESPONSE || response.dialResponse == null) {\n                        this.log('invalid autonat response from %p', connection.remotePeer);\n                        return undefined;\n                    }\n                    if (response.dialResponse.status === _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.ResponseStatus.OK) {\n                        // make sure we use different network segments\n                        const options = connection.remoteAddr.toOptions();\n                        let segment;\n                        if (options.family === 4) {\n                            const octets = options.host.split('.');\n                            segment = octets[0];\n                        }\n                        else if (options.family === 6) {\n                            const octets = options.host.split(':');\n                            segment = octets[0];\n                        }\n                        else {\n                            this.log('remote address \"%s\" was not IP4 or IP6?', options.host);\n                            return undefined;\n                        }\n                        if (networkSegments.includes(segment)) {\n                            this.log('already have response from network segment %d - %s', segment, options.host);\n                            return undefined;\n                        }\n                        networkSegments.push(segment);\n                    }\n                    return response.dialResponse;\n                }\n                catch (err) {\n                    this.log.error('error asking remote to verify multiaddr', err);\n                }\n                finally {\n                    signal.removeEventListener('abort', onAbort);\n                }\n            };\n            for await (const dialResponse of (0,it_parallel__WEBPACK_IMPORTED_MODULE_4__[\"default\"])((0,it_map__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.components.peerRouting.getClosestPeers(randomCid, {\n                signal\n            }), (peer) => async () => verifyAddress(peer)), {\n                concurrency: REQUIRED_SUCCESSFUL_DIALS\n            })) {\n                try {\n                    if (dialResponse == null) {\n                        continue;\n                    }\n                    // they either told us which address worked/didn't work, or we only sent them one address\n                    const addr = dialResponse.addr == null ? multiaddrs[0] : (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(dialResponse.addr);\n                    this.log('autonat response for %a is %s', addr, dialResponse.status);\n                    if (dialResponse.status === _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.ResponseStatus.E_BAD_REQUEST) {\n                        // the remote could not parse our request\n                        continue;\n                    }\n                    if (dialResponse.status === _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.ResponseStatus.E_DIAL_REFUSED) {\n                        // the remote could not honour our request\n                        continue;\n                    }\n                    if (dialResponse.addr == null && multiaddrs.length > 1) {\n                        // we sent the remote multiple addrs but they didn't tell us which ones worked/didn't work\n                        continue;\n                    }\n                    if (!multiaddrs.some(ma => ma.equals(addr))) {\n                        this.log('peer reported %a as %s but it was not in our observed address list', addr, dialResponse.status);\n                        continue;\n                    }\n                    const addrStr = addr.toString();\n                    if (results[addrStr] == null) {\n                        results[addrStr] = { success: 0, failure: 0 };\n                    }\n                    if (dialResponse.status === _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.ResponseStatus.OK) {\n                        results[addrStr].success++;\n                    }\n                    else if (dialResponse.status === _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Message.ResponseStatus.E_DIAL_ERROR) {\n                        results[addrStr].failure++;\n                    }\n                    if (results[addrStr].success === REQUIRED_SUCCESSFUL_DIALS) {\n                        // we are now convinced\n                        this.log('%a is externally dialable', addr);\n                        addressManager.confirmObservedAddr(addr);\n                        return;\n                    }\n                    if (results[addrStr].failure === REQUIRED_SUCCESSFUL_DIALS) {\n                        // we are now unconvinced\n                        this.log('%a is not externally dialable', addr);\n                        addressManager.removeObservedAddr(addr);\n                        return;\n                    }\n                }\n                catch (err) {\n                    this.log.error('could not verify external address', err);\n                }\n            }\n        }\n        finally {\n            this.verifyAddressTimeout = setTimeout(this._verifyExternalAddresses, this.refreshInterval);\n        }\n    }\n}\n//# sourceMappingURL=autonat.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/autonat/dist/src/autonat.js?");

/***/ }),

/***/ "./node_modules/@libp2p/autonat/dist/src/constants.js":
/*!************************************************************!*\
  !*** ./node_modules/@libp2p/autonat/dist/src/constants.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_INBOUND_STREAMS: () => (/* binding */ MAX_INBOUND_STREAMS),\n/* harmony export */   MAX_OUTBOUND_STREAMS: () => (/* binding */ MAX_OUTBOUND_STREAMS),\n/* harmony export */   PROTOCOL_NAME: () => (/* binding */ PROTOCOL_NAME),\n/* harmony export */   PROTOCOL_PREFIX: () => (/* binding */ PROTOCOL_PREFIX),\n/* harmony export */   PROTOCOL_VERSION: () => (/* binding */ PROTOCOL_VERSION),\n/* harmony export */   REFRESH_INTERVAL: () => (/* binding */ REFRESH_INTERVAL),\n/* harmony export */   STARTUP_DELAY: () => (/* binding */ STARTUP_DELAY),\n/* harmony export */   TIMEOUT: () => (/* binding */ TIMEOUT)\n/* harmony export */ });\n/**\n * The prefix to use in the protocol\n */\nconst PROTOCOL_PREFIX = 'libp2p';\n/**\n * The name to use in the protocol\n */\nconst PROTOCOL_NAME = 'autonat';\n/**\n * The version to use in the protocol\n */\nconst PROTOCOL_VERSION = '1.0.0';\nconst TIMEOUT = 30000;\nconst STARTUP_DELAY = 5000;\nconst REFRESH_INTERVAL = 60000;\nconst MAX_INBOUND_STREAMS = 1;\nconst MAX_OUTBOUND_STREAMS = 1;\n//# sourceMappingURL=constants.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/autonat/dist/src/constants.js?");

/***/ }),

/***/ "./node_modules/@libp2p/autonat/dist/src/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@libp2p/autonat/dist/src/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autoNAT: () => (/* binding */ autoNAT)\n/* harmony export */ });\n/* harmony import */ var _autonat_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./autonat.js */ \"./node_modules/@libp2p/autonat/dist/src/autonat.js\");\n/**\n * @packageDocumentation\n *\n * The AutoNAT service uses the [AutoNAT protocol](https://docs.libp2p.io/concepts/nat/autonat/).\n * The service confirms addresses are dialable by remote peers, and updates the list it advertises.\n *\n * The service dials randomly selected peers with a request to verify it's external addresses.\n * The request includes a list of public multiaddrs (addressManager.getObservedAddrs()).\n * The remote peers dial that list and respond with the results.\n *\n * The AutoNAT service uses those responses to either:\n * - addressManager.confirmObservedAddr(addr)\n * - addressManager.removeObservedAddr(addr)\n *\n * The result list of candidates and confirmed addresses can be found\n * at addressManager.getObservedAddrs()\n *\n * @example\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n * import { autoNAT } from '@libp2p/autonat'\n *\n * const node = await createLibp2p({\n *   // ...other options\n *   services: {\n *     autoNAT: autoNAT()\n *   }\n * })\n * ```\n */\n\nfunction autoNAT(init = {}) {\n    return (components) => {\n        return new _autonat_js__WEBPACK_IMPORTED_MODULE_0__.AutoNATService(components, init);\n    };\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/autonat/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/autonat/dist/src/pb/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@libp2p/autonat/dist/src/pb/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Message: () => (/* binding */ Message)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nvar Message;\n(function (Message) {\n    let MessageType;\n    (function (MessageType) {\n        MessageType[\"DIAL\"] = \"DIAL\";\n        MessageType[\"DIAL_RESPONSE\"] = \"DIAL_RESPONSE\";\n    })(MessageType = Message.MessageType || (Message.MessageType = {}));\n    let __MessageTypeValues;\n    (function (__MessageTypeValues) {\n        __MessageTypeValues[__MessageTypeValues[\"DIAL\"] = 0] = \"DIAL\";\n        __MessageTypeValues[__MessageTypeValues[\"DIAL_RESPONSE\"] = 1] = \"DIAL_RESPONSE\";\n    })(__MessageTypeValues || (__MessageTypeValues = {}));\n    (function (MessageType) {\n        MessageType.codec = () => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.enumeration)(__MessageTypeValues);\n        };\n    })(MessageType = Message.MessageType || (Message.MessageType = {}));\n    let ResponseStatus;\n    (function (ResponseStatus) {\n        ResponseStatus[\"OK\"] = \"OK\";\n        ResponseStatus[\"E_DIAL_ERROR\"] = \"E_DIAL_ERROR\";\n        ResponseStatus[\"E_DIAL_REFUSED\"] = \"E_DIAL_REFUSED\";\n        ResponseStatus[\"E_BAD_REQUEST\"] = \"E_BAD_REQUEST\";\n        ResponseStatus[\"E_INTERNAL_ERROR\"] = \"E_INTERNAL_ERROR\";\n    })(ResponseStatus = Message.ResponseStatus || (Message.ResponseStatus = {}));\n    let __ResponseStatusValues;\n    (function (__ResponseStatusValues) {\n        __ResponseStatusValues[__ResponseStatusValues[\"OK\"] = 0] = \"OK\";\n        __ResponseStatusValues[__ResponseStatusValues[\"E_DIAL_ERROR\"] = 100] = \"E_DIAL_ERROR\";\n        __ResponseStatusValues[__ResponseStatusValues[\"E_DIAL_REFUSED\"] = 101] = \"E_DIAL_REFUSED\";\n        __ResponseStatusValues[__ResponseStatusValues[\"E_BAD_REQUEST\"] = 200] = \"E_BAD_REQUEST\";\n        __ResponseStatusValues[__ResponseStatusValues[\"E_INTERNAL_ERROR\"] = 300] = \"E_INTERNAL_ERROR\";\n    })(__ResponseStatusValues || (__ResponseStatusValues = {}));\n    (function (ResponseStatus) {\n        ResponseStatus.codec = () => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.enumeration)(__ResponseStatusValues);\n        };\n    })(ResponseStatus = Message.ResponseStatus || (Message.ResponseStatus = {}));\n    let PeerInfo;\n    (function (PeerInfo) {\n        let _codec;\n        PeerInfo.codec = () => {\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (obj.id != null) {\n                        w.uint32(10);\n                        w.bytes(obj.id);\n                    }\n                    if (obj.addrs != null) {\n                        for (const value of obj.addrs) {\n                            w.uint32(18);\n                            w.bytes(value);\n                        }\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {\n                        addrs: []\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.id = reader.bytes();\n                                break;\n                            case 2:\n                                obj.addrs.push(reader.bytes());\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        PeerInfo.encode = (obj) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, PeerInfo.codec());\n        };\n        PeerInfo.decode = (buf) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, PeerInfo.codec());\n        };\n    })(PeerInfo = Message.PeerInfo || (Message.PeerInfo = {}));\n    let Dial;\n    (function (Dial) {\n        let _codec;\n        Dial.codec = () => {\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (obj.peer != null) {\n                        w.uint32(10);\n                        Message.PeerInfo.codec().encode(obj.peer, w);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {};\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.peer = Message.PeerInfo.codec().decode(reader, reader.uint32());\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        Dial.encode = (obj) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Dial.codec());\n        };\n        Dial.decode = (buf) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Dial.codec());\n        };\n    })(Dial = Message.Dial || (Message.Dial = {}));\n    let DialResponse;\n    (function (DialResponse) {\n        let _codec;\n        DialResponse.codec = () => {\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (obj.status != null) {\n                        w.uint32(8);\n                        Message.ResponseStatus.codec().encode(obj.status, w);\n                    }\n                    if (obj.statusText != null) {\n                        w.uint32(18);\n                        w.string(obj.statusText);\n                    }\n                    if (obj.addr != null) {\n                        w.uint32(26);\n                        w.bytes(obj.addr);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {};\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.status = Message.ResponseStatus.codec().decode(reader);\n                                break;\n                            case 2:\n                                obj.statusText = reader.string();\n                                break;\n                            case 3:\n                                obj.addr = reader.bytes();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        DialResponse.encode = (obj) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, DialResponse.codec());\n        };\n        DialResponse.decode = (buf) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, DialResponse.codec());\n        };\n    })(DialResponse = Message.DialResponse || (Message.DialResponse = {}));\n    let _codec;\n    Message.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.type != null) {\n                    w.uint32(8);\n                    Message.MessageType.codec().encode(obj.type, w);\n                }\n                if (obj.dial != null) {\n                    w.uint32(18);\n                    Message.Dial.codec().encode(obj.dial, w);\n                }\n                if (obj.dialResponse != null) {\n                    w.uint32(26);\n                    Message.DialResponse.codec().encode(obj.dialResponse, w);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.type = Message.MessageType.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.dial = Message.Dial.codec().decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            obj.dialResponse = Message.DialResponse.codec().decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Message.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Message.codec());\n    };\n    Message.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Message.codec());\n    };\n})(Message || (Message = {}));\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/autonat/dist/src/pb/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/bootstrap/dist/src/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@libp2p/bootstrap/dist/src/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bootstrap: () => (/* binding */ bootstrap)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/event-target.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/peer-discovery/index.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _multiformats_mafmt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/mafmt */ \"./node_modules/@multiformats/mafmt/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/**\n * @packageDocumentation\n *\n * The configured bootstrap peers will be discovered after the configured timeout. This will ensure there are some peers in the peer store for the node to use to discover other peers.\n *\n * They will be tagged with a tag with the name `'bootstrap'` tag, the value `50` and it will expire after two minutes which means the nodes connections may be closed if the maximum number of connections is reached.\n *\n * Clients that need constant connections to bootstrap nodes (e.g. browsers) can set the TTL to `Infinity`.\n *\n * @example Configuring a list of bootstrap nodes\n *\n * ```TypeScript\n * import { createLibp2p } from 'libp2p'\n * import { bootstrap } from '@libp2p/bootstrap'\n *\n * const libp2p = await createLibp2p({\n *   peerDiscovery: [\n *     bootstrap({\n *       list: [\n *         // a list of bootstrap peer multiaddrs to connect to on node startup\n *         '/ip4/104.131.131.82/tcp/4001/ipfs/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ',\n *         '/dnsaddr/bootstrap.libp2p.io/ipfs/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN',\n *         '/dnsaddr/bootstrap.libp2p.io/ipfs/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa'\n *       ]\n *     })\n *   ]\n * })\n *\n * libp2p.addEventListener('peer:discovery', (evt) => {\n *   console.log('found peer: ', evt.detail.toString())\n * })\n * ```\n */\n\n\n\n\nconst DEFAULT_BOOTSTRAP_TAG_NAME = 'bootstrap';\nconst DEFAULT_BOOTSTRAP_TAG_VALUE = 50;\nconst DEFAULT_BOOTSTRAP_TAG_TTL = 120000;\nconst DEFAULT_BOOTSTRAP_DISCOVERY_TIMEOUT = 1000;\n/**\n * Emits 'peer' events on a regular interval for each peer in the provided list.\n */\nclass Bootstrap extends _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.TypedEventEmitter {\n    static tag = 'bootstrap';\n    log;\n    timer;\n    list;\n    timeout;\n    components;\n    _init;\n    constructor(components, options = { list: [] }) {\n        if (options.list == null || options.list.length === 0) {\n            throw new Error('Bootstrap requires a list of peer addresses');\n        }\n        super();\n        this.components = components;\n        this.log = components.logger.forComponent('libp2p:bootstrap');\n        this.timeout = options.timeout ?? DEFAULT_BOOTSTRAP_DISCOVERY_TIMEOUT;\n        this.list = [];\n        for (const candidate of options.list) {\n            if (!_multiformats_mafmt__WEBPACK_IMPORTED_MODULE_0__.P2P.matches(candidate)) {\n                this.log.error('Invalid multiaddr');\n                continue;\n            }\n            const ma = (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_1__.multiaddr)(candidate);\n            const peerIdStr = ma.getPeerId();\n            if (peerIdStr == null) {\n                this.log.error('Invalid bootstrap multiaddr without peer id');\n                continue;\n            }\n            const peerData = {\n                id: (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_3__.peerIdFromString)(peerIdStr),\n                multiaddrs: [ma]\n            };\n            this.list.push(peerData);\n        }\n        this._init = options;\n    }\n    [_libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.peerDiscoverySymbol] = this;\n    [Symbol.toStringTag] = '@libp2p/bootstrap';\n    isStarted() {\n        return Boolean(this.timer);\n    }\n    /**\n     * Start emitting events\n     */\n    start() {\n        if (this.isStarted()) {\n            return;\n        }\n        this.log('Starting bootstrap node discovery, discovering peers after %s ms', this.timeout);\n        this.timer = setTimeout(() => {\n            void this._discoverBootstrapPeers()\n                .catch(err => {\n                this.log.error(err);\n            });\n        }, this.timeout);\n    }\n    /**\n     * Emit each address in the list as a PeerInfo\n     */\n    async _discoverBootstrapPeers() {\n        if (this.timer == null) {\n            return;\n        }\n        for (const peerData of this.list) {\n            await this.components.peerStore.merge(peerData.id, {\n                tags: {\n                    [this._init.tagName ?? DEFAULT_BOOTSTRAP_TAG_NAME]: {\n                        value: this._init.tagValue ?? DEFAULT_BOOTSTRAP_TAG_VALUE,\n                        ttl: this._init.tagTTL ?? DEFAULT_BOOTSTRAP_TAG_TTL\n                    }\n                }\n            });\n            // check we are still running\n            if (this.timer == null) {\n                return;\n            }\n            this.safeDispatchEvent('peer', { detail: peerData });\n        }\n    }\n    /**\n     * Stop emitting events\n     */\n    stop() {\n        if (this.timer != null) {\n            clearTimeout(this.timer);\n        }\n        this.timer = undefined;\n    }\n}\nfunction bootstrap(init) {\n    return (components) => new Bootstrap(components, init);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/bootstrap/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/circuit-relay-v2/dist/src/constants.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@libp2p/circuit-relay-v2/dist/src/constants.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ADVERTISE_BOOT_DELAY: () => (/* binding */ ADVERTISE_BOOT_DELAY),\n/* harmony export */   ADVERTISE_TTL: () => (/* binding */ ADVERTISE_TTL),\n/* harmony export */   CIRCUIT_PROTO_CODE: () => (/* binding */ CIRCUIT_PROTO_CODE),\n/* harmony export */   DEFAULT_ADVERT_BOOT_DELAY: () => (/* binding */ DEFAULT_ADVERT_BOOT_DELAY),\n/* harmony export */   DEFAULT_DATA_LIMIT: () => (/* binding */ DEFAULT_DATA_LIMIT),\n/* harmony export */   DEFAULT_DURATION_LIMIT: () => (/* binding */ DEFAULT_DURATION_LIMIT),\n/* harmony export */   DEFAULT_HOP_TIMEOUT: () => (/* binding */ DEFAULT_HOP_TIMEOUT),\n/* harmony export */   DEFAULT_MAX_RESERVATION_CLEAR_INTERVAL: () => (/* binding */ DEFAULT_MAX_RESERVATION_CLEAR_INTERVAL),\n/* harmony export */   DEFAULT_MAX_RESERVATION_STORE_SIZE: () => (/* binding */ DEFAULT_MAX_RESERVATION_STORE_SIZE),\n/* harmony export */   DEFAULT_MAX_RESERVATION_TTL: () => (/* binding */ DEFAULT_MAX_RESERVATION_TTL),\n/* harmony export */   DEFAULT_RESERVATION_CONCURRENCY: () => (/* binding */ DEFAULT_RESERVATION_CONCURRENCY),\n/* harmony export */   ERR_HOP_REQUEST_FAILED: () => (/* binding */ ERR_HOP_REQUEST_FAILED),\n/* harmony export */   ERR_NO_ROUTERS_AVAILABLE: () => (/* binding */ ERR_NO_ROUTERS_AVAILABLE),\n/* harmony export */   ERR_RELAYED_DIAL: () => (/* binding */ ERR_RELAYED_DIAL),\n/* harmony export */   ERR_TRANSFER_LIMIT_EXCEEDED: () => (/* binding */ ERR_TRANSFER_LIMIT_EXCEEDED),\n/* harmony export */   MAX_CONNECTIONS: () => (/* binding */ MAX_CONNECTIONS),\n/* harmony export */   RELAY_RENDEZVOUS_NS: () => (/* binding */ RELAY_RENDEZVOUS_NS),\n/* harmony export */   RELAY_SOURCE_TAG: () => (/* binding */ RELAY_SOURCE_TAG),\n/* harmony export */   RELAY_TAG: () => (/* binding */ RELAY_TAG),\n/* harmony export */   RELAY_V2_HOP_CODEC: () => (/* binding */ RELAY_V2_HOP_CODEC),\n/* harmony export */   RELAY_V2_STOP_CODEC: () => (/* binding */ RELAY_V2_STOP_CODEC)\n/* harmony export */ });\nconst second = 1000;\nconst minute = 60 * second;\n/**\n * Delay before HOP relay service is advertised on the network\n */\nconst ADVERTISE_BOOT_DELAY = 15 * minute;\n/**\n * Delay Between HOP relay service advertisements on the network\n */\nconst ADVERTISE_TTL = 30 * minute;\n/**\n * Multicodec code\n */\nconst CIRCUIT_PROTO_CODE = 290;\n/**\n * Relay HOP relay service namespace for discovery\n */\nconst RELAY_RENDEZVOUS_NS = '/libp2p/relay';\n/**\n * The maximum number of relay reservations the relay server will accept\n */\nconst DEFAULT_MAX_RESERVATION_STORE_SIZE = 15;\n/**\n * How often to check for reservation expiry\n */\nconst DEFAULT_MAX_RESERVATION_CLEAR_INTERVAL = 300 * second;\n/**\n * How often to check for reservation expiry\n */\nconst DEFAULT_MAX_RESERVATION_TTL = 2 * 60 * minute;\nconst DEFAULT_RESERVATION_CONCURRENCY = 1;\nconst RELAY_SOURCE_TAG = 'circuit-relay-source';\nconst RELAY_TAG = 'circuit-relay-relay';\n// circuit v2 connection limits\n// https://github.com/libp2p/go-libp2p/blob/master/p2p/protocol/circuitv2/relay/resources.go#L61-L66\n// 2 min is the default connection duration\nconst DEFAULT_DURATION_LIMIT = 2 * minute;\n// 128k is the default data limit\nconst DEFAULT_DATA_LIMIT = BigInt(1 << 17);\n/**\n * The hop protocol\n */\nconst RELAY_V2_HOP_CODEC = '/libp2p/circuit/relay/0.2.0/hop';\n/**\n * the stop protocol\n */\nconst RELAY_V2_STOP_CODEC = '/libp2p/circuit/relay/0.2.0/stop';\n/**\n * Hop messages must be exchanged inside this timeout\n */\nconst DEFAULT_HOP_TIMEOUT = 30 * second;\n/**\n * How long to wait before starting to advertise the relay service\n */\nconst DEFAULT_ADVERT_BOOT_DELAY = 30 * second;\nconst MAX_CONNECTIONS = 300;\nconst ERR_NO_ROUTERS_AVAILABLE = 'ERR_NO_ROUTERS_AVAILABLE';\nconst ERR_RELAYED_DIAL = 'ERR_RELAYED_DIAL';\nconst ERR_HOP_REQUEST_FAILED = 'ERR_HOP_REQUEST_FAILED';\nconst ERR_TRANSFER_LIMIT_EXCEEDED = 'ERR_TRANSFER_LIMIT_EXCEEDED';\n//# sourceMappingURL=constants.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/circuit-relay-v2/dist/src/constants.js?");

/***/ }),

/***/ "./node_modules/@libp2p/circuit-relay-v2/dist/src/pb/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@libp2p/circuit-relay-v2/dist/src/pb/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HopMessage: () => (/* binding */ HopMessage),\n/* harmony export */   Limit: () => (/* binding */ Limit),\n/* harmony export */   Peer: () => (/* binding */ Peer),\n/* harmony export */   Reservation: () => (/* binding */ Reservation),\n/* harmony export */   ReservationVoucher: () => (/* binding */ ReservationVoucher),\n/* harmony export */   Status: () => (/* binding */ Status),\n/* harmony export */   StopMessage: () => (/* binding */ StopMessage)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nvar HopMessage;\n(function (HopMessage) {\n    let Type;\n    (function (Type) {\n        Type[\"RESERVE\"] = \"RESERVE\";\n        Type[\"CONNECT\"] = \"CONNECT\";\n        Type[\"STATUS\"] = \"STATUS\";\n    })(Type = HopMessage.Type || (HopMessage.Type = {}));\n    let __TypeValues;\n    (function (__TypeValues) {\n        __TypeValues[__TypeValues[\"RESERVE\"] = 0] = \"RESERVE\";\n        __TypeValues[__TypeValues[\"CONNECT\"] = 1] = \"CONNECT\";\n        __TypeValues[__TypeValues[\"STATUS\"] = 2] = \"STATUS\";\n    })(__TypeValues || (__TypeValues = {}));\n    (function (Type) {\n        Type.codec = () => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.enumeration)(__TypeValues);\n        };\n    })(Type = HopMessage.Type || (HopMessage.Type = {}));\n    let _codec;\n    HopMessage.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.type != null) {\n                    w.uint32(8);\n                    HopMessage.Type.codec().encode(obj.type, w);\n                }\n                if (obj.peer != null) {\n                    w.uint32(18);\n                    Peer.codec().encode(obj.peer, w);\n                }\n                if (obj.reservation != null) {\n                    w.uint32(26);\n                    Reservation.codec().encode(obj.reservation, w);\n                }\n                if (obj.limit != null) {\n                    w.uint32(34);\n                    Limit.codec().encode(obj.limit, w);\n                }\n                if (obj.status != null) {\n                    w.uint32(40);\n                    Status.codec().encode(obj.status, w);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.type = HopMessage.Type.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.peer = Peer.codec().decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            obj.reservation = Reservation.codec().decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            obj.limit = Limit.codec().decode(reader, reader.uint32());\n                            break;\n                        case 5:\n                            obj.status = Status.codec().decode(reader);\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    HopMessage.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, HopMessage.codec());\n    };\n    HopMessage.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, HopMessage.codec());\n    };\n})(HopMessage || (HopMessage = {}));\nvar StopMessage;\n(function (StopMessage) {\n    let Type;\n    (function (Type) {\n        Type[\"CONNECT\"] = \"CONNECT\";\n        Type[\"STATUS\"] = \"STATUS\";\n    })(Type = StopMessage.Type || (StopMessage.Type = {}));\n    let __TypeValues;\n    (function (__TypeValues) {\n        __TypeValues[__TypeValues[\"CONNECT\"] = 0] = \"CONNECT\";\n        __TypeValues[__TypeValues[\"STATUS\"] = 1] = \"STATUS\";\n    })(__TypeValues || (__TypeValues = {}));\n    (function (Type) {\n        Type.codec = () => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.enumeration)(__TypeValues);\n        };\n    })(Type = StopMessage.Type || (StopMessage.Type = {}));\n    let _codec;\n    StopMessage.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.type != null) {\n                    w.uint32(8);\n                    StopMessage.Type.codec().encode(obj.type, w);\n                }\n                if (obj.peer != null) {\n                    w.uint32(18);\n                    Peer.codec().encode(obj.peer, w);\n                }\n                if (obj.limit != null) {\n                    w.uint32(26);\n                    Limit.codec().encode(obj.limit, w);\n                }\n                if (obj.status != null) {\n                    w.uint32(32);\n                    Status.codec().encode(obj.status, w);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.type = StopMessage.Type.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.peer = Peer.codec().decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            obj.limit = Limit.codec().decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            obj.status = Status.codec().decode(reader);\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    StopMessage.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, StopMessage.codec());\n    };\n    StopMessage.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, StopMessage.codec());\n    };\n})(StopMessage || (StopMessage = {}));\nvar Peer;\n(function (Peer) {\n    let _codec;\n    Peer.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.id != null && obj.id.byteLength > 0)) {\n                    w.uint32(10);\n                    w.bytes(obj.id);\n                }\n                if (obj.addrs != null) {\n                    for (const value of obj.addrs) {\n                        w.uint32(18);\n                        w.bytes(value);\n                    }\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    id: new Uint8Array(0),\n                    addrs: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.id = reader.bytes();\n                            break;\n                        case 2:\n                            obj.addrs.push(reader.bytes());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Peer.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Peer.codec());\n    };\n    Peer.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Peer.codec());\n    };\n})(Peer || (Peer = {}));\nvar Reservation;\n(function (Reservation) {\n    let _codec;\n    Reservation.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.expire != null && obj.expire !== 0n)) {\n                    w.uint32(8);\n                    w.uint64(obj.expire);\n                }\n                if (obj.addrs != null) {\n                    for (const value of obj.addrs) {\n                        w.uint32(18);\n                        w.bytes(value);\n                    }\n                }\n                if (obj.voucher != null) {\n                    w.uint32(26);\n                    w.bytes(obj.voucher);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    expire: 0n,\n                    addrs: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.expire = reader.uint64();\n                            break;\n                        case 2:\n                            obj.addrs.push(reader.bytes());\n                            break;\n                        case 3:\n                            obj.voucher = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Reservation.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Reservation.codec());\n    };\n    Reservation.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Reservation.codec());\n    };\n})(Reservation || (Reservation = {}));\nvar Limit;\n(function (Limit) {\n    let _codec;\n    Limit.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.duration != null) {\n                    w.uint32(8);\n                    w.uint32(obj.duration);\n                }\n                if (obj.data != null) {\n                    w.uint32(16);\n                    w.uint64(obj.data);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.duration = reader.uint32();\n                            break;\n                        case 2:\n                            obj.data = reader.uint64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Limit.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Limit.codec());\n    };\n    Limit.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Limit.codec());\n    };\n})(Limit || (Limit = {}));\nvar Status;\n(function (Status) {\n    Status[\"UNUSED\"] = \"UNUSED\";\n    Status[\"OK\"] = \"OK\";\n    Status[\"RESERVATION_REFUSED\"] = \"RESERVATION_REFUSED\";\n    Status[\"RESOURCE_LIMIT_EXCEEDED\"] = \"RESOURCE_LIMIT_EXCEEDED\";\n    Status[\"PERMISSION_DENIED\"] = \"PERMISSION_DENIED\";\n    Status[\"CONNECTION_FAILED\"] = \"CONNECTION_FAILED\";\n    Status[\"NO_RESERVATION\"] = \"NO_RESERVATION\";\n    Status[\"MALFORMED_MESSAGE\"] = \"MALFORMED_MESSAGE\";\n    Status[\"UNEXPECTED_MESSAGE\"] = \"UNEXPECTED_MESSAGE\";\n})(Status || (Status = {}));\nvar __StatusValues;\n(function (__StatusValues) {\n    __StatusValues[__StatusValues[\"UNUSED\"] = 0] = \"UNUSED\";\n    __StatusValues[__StatusValues[\"OK\"] = 100] = \"OK\";\n    __StatusValues[__StatusValues[\"RESERVATION_REFUSED\"] = 200] = \"RESERVATION_REFUSED\";\n    __StatusValues[__StatusValues[\"RESOURCE_LIMIT_EXCEEDED\"] = 201] = \"RESOURCE_LIMIT_EXCEEDED\";\n    __StatusValues[__StatusValues[\"PERMISSION_DENIED\"] = 202] = \"PERMISSION_DENIED\";\n    __StatusValues[__StatusValues[\"CONNECTION_FAILED\"] = 203] = \"CONNECTION_FAILED\";\n    __StatusValues[__StatusValues[\"NO_RESERVATION\"] = 204] = \"NO_RESERVATION\";\n    __StatusValues[__StatusValues[\"MALFORMED_MESSAGE\"] = 400] = \"MALFORMED_MESSAGE\";\n    __StatusValues[__StatusValues[\"UNEXPECTED_MESSAGE\"] = 401] = \"UNEXPECTED_MESSAGE\";\n})(__StatusValues || (__StatusValues = {}));\n(function (Status) {\n    Status.codec = () => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.enumeration)(__StatusValues);\n    };\n})(Status || (Status = {}));\nvar ReservationVoucher;\n(function (ReservationVoucher) {\n    let _codec;\n    ReservationVoucher.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.relay != null && obj.relay.byteLength > 0)) {\n                    w.uint32(10);\n                    w.bytes(obj.relay);\n                }\n                if ((obj.peer != null && obj.peer.byteLength > 0)) {\n                    w.uint32(18);\n                    w.bytes(obj.peer);\n                }\n                if ((obj.expiration != null && obj.expiration !== 0n)) {\n                    w.uint32(24);\n                    w.uint64(obj.expiration);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    relay: new Uint8Array(0),\n                    peer: new Uint8Array(0),\n                    expiration: 0n\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.relay = reader.bytes();\n                            break;\n                        case 2:\n                            obj.peer = reader.bytes();\n                            break;\n                        case 3:\n                            obj.expiration = reader.uint64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    ReservationVoucher.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, ReservationVoucher.codec());\n    };\n    ReservationVoucher.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, ReservationVoucher.codec());\n    };\n})(ReservationVoucher || (ReservationVoucher = {}));\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/circuit-relay-v2/dist/src/pb/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/discovery.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/discovery.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RelayDiscovery: () => (/* binding */ RelayDiscovery)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/event-target.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/@libp2p/circuit-relay-v2/dist/src/constants.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/@libp2p/circuit-relay-v2/dist/src/utils.js\");\n\n\n\n/**\n * ReservationManager automatically makes a circuit v2 reservation on any connected\n * peers that support the circuit v2 HOP protocol.\n */\nclass RelayDiscovery extends _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.TypedEventEmitter {\n    peerId;\n    peerStore;\n    contentRouting;\n    registrar;\n    started;\n    topologyId;\n    log;\n    constructor(components) {\n        super();\n        this.log = components.logger.forComponent('libp2p:circuit-relay:discover-relays');\n        this.started = false;\n        this.peerId = components.peerId;\n        this.peerStore = components.peerStore;\n        this.contentRouting = components.contentRouting;\n        this.registrar = components.registrar;\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        // register a topology listener for when new peers are encountered\n        // that support the hop protocol\n        this.topologyId = await this.registrar.register(_constants_js__WEBPACK_IMPORTED_MODULE_1__.RELAY_V2_HOP_CODEC, {\n            notifyOnTransient: true,\n            onConnect: (peerId) => {\n                this.safeDispatchEvent('relay:discover', { detail: peerId });\n            }\n        });\n        this.started = true;\n    }\n    afterStart() {\n        void this.discover()\n            .catch(err => {\n            this.log.error('error discovering relays', err);\n        });\n    }\n    stop() {\n        if (this.topologyId != null) {\n            this.registrar.unregister(this.topologyId);\n        }\n        this.started = false;\n    }\n    /**\n     * Try to listen on available hop relay connections.\n     * The following order will happen while we do not have enough relays:\n     *\n     * 1. Check the metadata store for known relays, try to listen on the ones we are already connected\n     * 2. Dial and try to listen on the peers we know that support hop but are not connected\n     * 3. Search the network\n     */\n    async discover() {\n        this.log('searching peer store for relays');\n        const peers = (await this.peerStore.all({\n            filters: [\n                // filter by a list of peers supporting RELAY_V2_HOP and ones we are not listening on\n                (peer) => {\n                    return peer.protocols.includes(_constants_js__WEBPACK_IMPORTED_MODULE_1__.RELAY_V2_HOP_CODEC);\n                }\n            ],\n            orders: [\n                () => Math.random() < 0.5 ? 1 : -1\n            ]\n        }));\n        for (const peer of peers) {\n            this.log('found relay peer %p in content peer store', peer.id);\n            this.safeDispatchEvent('relay:discover', { detail: peer.id });\n        }\n        this.log('found %d relay peers in peer store', peers.length);\n        try {\n            this.log('searching content routing for relays');\n            const cid = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.namespaceToCid)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.RELAY_RENDEZVOUS_NS);\n            let found = 0;\n            for await (const provider of this.contentRouting.findProviders(cid)) {\n                if (provider.multiaddrs.length > 0 && !provider.id.equals(this.peerId)) {\n                    const peerId = provider.id;\n                    found++;\n                    await this.peerStore.merge(peerId, {\n                        multiaddrs: provider.multiaddrs\n                    });\n                    this.log('found relay peer %p in content routing', peerId);\n                    this.safeDispatchEvent('relay:discover', { detail: peerId });\n                }\n            }\n            this.log('found %d relay peers in content routing', found);\n        }\n        catch (err) {\n            this.log.error('failed when finding relays on the network', err);\n        }\n    }\n}\n//# sourceMappingURL=discovery.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/discovery.js?");

/***/ }),

/***/ "./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   circuitRelayTransport: () => (/* binding */ circuitRelayTransport)\n/* harmony export */ });\n/* harmony import */ var _transport_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transport.js */ \"./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/transport.js\");\n\n\n\n\nfunction circuitRelayTransport(init = {}) {\n    return (components) => {\n        return new _transport_js__WEBPACK_IMPORTED_MODULE_0__.CircuitRelayTransport(components, init);\n    };\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/listener.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/listener.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createListener: () => (/* binding */ createListener)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/event-target.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/peer-collections */ \"./node_modules/@libp2p/peer-collections/dist/src/map.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n\n\n\nclass CircuitRelayTransportListener extends _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.TypedEventEmitter {\n    connectionManager;\n    relayStore;\n    listeningAddrs;\n    log;\n    constructor(components) {\n        super();\n        this.log = components.logger.forComponent('libp2p:circuit-relay:transport:listener');\n        this.connectionManager = components.connectionManager;\n        this.relayStore = components.relayStore;\n        this.listeningAddrs = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_2__.PeerMap();\n        // remove listening addrs when a relay is removed\n        this.relayStore.addEventListener('relay:removed', this._onRemoveRelayPeer);\n    }\n    _onRemoveRelayPeer = (evt) => {\n        this.#removeRelayPeer(evt.detail);\n    };\n    async listen(addr) {\n        this.log('listen on %a', addr);\n        // remove the circuit part to get the peer id of the relay\n        const relayAddr = addr.decapsulate('/p2p-circuit');\n        const relayConn = await this.connectionManager.openConnection(relayAddr);\n        if (!this.relayStore.hasReservation(relayConn.remotePeer)) {\n            this.log('making reservation on peer %p', relayConn.remotePeer);\n            // addRelay calls transportManager.listen which calls this listen method\n            await this.relayStore.addRelay(relayConn.remotePeer, 'configured');\n            return;\n        }\n        const reservation = this.relayStore.getReservation(relayConn.remotePeer);\n        if (reservation == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Did not have reservation after making reservation', 'ERR_NO_RESERVATION');\n        }\n        if (this.listeningAddrs.has(relayConn.remotePeer)) {\n            this.log('already listening on relay %p', relayConn.remotePeer);\n            return;\n        }\n        // add all addresses from the relay reservation\n        this.listeningAddrs.set(relayConn.remotePeer, reservation.addrs.map(buf => {\n            return (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(buf).encapsulate('/p2p-circuit');\n        }));\n        this.safeDispatchEvent('listening', {});\n    }\n    getAddrs() {\n        return [...this.listeningAddrs.values()].flat();\n    }\n    async close() {\n    }\n    #removeRelayPeer(peerId) {\n        const had = this.listeningAddrs.has(peerId);\n        this.log('relay peer removed %p - had reservation', peerId, had);\n        this.listeningAddrs.delete(peerId);\n        if (had) {\n            this.log.trace('removing relay event listener for peer %p', peerId);\n            this.relayStore.removeEventListener('relay:removed', this._onRemoveRelayPeer);\n            // Announce listen addresses change\n            this.safeDispatchEvent('close', {});\n        }\n    }\n}\nfunction createListener(options) {\n    return new CircuitRelayTransportListener(options);\n}\n//# sourceMappingURL=listener.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/listener.js?");

/***/ }),

/***/ "./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/reservation-store.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/reservation-store.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReservationStore: () => (/* binding */ ReservationStore)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/event-target.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/peer-collections */ \"./node_modules/@libp2p/peer-collections/dist/src/map.js\");\n/* harmony import */ var _libp2p_utils_peer_queue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/utils/peer-queue */ \"./node_modules/@libp2p/utils/dist/src/peer-queue.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var it_protobuf_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-protobuf-stream */ \"./node_modules/it-protobuf-stream/dist/src/index.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/@libp2p/circuit-relay-v2/dist/src/constants.js\");\n/* harmony import */ var _pb_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../pb/index.js */ \"./node_modules/@libp2p/circuit-relay-v2/dist/src/pb/index.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/@libp2p/circuit-relay-v2/dist/src/utils.js\");\n\n\n\n\n\n\n\n\n\n// allow refreshing a relay reservation if it will expire in the next 10 minutes\nconst REFRESH_WINDOW = (60 * 1000) * 10;\n// try to refresh relay reservations 5 minutes before expiry\nconst REFRESH_TIMEOUT = (60 * 1000) * 5;\n// minimum duration before which a reservation must not be refreshed\nconst REFRESH_TIMEOUT_MIN = 30 * 1000;\nclass ReservationStore extends _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.TypedEventEmitter {\n    peerId;\n    connectionManager;\n    transportManager;\n    peerStore;\n    events;\n    reserveQueue;\n    reservations;\n    maxDiscoveredRelays;\n    maxReservationQueueLength;\n    reservationCompletionTimeout;\n    started;\n    log;\n    constructor(components, init) {\n        super();\n        this.log = components.logger.forComponent('libp2p:circuit-relay:transport:reservation-store');\n        this.peerId = components.peerId;\n        this.connectionManager = components.connectionManager;\n        this.transportManager = components.transportManager;\n        this.peerStore = components.peerStore;\n        this.events = components.events;\n        this.reservations = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_4__.PeerMap();\n        this.maxDiscoveredRelays = init?.discoverRelays ?? 0;\n        this.maxReservationQueueLength = init?.maxReservationQueueLength ?? 100;\n        this.reservationCompletionTimeout = init?.reservationCompletionTimeout ?? 10000;\n        this.started = false;\n        // ensure we don't listen on multiple relays simultaneously\n        this.reserveQueue = new _libp2p_utils_peer_queue__WEBPACK_IMPORTED_MODULE_5__.PeerQueue({\n            concurrency: init?.reservationConcurrency ?? _constants_js__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_RESERVATION_CONCURRENCY,\n            metricName: 'libp2p_relay_reservation_queue',\n            metrics: components.metrics\n        });\n        // When a peer disconnects, if we had a reservation on that peer\n        // remove the reservation and multiaddr and maybe trigger search\n        // for new relays\n        this.events.addEventListener('peer:disconnect', (evt) => {\n            this.#removeRelay(evt.detail);\n        });\n    }\n    isStarted() {\n        return this.started;\n    }\n    start() {\n        this.started = true;\n    }\n    stop() {\n        this.reserveQueue.clear();\n        this.reservations.forEach(({ timeout }) => {\n            clearTimeout(timeout);\n        });\n        this.reservations.clear();\n        this.started = false;\n    }\n    /**\n     * If the number of current relays is beneath the configured `maxReservations`\n     * value, and the passed peer id is not our own, and we have a non-relayed connection\n     * to the remote, and the remote peer speaks the hop protocol, try to reserve a slot\n     * on the remote peer\n     */\n    async addRelay(peerId, type) {\n        if (this.peerId.equals(peerId)) {\n            this.log('not trying to use self as relay');\n            return;\n        }\n        if (this.reserveQueue.size > this.maxReservationQueueLength) {\n            this.log('not adding relay as the queue is full');\n            return;\n        }\n        if (this.reserveQueue.has(peerId)) {\n            this.log('relay peer is already in the reservation queue');\n            return;\n        }\n        this.log('add relay %p', peerId);\n        await this.reserveQueue.add(async () => {\n            try {\n                // allow refresh of an existing reservation if it is about to expire\n                const existingReservation = this.reservations.get(peerId);\n                if (existingReservation != null) {\n                    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_7__.getExpirationMilliseconds)(existingReservation.reservation.expire) > REFRESH_WINDOW) {\n                        this.log('already have reservation on relay peer %p and it expires in more than 10 minutes', peerId);\n                        return;\n                    }\n                    clearTimeout(existingReservation.timeout);\n                    this.reservations.delete(peerId);\n                }\n                if (type === 'discovered' && [...this.reservations.values()].reduce((acc, curr) => {\n                    if (curr.type === 'discovered') {\n                        acc++;\n                    }\n                    return acc;\n                }, 0) >= this.maxDiscoveredRelays) {\n                    this.log('already have enough discovered relays');\n                    return;\n                }\n                const signal = AbortSignal.timeout(this.reservationCompletionTimeout);\n                const connection = await this.connectionManager.openConnection(peerId, {\n                    signal\n                });\n                if (connection.remoteAddr.protoNames().includes('p2p-circuit')) {\n                    this.log('not creating reservation over relayed connection');\n                    return;\n                }\n                const reservation = await this.#createReservation(connection, {\n                    signal\n                });\n                this.log('created reservation on relay peer %p', peerId);\n                const expiration = (0,_utils_js__WEBPACK_IMPORTED_MODULE_7__.getExpirationMilliseconds)(reservation.expire);\n                // sets a lower bound on the timeout, and also don't let it go over\n                // 2^31 - 1 (setTimeout will only accept signed 32 bit integers)\n                const timeoutDuration = Math.min(Math.max(expiration - REFRESH_TIMEOUT, REFRESH_TIMEOUT_MIN), Math.pow(2, 31) - 1);\n                const timeout = setTimeout(() => {\n                    this.addRelay(peerId, type).catch(err => {\n                        this.log.error('could not refresh reservation to relay %p', peerId, err);\n                    });\n                }, timeoutDuration);\n                // we've managed to create a reservation successfully\n                this.reservations.set(peerId, {\n                    timeout,\n                    reservation,\n                    type\n                });\n                // ensure we don't close the connection to the relay\n                await this.peerStore.merge(peerId, {\n                    tags: {\n                        [_constants_js__WEBPACK_IMPORTED_MODULE_6__.RELAY_TAG]: {\n                            value: 1,\n                            ttl: expiration\n                        }\n                    }\n                });\n                // listen on multiaddr that only the circuit transport is listening for\n                await this.transportManager.listen([(0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(`/p2p/${peerId.toString()}/p2p-circuit`)]);\n            }\n            catch (err) {\n                this.log.error('could not reserve slot on %p', peerId, err);\n                // cancel the renewal timeout if it's been set\n                const reservation = this.reservations.get(peerId);\n                if (reservation != null) {\n                    clearTimeout(reservation.timeout);\n                }\n                // if listening failed, remove the reservation\n                this.reservations.delete(peerId);\n            }\n        }, {\n            peerId\n        });\n    }\n    hasReservation(peerId) {\n        return this.reservations.has(peerId);\n    }\n    getReservation(peerId) {\n        return this.reservations.get(peerId)?.reservation;\n    }\n    async #createReservation(connection, options) {\n        options.signal?.throwIfAborted();\n        this.log('requesting reservation from %p', connection.remotePeer);\n        const stream = await connection.newStream(_constants_js__WEBPACK_IMPORTED_MODULE_6__.RELAY_V2_HOP_CODEC, options);\n        const pbstr = (0,it_protobuf_stream__WEBPACK_IMPORTED_MODULE_1__.pbStream)(stream);\n        const hopstr = pbstr.pb(_pb_index_js__WEBPACK_IMPORTED_MODULE_8__.HopMessage);\n        await hopstr.write({ type: _pb_index_js__WEBPACK_IMPORTED_MODULE_8__.HopMessage.Type.RESERVE }, options);\n        let response;\n        try {\n            response = await hopstr.read(options);\n        }\n        catch (err) {\n            this.log.error('error parsing reserve message response from %p because', connection.remotePeer, err);\n            stream.abort(err);\n            throw err;\n        }\n        finally {\n            await stream.close();\n        }\n        if (response.status === _pb_index_js__WEBPACK_IMPORTED_MODULE_8__.Status.OK && (response.reservation != null)) {\n            // check that the returned relay has the relay address - this can be\n            // omitted when requesting a reservation from a go-libp2p relay we\n            // already have a reservation on\n            let hasRelayAddress = false;\n            const relayAddressBytes = connection.remoteAddr.bytes;\n            for (const buf of response.reservation.addrs) {\n                if ((0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_2__.equals)(relayAddressBytes, buf)) {\n                    hasRelayAddress = true;\n                    break;\n                }\n            }\n            if (!hasRelayAddress) {\n                response.reservation.addrs.push(relayAddressBytes);\n            }\n            return response.reservation;\n        }\n        const errMsg = `reservation failed with status ${response.status ?? 'undefined'}`;\n        this.log.error(errMsg);\n        throw new Error(errMsg);\n    }\n    /**\n     * Remove listen relay\n     */\n    #removeRelay(peerId) {\n        const existingReservation = this.reservations.get(peerId);\n        if (existingReservation == null) {\n            return;\n        }\n        this.log('connection to relay %p closed, removing reservation from local store', peerId);\n        clearTimeout(existingReservation.timeout);\n        this.reservations.delete(peerId);\n        this.safeDispatchEvent('relay:removed', { detail: peerId });\n        if (this.reservations.size < this.maxDiscoveredRelays) {\n            this.log('not enough relays %d/%d', this.reservations.size, this.maxDiscoveredRelays);\n            this.safeDispatchEvent('relay:not-enough-relays', {});\n        }\n    }\n}\n//# sourceMappingURL=reservation-store.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/reservation-store.js?");

/***/ }),

/***/ "./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/transport.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/transport.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CircuitRelayTransport: () => (/* binding */ CircuitRelayTransport)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/transport/index.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _libp2p_utils_stream_to_ma_conn__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @libp2p/utils/stream-to-ma-conn */ \"./node_modules/@libp2p/utils/dist/src/stream-to-ma-conn.js\");\n/* harmony import */ var _multiformats_mafmt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/mafmt */ \"./node_modules/@multiformats/mafmt/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var it_protobuf_stream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! it-protobuf-stream */ \"./node_modules/it-protobuf-stream/dist/src/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/@libp2p/circuit-relay-v2/dist/src/constants.js\");\n/* harmony import */ var _pb_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../pb/index.js */ \"./node_modules/@libp2p/circuit-relay-v2/dist/src/pb/index.js\");\n/* harmony import */ var _discovery_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./discovery.js */ \"./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/discovery.js\");\n/* harmony import */ var _listener_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./listener.js */ \"./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/listener.js\");\n/* harmony import */ var _reservation_store_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./reservation-store.js */ \"./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/reservation-store.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst isValidStop = (request) => {\n    if (request.peer == null) {\n        return false;\n    }\n    try {\n        request.peer.addrs.forEach(_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_1__.multiaddr);\n    }\n    catch {\n        return false;\n    }\n    return true;\n};\nconst defaults = {\n    maxInboundStopStreams: _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAX_CONNECTIONS,\n    maxOutboundStopStreams: _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAX_CONNECTIONS,\n    stopTimeout: 30000\n};\nclass CircuitRelayTransport {\n    discovery;\n    registrar;\n    peerStore;\n    connectionManager;\n    transportManager;\n    peerId;\n    upgrader;\n    addressManager;\n    connectionGater;\n    reservationStore;\n    logger;\n    maxInboundStopStreams;\n    maxOutboundStopStreams;\n    stopTimeout;\n    started;\n    log;\n    constructor(components, init) {\n        this.log = components.logger.forComponent('libp2p:circuit-relay:transport');\n        this.registrar = components.registrar;\n        this.peerStore = components.peerStore;\n        this.connectionManager = components.connectionManager;\n        this.transportManager = components.transportManager;\n        this.logger = components.logger;\n        this.peerId = components.peerId;\n        this.upgrader = components.upgrader;\n        this.addressManager = components.addressManager;\n        this.connectionGater = components.connectionGater;\n        this.maxInboundStopStreams = init.maxInboundStopStreams ?? defaults.maxInboundStopStreams;\n        this.maxOutboundStopStreams = init.maxOutboundStopStreams ?? defaults.maxOutboundStopStreams;\n        this.stopTimeout = init.stopTimeout ?? defaults.stopTimeout;\n        if (init.discoverRelays != null && init.discoverRelays > 0) {\n            this.discovery = new _discovery_js__WEBPACK_IMPORTED_MODULE_4__.RelayDiscovery(components);\n            this.discovery.addEventListener('relay:discover', (evt) => {\n                this.reservationStore.addRelay(evt.detail, 'discovered')\n                    .catch(err => {\n                    this.log.error('could not add discovered relay %p', evt.detail, err);\n                });\n            });\n        }\n        this.reservationStore = new _reservation_store_js__WEBPACK_IMPORTED_MODULE_5__.ReservationStore(components, init);\n        this.reservationStore.addEventListener('relay:not-enough-relays', () => {\n            this.discovery?.discover()\n                .catch(err => {\n                this.log.error('could not discover relays', err);\n            });\n        });\n        this.started = false;\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        this.reservationStore.start();\n        await this.registrar.handle(_constants_js__WEBPACK_IMPORTED_MODULE_3__.RELAY_V2_STOP_CODEC, (data) => {\n            void this.onStop(data).catch(err => {\n                this.log.error('error while handling STOP protocol', err);\n                data.stream.abort(err);\n            });\n        }, {\n            maxInboundStreams: this.maxInboundStopStreams,\n            maxOutboundStreams: this.maxOutboundStopStreams,\n            runOnTransientConnection: true\n        });\n        await this.discovery?.start();\n        this.started = true;\n    }\n    afterStart() {\n        this.discovery?.afterStart();\n    }\n    async stop() {\n        this.discovery?.stop();\n        this.reservationStore.stop();\n        await this.registrar.unhandle(_constants_js__WEBPACK_IMPORTED_MODULE_3__.RELAY_V2_STOP_CODEC);\n        this.started = false;\n    }\n    [_libp2p_interface__WEBPACK_IMPORTED_MODULE_6__.transportSymbol] = true;\n    [Symbol.toStringTag] = 'libp2p/circuit-relay-v2';\n    /**\n     * Dial a peer over a relay\n     */\n    async dial(ma, options = {}) {\n        if (ma.protoCodes().filter(code => code === _constants_js__WEBPACK_IMPORTED_MODULE_3__.CIRCUIT_PROTO_CODE).length !== 1) {\n            const errMsg = 'Invalid circuit relay address';\n            this.log.error(errMsg, ma);\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(errMsg, _constants_js__WEBPACK_IMPORTED_MODULE_3__.ERR_RELAYED_DIAL);\n        }\n        // Check the multiaddr to see if it contains a relay and a destination peer\n        const addrs = ma.toString().split('/p2p-circuit');\n        const relayAddr = (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_1__.multiaddr)(addrs[0]);\n        const destinationAddr = (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_1__.multiaddr)(addrs[addrs.length - 1]);\n        const relayId = relayAddr.getPeerId();\n        const destinationId = destinationAddr.getPeerId();\n        if (relayId == null || destinationId == null) {\n            const errMsg = `Circuit relay dial to ${ma.toString()} failed as address did not have peer ids`;\n            this.log.error(errMsg);\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(errMsg, _constants_js__WEBPACK_IMPORTED_MODULE_3__.ERR_RELAYED_DIAL);\n        }\n        const relayPeer = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_8__.peerIdFromString)(relayId);\n        const destinationPeer = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_8__.peerIdFromString)(destinationId);\n        let disconnectOnFailure = false;\n        const relayConnections = this.connectionManager.getConnections(relayPeer);\n        let relayConnection = relayConnections[0];\n        if (relayConnection == null) {\n            await this.peerStore.merge(relayPeer, {\n                multiaddrs: [relayAddr]\n            });\n            relayConnection = await this.connectionManager.openConnection(relayPeer, options);\n            disconnectOnFailure = true;\n        }\n        let stream;\n        try {\n            stream = await relayConnection.newStream(_constants_js__WEBPACK_IMPORTED_MODULE_3__.RELAY_V2_HOP_CODEC);\n            return await this.connectV2({\n                stream,\n                connection: relayConnection,\n                destinationPeer,\n                destinationAddr,\n                relayAddr,\n                ma,\n                disconnectOnFailure\n            });\n        }\n        catch (err) {\n            this.log.error('circuit relay dial to destination %p via relay %p failed', destinationPeer, relayPeer, err);\n            if (stream != null) {\n                stream.abort(err);\n            }\n            disconnectOnFailure && await relayConnection.close();\n            throw err;\n        }\n    }\n    async connectV2({ stream, connection, destinationPeer, destinationAddr, relayAddr, ma, disconnectOnFailure }) {\n        try {\n            const pbstr = (0,it_protobuf_stream__WEBPACK_IMPORTED_MODULE_2__.pbStream)(stream);\n            const hopstr = pbstr.pb(_pb_index_js__WEBPACK_IMPORTED_MODULE_9__.HopMessage);\n            await hopstr.write({\n                type: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.HopMessage.Type.CONNECT,\n                peer: {\n                    id: destinationPeer.toBytes(),\n                    addrs: [(0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_1__.multiaddr)(destinationAddr).bytes]\n                }\n            });\n            const status = await hopstr.read();\n            if (status.status !== _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Status.OK) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`failed to connect via relay with status ${status?.status?.toString() ?? 'undefined'}`, _constants_js__WEBPACK_IMPORTED_MODULE_3__.ERR_HOP_REQUEST_FAILED);\n            }\n            const maConn = (0,_libp2p_utils_stream_to_ma_conn__WEBPACK_IMPORTED_MODULE_10__.streamToMaConnection)({\n                stream: pbstr.unwrap(),\n                remoteAddr: ma,\n                localAddr: relayAddr.encapsulate(`/p2p-circuit/p2p/${this.peerId.toString()}`),\n                logger: this.logger\n            });\n            this.log('new outbound transient connection %a', maConn.remoteAddr);\n            return await this.upgrader.upgradeOutbound(maConn, {\n                transient: true\n            });\n        }\n        catch (err) {\n            this.log.error(`Circuit relay dial to destination ${destinationPeer.toString()} via relay ${connection.remotePeer.toString()} failed`, err);\n            disconnectOnFailure && await connection.close();\n            throw err;\n        }\n    }\n    /**\n     * Create a listener\n     */\n    createListener(options) {\n        return (0,_listener_js__WEBPACK_IMPORTED_MODULE_11__.createListener)({\n            connectionManager: this.connectionManager,\n            relayStore: this.reservationStore,\n            logger: this.logger\n        });\n    }\n    /**\n     * Filter check for all Multiaddrs that this transport can dial on\n     *\n     * @param {Multiaddr[]} multiaddrs\n     * @returns {Multiaddr[]}\n     */\n    filter(multiaddrs) {\n        multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n        return multiaddrs.filter((ma) => {\n            return _multiformats_mafmt__WEBPACK_IMPORTED_MODULE_0__.Circuit.matches(ma);\n        });\n    }\n    /**\n     * An incoming STOP request means a remote peer wants to dial us via a relay\n     */\n    async onStop({ connection, stream }) {\n        if (!this.reservationStore.hasReservation(connection.remotePeer)) {\n            try {\n                this.log('dialed via relay we did not have a reservation on, start listening on that relay address');\n                await this.transportManager.listen([connection.remoteAddr.encapsulate('/p2p-circuit')]);\n            }\n            catch (err) {\n                // failed to refresh our hitherto unknown relay reservation but allow the connection attempt anyway\n                this.log.error('failed to listen on a relay peer we were dialed via but did not have a reservation on', err);\n            }\n        }\n        const signal = AbortSignal.timeout(this.stopTimeout);\n        const pbstr = (0,it_protobuf_stream__WEBPACK_IMPORTED_MODULE_2__.pbStream)(stream).pb(_pb_index_js__WEBPACK_IMPORTED_MODULE_9__.StopMessage);\n        const request = await pbstr.read({\n            signal\n        });\n        this.log('new circuit relay v2 stop stream from %p with type %s', connection.remotePeer, request.type);\n        if (request?.type === undefined) {\n            this.log.error('type was missing from circuit v2 stop protocol request from %s', connection.remotePeer);\n            await pbstr.write({ type: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.StopMessage.Type.STATUS, status: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Status.MALFORMED_MESSAGE }, {\n                signal\n            });\n            await stream.close();\n            return;\n        }\n        // Validate the STOP request has the required input\n        if (request.type !== _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.StopMessage.Type.CONNECT) {\n            this.log.error('invalid stop connect request via peer %p', connection.remotePeer);\n            await pbstr.write({ type: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.StopMessage.Type.STATUS, status: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Status.UNEXPECTED_MESSAGE }, {\n                signal\n            });\n            await stream.close();\n            return;\n        }\n        if (!isValidStop(request)) {\n            this.log.error('invalid stop connect request via peer %p', connection.remotePeer);\n            await pbstr.write({ type: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.StopMessage.Type.STATUS, status: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Status.MALFORMED_MESSAGE }, {\n                signal\n            });\n            await stream.close();\n            return;\n        }\n        const remotePeerId = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_8__.peerIdFromBytes)(request.peer.id);\n        if ((await this.connectionGater.denyInboundRelayedConnection?.(connection.remotePeer, remotePeerId)) === true) {\n            this.log.error('connection gater denied inbound relayed connection from %p', connection.remotePeer);\n            await pbstr.write({ type: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.StopMessage.Type.STATUS, status: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Status.PERMISSION_DENIED }, {\n                signal\n            });\n            await stream.close();\n            return;\n        }\n        this.log.trace('sending success response to %p', connection.remotePeer);\n        await pbstr.write({ type: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.StopMessage.Type.STATUS, status: _pb_index_js__WEBPACK_IMPORTED_MODULE_9__.Status.OK }, {\n            signal\n        });\n        const remoteAddr = connection.remoteAddr.encapsulate(`/p2p-circuit/p2p/${remotePeerId.toString()}`);\n        const localAddr = this.addressManager.getAddresses()[0];\n        const maConn = (0,_libp2p_utils_stream_to_ma_conn__WEBPACK_IMPORTED_MODULE_10__.streamToMaConnection)({\n            stream: pbstr.unwrap().unwrap(),\n            remoteAddr,\n            localAddr,\n            logger: this.logger\n        });\n        this.log('new inbound transient connection %a', maConn.remoteAddr);\n        await this.upgrader.upgradeInbound(maConn, {\n            transient: true\n        });\n        this.log('%s connection %a upgraded', 'inbound', maConn.remoteAddr);\n    }\n}\n//# sourceMappingURL=transport.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/transport.js?");

/***/ }),

/***/ "./node_modules/@libp2p/circuit-relay-v2/dist/src/utils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@libp2p/circuit-relay-v2/dist/src/utils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLimitedRelay: () => (/* binding */ createLimitedRelay),\n/* harmony export */   getExpirationMilliseconds: () => (/* binding */ getExpirationMilliseconds),\n/* harmony export */   namespaceToCid: () => (/* binding */ namespaceToCid)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var any_signal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! any-signal */ \"./node_modules/any-signal/dist/src/index.js\");\n/* harmony import */ var multiformats_cid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/cid */ \"./node_modules/multiformats/dist/src/cid.js\");\n/* harmony import */ var multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! multiformats/hashes/sha2 */ \"./node_modules/multiformats/dist/src/hashes/sha2-browser.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@libp2p/circuit-relay-v2/dist/src/constants.js\");\n\n\n\n\n\nasync function* countStreamBytes(source, limit, options) {\n    const limitBytes = limit.remaining;\n    for await (const buf of source) {\n        const len = BigInt(buf.byteLength);\n        if ((limit.remaining - len) < 0) {\n            // this is a safe downcast since len is guarantee to be in the range for a number\n            const remaining = Number(limit.remaining);\n            limit.remaining = 0n;\n            try {\n                if (remaining !== 0) {\n                    yield buf.subarray(0, remaining);\n                }\n            }\n            catch (err) {\n                options.log.error(err);\n            }\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(`data limit of ${limitBytes} bytes exceeded`, _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_TRANSFER_LIMIT_EXCEEDED);\n        }\n        limit.remaining -= len;\n        yield buf;\n    }\n}\nfunction createLimitedRelay(src, dst, abortSignal, limit, options) {\n    function abortStreams(err) {\n        src.abort(err);\n        dst.abort(err);\n    }\n    const signals = [abortSignal];\n    if (limit?.duration != null) {\n        signals.push(AbortSignal.timeout(limit.duration));\n    }\n    const signal = (0,any_signal__WEBPACK_IMPORTED_MODULE_0__.anySignal)(signals);\n    let srcDstFinished = false;\n    let dstSrcFinished = false;\n    let dataLimit;\n    if (limit?.data != null) {\n        dataLimit = {\n            remaining: limit.data\n        };\n    }\n    queueMicrotask(() => {\n        const onAbort = () => {\n            dst.abort(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(`duration limit of ${limit?.duration} ms exceeded`, _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_TRANSFER_LIMIT_EXCEEDED));\n        };\n        signal.addEventListener('abort', onAbort, { once: true });\n        void dst.sink(dataLimit == null ? src.source : countStreamBytes(src.source, dataLimit, options))\n            .catch(err => {\n            options.log.error('error while relaying streams src -> dst', err);\n            abortStreams(err);\n        })\n            .finally(() => {\n            srcDstFinished = true;\n            if (dstSrcFinished) {\n                signal.removeEventListener('abort', onAbort);\n                signal.clear();\n            }\n        });\n    });\n    queueMicrotask(() => {\n        const onAbort = () => {\n            src.abort(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(`duration limit of ${limit?.duration} ms exceeded`, _constants_js__WEBPACK_IMPORTED_MODULE_4__.ERR_TRANSFER_LIMIT_EXCEEDED));\n        };\n        signal.addEventListener('abort', onAbort, { once: true });\n        void src.sink(dataLimit == null ? dst.source : countStreamBytes(dst.source, dataLimit, options))\n            .catch(err => {\n            options.log.error('error while relaying streams dst -> src', err);\n            abortStreams(err);\n        })\n            .finally(() => {\n            dstSrcFinished = true;\n            if (srcDstFinished) {\n                signal.removeEventListener('abort', onAbort);\n                signal.clear();\n            }\n        });\n    });\n}\n/**\n * Convert a namespace string into a cid\n */\nasync function namespaceToCid(namespace) {\n    const bytes = new TextEncoder().encode(namespace);\n    const hash = await multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__.sha256.digest(bytes);\n    return multiformats_cid__WEBPACK_IMPORTED_MODULE_1__.CID.createV0(hash);\n}\n/**\n * returns number of ms between now and expiration time\n */\nfunction getExpirationMilliseconds(expireTimeSeconds) {\n    const expireTimeMillis = expireTimeSeconds * BigInt(1000);\n    const currentTime = new Date().getTime();\n    // downcast to number to use with setTimeout\n    return Number(expireTimeMillis - BigInt(currentTime));\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/circuit-relay-v2/dist/src/utils.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/ciphers/aes-gcm.browser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/ciphers/aes-gcm.browser.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   derivedEmptyPasswordKey: () => (/* binding */ derivedEmptyPasswordKey)\n/* harmony export */ });\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/concat */ \"./node_modules/uint8arrays/dist/src/concat.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../webcrypto.js */ \"./node_modules/@libp2p/crypto/dist/src/webcrypto-browser.js\");\n\n\n\n// WebKit on Linux does not support deriving a key from an empty PBKDF2 key.\n// So, as a workaround, we provide the generated key as a constant. We test that\n// this generated key is accurate in test/workaround.spec.ts\n// Generated via:\n// await crypto.subtle.exportKey('jwk',\n//   await crypto.subtle.deriveKey(\n//     { name: 'PBKDF2', salt: new Uint8Array(16), iterations: 32767, hash: { name: 'SHA-256' } },\n//     await crypto.subtle.importKey('raw', new Uint8Array(0), { name: 'PBKDF2' }, false, ['deriveKey']),\n//     { name: 'AES-GCM', length: 128 }, true, ['encrypt', 'decrypt'])\n// )\nconst derivedEmptyPasswordKey = { alg: 'A128GCM', ext: true, k: 'scm9jmO_4BJAgdwWGVulLg', key_ops: ['encrypt', 'decrypt'], kty: 'oct' };\n// Based off of code from https://github.com/luke-park/SecureCompatibleEncryptionExamples\nfunction create(opts) {\n    const algorithm = opts?.algorithm ?? 'AES-GCM';\n    let keyLength = opts?.keyLength ?? 16;\n    const nonceLength = opts?.nonceLength ?? 12;\n    const digest = opts?.digest ?? 'SHA-256';\n    const saltLength = opts?.saltLength ?? 16;\n    const iterations = opts?.iterations ?? 32767;\n    const crypto = _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get();\n    keyLength *= 8; // Browser crypto uses bits instead of bytes\n    /**\n     * Uses the provided password to derive a pbkdf2 key. The key\n     * will then be used to encrypt the data.\n     */\n    async function encrypt(data, password) {\n        const salt = crypto.getRandomValues(new Uint8Array(saltLength));\n        const nonce = crypto.getRandomValues(new Uint8Array(nonceLength));\n        const aesGcm = { name: algorithm, iv: nonce };\n        if (typeof password === 'string') {\n            password = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(password);\n        }\n        let cryptoKey;\n        if (password.length === 0) {\n            cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, { name: 'AES-GCM' }, true, ['encrypt']);\n            try {\n                const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };\n                const runtimeDerivedEmptyPassword = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey']);\n                cryptoKey = await crypto.subtle.deriveKey(deriveParams, runtimeDerivedEmptyPassword, { name: algorithm, length: keyLength }, true, ['encrypt']);\n            }\n            catch {\n                cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, { name: 'AES-GCM' }, true, ['encrypt']);\n            }\n        }\n        else {\n            // Derive a key using PBKDF2.\n            const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };\n            const rawKey = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey']);\n            cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, { name: algorithm, length: keyLength }, true, ['encrypt']);\n        }\n        // Encrypt the string.\n        const ciphertext = await crypto.subtle.encrypt(aesGcm, cryptoKey, data);\n        return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__.concat)([salt, aesGcm.iv, new Uint8Array(ciphertext)]);\n    }\n    /**\n     * Uses the provided password to derive a pbkdf2 key. The key\n     * will then be used to decrypt the data. The options used to create\n     * this decryption cipher must be the same as those used to create\n     * the encryption cipher.\n     */\n    async function decrypt(data, password) {\n        const salt = data.subarray(0, saltLength);\n        const nonce = data.subarray(saltLength, saltLength + nonceLength);\n        const ciphertext = data.subarray(saltLength + nonceLength);\n        const aesGcm = { name: algorithm, iv: nonce };\n        if (typeof password === 'string') {\n            password = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(password);\n        }\n        let cryptoKey;\n        if (password.length === 0) {\n            try {\n                const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };\n                const runtimeDerivedEmptyPassword = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey']);\n                cryptoKey = await crypto.subtle.deriveKey(deriveParams, runtimeDerivedEmptyPassword, { name: algorithm, length: keyLength }, true, ['decrypt']);\n            }\n            catch {\n                cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, { name: 'AES-GCM' }, true, ['decrypt']);\n            }\n        }\n        else {\n            // Derive the key using PBKDF2.\n            const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };\n            const rawKey = await crypto.subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveKey']);\n            cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, { name: algorithm, length: keyLength }, true, ['decrypt']);\n        }\n        // Decrypt the string.\n        const plaintext = await crypto.subtle.decrypt(aesGcm, cryptoKey, ciphertext);\n        return new Uint8Array(plaintext);\n    }\n    const cipher = {\n        encrypt,\n        decrypt\n    };\n    return cipher;\n}\n//# sourceMappingURL=aes-gcm.browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/ciphers/aes-gcm.browser.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/hmac/index-browser.js":
/*!********************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/hmac/index-browser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create)\n/* harmony export */ });\n/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../webcrypto.js */ \"./node_modules/@libp2p/crypto/dist/src/webcrypto-browser.js\");\n/* harmony import */ var _lengths_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lengths.js */ \"./node_modules/@libp2p/crypto/dist/src/hmac/lengths.js\");\n\n\nconst hashTypes = {\n    SHA1: 'SHA-1',\n    SHA256: 'SHA-256',\n    SHA512: 'SHA-512'\n};\nconst sign = async (key, data) => {\n    const buf = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get().subtle.sign({ name: 'HMAC' }, key, data);\n    return new Uint8Array(buf, 0, buf.byteLength);\n};\nasync function create(hashType, secret) {\n    const hash = hashTypes[hashType];\n    const key = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get().subtle.importKey('raw', secret, {\n        name: 'HMAC',\n        hash: { name: hash }\n    }, false, ['sign']);\n    return {\n        async digest(data) {\n            return sign(key, data);\n        },\n        length: _lengths_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"][hashType]\n    };\n}\n//# sourceMappingURL=index-browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/hmac/index-browser.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/hmac/lengths.js":
/*!**************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/hmac/lengths.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    SHA1: 20,\n    SHA256: 32,\n    SHA512: 64\n});\n//# sourceMappingURL=lengths.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/hmac/lengths.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/keys/ecdh-browser.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/keys/ecdh-browser.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateEphmeralKeyPair: () => (/* binding */ generateEphmeralKeyPair)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/concat */ \"./node_modules/uint8arrays/dist/src/concat.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util.js */ \"./node_modules/@libp2p/crypto/dist/src/util.js\");\n/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../webcrypto.js */ \"./node_modules/@libp2p/crypto/dist/src/webcrypto-browser.js\");\n\n\n\n\n\n\nconst bits = {\n    'P-256': 256,\n    'P-384': 384,\n    'P-521': 521\n};\nconst curveTypes = Object.keys(bits);\nconst names = curveTypes.join(' / ');\nasync function generateEphmeralKeyPair(curve) {\n    if (curve !== 'P-256' && curve !== 'P-384' && curve !== 'P-521') {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(`Unknown curve: ${curve}. Must be ${names}`, 'ERR_INVALID_CURVE');\n    }\n    const pair = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get().subtle.generateKey({\n        name: 'ECDH',\n        namedCurve: curve\n    }, true, ['deriveBits']);\n    // forcePrivate is used for testing only\n    const genSharedKey = async (theirPub, forcePrivate) => {\n        let privateKey;\n        if (forcePrivate != null) {\n            privateKey = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get().subtle.importKey('jwk', unmarshalPrivateKey(curve, forcePrivate), {\n                name: 'ECDH',\n                namedCurve: curve\n            }, false, ['deriveBits']);\n        }\n        else {\n            privateKey = pair.privateKey;\n        }\n        const key = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get().subtle.importKey('jwk', unmarshalPublicKey(curve, theirPub), {\n            name: 'ECDH',\n            namedCurve: curve\n        }, false, []);\n        const buffer = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get().subtle.deriveBits({\n            name: 'ECDH',\n            // @ts-expect-error namedCurve is missing from the types\n            namedCurve: curve,\n            public: key\n        }, privateKey, bits[curve]);\n        return new Uint8Array(buffer, 0, buffer.byteLength);\n    };\n    const publicKey = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get().subtle.exportKey('jwk', pair.publicKey);\n    const ecdhKey = {\n        key: marshalPublicKey(publicKey),\n        genSharedKey\n    };\n    return ecdhKey;\n}\nconst curveLengths = {\n    'P-256': 32,\n    'P-384': 48,\n    'P-521': 66\n};\n// Marshal converts a jwk encoded ECDH public key into the\n// form specified in section 4.3.6 of ANSI X9.62. (This is the format\n// go-ipfs uses)\nfunction marshalPublicKey(jwk) {\n    if (jwk.crv == null || jwk.x == null || jwk.y == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS');\n    }\n    if (jwk.crv !== 'P-256' && jwk.crv !== 'P-384' && jwk.crv !== 'P-521') {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(`Unknown curve: ${jwk.crv}. Must be ${names}`, 'ERR_INVALID_CURVE');\n    }\n    const byteLen = curveLengths[jwk.crv];\n    return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__.concat)([\n        Uint8Array.from([4]), // uncompressed point\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.base64urlToBuffer)(jwk.x, byteLen),\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.base64urlToBuffer)(jwk.y, byteLen)\n    ], 1 + byteLen * 2);\n}\n// Unmarshal converts a point, serialized by Marshal, into an jwk encoded key\nfunction unmarshalPublicKey(curve, key) {\n    if (curve !== 'P-256' && curve !== 'P-384' && curve !== 'P-521') {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(`Unknown curve: ${curve}. Must be ${names}`, 'ERR_INVALID_CURVE');\n    }\n    const byteLen = curveLengths[curve];\n    if (!(0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_1__.equals)(key.subarray(0, 1), Uint8Array.from([4]))) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Cannot unmarshal public key - invalid key format', 'ERR_INVALID_KEY_FORMAT');\n    }\n    return {\n        kty: 'EC',\n        crv: curve,\n        x: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(key.subarray(1, byteLen + 1), 'base64url'),\n        y: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(key.subarray(1 + byteLen), 'base64url'),\n        ext: true\n    };\n}\nconst unmarshalPrivateKey = (curve, key) => ({\n    ...unmarshalPublicKey(curve, key.public),\n    d: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(key.private, 'base64url')\n});\n//# sourceMappingURL=ecdh-browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/keys/ecdh-browser.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/keys/ed25519-browser.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/keys/ed25519-browser.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateKey: () => (/* binding */ generateKey),\n/* harmony export */   generateKeyFromSeed: () => (/* binding */ generateKeyFromSeed),\n/* harmony export */   hashAndSign: () => (/* binding */ hashAndSign),\n/* harmony export */   hashAndVerify: () => (/* binding */ hashAndVerify),\n/* harmony export */   privateKeyLength: () => (/* binding */ PRIVATE_KEY_BYTE_LENGTH),\n/* harmony export */   publicKeyLength: () => (/* binding */ PUBLIC_KEY_BYTE_LENGTH)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/curves/ed25519 */ \"./node_modules/@noble/curves/esm/ed25519.js\");\n\nconst PUBLIC_KEY_BYTE_LENGTH = 32;\nconst PRIVATE_KEY_BYTE_LENGTH = 64; // private key is actually 32 bytes but for historical reasons we concat private and public keys\nconst KEYS_BYTE_LENGTH = 32;\n\n\nfunction generateKey() {\n    // the actual private key (32 bytes)\n    const privateKeyRaw = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_0__.ed25519.utils.randomPrivateKey();\n    const publicKey = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_0__.ed25519.getPublicKey(privateKeyRaw);\n    // concatenated the public key to the private key\n    const privateKey = concatKeys(privateKeyRaw, publicKey);\n    return {\n        privateKey,\n        publicKey\n    };\n}\n/**\n * Generate keypair from a 32 byte uint8array\n */\nfunction generateKeyFromSeed(seed) {\n    if (seed.length !== KEYS_BYTE_LENGTH) {\n        throw new TypeError('\"seed\" must be 32 bytes in length.');\n    }\n    else if (!(seed instanceof Uint8Array)) {\n        throw new TypeError('\"seed\" must be a node.js Buffer, or Uint8Array.');\n    }\n    // based on node forges algorithm, the seed is used directly as private key\n    const privateKeyRaw = seed;\n    const publicKey = _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_0__.ed25519.getPublicKey(privateKeyRaw);\n    const privateKey = concatKeys(privateKeyRaw, publicKey);\n    return {\n        privateKey,\n        publicKey\n    };\n}\nfunction hashAndSign(privateKey, msg) {\n    const privateKeyRaw = privateKey.subarray(0, KEYS_BYTE_LENGTH);\n    return _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_0__.ed25519.sign(msg instanceof Uint8Array ? msg : msg.subarray(), privateKeyRaw);\n}\nfunction hashAndVerify(publicKey, sig, msg) {\n    return _noble_curves_ed25519__WEBPACK_IMPORTED_MODULE_0__.ed25519.verify(sig, msg instanceof Uint8Array ? msg : msg.subarray(), publicKey);\n}\nfunction concatKeys(privateKeyRaw, publicKey) {\n    const privateKey = new Uint8Array(PRIVATE_KEY_BYTE_LENGTH);\n    for (let i = 0; i < KEYS_BYTE_LENGTH; i++) {\n        privateKey[i] = privateKeyRaw[i];\n        privateKey[KEYS_BYTE_LENGTH + i] = publicKey[i];\n    }\n    return privateKey;\n}\n//# sourceMappingURL=ed25519-browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/keys/ed25519-browser.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/keys/ed25519-class.js":
/*!********************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/keys/ed25519-class.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ed25519PrivateKey: () => (/* binding */ Ed25519PrivateKey),\n/* harmony export */   Ed25519PublicKey: () => (/* binding */ Ed25519PublicKey),\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair),\n/* harmony export */   generateKeyPairFromSeed: () => (/* binding */ generateKeyPairFromSeed),\n/* harmony export */   unmarshalEd25519PrivateKey: () => (/* binding */ unmarshalEd25519PrivateKey),\n/* harmony export */   unmarshalEd25519PublicKey: () => (/* binding */ unmarshalEd25519PublicKey)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/bases/base58 */ \"./node_modules/multiformats/dist/src/bases/base58.js\");\n/* harmony import */ var multiformats_hashes_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/hashes/identity */ \"./node_modules/multiformats/dist/src/hashes/identity.js\");\n/* harmony import */ var multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! multiformats/hashes/sha2 */ \"./node_modules/multiformats/dist/src/hashes/sha2-browser.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util.js */ \"./node_modules/@libp2p/crypto/dist/src/util.js\");\n/* harmony import */ var _ed25519_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ed25519.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/ed25519-browser.js\");\n/* harmony import */ var _exporter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./exporter.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/exporter.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./keys.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/keys.js\");\n\n\n\n\n\n\n\n\n\nclass Ed25519PublicKey {\n    _key;\n    constructor(key) {\n        this._key = ensureKey(key, _ed25519_js__WEBPACK_IMPORTED_MODULE_4__.publicKeyLength);\n    }\n    verify(data, sig) {\n        return _ed25519_js__WEBPACK_IMPORTED_MODULE_4__.hashAndVerify(this._key, sig, data);\n    }\n    marshal() {\n        return this._key;\n    }\n    get bytes() {\n        return _keys_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey.encode({\n            Type: _keys_js__WEBPACK_IMPORTED_MODULE_5__.KeyType.Ed25519,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_3__.equals)(this.bytes, key.bytes);\n    }\n    hash() {\n        const p = multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__.sha256.digest(this.bytes);\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_6__.isPromise)(p)) {\n            return p.then(({ bytes }) => bytes);\n        }\n        return p.bytes;\n    }\n}\nclass Ed25519PrivateKey {\n    _key;\n    _publicKey;\n    // key       - 64 byte Uint8Array containing private key\n    // publicKey - 32 byte Uint8Array containing public key\n    constructor(key, publicKey) {\n        this._key = ensureKey(key, _ed25519_js__WEBPACK_IMPORTED_MODULE_4__.privateKeyLength);\n        this._publicKey = ensureKey(publicKey, _ed25519_js__WEBPACK_IMPORTED_MODULE_4__.publicKeyLength);\n    }\n    sign(message) {\n        return _ed25519_js__WEBPACK_IMPORTED_MODULE_4__.hashAndSign(this._key, message);\n    }\n    get public() {\n        return new Ed25519PublicKey(this._publicKey);\n    }\n    marshal() {\n        return this._key;\n    }\n    get bytes() {\n        return _keys_js__WEBPACK_IMPORTED_MODULE_5__.PrivateKey.encode({\n            Type: _keys_js__WEBPACK_IMPORTED_MODULE_5__.KeyType.Ed25519,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_3__.equals)(this.bytes, key.bytes);\n    }\n    async hash() {\n        const p = multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__.sha256.digest(this.bytes);\n        let bytes;\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_6__.isPromise)(p)) {\n            ({ bytes } = await p);\n        }\n        else {\n            bytes = p.bytes;\n        }\n        return bytes;\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the identity multihash containing its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @returns {Promise<string>}\n     */\n    async id() {\n        const encoding = multiformats_hashes_identity__WEBPACK_IMPORTED_MODULE_1__.identity.digest(this.public.bytes);\n        return multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc.encode(encoding.bytes).substring(1);\n    }\n    /**\n     * Exports the key into a password protected `format`\n     */\n    async export(password, format = 'libp2p-key') {\n        if (format === 'libp2p-key') {\n            return (0,_exporter_js__WEBPACK_IMPORTED_MODULE_7__.exporter)(this.bytes, password);\n        }\n        else {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT');\n        }\n    }\n}\nfunction unmarshalEd25519PrivateKey(bytes) {\n    // Try the old, redundant public key version\n    if (bytes.length > _ed25519_js__WEBPACK_IMPORTED_MODULE_4__.privateKeyLength) {\n        bytes = ensureKey(bytes, _ed25519_js__WEBPACK_IMPORTED_MODULE_4__.privateKeyLength + _ed25519_js__WEBPACK_IMPORTED_MODULE_4__.publicKeyLength);\n        const privateKeyBytes = bytes.subarray(0, _ed25519_js__WEBPACK_IMPORTED_MODULE_4__.privateKeyLength);\n        const publicKeyBytes = bytes.subarray(_ed25519_js__WEBPACK_IMPORTED_MODULE_4__.privateKeyLength, bytes.length);\n        return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);\n    }\n    bytes = ensureKey(bytes, _ed25519_js__WEBPACK_IMPORTED_MODULE_4__.privateKeyLength);\n    const privateKeyBytes = bytes.subarray(0, _ed25519_js__WEBPACK_IMPORTED_MODULE_4__.privateKeyLength);\n    const publicKeyBytes = bytes.subarray(_ed25519_js__WEBPACK_IMPORTED_MODULE_4__.publicKeyLength);\n    return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);\n}\nfunction unmarshalEd25519PublicKey(bytes) {\n    bytes = ensureKey(bytes, _ed25519_js__WEBPACK_IMPORTED_MODULE_4__.publicKeyLength);\n    return new Ed25519PublicKey(bytes);\n}\nasync function generateKeyPair() {\n    const { privateKey, publicKey } = _ed25519_js__WEBPACK_IMPORTED_MODULE_4__.generateKey();\n    return new Ed25519PrivateKey(privateKey, publicKey);\n}\nasync function generateKeyPairFromSeed(seed) {\n    const { privateKey, publicKey } = _ed25519_js__WEBPACK_IMPORTED_MODULE_4__.generateKeyFromSeed(seed);\n    return new Ed25519PrivateKey(privateKey, publicKey);\n}\nfunction ensureKey(key, length) {\n    key = Uint8Array.from(key ?? []);\n    if (key.length !== length) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.CodeError(`Key must be a Uint8Array of length ${length}, got ${key.length}`, 'ERR_INVALID_KEY_TYPE');\n    }\n    return key;\n}\n//# sourceMappingURL=ed25519-class.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/keys/ed25519-class.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/keys/ephemeral-keys.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/keys/ephemeral-keys.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ecdh_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ecdh.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/ecdh-browser.js\");\n\n/**\n * Generates an ephemeral public key and returns a function that will compute\n * the shared secret key.\n *\n * Focuses only on ECDH now, but can be made more general in the future.\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_ecdh_js__WEBPACK_IMPORTED_MODULE_0__.generateEphmeralKeyPair);\n//# sourceMappingURL=ephemeral-keys.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/keys/ephemeral-keys.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/keys/exporter.js":
/*!***************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/keys/exporter.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exporter: () => (/* binding */ exporter)\n/* harmony export */ });\n/* harmony import */ var multiformats_bases_base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/bases/base64 */ \"./node_modules/multiformats/dist/src/bases/base64.js\");\n/* harmony import */ var _ciphers_aes_gcm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ciphers/aes-gcm.js */ \"./node_modules/@libp2p/crypto/dist/src/ciphers/aes-gcm.browser.js\");\n\n\n/**\n * Exports the given PrivateKey as a base64 encoded string.\n * The PrivateKey is encrypted via a password derived PBKDF2 key\n * leveraging the aes-gcm cipher algorithm.\n */\nasync function exporter(privateKey, password) {\n    const cipher = _ciphers_aes_gcm_js__WEBPACK_IMPORTED_MODULE_1__.create();\n    const encryptedKey = await cipher.encrypt(privateKey, password);\n    return multiformats_bases_base64__WEBPACK_IMPORTED_MODULE_0__.base64.encode(encryptedKey);\n}\n//# sourceMappingURL=exporter.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/keys/exporter.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/keys/importer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/keys/importer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   importer: () => (/* binding */ importer)\n/* harmony export */ });\n/* harmony import */ var multiformats_bases_base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/bases/base64 */ \"./node_modules/multiformats/dist/src/bases/base64.js\");\n/* harmony import */ var _ciphers_aes_gcm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ciphers/aes-gcm.js */ \"./node_modules/@libp2p/crypto/dist/src/ciphers/aes-gcm.browser.js\");\n\n\n/**\n * Attempts to decrypt a base64 encoded PrivateKey string\n * with the given password. The privateKey must have been exported\n * using the same password and underlying cipher (aes-gcm)\n */\nasync function importer(privateKey, password) {\n    const encryptedKey = multiformats_bases_base64__WEBPACK_IMPORTED_MODULE_0__.base64.decode(privateKey);\n    const cipher = _ciphers_aes_gcm_js__WEBPACK_IMPORTED_MODULE_1__.create();\n    return cipher.decrypt(encryptedKey, password);\n}\n//# sourceMappingURL=importer.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/keys/importer.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/keys/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/keys/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ed25519PrivateKey: () => (/* reexport safe */ _ed25519_class_js__WEBPACK_IMPORTED_MODULE_4__.Ed25519PrivateKey),\n/* harmony export */   Ed25519PublicKey: () => (/* reexport safe */ _ed25519_class_js__WEBPACK_IMPORTED_MODULE_4__.Ed25519PublicKey),\n/* harmony export */   MAX_RSA_KEY_SIZE: () => (/* reexport safe */ _rsa_class_js__WEBPACK_IMPORTED_MODULE_3__.MAX_RSA_KEY_SIZE),\n/* harmony export */   RsaPrivateKey: () => (/* reexport safe */ _rsa_class_js__WEBPACK_IMPORTED_MODULE_3__.RsaPrivateKey),\n/* harmony export */   RsaPublicKey: () => (/* reexport safe */ _rsa_class_js__WEBPACK_IMPORTED_MODULE_3__.RsaPublicKey),\n/* harmony export */   Secp256k1PrivateKey: () => (/* reexport safe */ _secp256k1_class_js__WEBPACK_IMPORTED_MODULE_5__.Secp256k1PrivateKey),\n/* harmony export */   Secp256k1PublicKey: () => (/* reexport safe */ _secp256k1_class_js__WEBPACK_IMPORTED_MODULE_5__.Secp256k1PublicKey),\n/* harmony export */   generateEphemeralKeyPair: () => (/* reexport safe */ _ephemeral_keys_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair),\n/* harmony export */   generateKeyPairFromSeed: () => (/* binding */ generateKeyPairFromSeed),\n/* harmony export */   importKey: () => (/* binding */ importKey),\n/* harmony export */   keyStretcher: () => (/* reexport safe */ _key_stretcher_js__WEBPACK_IMPORTED_MODULE_0__.keyStretcher),\n/* harmony export */   keysPBM: () => (/* reexport module object */ _keys_js__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   marshalPrivateKey: () => (/* binding */ marshalPrivateKey),\n/* harmony export */   marshalPublicKey: () => (/* binding */ marshalPublicKey),\n/* harmony export */   supportedKeys: () => (/* binding */ supportedKeys),\n/* harmony export */   unmarshalPrivateKey: () => (/* binding */ unmarshalPrivateKey),\n/* harmony export */   unmarshalPublicKey: () => (/* binding */ unmarshalPublicKey)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _ed25519_class_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ed25519-class.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/ed25519-class.js\");\n/* harmony import */ var _ephemeral_keys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ephemeral-keys.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/ephemeral-keys.js\");\n/* harmony import */ var _importer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./importer.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/importer.js\");\n/* harmony import */ var _key_stretcher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./key-stretcher.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/key-stretcher.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keys.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/keys.js\");\n/* harmony import */ var _rsa_class_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rsa-class.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/rsa-class.js\");\n/* harmony import */ var _rsa_utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rsa-utils.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/rsa-utils.js\");\n/* harmony import */ var _secp256k1_class_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./secp256k1-class.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/secp256k1-class.js\");\n/**\n * @packageDocumentation\n *\n * **Supported Key Types**\n *\n * The {@link generateKeyPair}, {@link marshalPublicKey}, and {@link marshalPrivateKey} functions accept a string `type` argument.\n *\n * Currently the `'RSA'`, `'ed25519'`, and `secp256k1` types are supported, although ed25519 and secp256k1 keys support only signing and verification of messages.\n *\n * For encryption / decryption support, RSA keys should be used.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst supportedKeys = {\n    rsa: _rsa_class_js__WEBPACK_IMPORTED_MODULE_3__,\n    ed25519: _ed25519_class_js__WEBPACK_IMPORTED_MODULE_4__,\n    secp256k1: _secp256k1_class_js__WEBPACK_IMPORTED_MODULE_5__\n};\nfunction unsupportedKey(type) {\n    const supported = Object.keys(supportedKeys).join(' / ');\n    return new _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__.CodeError(`invalid or unsupported key type ${type}. Must be ${supported}`, 'ERR_UNSUPPORTED_KEY_TYPE');\n}\nfunction typeToKey(type) {\n    type = type.toLowerCase();\n    if (type === 'rsa' || type === 'ed25519' || type === 'secp256k1') {\n        return supportedKeys[type];\n    }\n    throw unsupportedKey(type);\n}\n/**\n * Generates a keypair of the given type and bitsize\n *\n * @param type\n * @param bits -  Minimum of 1024\n */\nasync function generateKeyPair(type, bits) {\n    return typeToKey(type).generateKeyPair(bits ?? 2048);\n}\n/**\n * Generates a keypair of the given type and bitsize.\n *\n * Seed is a 32 byte uint8array\n */\nasync function generateKeyPairFromSeed(type, seed, bits) {\n    if (type.toLowerCase() !== 'ed25519') {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__.CodeError('Seed key derivation is unimplemented for RSA or secp256k1', 'ERR_UNSUPPORTED_KEY_DERIVATION_TYPE');\n    }\n    return _ed25519_class_js__WEBPACK_IMPORTED_MODULE_4__.generateKeyPairFromSeed(seed);\n}\n/**\n * Converts a protobuf serialized public key into its representative object\n */\nfunction unmarshalPublicKey(buf) {\n    const decoded = _keys_js__WEBPACK_IMPORTED_MODULE_2__.PublicKey.decode(buf);\n    const data = decoded.Data ?? new Uint8Array();\n    switch (decoded.Type) {\n        case _keys_js__WEBPACK_IMPORTED_MODULE_2__.KeyType.RSA:\n            return supportedKeys.rsa.unmarshalRsaPublicKey(data);\n        case _keys_js__WEBPACK_IMPORTED_MODULE_2__.KeyType.Ed25519:\n            return supportedKeys.ed25519.unmarshalEd25519PublicKey(data);\n        case _keys_js__WEBPACK_IMPORTED_MODULE_2__.KeyType.Secp256k1:\n            return supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(data);\n        default:\n            throw unsupportedKey(decoded.Type ?? 'unknown');\n    }\n}\n/**\n * Converts a public key object into a protobuf serialized public key\n */\nfunction marshalPublicKey(key, type) {\n    type = (type ?? 'rsa').toLowerCase();\n    typeToKey(type); // check type\n    return key.bytes;\n}\n/**\n * Converts a protobuf serialized private key into its representative object\n */\nasync function unmarshalPrivateKey(buf) {\n    const decoded = _keys_js__WEBPACK_IMPORTED_MODULE_2__.PrivateKey.decode(buf);\n    const data = decoded.Data ?? new Uint8Array();\n    switch (decoded.Type) {\n        case _keys_js__WEBPACK_IMPORTED_MODULE_2__.KeyType.RSA:\n            return supportedKeys.rsa.unmarshalRsaPrivateKey(data);\n        case _keys_js__WEBPACK_IMPORTED_MODULE_2__.KeyType.Ed25519:\n            return supportedKeys.ed25519.unmarshalEd25519PrivateKey(data);\n        case _keys_js__WEBPACK_IMPORTED_MODULE_2__.KeyType.Secp256k1:\n            return supportedKeys.secp256k1.unmarshalSecp256k1PrivateKey(data);\n        default:\n            throw unsupportedKey(decoded.Type ?? 'RSA');\n    }\n}\n/**\n * Converts a private key object into a protobuf serialized private key\n */\nfunction marshalPrivateKey(key, type) {\n    type = (type ?? 'rsa').toLowerCase();\n    typeToKey(type); // check type\n    return key.bytes;\n}\n/**\n * Converts an exported private key into its representative object.\n *\n * Supported formats are 'pem' (RSA only) and 'libp2p-key'.\n */\nasync function importKey(encryptedKey, password) {\n    try {\n        const key = await (0,_importer_js__WEBPACK_IMPORTED_MODULE_7__.importer)(encryptedKey, password);\n        return await unmarshalPrivateKey(key);\n    }\n    catch (_) {\n        // Ignore and try the old pem decrypt\n    }\n    if (!encryptedKey.includes('BEGIN')) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__.CodeError('Encrypted key was not a libp2p-key or a PEM file', 'ERR_INVALID_IMPORT_FORMAT');\n    }\n    return (0,_rsa_utils_js__WEBPACK_IMPORTED_MODULE_8__.importFromPem)(encryptedKey, password);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/keys/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/keys/key-stretcher.js":
/*!********************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/keys/key-stretcher.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyStretcher: () => (/* binding */ keyStretcher)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/concat */ \"./node_modules/uint8arrays/dist/src/concat.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var _hmac_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../hmac/index.js */ \"./node_modules/@libp2p/crypto/dist/src/hmac/index-browser.js\");\n\n\n\n\nconst cipherMap = {\n    'AES-128': {\n        ivSize: 16,\n        keySize: 16\n    },\n    'AES-256': {\n        ivSize: 16,\n        keySize: 32\n    },\n    Blowfish: {\n        ivSize: 8,\n        keySize: 32\n    }\n};\n/**\n * Generates a set of keys for each party by stretching the shared key.\n * (myIV, theirIV, myCipherKey, theirCipherKey, myMACKey, theirMACKey)\n */\nasync function keyStretcher(cipherType, hash, secret) {\n    const cipher = cipherMap[cipherType];\n    if (cipher == null) {\n        const allowed = Object.keys(cipherMap).join(' / ');\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(`unknown cipher type '${cipherType}'. Must be ${allowed}`, 'ERR_INVALID_CIPHER_TYPE');\n    }\n    if (hash == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('missing hash type', 'ERR_MISSING_HASH_TYPE');\n    }\n    const cipherKeySize = cipher.keySize;\n    const ivSize = cipher.ivSize;\n    const hmacKeySize = 20;\n    const seed = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)('key expansion');\n    const resultLength = 2 * (ivSize + cipherKeySize + hmacKeySize);\n    const m = await _hmac_index_js__WEBPACK_IMPORTED_MODULE_3__.create(hash, secret);\n    let a = await m.digest(seed);\n    const result = [];\n    let j = 0;\n    while (j < resultLength) {\n        const b = await m.digest((0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__.concat)([a, seed]));\n        let todo = b.length;\n        if (j + todo > resultLength) {\n            todo = resultLength - j;\n        }\n        result.push(b);\n        j += todo;\n        a = await m.digest(a);\n    }\n    const half = resultLength / 2;\n    const resultBuffer = (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__.concat)(result);\n    const r1 = resultBuffer.subarray(0, half);\n    const r2 = resultBuffer.subarray(half, resultLength);\n    const createKey = (res) => ({\n        iv: res.subarray(0, ivSize),\n        cipherKey: res.subarray(ivSize, ivSize + cipherKeySize),\n        macKey: res.subarray(ivSize + cipherKeySize)\n    });\n    return {\n        k1: createKey(r1),\n        k2: createKey(r2)\n    };\n}\n//# sourceMappingURL=key-stretcher.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/keys/key-stretcher.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/keys/keys.js":
/*!***********************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/keys/keys.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyType: () => (/* binding */ KeyType),\n/* harmony export */   PrivateKey: () => (/* binding */ PrivateKey),\n/* harmony export */   PublicKey: () => (/* binding */ PublicKey)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nvar KeyType;\n(function (KeyType) {\n    KeyType[\"RSA\"] = \"RSA\";\n    KeyType[\"Ed25519\"] = \"Ed25519\";\n    KeyType[\"Secp256k1\"] = \"Secp256k1\";\n})(KeyType || (KeyType = {}));\nvar __KeyTypeValues;\n(function (__KeyTypeValues) {\n    __KeyTypeValues[__KeyTypeValues[\"RSA\"] = 0] = \"RSA\";\n    __KeyTypeValues[__KeyTypeValues[\"Ed25519\"] = 1] = \"Ed25519\";\n    __KeyTypeValues[__KeyTypeValues[\"Secp256k1\"] = 2] = \"Secp256k1\";\n})(__KeyTypeValues || (__KeyTypeValues = {}));\n(function (KeyType) {\n    KeyType.codec = () => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.enumeration)(__KeyTypeValues);\n    };\n})(KeyType || (KeyType = {}));\nvar PublicKey;\n(function (PublicKey) {\n    let _codec;\n    PublicKey.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.Type != null) {\n                    w.uint32(8);\n                    KeyType.codec().encode(obj.Type, w);\n                }\n                if (obj.Data != null) {\n                    w.uint32(18);\n                    w.bytes(obj.Data);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.Type = KeyType.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.Data = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    PublicKey.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, PublicKey.codec());\n    };\n    PublicKey.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, PublicKey.codec());\n    };\n})(PublicKey || (PublicKey = {}));\nvar PrivateKey;\n(function (PrivateKey) {\n    let _codec;\n    PrivateKey.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.Type != null) {\n                    w.uint32(8);\n                    KeyType.codec().encode(obj.Type, w);\n                }\n                if (obj.Data != null) {\n                    w.uint32(18);\n                    w.bytes(obj.Data);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.Type = KeyType.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.Data = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    PrivateKey.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, PrivateKey.codec());\n    };\n    PrivateKey.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, PrivateKey.codec());\n    };\n})(PrivateKey || (PrivateKey = {}));\n//# sourceMappingURL=keys.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/keys/keys.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/keys/rsa-browser.js":
/*!******************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/keys/rsa-browser.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateKey: () => (/* binding */ generateKey),\n/* harmony export */   getRandomValues: () => (/* reexport safe */ _random_bytes_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   hashAndSign: () => (/* binding */ hashAndSign),\n/* harmony export */   hashAndVerify: () => (/* binding */ hashAndVerify),\n/* harmony export */   keySize: () => (/* binding */ keySize),\n/* harmony export */   unmarshalPrivateKey: () => (/* binding */ unmarshalPrivateKey),\n/* harmony export */   utils: () => (/* reexport module object */ _rsa_utils_js__WEBPACK_IMPORTED_MODULE_1__)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var _random_bytes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../random-bytes.js */ \"./node_modules/@libp2p/crypto/dist/src/random-bytes.js\");\n/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../webcrypto.js */ \"./node_modules/@libp2p/crypto/dist/src/webcrypto-browser.js\");\n/* harmony import */ var _rsa_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rsa-utils.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/rsa-utils.js\");\n\n\n\n\n\n\nasync function generateKey(bits) {\n    const pair = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get().subtle.generateKey({\n        name: 'RSASSA-PKCS1-v1_5',\n        modulusLength: bits,\n        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n        hash: { name: 'SHA-256' }\n    }, true, ['sign', 'verify']);\n    const keys = await exportKey(pair);\n    return {\n        privateKey: keys[0],\n        publicKey: keys[1]\n    };\n}\n// Takes a jwk key\nasync function unmarshalPrivateKey(key) {\n    const privateKey = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get().subtle.importKey('jwk', key, {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: { name: 'SHA-256' }\n    }, true, ['sign']);\n    const pair = [\n        privateKey,\n        await derivePublicFromPrivate(key)\n    ];\n    const keys = await exportKey({\n        privateKey: pair[0],\n        publicKey: pair[1]\n    });\n    return {\n        privateKey: keys[0],\n        publicKey: keys[1]\n    };\n}\n\nasync function hashAndSign(key, msg) {\n    const privateKey = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get().subtle.importKey('jwk', key, {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: { name: 'SHA-256' }\n    }, false, ['sign']);\n    const sig = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get().subtle.sign({ name: 'RSASSA-PKCS1-v1_5' }, privateKey, msg instanceof Uint8Array ? msg : msg.subarray());\n    return new Uint8Array(sig, 0, sig.byteLength);\n}\nasync function hashAndVerify(key, sig, msg) {\n    const publicKey = await _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get().subtle.importKey('jwk', key, {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: { name: 'SHA-256' }\n    }, false, ['verify']);\n    return _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get().subtle.verify({ name: 'RSASSA-PKCS1-v1_5' }, publicKey, sig, msg instanceof Uint8Array ? msg : msg.subarray());\n}\nasync function exportKey(pair) {\n    if (pair.privateKey == null || pair.publicKey == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError('Private and public key are required', 'ERR_INVALID_PARAMETERS');\n    }\n    return Promise.all([\n        _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get().subtle.exportKey('jwk', pair.privateKey),\n        _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get().subtle.exportKey('jwk', pair.publicKey)\n    ]);\n}\nasync function derivePublicFromPrivate(jwKey) {\n    return _webcrypto_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get().subtle.importKey('jwk', {\n        kty: jwKey.kty,\n        n: jwKey.n,\n        e: jwKey.e\n    }, {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: { name: 'SHA-256' }\n    }, true, ['verify']);\n}\nfunction keySize(jwk) {\n    if (jwk.kty !== 'RSA') {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError('invalid key type', 'ERR_INVALID_KEY_TYPE');\n    }\n    else if (jwk.n == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError('invalid key modulus', 'ERR_INVALID_KEY_MODULUS');\n    }\n    const bytes = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_0__.fromString)(jwk.n, 'base64url');\n    return bytes.length * 8;\n}\n//# sourceMappingURL=rsa-browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/keys/rsa-browser.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/keys/rsa-class.js":
/*!****************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/keys/rsa-class.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_RSA_KEY_SIZE: () => (/* binding */ MAX_RSA_KEY_SIZE),\n/* harmony export */   RsaPrivateKey: () => (/* binding */ RsaPrivateKey),\n/* harmony export */   RsaPublicKey: () => (/* binding */ RsaPublicKey),\n/* harmony export */   fromJwk: () => (/* binding */ fromJwk),\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair),\n/* harmony export */   unmarshalRsaPrivateKey: () => (/* binding */ unmarshalRsaPrivateKey),\n/* harmony export */   unmarshalRsaPublicKey: () => (/* binding */ unmarshalRsaPublicKey)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/hashes/sha2 */ \"./node_modules/multiformats/dist/src/hashes/sha2-browser.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util.js */ \"./node_modules/@libp2p/crypto/dist/src/util.js\");\n/* harmony import */ var _exporter_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./exporter.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/exporter.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./keys.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/keys.js\");\n/* harmony import */ var _rsa_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rsa.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/rsa-browser.js\");\n/* harmony import */ var _rsa_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rsa.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/rsa-utils.js\");\n/* harmony import */ var _rsa_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./rsa.js */ \"./node_modules/@libp2p/crypto/dist/src/random-bytes.js\");\n\n\n\n\n\n\n\n\nconst MAX_RSA_KEY_SIZE = 8192;\nclass RsaPublicKey {\n    _key;\n    constructor(key) {\n        this._key = key;\n    }\n    verify(data, sig) {\n        return _rsa_js__WEBPACK_IMPORTED_MODULE_3__.hashAndVerify(this._key, sig, data);\n    }\n    marshal() {\n        return _rsa_js__WEBPACK_IMPORTED_MODULE_4__.jwkToPkix(this._key);\n    }\n    get bytes() {\n        return _keys_js__WEBPACK_IMPORTED_MODULE_5__.PublicKey.encode({\n            Type: _keys_js__WEBPACK_IMPORTED_MODULE_5__.KeyType.RSA,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_1__.equals)(this.bytes, key.bytes);\n    }\n    hash() {\n        const p = multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256.digest(this.bytes);\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_6__.isPromise)(p)) {\n            return p.then(({ bytes }) => bytes);\n        }\n        return p.bytes;\n    }\n}\nclass RsaPrivateKey {\n    _key;\n    _publicKey;\n    constructor(key, publicKey) {\n        this._key = key;\n        this._publicKey = publicKey;\n    }\n    genSecret() {\n        return _rsa_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](16);\n    }\n    sign(message) {\n        return _rsa_js__WEBPACK_IMPORTED_MODULE_3__.hashAndSign(this._key, message);\n    }\n    get public() {\n        if (this._publicKey == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.CodeError('public key not provided', 'ERR_PUBKEY_NOT_PROVIDED');\n        }\n        return new RsaPublicKey(this._publicKey);\n    }\n    marshal() {\n        return _rsa_js__WEBPACK_IMPORTED_MODULE_4__.jwkToPkcs1(this._key);\n    }\n    get bytes() {\n        return _keys_js__WEBPACK_IMPORTED_MODULE_5__.PrivateKey.encode({\n            Type: _keys_js__WEBPACK_IMPORTED_MODULE_5__.KeyType.RSA,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_1__.equals)(this.bytes, key.bytes);\n    }\n    hash() {\n        const p = multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256.digest(this.bytes);\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_6__.isPromise)(p)) {\n            return p.then(({ bytes }) => bytes);\n        }\n        return p.bytes;\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     */\n    async id() {\n        const hash = await this.public.hash();\n        return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(hash, 'base58btc');\n    }\n    /**\n     * Exports the key as libp2p-key - a aes-gcm encrypted value with the key\n     * derived from the password.\n     *\n     * To export it as a password protected PEM file, please use the `exportPEM`\n     * function from `@libp2p/rsa`.\n     */\n    async export(password, format = 'pkcs-8') {\n        if (format === 'pkcs-8') {\n            return _rsa_js__WEBPACK_IMPORTED_MODULE_4__.exportToPem(this, password);\n        }\n        else if (format === 'libp2p-key') {\n            return (0,_exporter_js__WEBPACK_IMPORTED_MODULE_9__.exporter)(this.bytes, password);\n        }\n        else {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT');\n        }\n    }\n}\nasync function unmarshalRsaPrivateKey(bytes) {\n    const jwk = _rsa_js__WEBPACK_IMPORTED_MODULE_4__.pkcs1ToJwk(bytes);\n    if (_rsa_js__WEBPACK_IMPORTED_MODULE_3__.keySize(jwk) > MAX_RSA_KEY_SIZE) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.CodeError('key size is too large', 'ERR_KEY_SIZE_TOO_LARGE');\n    }\n    const keys = await _rsa_js__WEBPACK_IMPORTED_MODULE_3__.unmarshalPrivateKey(jwk);\n    return new RsaPrivateKey(keys.privateKey, keys.publicKey);\n}\nfunction unmarshalRsaPublicKey(bytes) {\n    const jwk = _rsa_js__WEBPACK_IMPORTED_MODULE_4__.pkixToJwk(bytes);\n    if (_rsa_js__WEBPACK_IMPORTED_MODULE_3__.keySize(jwk) > MAX_RSA_KEY_SIZE) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.CodeError('key size is too large', 'ERR_KEY_SIZE_TOO_LARGE');\n    }\n    return new RsaPublicKey(jwk);\n}\nasync function fromJwk(jwk) {\n    if (_rsa_js__WEBPACK_IMPORTED_MODULE_3__.keySize(jwk) > MAX_RSA_KEY_SIZE) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.CodeError('key size is too large', 'ERR_KEY_SIZE_TOO_LARGE');\n    }\n    const keys = await _rsa_js__WEBPACK_IMPORTED_MODULE_3__.unmarshalPrivateKey(jwk);\n    return new RsaPrivateKey(keys.privateKey, keys.publicKey);\n}\nasync function generateKeyPair(bits) {\n    if (bits > MAX_RSA_KEY_SIZE) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.CodeError('key size is too large', 'ERR_KEY_SIZE_TOO_LARGE');\n    }\n    const keys = await _rsa_js__WEBPACK_IMPORTED_MODULE_3__.generateKey(bits);\n    return new RsaPrivateKey(keys.privateKey, keys.publicKey);\n}\n//# sourceMappingURL=rsa-class.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/keys/rsa-class.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/keys/rsa-utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/keys/rsa-utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exportToPem: () => (/* binding */ exportToPem),\n/* harmony export */   importFromPem: () => (/* binding */ importFromPem),\n/* harmony export */   jwkToPkcs1: () => (/* binding */ jwkToPkcs1),\n/* harmony export */   jwkToPkix: () => (/* binding */ jwkToPkix),\n/* harmony export */   pkcs1ToJwk: () => (/* binding */ pkcs1ToJwk),\n/* harmony export */   pkixToJwk: () => (/* binding */ pkixToJwk)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @noble/hashes/pbkdf2 */ \"./node_modules/@noble/hashes/esm/pbkdf2.js\");\n/* harmony import */ var _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @noble/hashes/sha512 */ \"./node_modules/@noble/hashes/esm/sha512.js\");\n/* harmony import */ var asn1js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! asn1js */ \"./node_modules/asn1js/build/index.es.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _random_bytes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../random-bytes.js */ \"./node_modules/@libp2p/crypto/dist/src/random-bytes.js\");\n/* harmony import */ var _webcrypto_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../webcrypto.js */ \"./node_modules/@libp2p/crypto/dist/src/webcrypto-browser.js\");\n/* harmony import */ var _rsa_class_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rsa-class.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/rsa-class.js\");\n\n\n\n\n\n\n\n\n\n/**\n * Convert a PKCS#1 in ASN1 DER format to a JWK key\n */\nfunction pkcs1ToJwk(bytes) {\n    const { result } = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(bytes);\n    // @ts-expect-error this looks fragile but DER is a canonical format so we are\n    // safe to have deeply property chains like this\n    const values = result.valueBlock.value;\n    const key = {\n        n: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(bnToBuf(values[1].toBigInt()), 'base64url'),\n        e: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(bnToBuf(values[2].toBigInt()), 'base64url'),\n        d: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(bnToBuf(values[3].toBigInt()), 'base64url'),\n        p: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(bnToBuf(values[4].toBigInt()), 'base64url'),\n        q: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(bnToBuf(values[5].toBigInt()), 'base64url'),\n        dp: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(bnToBuf(values[6].toBigInt()), 'base64url'),\n        dq: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(bnToBuf(values[7].toBigInt()), 'base64url'),\n        qi: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(bnToBuf(values[8].toBigInt()), 'base64url'),\n        kty: 'RSA',\n        alg: 'RS256'\n    };\n    return key;\n}\n/**\n * Convert a JWK key into PKCS#1 in ASN1 DER format\n */\nfunction jwkToPkcs1(jwk) {\n    if (jwk.n == null || jwk.e == null || jwk.d == null || jwk.p == null || jwk.q == null || jwk.dp == null || jwk.dq == null || jwk.qi == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS');\n    }\n    const root = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        value: [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: 0 }),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer.fromBigInt(bufToBn((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(jwk.n, 'base64url'))),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer.fromBigInt(bufToBn((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(jwk.e, 'base64url'))),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer.fromBigInt(bufToBn((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(jwk.d, 'base64url'))),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer.fromBigInt(bufToBn((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(jwk.p, 'base64url'))),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer.fromBigInt(bufToBn((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(jwk.q, 'base64url'))),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer.fromBigInt(bufToBn((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(jwk.dp, 'base64url'))),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer.fromBigInt(bufToBn((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(jwk.dq, 'base64url'))),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer.fromBigInt(bufToBn((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(jwk.qi, 'base64url')))\n        ]\n    });\n    const der = root.toBER();\n    return new Uint8Array(der, 0, der.byteLength);\n}\n/**\n * Convert a PKCIX in ASN1 DER format to a JWK key\n */\nfunction pkixToJwk(bytes) {\n    const { result } = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(bytes);\n    // @ts-expect-error this looks fragile but DER is a canonical format so we are\n    // safe to have deeply property chains like this\n    const values = result.valueBlock.value[1].valueBlock.value[0].valueBlock.value;\n    return {\n        kty: 'RSA',\n        n: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(bnToBuf(values[0].toBigInt()), 'base64url'),\n        e: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(bnToBuf(values[1].toBigInt()), 'base64url')\n    };\n}\n/**\n * Convert a JWK key to PKCIX in ASN1 DER format\n */\nfunction jwkToPkix(jwk) {\n    if (jwk.n == null || jwk.e == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS');\n    }\n    const root = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        value: [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: [\n                    // rsaEncryption\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({\n                        value: '1.2.840.113549.1.1.1'\n                    }),\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                ]\n            }),\n            // this appears to be a bug in asn1js.js - this should really be a Sequence\n            // and not a BitString but it generates the same bytes as node-forge so 🤷‍♂️\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({\n                valueHex: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: [\n                        asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer.fromBigInt(bufToBn((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(jwk.n, 'base64url'))),\n                        asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer.fromBigInt(bufToBn((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(jwk.e, 'base64url')))\n                    ]\n                }).toBER()\n            })\n        ]\n    });\n    const der = root.toBER();\n    return new Uint8Array(der, 0, der.byteLength);\n}\nfunction bnToBuf(bn) {\n    let hex = bn.toString(16);\n    if (hex.length % 2 > 0) {\n        hex = `0${hex}`;\n    }\n    const len = hex.length / 2;\n    const u8 = new Uint8Array(len);\n    let i = 0;\n    let j = 0;\n    while (i < len) {\n        u8[i] = parseInt(hex.slice(j, j + 2), 16);\n        i += 1;\n        j += 2;\n    }\n    return u8;\n}\nfunction bufToBn(u8) {\n    const hex = [];\n    u8.forEach(function (i) {\n        let h = i.toString(16);\n        if (h.length % 2 > 0) {\n            h = `0${h}`;\n        }\n        hex.push(h);\n    });\n    return BigInt('0x' + hex.join(''));\n}\nconst SALT_LENGTH = 16;\nconst KEY_SIZE = 32;\nconst ITERATIONS = 10000;\nasync function exportToPem(privateKey, password) {\n    const crypto = _webcrypto_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get();\n    // PrivateKeyInfo\n    const keyWrapper = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        value: [\n            // version (0)\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: 0 }),\n            // privateKeyAlgorithm\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: [\n                    // rsaEncryption OID\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({\n                        value: '1.2.840.113549.1.1.1'\n                    }),\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                ]\n            }),\n            // PrivateKey\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({\n                valueHex: privateKey.marshal()\n            })\n        ]\n    });\n    const keyBuf = keyWrapper.toBER();\n    const keyArr = new Uint8Array(keyBuf, 0, keyBuf.byteLength);\n    const salt = (0,_random_bytes_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(SALT_LENGTH);\n    const encryptionKey = await (0,_noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_6__.pbkdf2Async)(_noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_7__.sha512, password, salt, {\n        c: ITERATIONS,\n        dkLen: KEY_SIZE\n    });\n    const iv = (0,_random_bytes_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(16);\n    const cryptoKey = await crypto.subtle.importKey('raw', encryptionKey, 'AES-CBC', false, ['encrypt']);\n    const encrypted = await crypto.subtle.encrypt({\n        name: 'AES-CBC',\n        iv\n    }, cryptoKey, keyArr);\n    const pbkdf2Params = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        value: [\n            // salt\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: salt }),\n            // iteration count\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: ITERATIONS }),\n            // key length\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: KEY_SIZE }),\n            // AlgorithmIdentifier\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: [\n                    // hmacWithSHA512\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: '1.2.840.113549.2.11' }),\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                ]\n            })\n        ]\n    });\n    const encryptionAlgorithm = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        value: [\n            // pkcs5PBES2\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({\n                value: '1.2.840.113549.1.5.13'\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: [\n                    // keyDerivationFunc\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                        value: [\n                            // pkcs5PBKDF2\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({\n                                value: '1.2.840.113549.1.5.12'\n                            }),\n                            // PBKDF2-params\n                            pbkdf2Params\n                        ]\n                    }),\n                    // encryptionScheme\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                        value: [\n                            // aes256-CBC\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({\n                                value: '2.16.840.1.101.3.4.1.42'\n                            }),\n                            // iv\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({\n                                valueHex: iv\n                            })\n                        ]\n                    })\n                ]\n            })\n        ]\n    });\n    const finalWrapper = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        value: [\n            encryptionAlgorithm,\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: encrypted })\n        ]\n    });\n    const finalWrapperBuf = finalWrapper.toBER();\n    const finalWrapperArr = new Uint8Array(finalWrapperBuf, 0, finalWrapperBuf.byteLength);\n    return [\n        '-----BEGIN ENCRYPTED PRIVATE KEY-----',\n        ...(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(finalWrapperArr, 'base64pad').split(/(.{64})/).filter(Boolean),\n        '-----END ENCRYPTED PRIVATE KEY-----'\n    ].join('\\n');\n}\nasync function importFromPem(pem, password) {\n    const crypto = _webcrypto_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get();\n    let plaintext;\n    if (pem.includes('-----BEGIN ENCRYPTED PRIVATE KEY-----')) {\n        const key = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(pem\n            .replace('-----BEGIN ENCRYPTED PRIVATE KEY-----', '')\n            .replace('-----END ENCRYPTED PRIVATE KEY-----', '')\n            .replace(/\\n/g, '')\n            .trim(), 'base64pad');\n        const { result } = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(key);\n        const { iv, salt, iterations, keySize, cipherText } = findEncryptedPEMData(result);\n        const encryptionKey = await (0,_noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_6__.pbkdf2Async)(_noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_7__.sha512, password, salt, {\n            c: iterations,\n            dkLen: keySize\n        });\n        const cryptoKey = await crypto.subtle.importKey('raw', encryptionKey, 'AES-CBC', false, ['decrypt']);\n        const decrypted = toUint8Array(await crypto.subtle.decrypt({\n            name: 'AES-CBC',\n            iv\n        }, cryptoKey, cipherText));\n        const { result: decryptedResult } = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(decrypted);\n        plaintext = findPEMData(decryptedResult);\n    }\n    else if (pem.includes('-----BEGIN PRIVATE KEY-----')) {\n        const key = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(pem\n            .replace('-----BEGIN PRIVATE KEY-----', '')\n            .replace('-----END PRIVATE KEY-----', '')\n            .replace(/\\n/g, '')\n            .trim(), 'base64pad');\n        const { result } = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(key);\n        plaintext = findPEMData(result);\n    }\n    else {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Could not parse private key from PEM data', 'ERR_INVALID_PARAMETERS');\n    }\n    return (0,_rsa_class_js__WEBPACK_IMPORTED_MODULE_8__.unmarshalRsaPrivateKey)(plaintext);\n}\nfunction findEncryptedPEMData(root) {\n    const encryptionAlgorithm = root.valueBlock.value[0];\n    const scheme = encryptionAlgorithm.valueBlock.value[0].toString();\n    if (scheme !== 'OBJECT IDENTIFIER : 1.2.840.113549.1.5.13') {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Only pkcs5PBES2 encrypted private keys are supported', 'ERR_INVALID_PARAMS');\n    }\n    const keyDerivationFunc = encryptionAlgorithm.valueBlock.value[1].valueBlock.value[0];\n    const keyDerivationFuncName = keyDerivationFunc.valueBlock.value[0].toString();\n    if (keyDerivationFuncName !== 'OBJECT IDENTIFIER : 1.2.840.113549.1.5.12') {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Only pkcs5PBKDF2 key derivation functions are supported', 'ERR_INVALID_PARAMS');\n    }\n    const pbkdf2Params = keyDerivationFunc.valueBlock.value[1];\n    const salt = toUint8Array(pbkdf2Params.valueBlock.value[0].getValue());\n    let iterations = ITERATIONS;\n    let keySize = KEY_SIZE;\n    if (pbkdf2Params.valueBlock.value.length === 3) {\n        iterations = Number(pbkdf2Params.valueBlock.value[1].toBigInt());\n        keySize = Number((pbkdf2Params.valueBlock.value[2]).toBigInt());\n    }\n    else if (pbkdf2Params.valueBlock.value.length === 2) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Could not derive key size and iterations from PEM file - please use @libp2p/rsa to re-import your key', 'ERR_INVALID_PARAMS');\n    }\n    const encryptionScheme = encryptionAlgorithm.valueBlock.value[1].valueBlock.value[1];\n    const encryptionSchemeName = encryptionScheme.valueBlock.value[0].toString();\n    if (encryptionSchemeName === 'OBJECT IDENTIFIER : 1.2.840.113549.3.7') {\n        // des-EDE3-CBC\n    }\n    else if (encryptionSchemeName === 'OBJECT IDENTIFIER : 1.3.14.3.2.7') {\n        // des-CBC\n    }\n    else if (encryptionSchemeName === 'OBJECT IDENTIFIER : 2.16.840.1.101.3.4.1.2') {\n        // aes128-CBC\n    }\n    else if (encryptionSchemeName === 'OBJECT IDENTIFIER : 2.16.840.1.101.3.4.1.22') {\n        // aes192-CBC\n    }\n    else if (encryptionSchemeName === 'OBJECT IDENTIFIER : 2.16.840.1.101.3.4.1.42') {\n        // aes256-CBC\n    }\n    else {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Only AES-CBC encryption schemes are supported', 'ERR_INVALID_PARAMS');\n    }\n    const iv = toUint8Array(encryptionScheme.valueBlock.value[1].getValue());\n    return {\n        cipherText: toUint8Array(root.valueBlock.value[1].getValue()),\n        salt,\n        iterations,\n        keySize,\n        iv\n    };\n}\nfunction findPEMData(seq) {\n    return toUint8Array(seq.valueBlock.value[2].getValue());\n}\nfunction toUint8Array(buf) {\n    return new Uint8Array(buf, 0, buf.byteLength);\n}\n//# sourceMappingURL=rsa-utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/keys/rsa-utils.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/keys/secp256k1-browser.js":
/*!************************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/keys/secp256k1-browser.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compressPublicKey: () => (/* binding */ compressPublicKey),\n/* harmony export */   computePublicKey: () => (/* binding */ computePublicKey),\n/* harmony export */   decompressPublicKey: () => (/* binding */ decompressPublicKey),\n/* harmony export */   generateKey: () => (/* binding */ generateKey),\n/* harmony export */   hashAndSign: () => (/* binding */ hashAndSign),\n/* harmony export */   hashAndVerify: () => (/* binding */ hashAndVerify),\n/* harmony export */   privateKeyLength: () => (/* binding */ PRIVATE_KEY_BYTE_LENGTH),\n/* harmony export */   validatePrivateKey: () => (/* binding */ validatePrivateKey),\n/* harmony export */   validatePublicKey: () => (/* binding */ validatePublicKey)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/hashes/sha2 */ \"./node_modules/multiformats/dist/src/hashes/sha2-browser.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util.js */ \"./node_modules/@libp2p/crypto/dist/src/util.js\");\n\n\n\n\nconst PRIVATE_KEY_BYTE_LENGTH = 32;\n\nfunction generateKey() {\n    return _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.utils.randomPrivateKey();\n}\n/**\n * Hash and sign message with private key\n */\nfunction hashAndSign(key, msg) {\n    const p = multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256.digest(msg instanceof Uint8Array ? msg : msg.subarray());\n    if ((0,_util_js__WEBPACK_IMPORTED_MODULE_2__.isPromise)(p)) {\n        return p.then(({ digest }) => _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.sign(digest, key).toDERRawBytes())\n            .catch(err => {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(String(err), 'ERR_INVALID_INPUT');\n        });\n    }\n    try {\n        return _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.sign(p.digest, key).toDERRawBytes();\n    }\n    catch (err) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(String(err), 'ERR_INVALID_INPUT');\n    }\n}\n/**\n * Hash message and verify signature with public key\n */\nfunction hashAndVerify(key, sig, msg) {\n    const p = multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256.digest(msg instanceof Uint8Array ? msg : msg.subarray());\n    if ((0,_util_js__WEBPACK_IMPORTED_MODULE_2__.isPromise)(p)) {\n        return p.then(({ digest }) => _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.verify(sig, digest, key))\n            .catch(err => {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(String(err), 'ERR_INVALID_INPUT');\n        });\n    }\n    try {\n        return _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.verify(sig, p.digest, key);\n    }\n    catch (err) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(String(err), 'ERR_INVALID_INPUT');\n    }\n}\nfunction compressPublicKey(key) {\n    const point = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.ProjectivePoint.fromHex(key).toRawBytes(true);\n    return point;\n}\nfunction decompressPublicKey(key) {\n    const point = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.ProjectivePoint.fromHex(key).toRawBytes(false);\n    return point;\n}\nfunction validatePrivateKey(key) {\n    try {\n        _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.getPublicKey(key, true);\n    }\n    catch (err) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(String(err), 'ERR_INVALID_PRIVATE_KEY');\n    }\n}\nfunction validatePublicKey(key) {\n    try {\n        _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.ProjectivePoint.fromHex(key);\n    }\n    catch (err) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(String(err), 'ERR_INVALID_PUBLIC_KEY');\n    }\n}\nfunction computePublicKey(privateKey) {\n    try {\n        return _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.getPublicKey(privateKey, true);\n    }\n    catch (err) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(String(err), 'ERR_INVALID_PRIVATE_KEY');\n    }\n}\n//# sourceMappingURL=secp256k1-browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/keys/secp256k1-browser.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/keys/secp256k1-class.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/keys/secp256k1-class.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Secp256k1PrivateKey: () => (/* binding */ Secp256k1PrivateKey),\n/* harmony export */   Secp256k1PublicKey: () => (/* binding */ Secp256k1PublicKey),\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair),\n/* harmony export */   unmarshalSecp256k1PrivateKey: () => (/* binding */ unmarshalSecp256k1PrivateKey),\n/* harmony export */   unmarshalSecp256k1PublicKey: () => (/* binding */ unmarshalSecp256k1PublicKey)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/hashes/sha2 */ \"./node_modules/multiformats/dist/src/hashes/sha2-browser.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util.js */ \"./node_modules/@libp2p/crypto/dist/src/util.js\");\n/* harmony import */ var _exporter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./exporter.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/exporter.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./keys.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/keys.js\");\n/* harmony import */ var _secp256k1_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./secp256k1.js */ \"./node_modules/@libp2p/crypto/dist/src/keys/secp256k1-browser.js\");\n\n\n\n\n\n\n\n\nclass Secp256k1PublicKey {\n    _key;\n    constructor(key) {\n        _secp256k1_js__WEBPACK_IMPORTED_MODULE_3__.validatePublicKey(key);\n        this._key = key;\n    }\n    verify(data, sig) {\n        return _secp256k1_js__WEBPACK_IMPORTED_MODULE_3__.hashAndVerify(this._key, sig, data);\n    }\n    marshal() {\n        return _secp256k1_js__WEBPACK_IMPORTED_MODULE_3__.compressPublicKey(this._key);\n    }\n    get bytes() {\n        return _keys_js__WEBPACK_IMPORTED_MODULE_4__.PublicKey.encode({\n            Type: _keys_js__WEBPACK_IMPORTED_MODULE_4__.KeyType.Secp256k1,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_1__.equals)(this.bytes, key.bytes);\n    }\n    async hash() {\n        const p = multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256.digest(this.bytes);\n        let bytes;\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_5__.isPromise)(p)) {\n            ({ bytes } = await p);\n        }\n        else {\n            bytes = p.bytes;\n        }\n        return bytes;\n    }\n}\nclass Secp256k1PrivateKey {\n    _key;\n    _publicKey;\n    constructor(key, publicKey) {\n        this._key = key;\n        this._publicKey = publicKey ?? _secp256k1_js__WEBPACK_IMPORTED_MODULE_3__.computePublicKey(key);\n        _secp256k1_js__WEBPACK_IMPORTED_MODULE_3__.validatePrivateKey(this._key);\n        _secp256k1_js__WEBPACK_IMPORTED_MODULE_3__.validatePublicKey(this._publicKey);\n    }\n    sign(message) {\n        return _secp256k1_js__WEBPACK_IMPORTED_MODULE_3__.hashAndSign(this._key, message);\n    }\n    get public() {\n        return new Secp256k1PublicKey(this._publicKey);\n    }\n    marshal() {\n        return this._key;\n    }\n    get bytes() {\n        return _keys_js__WEBPACK_IMPORTED_MODULE_4__.PrivateKey.encode({\n            Type: _keys_js__WEBPACK_IMPORTED_MODULE_4__.KeyType.Secp256k1,\n            Data: this.marshal()\n        }).subarray();\n    }\n    equals(key) {\n        return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_1__.equals)(this.bytes, key.bytes);\n    }\n    hash() {\n        const p = multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256.digest(this.bytes);\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_5__.isPromise)(p)) {\n            return p.then(({ bytes }) => bytes);\n        }\n        return p.bytes;\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     */\n    async id() {\n        const hash = await this.public.hash();\n        return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(hash, 'base58btc');\n    }\n    /**\n     * Exports the key into a password protected `format`\n     */\n    async export(password, format = 'libp2p-key') {\n        if (format === 'libp2p-key') {\n            return (0,_exporter_js__WEBPACK_IMPORTED_MODULE_6__.exporter)(this.bytes, password);\n        }\n        else {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT');\n        }\n    }\n}\nfunction unmarshalSecp256k1PrivateKey(bytes) {\n    return new Secp256k1PrivateKey(bytes);\n}\nfunction unmarshalSecp256k1PublicKey(bytes) {\n    return new Secp256k1PublicKey(bytes);\n}\nasync function generateKeyPair() {\n    const privateKeyBytes = _secp256k1_js__WEBPACK_IMPORTED_MODULE_3__.generateKey();\n    return new Secp256k1PrivateKey(privateKeyBytes);\n}\n//# sourceMappingURL=secp256k1-class.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/keys/secp256k1-class.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/pbkdf2.js":
/*!********************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/pbkdf2.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ pbkdf2)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @noble/hashes/pbkdf2 */ \"./node_modules/@noble/hashes/esm/pbkdf2.js\");\n/* harmony import */ var _noble_hashes_sha1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha1 */ \"./node_modules/@noble/hashes/esm/sha1.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/sha512 */ \"./node_modules/@noble/hashes/esm/sha512.js\");\n/* harmony import */ var multiformats_bases_base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/bases/base64 */ \"./node_modules/multiformats/dist/src/bases/base64.js\");\n\n\n\n\n\n\n/**\n * Maps an IPFS hash name to its @noble/hashes equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\nconst hashName = {\n    sha1: _noble_hashes_sha1__WEBPACK_IMPORTED_MODULE_1__.sha1,\n    'sha2-256': _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256,\n    'sha2-512': _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_3__.sha512\n};\n/**\n * Computes the Password-Based Key Derivation Function 2.\n */\nfunction pbkdf2(password, salt, iterations, keySize, hash) {\n    if (hash !== 'sha1' && hash !== 'sha2-256' && hash !== 'sha2-512') {\n        const types = Object.keys(hashName).join(' / ');\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError(`Hash '${hash}' is unknown or not supported. Must be ${types}`, 'ERR_UNSUPPORTED_HASH_TYPE');\n    }\n    const hasher = hashName[hash];\n    const dek = (0,_noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_5__.pbkdf2)(hasher, password, salt, {\n        c: iterations,\n        dkLen: keySize\n    });\n    return multiformats_bases_base64__WEBPACK_IMPORTED_MODULE_0__.base64.encode(dek).substring(1);\n}\n//# sourceMappingURL=pbkdf2.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/pbkdf2.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/random-bytes.js":
/*!**************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/random-bytes.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ randomBytes)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"./node_modules/@noble/hashes/esm/utils.js\");\n\n\n/**\n * Generates a Uint8Array with length `number` populated by random bytes\n */\nfunction randomBytes(length) {\n    if (isNaN(length) || length <= 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError('random bytes length must be a Number bigger than 0', 'ERR_INVALID_LENGTH');\n    }\n    return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.randomBytes)(length);\n}\n//# sourceMappingURL=random-bytes.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/random-bytes.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/util.js":
/*!******************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/util.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64urlToBuffer: () => (/* binding */ base64urlToBuffer),\n/* harmony export */   isPromise: () => (/* binding */ isPromise)\n/* harmony export */ });\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/concat */ \"./node_modules/uint8arrays/dist/src/concat.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n\n\nfunction base64urlToBuffer(str, len) {\n    let buf = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(str, 'base64urlpad');\n    if (len != null) {\n        if (buf.length > len)\n            throw new Error('byte array longer than desired length');\n        buf = (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__.concat)([new Uint8Array(len - buf.length), buf]);\n    }\n    return buf;\n}\nfunction isPromise(thing) {\n    if (thing == null) {\n        return false;\n    }\n    return typeof thing.then === 'function' &&\n        typeof thing.catch === 'function' &&\n        typeof thing.finally === 'function';\n}\n//# sourceMappingURL=util.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/util.js?");

/***/ }),

/***/ "./node_modules/@libp2p/crypto/dist/src/webcrypto-browser.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@libp2p/crypto/dist/src/webcrypto-browser.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* eslint-env browser */\n// Check native crypto exists and is enabled (In insecure context `self.crypto`\n// exists but `self.crypto.subtle` does not).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    get(win = globalThis) {\n        const nativeCrypto = win.crypto;\n        if (nativeCrypto == null || nativeCrypto.subtle == null) {\n            throw Object.assign(new Error('Missing Web Crypto API. ' +\n                'The most likely cause of this error is that this page is being accessed ' +\n                'from an insecure context (i.e. not HTTPS). For more information and ' +\n                'possible resolutions see ' +\n                'https://github.com/libp2p/js-libp2p/blob/main/packages/crypto/README.md#web-crypto-api'), { code: 'ERR_MISSING_WEB_CRYPTO' });\n        }\n        return nativeCrypto;\n    }\n});\n//# sourceMappingURL=webcrypto-browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/crypto/dist/src/webcrypto-browser.js?");

/***/ }),

/***/ "./node_modules/@libp2p/dcutr/dist/src/dcutr.js":
/*!******************************************************!*\
  !*** ./node_modules/@libp2p/dcutr/dist/src/dcutr.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultDCUtRService: () => (/* binding */ DefaultDCUtRService)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var delay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! delay */ \"./node_modules/delay/index.js\");\n/* harmony import */ var it_protobuf_stream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! it-protobuf-stream */ \"./node_modules/it-protobuf-stream/dist/src/index.js\");\n/* harmony import */ var _pb_message_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pb/message.js */ \"./node_modules/@libp2p/dcutr/dist/src/pb/message.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@libp2p/dcutr/dist/src/utils.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index.js */ \"./node_modules/@libp2p/dcutr/dist/src/index.js\");\n\n\n\n\n\n\n\n// https://github.com/libp2p/specs/blob/master/relay/DCUtR.md#rpc-messages\nconst MAX_DCUTR_MESSAGE_SIZE = 1024 * 4;\n// ensure the dial has a high priority to jump to the head of the dial queue\nconst DCUTR_DIAL_PRIORITY = 100;\nconst defaultValues = {\n    // https://github.com/libp2p/go-libp2p/blob/8d2e54e1637041d5cf4fac1e531287560bd1f4ac/p2p/protocol/holepunch/holepuncher.go#L27\n    timeout: 5000,\n    // https://github.com/libp2p/go-libp2p/blob/8d2e54e1637041d5cf4fac1e531287560bd1f4ac/p2p/protocol/holepunch/holepuncher.go#L28\n    retries: 3,\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1\n};\nclass DefaultDCUtRService {\n    started;\n    timeout;\n    retries;\n    maxInboundStreams;\n    maxOutboundStreams;\n    peerStore;\n    registrar;\n    connectionManager;\n    addressManager;\n    transportManager;\n    topologyId;\n    log;\n    constructor(components, init) {\n        this.log = components.logger.forComponent('libp2p:dcutr');\n        this.started = false;\n        this.peerStore = components.peerStore;\n        this.registrar = components.registrar;\n        this.addressManager = components.addressManager;\n        this.connectionManager = components.connectionManager;\n        this.transportManager = components.transportManager;\n        this.timeout = init.timeout ?? defaultValues.timeout;\n        this.retries = init.retries ?? defaultValues.retries;\n        this.maxInboundStreams = init.maxInboundStreams ?? defaultValues.maxInboundStreams;\n        this.maxOutboundStreams = init.maxOutboundStreams ?? defaultValues.maxOutboundStreams;\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        if (this.started) {\n            return;\n        }\n        // register for notifications of when peers that support DCUtR connect\n        // nb. requires the identify service to be enabled\n        this.topologyId = await this.registrar.register(_index_js__WEBPACK_IMPORTED_MODULE_3__.multicodec, {\n            notifyOnTransient: true,\n            onConnect: (peerId, connection) => {\n                if (!connection.transient) {\n                    // the connection is already direct, no upgrade is required\n                    return;\n                }\n                // the inbound peer starts the connection upgrade\n                if (connection.direction !== 'inbound') {\n                    return;\n                }\n                this.upgradeInbound(connection)\n                    .catch(err => {\n                    this.log.error('error during outgoing DCUtR attempt', err);\n                });\n            }\n        });\n        await this.registrar.handle(_index_js__WEBPACK_IMPORTED_MODULE_3__.multicodec, (data) => {\n            void this.handleIncomingUpgrade(data.stream, data.connection).catch(err => {\n                this.log.error('error during incoming DCUtR attempt', err);\n                data.stream.abort(err);\n            });\n        }, {\n            maxInboundStreams: this.maxInboundStreams,\n            maxOutboundStreams: this.maxOutboundStreams,\n            runOnTransientConnection: true\n        });\n        this.started = true;\n    }\n    async stop() {\n        await this.registrar.unhandle(_index_js__WEBPACK_IMPORTED_MODULE_3__.multicodec);\n        if (this.topologyId != null) {\n            this.registrar.unregister(this.topologyId);\n        }\n        this.started = false;\n    }\n    /**\n     * Perform the inbound connection upgrade as B\n     *\n     * @see https://github.com/libp2p/specs/blob/master/relay/DCUtR.md#the-protocol\n     */\n    async upgradeInbound(relayedConnection) {\n        // Upon observing the new connection, the inbound peer (here B) checks the\n        // addresses advertised by A via identify.\n        //\n        // If that set includes public addresses, then A may be reachable by a direct\n        // connection, in which case B attempts a unilateral connection upgrade by\n        // initiating a direct connection to A.\n        if (await this.attemptUnilateralConnectionUpgrade(relayedConnection)) {\n            return;\n        }\n        let stream;\n        for (let i = 0; i < this.retries; i++) {\n            const options = {\n                signal: AbortSignal.timeout(this.timeout)\n            };\n            try {\n                // 1. B opens a stream to A using the /libp2p/dcutr protocol.\n                stream = await relayedConnection.newStream([_index_js__WEBPACK_IMPORTED_MODULE_3__.multicodec], {\n                    signal: options.signal,\n                    runOnTransientConnection: true\n                });\n                const pb = (0,it_protobuf_stream__WEBPACK_IMPORTED_MODULE_2__.pbStream)(stream, {\n                    maxDataLength: MAX_DCUTR_MESSAGE_SIZE\n                }).pb(_pb_message_js__WEBPACK_IMPORTED_MODULE_4__.HolePunch);\n                // 2. B sends to A a Connect message containing its observed (and\n                // possibly predicted) addresses from identify and starts a timer\n                // to measure RTT of the relay connection.\n                this.log('B sending connect to %p', relayedConnection.remotePeer);\n                const connectTimer = Date.now();\n                await pb.write({\n                    type: _pb_message_js__WEBPACK_IMPORTED_MODULE_4__.HolePunch.Type.CONNECT,\n                    observedAddresses: this.addressManager.getAddresses().map(ma => ma.bytes)\n                }, options);\n                this.log('B receiving connect from %p', relayedConnection.remotePeer);\n                // 4. Upon receiving the Connect, B sends a Sync message\n                const connect = await pb.read(options);\n                if (connect.type !== _pb_message_js__WEBPACK_IMPORTED_MODULE_4__.HolePunch.Type.CONNECT) {\n                    this.log('A sent wrong message type');\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.CodeError('DCUtR message type was incorrect', _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.ERR_INVALID_MESSAGE);\n                }\n                const multiaddrs = this.getDialableMultiaddrs(connect.observedAddresses);\n                if (multiaddrs.length === 0) {\n                    this.log('A did not have any dialable multiaddrs');\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.CodeError('DCUtR connect message had no multiaddrs', _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.ERR_INVALID_MESSAGE);\n                }\n                const rtt = Date.now() - connectTimer;\n                this.log('A sending sync, rtt %dms', rtt);\n                await pb.write({\n                    type: _pb_message_js__WEBPACK_IMPORTED_MODULE_4__.HolePunch.Type.SYNC,\n                    observedAddresses: []\n                }, options);\n                this.log('A waiting for half RTT');\n                // ..and starts a timer for half the RTT measured from the time between\n                // sending the initial Connect and receiving the response\n                await (0,delay__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(rtt / 2);\n                // TODO: when we have a QUIC transport, the dial step is different - for\n                // now we only have tcp support\n                // https://github.com/libp2p/specs/blob/master/relay/DCUtR.md#the-protocol\n                this.log('B dialing', multiaddrs);\n                // Upon expiry of the timer, B dials the address to A.\n                const conn = await this.connectionManager.openConnection(multiaddrs, {\n                    signal: options.signal,\n                    priority: DCUTR_DIAL_PRIORITY\n                });\n                this.log('DCUtR to %p succeeded to address %a, closing relayed connection', relayedConnection.remotePeer, conn.remoteAddr);\n                await relayedConnection.close(options);\n                break;\n            }\n            catch (err) {\n                this.log.error('error while attempting DCUtR on attempt %d of %d', i + 1, this.retries, err);\n                stream?.abort(err);\n                if (i === this.retries) {\n                    throw err;\n                }\n            }\n            finally {\n                if (stream != null) {\n                    await stream.close(options);\n                }\n            }\n        }\n    }\n    /**\n     * This is performed when A has dialed B via a relay but A also has a public\n     * address that B can dial directly\n     */\n    async attemptUnilateralConnectionUpgrade(relayedConnection) {\n        // Upon observing the new connection, the inbound peer (here B) checks the\n        // addresses advertised by A via identify.\n        const peerInfo = await this.peerStore.get(relayedConnection.remotePeer);\n        // If that set includes public addresses, then A may be reachable by a direct\n        // connection, in which case B attempts a unilateral connection upgrade by\n        // initiating a direct connection to A.\n        const publicAddresses = peerInfo.addresses\n            .map(address => {\n            const ma = address.multiaddr;\n            // ensure all multiaddrs have the peer id\n            if (ma.getPeerId() == null) {\n                return ma.encapsulate(`/p2p/${relayedConnection.remotePeer}`);\n            }\n            return ma;\n        })\n            .filter(ma => {\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.isPublicAndDialable)(ma, this.transportManager);\n        });\n        if (publicAddresses.length > 0) {\n            const signal = AbortSignal.timeout(this.timeout);\n            try {\n                this.log('attempting unilateral connection upgrade to %a', publicAddresses);\n                // force-dial the multiaddr(s), otherwise `connectionManager.openConnection`\n                // will return the existing relayed connection\n                const connection = await this.connectionManager.openConnection(publicAddresses, {\n                    signal,\n                    force: true\n                });\n                if (connection.transient) {\n                    throw new Error('Could not open a new, non-transient, connection');\n                }\n                this.log('unilateral connection upgrade to %p succeeded via %a, closing relayed connection', relayedConnection.remotePeer, connection.remoteAddr);\n                await relayedConnection.close({\n                    signal\n                });\n                return true;\n            }\n            catch (err) {\n                this.log.error('unilateral connection upgrade to %p on addresses %a failed', relayedConnection.remotePeer, publicAddresses, err);\n            }\n        }\n        else {\n            this.log('peer %p has no public addresses, not attempting unilateral connection upgrade', relayedConnection.remotePeer);\n        }\n        // no public addresses or failed to dial public addresses\n        return false;\n    }\n    /**\n     * Perform the connection upgrade as A\n     *\n     * @see https://github.com/libp2p/specs/blob/master/relay/DCUtR.md#the-protocol\n     */\n    async handleIncomingUpgrade(stream, relayedConnection) {\n        const options = {\n            signal: AbortSignal.timeout(this.timeout)\n        };\n        try {\n            const pb = (0,it_protobuf_stream__WEBPACK_IMPORTED_MODULE_2__.pbStream)(stream, {\n                maxDataLength: MAX_DCUTR_MESSAGE_SIZE\n            }).pb(_pb_message_js__WEBPACK_IMPORTED_MODULE_4__.HolePunch);\n            this.log('A receiving connect');\n            // 3. Upon receiving the Connect, A responds back with a Connect message\n            // containing its observed (and possibly predicted) addresses.\n            const connect = await pb.read(options);\n            if (connect.type !== _pb_message_js__WEBPACK_IMPORTED_MODULE_4__.HolePunch.Type.CONNECT) {\n                this.log('B sent wrong message type');\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.CodeError('DCUtR message type was incorrect', _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.ERR_INVALID_MESSAGE);\n            }\n            if (connect.observedAddresses.length === 0) {\n                this.log('B sent no multiaddrs');\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.CodeError('DCUtR connect message had no multiaddrs', _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.ERR_INVALID_MESSAGE);\n            }\n            const multiaddrs = this.getDialableMultiaddrs(connect.observedAddresses);\n            if (multiaddrs.length === 0) {\n                this.log('B had no dialable multiaddrs');\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.CodeError('DCUtR connect message had no dialable multiaddrs', _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.ERR_INVALID_MESSAGE);\n            }\n            this.log('A sending connect');\n            await pb.write({\n                type: _pb_message_js__WEBPACK_IMPORTED_MODULE_4__.HolePunch.Type.CONNECT,\n                observedAddresses: this.addressManager.getAddresses().map(ma => ma.bytes)\n            });\n            this.log('A receiving sync');\n            const sync = await pb.read(options);\n            if (sync.type !== _pb_message_js__WEBPACK_IMPORTED_MODULE_4__.HolePunch.Type.SYNC) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.CodeError('DCUtR message type was incorrect', _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.ERR_INVALID_MESSAGE);\n            }\n            // TODO: when we have a QUIC transport, the dial step is different - for\n            // now we only have tcp support\n            // https://github.com/libp2p/specs/blob/master/relay/DCUtR.md#the-protocol\n            // Upon receiving the Sync, A immediately dials the address to B\n            this.log('A dialing', multiaddrs);\n            const connection = await this.connectionManager.openConnection(multiaddrs, {\n                signal: options.signal,\n                priority: DCUTR_DIAL_PRIORITY,\n                force: true\n            });\n            this.log('DCUtR to %p succeeded via %a, closing relayed connection', relayedConnection.remotePeer, connection.remoteAddr);\n            await relayedConnection.close(options);\n        }\n        catch (err) {\n            this.log.error('incoming DCUtR from %p failed', relayedConnection.remotePeer, err);\n            stream.abort(err);\n        }\n        finally {\n            await stream.close(options);\n        }\n    }\n    /**\n     * Takes the `addr` and converts it to a Multiaddr if possible\n     */\n    getDialableMultiaddrs(addrs) {\n        const output = [];\n        for (const addr of addrs) {\n            if (addr == null || addr.length === 0) {\n                continue;\n            }\n            try {\n                const ma = (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(addr);\n                if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.isPublicAndDialable)(ma, this.transportManager)) {\n                    continue;\n                }\n                output.push(ma);\n            }\n            catch { }\n        }\n        return output;\n    }\n}\n//# sourceMappingURL=dcutr.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/dcutr/dist/src/dcutr.js?");

/***/ }),

/***/ "./node_modules/@libp2p/dcutr/dist/src/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@libp2p/dcutr/dist/src/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dcutr: () => (/* binding */ dcutr),\n/* harmony export */   multicodec: () => (/* binding */ multicodec)\n/* harmony export */ });\n/* harmony import */ var _dcutr_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dcutr.js */ \"./node_modules/@libp2p/dcutr/dist/src/dcutr.js\");\n/**\n * @packageDocumentation\n *\n * Direct Connection Upgrade through Relay (DCUtR) is a protocol that allows two\n * nodes to connect to each other who would otherwise be prevented doing so due\n * to being behind NATed connections or firewalls.\n *\n * The protocol involves making a relayed connection between the two peers and\n * using the relay to synchronise connection timings so that they dial each other\n * at precisely the same moment.\n *\n * @example\n *\n * ```TypeScript\n * import { createLibp2p } from 'libp2p'\n * import { circuitRelayTransport } from '@libp2p/circuit-relay-v2'\n * import { tcp } from '@libp2p/tcp'\n * import { identify } from '@libp2p/identify'\n * import { dcutr } from '@libp2p/dcutr'\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const node = await createLibp2p({\n *   transports: [\n *     circuitRelayTransport(),\n *     tcp()\n *   ],\n *   services: {\n *     identify: identify(),\n *     dcutr: dcutr()\n *   }\n * })\n *\n * // QmTarget is a peer that is behind a NAT, supports TCP and has a relay\n * // reservation\n * const ma = multiaddr('/ip4/.../p2p/QmRelay/p2p-circuit/p2p/QmTarget')\n * await node.dial(ma)\n *\n * // after a while the connection should automatically get upgraded to a\n * // direct connection (e.g. non-transient)\n * while (true) {\n *   const connections = node.getConnections()\n *\n *   if (connections.find(conn => conn.transient === false)) {\n *     console.info('have direct connection')\n *     break\n *   } else {\n *     console.info('have relayed connection')\n *\n *     // wait a few seconds to see if it's succeeded yet\n *     await new Promise<void>((resolve) => {\n *       setTimeout(() => resolve(), 5000)\n *     })\n *   }\n * }\n * ```\n */\n\n/**\n * The DCUtR protocol\n */\nconst multicodec = '/libp2p/dcutr';\nfunction dcutr(init = {}) {\n    return (components) => new _dcutr_js__WEBPACK_IMPORTED_MODULE_0__.DefaultDCUtRService(components, init);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/dcutr/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/dcutr/dist/src/pb/message.js":
/*!***********************************************************!*\
  !*** ./node_modules/@libp2p/dcutr/dist/src/pb/message.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HolePunch: () => (/* binding */ HolePunch)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nvar HolePunch;\n(function (HolePunch) {\n    let Type;\n    (function (Type) {\n        Type[\"UNUSED\"] = \"UNUSED\";\n        Type[\"CONNECT\"] = \"CONNECT\";\n        Type[\"SYNC\"] = \"SYNC\";\n    })(Type = HolePunch.Type || (HolePunch.Type = {}));\n    let __TypeValues;\n    (function (__TypeValues) {\n        __TypeValues[__TypeValues[\"UNUSED\"] = 0] = \"UNUSED\";\n        __TypeValues[__TypeValues[\"CONNECT\"] = 100] = \"CONNECT\";\n        __TypeValues[__TypeValues[\"SYNC\"] = 300] = \"SYNC\";\n    })(__TypeValues || (__TypeValues = {}));\n    (function (Type) {\n        Type.codec = () => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.enumeration)(__TypeValues);\n        };\n    })(Type = HolePunch.Type || (HolePunch.Type = {}));\n    let _codec;\n    HolePunch.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.type != null) {\n                    w.uint32(8);\n                    HolePunch.Type.codec().encode(obj.type, w);\n                }\n                if (obj.observedAddresses != null) {\n                    for (const value of obj.observedAddresses) {\n                        w.uint32(18);\n                        w.bytes(value);\n                    }\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    observedAddresses: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.type = HolePunch.Type.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.observedAddresses.push(reader.bytes());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    HolePunch.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, HolePunch.codec());\n    };\n    HolePunch.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, HolePunch.codec());\n    };\n})(HolePunch || (HolePunch = {}));\n//# sourceMappingURL=message.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/dcutr/dist/src/pb/message.js?");

/***/ }),

/***/ "./node_modules/@libp2p/dcutr/dist/src/utils.js":
/*!******************************************************!*\
  !*** ./node_modules/@libp2p/dcutr/dist/src/utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPublicAndDialable: () => (/* binding */ isPublicAndDialable)\n/* harmony export */ });\n/* harmony import */ var _libp2p_utils_private_ip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/utils/private-ip */ \"./node_modules/@libp2p/utils/dist/src/private-ip.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @multiformats/multiaddr-matcher */ \"./node_modules/@multiformats/multiaddr-matcher/dist/src/index.js\");\n\n\n\n/**\n * Returns true if the passed multiaddr is public, not relayed and we have a\n * transport that can dial it\n */\nfunction isPublicAndDialable(ma, transportManager) {\n    // ignore circuit relay\n    if (_multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_1__.Circuit.matches(ma)) {\n        return false;\n    }\n    const transport = transportManager.transportForMultiaddr(ma);\n    if (transport == null) {\n        return false;\n    }\n    // dns addresses are probably public?\n    if (_multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_1__.DNS.matches(ma)) {\n        return true;\n    }\n    // ensure we have only IPv4/IPv6 addresses\n    if (!_multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_1__.IP.matches(ma)) {\n        return false;\n    }\n    return (0,_libp2p_utils_private_ip__WEBPACK_IMPORTED_MODULE_2__.isPrivateIp)(ma.toOptions().host) === false;\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/dcutr/dist/src/utils.js?");

/***/ }),

/***/ "./node_modules/@libp2p/identify/dist/src/consts.js":
/*!**********************************************************!*\
  !*** ./node_modules/@libp2p/identify/dist/src/consts.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IDENTIFY_PROTOCOL_VERSION: () => (/* binding */ IDENTIFY_PROTOCOL_VERSION),\n/* harmony export */   MULTICODEC_IDENTIFY: () => (/* binding */ MULTICODEC_IDENTIFY),\n/* harmony export */   MULTICODEC_IDENTIFY_PROTOCOL_NAME: () => (/* binding */ MULTICODEC_IDENTIFY_PROTOCOL_NAME),\n/* harmony export */   MULTICODEC_IDENTIFY_PROTOCOL_VERSION: () => (/* binding */ MULTICODEC_IDENTIFY_PROTOCOL_VERSION),\n/* harmony export */   MULTICODEC_IDENTIFY_PUSH: () => (/* binding */ MULTICODEC_IDENTIFY_PUSH),\n/* harmony export */   MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME: () => (/* binding */ MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME),\n/* harmony export */   MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION: () => (/* binding */ MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION),\n/* harmony export */   PROTOCOL_VERSION: () => (/* binding */ PROTOCOL_VERSION)\n/* harmony export */ });\nconst PROTOCOL_VERSION = 'ipfs/0.1.0'; // deprecated\nconst MULTICODEC_IDENTIFY = '/ipfs/id/1.0.0'; // deprecated\nconst MULTICODEC_IDENTIFY_PUSH = '/ipfs/id/push/1.0.0'; // deprecated\nconst IDENTIFY_PROTOCOL_VERSION = '0.1.0';\nconst MULTICODEC_IDENTIFY_PROTOCOL_NAME = 'id';\nconst MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME = 'id/push';\nconst MULTICODEC_IDENTIFY_PROTOCOL_VERSION = '1.0.0';\nconst MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION = '1.0.0';\n//# sourceMappingURL=consts.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/identify/dist/src/consts.js?");

/***/ }),

/***/ "./node_modules/@libp2p/identify/dist/src/identify.js":
/*!************************************************************!*\
  !*** ./node_modules/@libp2p/identify/dist/src/identify.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Identify: () => (/* binding */ Identify)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/events.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/peer-record */ \"./node_modules/@libp2p/peer-record/dist/src/peer-record/index.js\");\n/* harmony import */ var _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/peer-record */ \"./node_modules/@libp2p/peer-record/dist/src/envelope/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @multiformats/multiaddr-matcher */ \"./node_modules/@multiformats/multiaddr-matcher/dist/src/index.js\");\n/* harmony import */ var it_protobuf_stream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! it-protobuf-stream */ \"./node_modules/it-protobuf-stream/dist/src/index.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var wherearewe__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! wherearewe */ \"./node_modules/wherearewe/src/index.js\");\n/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./consts.js */ \"./node_modules/@libp2p/identify/dist/src/consts.js\");\n/* harmony import */ var _pb_message_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./pb/message.js */ \"./node_modules/@libp2p/identify/dist/src/pb/message.js\");\n/* eslint-disable complexity */\n\n\n\n\n\n\n\n\n\n\n\n// https://github.com/libp2p/go-libp2p/blob/8d2e54e1637041d5cf4fac1e531287560bd1f4ac/p2p/protocol/identify/id.go#L52\nconst MAX_IDENTIFY_MESSAGE_SIZE = 1024 * 8;\nconst defaultValues = {\n    protocolPrefix: 'ipfs',\n    // https://github.com/libp2p/go-libp2p/blob/8d2e54e1637041d5cf4fac1e531287560bd1f4ac/p2p/protocol/identify/id.go#L48\n    timeout: 60000,\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1,\n    maxPushIncomingStreams: 1,\n    maxPushOutgoingStreams: 1,\n    maxObservedAddresses: 10,\n    maxIdentifyMessageSize: 8192,\n    runOnConnectionOpen: true,\n    runOnTransientConnection: true\n};\nclass Identify {\n    identifyProtocolStr;\n    identifyPushProtocolStr;\n    host;\n    started;\n    timeout;\n    peerId;\n    peerStore;\n    registrar;\n    connectionManager;\n    addressManager;\n    maxInboundStreams;\n    maxOutboundStreams;\n    maxPushIncomingStreams;\n    maxPushOutgoingStreams;\n    maxIdentifyMessageSize;\n    maxObservedAddresses;\n    events;\n    runOnTransientConnection;\n    log;\n    constructor(components, init = {}) {\n        this.started = false;\n        this.peerId = components.peerId;\n        this.peerStore = components.peerStore;\n        this.registrar = components.registrar;\n        this.addressManager = components.addressManager;\n        this.connectionManager = components.connectionManager;\n        this.events = components.events;\n        this.log = components.logger.forComponent('libp2p:identify');\n        this.identifyProtocolStr = `/${init.protocolPrefix ?? defaultValues.protocolPrefix}/${_consts_js__WEBPACK_IMPORTED_MODULE_6__.MULTICODEC_IDENTIFY_PROTOCOL_NAME}/${_consts_js__WEBPACK_IMPORTED_MODULE_6__.MULTICODEC_IDENTIFY_PROTOCOL_VERSION}`;\n        this.identifyPushProtocolStr = `/${init.protocolPrefix ?? defaultValues.protocolPrefix}/${_consts_js__WEBPACK_IMPORTED_MODULE_6__.MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME}/${_consts_js__WEBPACK_IMPORTED_MODULE_6__.MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION}`;\n        this.timeout = init.timeout ?? defaultValues.timeout;\n        this.maxInboundStreams = init.maxInboundStreams ?? defaultValues.maxInboundStreams;\n        this.maxOutboundStreams = init.maxOutboundStreams ?? defaultValues.maxOutboundStreams;\n        this.maxPushIncomingStreams = init.maxPushIncomingStreams ?? defaultValues.maxPushIncomingStreams;\n        this.maxPushOutgoingStreams = init.maxPushOutgoingStreams ?? defaultValues.maxPushOutgoingStreams;\n        this.maxIdentifyMessageSize = init.maxIdentifyMessageSize ?? defaultValues.maxIdentifyMessageSize;\n        this.maxObservedAddresses = init.maxObservedAddresses ?? defaultValues.maxObservedAddresses;\n        this.runOnTransientConnection = init.runOnTransientConnection ?? defaultValues.runOnTransientConnection;\n        // Store self host metadata\n        this.host = {\n            protocolVersion: `${init.protocolPrefix ?? defaultValues.protocolPrefix}/${_consts_js__WEBPACK_IMPORTED_MODULE_6__.IDENTIFY_PROTOCOL_VERSION}`,\n            agentVersion: init.agentVersion ?? `${components.nodeInfo.name}/${components.nodeInfo.version}`\n        };\n        if (init.runOnConnectionOpen ?? defaultValues.runOnConnectionOpen) {\n            // When a new connection happens, trigger identify\n            components.events.addEventListener('connection:open', (evt) => {\n                const connection = evt.detail;\n                this.identify(connection).catch(err => { this.log.error('error during identify trigged by connection:open', err); });\n            });\n        }\n        // When self peer record changes, trigger identify-push\n        components.events.addEventListener('self:peer:update', (evt) => {\n            void this.push().catch(err => { this.log.error(err); });\n        });\n        // Append user agent version to default AGENT_VERSION depending on the environment\n        if (this.host.agentVersion === `${components.nodeInfo.name}/${components.nodeInfo.version}`) {\n            if (wherearewe__WEBPACK_IMPORTED_MODULE_5__.isNode || wherearewe__WEBPACK_IMPORTED_MODULE_5__.isElectronMain) {\n                this.host.agentVersion += ` UserAgent=${globalThis.process.version}`;\n            }\n            else if (wherearewe__WEBPACK_IMPORTED_MODULE_5__.isBrowser || wherearewe__WEBPACK_IMPORTED_MODULE_5__.isWebWorker || wherearewe__WEBPACK_IMPORTED_MODULE_5__.isElectronRenderer || wherearewe__WEBPACK_IMPORTED_MODULE_5__.isReactNative) {\n                this.host.agentVersion += ` UserAgent=${globalThis.navigator.userAgent}`;\n            }\n        }\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        if (this.started) {\n            return;\n        }\n        await this.peerStore.merge(this.peerId, {\n            metadata: {\n                AgentVersion: (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(this.host.agentVersion),\n                ProtocolVersion: (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(this.host.protocolVersion)\n            }\n        });\n        await this.registrar.handle(this.identifyProtocolStr, (data) => {\n            void this._handleIdentify(data).catch(err => {\n                this.log.error(err);\n            });\n        }, {\n            maxInboundStreams: this.maxInboundStreams,\n            maxOutboundStreams: this.maxOutboundStreams,\n            runOnTransientConnection: this.runOnTransientConnection\n        });\n        await this.registrar.handle(this.identifyPushProtocolStr, (data) => {\n            void this._handlePush(data).catch(err => {\n                this.log.error(err);\n            });\n        }, {\n            maxInboundStreams: this.maxPushIncomingStreams,\n            maxOutboundStreams: this.maxPushOutgoingStreams,\n            runOnTransientConnection: this.runOnTransientConnection\n        });\n        this.started = true;\n    }\n    async stop() {\n        await this.registrar.unhandle(this.identifyProtocolStr);\n        await this.registrar.unhandle(this.identifyPushProtocolStr);\n        this.started = false;\n    }\n    /**\n     * Send an Identify Push update to the list of connections\n     */\n    async pushToConnections(connections) {\n        const listenAddresses = this.addressManager.getAddresses().map(ma => ma.decapsulateCode((0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)('p2p').code));\n        const peerRecord = new _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_7__.PeerRecord({\n            peerId: this.peerId,\n            multiaddrs: listenAddresses\n        });\n        const signedPeerRecord = await _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_8__.RecordEnvelope.seal(peerRecord, this.peerId);\n        const supportedProtocols = this.registrar.getProtocols();\n        const peer = await this.peerStore.get(this.peerId);\n        const agentVersion = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)(peer.metadata.get('AgentVersion') ?? (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(this.host.agentVersion));\n        const protocolVersion = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)(peer.metadata.get('ProtocolVersion') ?? (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(this.host.protocolVersion));\n        const pushes = connections.map(async (connection) => {\n            let stream;\n            const signal = AbortSignal.timeout(this.timeout);\n            (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.setMaxListeners)(Infinity, signal);\n            try {\n                stream = await connection.newStream(this.identifyPushProtocolStr, {\n                    signal,\n                    runOnTransientConnection: this.runOnTransientConnection\n                });\n                const pb = (0,it_protobuf_stream__WEBPACK_IMPORTED_MODULE_2__.pbStream)(stream, {\n                    maxDataLength: this.maxIdentifyMessageSize ?? MAX_IDENTIFY_MESSAGE_SIZE\n                }).pb(_pb_message_js__WEBPACK_IMPORTED_MODULE_10__.Identify);\n                await pb.write({\n                    listenAddrs: listenAddresses.map(ma => ma.bytes),\n                    signedPeerRecord: signedPeerRecord.marshal(),\n                    protocols: supportedProtocols,\n                    agentVersion,\n                    protocolVersion\n                }, {\n                    signal\n                });\n                await stream.close({\n                    signal\n                });\n            }\n            catch (err) {\n                // Just log errors\n                this.log.error('could not push identify update to peer', err);\n                stream?.abort(err);\n            }\n        });\n        await Promise.all(pushes);\n    }\n    /**\n     * Calls `push` on all peer connections\n     */\n    async push() {\n        // Do not try to push if we are not running\n        if (!this.isStarted()) {\n            return;\n        }\n        const connections = [];\n        await Promise.all(this.connectionManager.getConnections().map(async (conn) => {\n            try {\n                const peer = await this.peerStore.get(conn.remotePeer);\n                if (!peer.protocols.includes(this.identifyPushProtocolStr)) {\n                    return;\n                }\n                connections.push(conn);\n            }\n            catch (err) {\n                if (err.code !== _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.ERR_NOT_FOUND) {\n                    throw err;\n                }\n            }\n        }));\n        await this.pushToConnections(connections);\n    }\n    async _identify(connection, options = {}) {\n        let stream;\n        if (options.signal == null) {\n            const signal = AbortSignal.timeout(this.timeout);\n            (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.setMaxListeners)(Infinity, signal);\n            options = {\n                ...options,\n                signal\n            };\n        }\n        try {\n            stream = await connection.newStream(this.identifyProtocolStr, {\n                ...options,\n                runOnTransientConnection: this.runOnTransientConnection\n            });\n            const pb = (0,it_protobuf_stream__WEBPACK_IMPORTED_MODULE_2__.pbStream)(stream, {\n                maxDataLength: this.maxIdentifyMessageSize ?? MAX_IDENTIFY_MESSAGE_SIZE\n            }).pb(_pb_message_js__WEBPACK_IMPORTED_MODULE_10__.Identify);\n            const message = await pb.read(options);\n            await stream.close(options);\n            return message;\n        }\n        catch (err) {\n            this.log.error('error while reading identify message', err);\n            stream?.abort(err);\n            throw err;\n        }\n    }\n    async identify(connection, options = {}) {\n        const message = await this._identify(connection, options);\n        const { publicKey, protocols, observedAddr } = message;\n        if (publicKey == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('public key was missing from identify message', 'ERR_MISSING_PUBLIC_KEY');\n        }\n        const id = await (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_12__.peerIdFromKeys)(publicKey);\n        if (!connection.remotePeer.equals(id)) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('identified peer does not match the expected peer', 'ERR_INVALID_PEER');\n        }\n        if (this.peerId.equals(id)) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('identified peer is our own peer id?', 'ERR_INVALID_PEER');\n        }\n        // Get the observedAddr if there is one\n        const cleanObservedAddr = getCleanMultiaddr(observedAddr);\n        this.log('identify completed for peer %p and protocols %o', id, protocols);\n        this.log('our observed address is %a', cleanObservedAddr);\n        if (cleanObservedAddr != null &&\n            this.addressManager.getObservedAddrs().length < (this.maxObservedAddresses ?? Infinity)) {\n            this.log('storing our observed address %a', cleanObservedAddr);\n            this.addressManager.addObservedAddr(cleanObservedAddr);\n        }\n        return this.#consumeIdentifyMessage(connection, message);\n    }\n    /**\n     * Sends the `Identify` response with the Signed Peer Record\n     * to the requesting peer over the given `connection`\n     */\n    async _handleIdentify(data) {\n        const { connection, stream } = data;\n        const signal = AbortSignal.timeout(this.timeout);\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.setMaxListeners)(Infinity, signal);\n        try {\n            const publicKey = this.peerId.publicKey ?? new Uint8Array(0);\n            const peerData = await this.peerStore.get(this.peerId);\n            const multiaddrs = this.addressManager.getAddresses().map(ma => ma.decapsulateCode((0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)('p2p').code));\n            let signedPeerRecord = peerData.peerRecordEnvelope;\n            if (multiaddrs.length > 0 && signedPeerRecord == null) {\n                const peerRecord = new _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_7__.PeerRecord({\n                    peerId: this.peerId,\n                    multiaddrs\n                });\n                const envelope = await _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_8__.RecordEnvelope.seal(peerRecord, this.peerId);\n                signedPeerRecord = envelope.marshal().subarray();\n            }\n            let observedAddr = connection.remoteAddr.bytes;\n            if (!_multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_1__.IP_OR_DOMAIN.matches(connection.remoteAddr)) {\n                observedAddr = undefined;\n            }\n            const pb = (0,it_protobuf_stream__WEBPACK_IMPORTED_MODULE_2__.pbStream)(stream).pb(_pb_message_js__WEBPACK_IMPORTED_MODULE_10__.Identify);\n            await pb.write({\n                protocolVersion: this.host.protocolVersion,\n                agentVersion: this.host.agentVersion,\n                publicKey,\n                listenAddrs: multiaddrs.map(addr => addr.bytes),\n                signedPeerRecord,\n                observedAddr,\n                protocols: peerData.protocols\n            }, {\n                signal\n            });\n            await stream.close({\n                signal\n            });\n        }\n        catch (err) {\n            this.log.error('could not respond to identify request', err);\n            stream.abort(err);\n        }\n    }\n    /**\n     * Reads the Identify Push message from the given `connection`\n     */\n    async _handlePush(data) {\n        const { connection, stream } = data;\n        try {\n            if (this.peerId.equals(connection.remotePeer)) {\n                throw new Error('received push from ourselves?');\n            }\n            const options = {\n                signal: AbortSignal.timeout(this.timeout)\n            };\n            const pb = (0,it_protobuf_stream__WEBPACK_IMPORTED_MODULE_2__.pbStream)(stream, {\n                maxDataLength: this.maxIdentifyMessageSize ?? MAX_IDENTIFY_MESSAGE_SIZE\n            }).pb(_pb_message_js__WEBPACK_IMPORTED_MODULE_10__.Identify);\n            const message = await pb.read(options);\n            await stream.close(options);\n            await this.#consumeIdentifyMessage(connection, message);\n        }\n        catch (err) {\n            this.log.error('received invalid message', err);\n            stream.abort(err);\n            return;\n        }\n        this.log('handled push from %p', connection.remotePeer);\n    }\n    async #consumeIdentifyMessage(connection, message) {\n        this.log('received identify from %p', connection.remotePeer);\n        if (message == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('message was null or undefined', 'ERR_INVALID_MESSAGE');\n        }\n        const peer = {};\n        if (message.listenAddrs.length > 0) {\n            peer.addresses = message.listenAddrs.map(buf => ({\n                isCertified: false,\n                multiaddr: (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(buf)\n            }));\n        }\n        if (message.protocols.length > 0) {\n            peer.protocols = message.protocols;\n        }\n        if (message.publicKey != null) {\n            peer.publicKey = message.publicKey;\n            const peerId = await (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_12__.peerIdFromKeys)(message.publicKey);\n            if (!peerId.equals(connection.remotePeer)) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('public key did not match remote PeerId', 'ERR_INVALID_PUBLIC_KEY');\n            }\n        }\n        let output;\n        // if the peer record has been sent, prefer the addresses in the record as they are signed by the remote peer\n        if (message.signedPeerRecord != null) {\n            this.log('received signedPeerRecord from %p', connection.remotePeer);\n            let peerRecordEnvelope = message.signedPeerRecord;\n            const envelope = await _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_8__.RecordEnvelope.openAndCertify(peerRecordEnvelope, _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_7__.PeerRecord.DOMAIN);\n            let peerRecord = _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_7__.PeerRecord.createFromProtobuf(envelope.payload);\n            // Verify peerId\n            if (!peerRecord.peerId.equals(envelope.peerId)) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('signing key does not match PeerId in the PeerRecord', 'ERR_INVALID_SIGNING_KEY');\n            }\n            // Make sure remote peer is the one sending the record\n            if (!connection.remotePeer.equals(peerRecord.peerId)) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('signing key does not match remote PeerId', 'ERR_INVALID_PEER_RECORD_KEY');\n            }\n            let existingPeer;\n            try {\n                existingPeer = await this.peerStore.get(peerRecord.peerId);\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n            if (existingPeer != null) {\n                // don't lose any existing metadata\n                peer.metadata = existingPeer.metadata;\n                // if we have previously received a signed record for this peer, compare it to the incoming one\n                if (existingPeer.peerRecordEnvelope != null) {\n                    const storedEnvelope = await _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_8__.RecordEnvelope.createFromProtobuf(existingPeer.peerRecordEnvelope);\n                    const storedRecord = _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_7__.PeerRecord.createFromProtobuf(storedEnvelope.payload);\n                    // ensure seq is greater than, or equal to, the last received\n                    if (storedRecord.seqNumber >= peerRecord.seqNumber) {\n                        this.log('sequence number was lower or equal to existing sequence number - stored: %d received: %d', storedRecord.seqNumber, peerRecord.seqNumber);\n                        peerRecord = storedRecord;\n                        peerRecordEnvelope = existingPeer.peerRecordEnvelope;\n                    }\n                }\n            }\n            // store the signed record for next time\n            peer.peerRecordEnvelope = peerRecordEnvelope;\n            // override the stored addresses with the signed multiaddrs\n            peer.addresses = peerRecord.multiaddrs.map(multiaddr => ({\n                isCertified: true,\n                multiaddr\n            }));\n            output = {\n                seq: peerRecord.seqNumber,\n                addresses: peerRecord.multiaddrs\n            };\n        }\n        else {\n            this.log('%p did not send a signed peer record', connection.remotePeer);\n        }\n        this.log('patching %p with', connection.remotePeer, peer);\n        await this.peerStore.patch(connection.remotePeer, peer);\n        if (message.agentVersion != null || message.protocolVersion != null) {\n            const metadata = {};\n            if (message.agentVersion != null) {\n                metadata.AgentVersion = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(message.agentVersion);\n            }\n            if (message.protocolVersion != null) {\n                metadata.ProtocolVersion = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(message.protocolVersion);\n            }\n            this.log('merging %p metadata', connection.remotePeer, metadata);\n            await this.peerStore.merge(connection.remotePeer, {\n                metadata\n            });\n        }\n        const result = {\n            peerId: connection.remotePeer,\n            protocolVersion: message.protocolVersion,\n            agentVersion: message.agentVersion,\n            publicKey: message.publicKey,\n            listenAddrs: message.listenAddrs.map(buf => (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(buf)),\n            observedAddr: message.observedAddr == null ? undefined : (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(message.observedAddr),\n            protocols: message.protocols,\n            signedPeerRecord: output,\n            connection\n        };\n        this.events.safeDispatchEvent('peer:identify', { detail: result });\n        return result;\n    }\n}\n/**\n * Takes the `addr` and converts it to a Multiaddr if possible\n */\nfunction getCleanMultiaddr(addr) {\n    if (addr != null && addr.length > 0) {\n        try {\n            return (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(addr);\n        }\n        catch {\n        }\n    }\n}\n//# sourceMappingURL=identify.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/identify/dist/src/identify.js?");

/***/ }),

/***/ "./node_modules/@libp2p/identify/dist/src/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@libp2p/identify/dist/src/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   identify: () => (/* binding */ identify),\n/* harmony export */   multicodecs: () => (/* binding */ multicodecs)\n/* harmony export */ });\n/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./consts.js */ \"./node_modules/@libp2p/identify/dist/src/consts.js\");\n/* harmony import */ var _identify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./identify.js */ \"./node_modules/@libp2p/identify/dist/src/identify.js\");\n/**\n * @packageDocumentation\n *\n * Use the `identify` function to add support for the [Identify protocol](https://github.com/libp2p/specs/blob/master/identify/README.md) to libp2p.\n *\n * @example\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n * import { identify } from '@libp2p/identify'\n *\n * const node = await createLibp2p({\n *   // ...other options\n *   services: {\n *     identify: identify()\n *   }\n * })\n * ```\n */\n\n\n/**\n * The protocols the Identify service supports\n */\nconst multicodecs = {\n    IDENTIFY: _consts_js__WEBPACK_IMPORTED_MODULE_0__.MULTICODEC_IDENTIFY,\n    IDENTIFY_PUSH: _consts_js__WEBPACK_IMPORTED_MODULE_0__.MULTICODEC_IDENTIFY_PUSH\n};\nfunction identify(init = {}) {\n    return (components) => new _identify_js__WEBPACK_IMPORTED_MODULE_1__.Identify(components, init);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/identify/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/identify/dist/src/pb/message.js":
/*!**************************************************************!*\
  !*** ./node_modules/@libp2p/identify/dist/src/pb/message.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Identify: () => (/* binding */ Identify)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nvar Identify;\n(function (Identify) {\n    let _codec;\n    Identify.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.protocolVersion != null) {\n                    w.uint32(42);\n                    w.string(obj.protocolVersion);\n                }\n                if (obj.agentVersion != null) {\n                    w.uint32(50);\n                    w.string(obj.agentVersion);\n                }\n                if (obj.publicKey != null) {\n                    w.uint32(10);\n                    w.bytes(obj.publicKey);\n                }\n                if (obj.listenAddrs != null) {\n                    for (const value of obj.listenAddrs) {\n                        w.uint32(18);\n                        w.bytes(value);\n                    }\n                }\n                if (obj.observedAddr != null) {\n                    w.uint32(34);\n                    w.bytes(obj.observedAddr);\n                }\n                if (obj.protocols != null) {\n                    for (const value of obj.protocols) {\n                        w.uint32(26);\n                        w.string(value);\n                    }\n                }\n                if (obj.signedPeerRecord != null) {\n                    w.uint32(66);\n                    w.bytes(obj.signedPeerRecord);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    listenAddrs: [],\n                    protocols: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 5:\n                            obj.protocolVersion = reader.string();\n                            break;\n                        case 6:\n                            obj.agentVersion = reader.string();\n                            break;\n                        case 1:\n                            obj.publicKey = reader.bytes();\n                            break;\n                        case 2:\n                            obj.listenAddrs.push(reader.bytes());\n                            break;\n                        case 4:\n                            obj.observedAddr = reader.bytes();\n                            break;\n                        case 3:\n                            obj.protocols.push(reader.string());\n                            break;\n                        case 8:\n                            obj.signedPeerRecord = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Identify.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Identify.codec());\n    };\n    Identify.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Identify.codec());\n    };\n})(Identify || (Identify = {}));\n//# sourceMappingURL=message.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/identify/dist/src/pb/message.js?");

/***/ }),

/***/ "./node_modules/@libp2p/interface/dist/src/connection/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@libp2p/interface/dist/src/connection/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   connectionSymbol: () => (/* binding */ connectionSymbol),\n/* harmony export */   isConnection: () => (/* binding */ isConnection)\n/* harmony export */ });\nconst connectionSymbol = Symbol.for('@libp2p/connection');\nfunction isConnection(other) {\n    return other != null && Boolean(other[connectionSymbol]);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/interface/dist/src/connection/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/interface/dist/src/content-routing/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@libp2p/interface/dist/src/content-routing/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   contentRoutingSymbol: () => (/* binding */ contentRoutingSymbol)\n/* harmony export */ });\n/**\n * Any object that implements this Symbol as a property should return a\n * ContentRouting instance as the property value, similar to how\n * `Symbol.Iterable` can be used to return an `Iterable` from an `Iterator`.\n *\n * @example\n *\n * ```TypeScript\n * import { contentRoutingSymbol, ContentRouting } from '@libp2p/content-routing'\n *\n * class MyContentRouter implements ContentRouting {\n *   get [contentRoutingSymbol] () {\n *     return this\n *   }\n *\n *   // ...other methods\n * }\n * ```\n */\nconst contentRoutingSymbol = Symbol.for('@libp2p/content-routing');\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/interface/dist/src/content-routing/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/interface/dist/src/errors.js":
/*!***********************************************************!*\
  !*** ./node_modules/@libp2p/interface/dist/src/errors.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError),\n/* harmony export */   AggregateCodeError: () => (/* binding */ AggregateCodeError),\n/* harmony export */   CodeError: () => (/* binding */ CodeError),\n/* harmony export */   ERR_INVALID_MESSAGE: () => (/* binding */ ERR_INVALID_MESSAGE),\n/* harmony export */   ERR_INVALID_PARAMETERS: () => (/* binding */ ERR_INVALID_PARAMETERS),\n/* harmony export */   ERR_NOT_FOUND: () => (/* binding */ ERR_NOT_FOUND),\n/* harmony export */   ERR_TIMEOUT: () => (/* binding */ ERR_TIMEOUT),\n/* harmony export */   InvalidCryptoExchangeError: () => (/* binding */ InvalidCryptoExchangeError),\n/* harmony export */   InvalidCryptoTransmissionError: () => (/* binding */ InvalidCryptoTransmissionError),\n/* harmony export */   UnexpectedPeerError: () => (/* binding */ UnexpectedPeerError)\n/* harmony export */ });\n/**\n * When this error is thrown it means an operation was aborted,\n * usually in response to the `abort` event being emitted by an\n * AbortSignal.\n */\nclass AbortError extends Error {\n    code;\n    type;\n    constructor(message = 'The operation was aborted') {\n        super(message);\n        this.name = 'AbortError';\n        this.code = AbortError.code;\n        this.type = AbortError.type;\n    }\n    static code = 'ABORT_ERR';\n    static type = 'aborted';\n}\nclass CodeError extends Error {\n    code;\n    props;\n    constructor(message, code, props) {\n        super(message);\n        this.code = code;\n        this.name = props?.name ?? 'CodeError';\n        this.props = props ?? {}; // eslint-disable-line @typescript-eslint/consistent-type-assertions\n    }\n}\nclass AggregateCodeError extends AggregateError {\n    code;\n    props;\n    constructor(errors, message, code, props) {\n        super(errors, message);\n        this.code = code;\n        this.name = props?.name ?? 'AggregateCodeError';\n        this.props = props ?? {}; // eslint-disable-line @typescript-eslint/consistent-type-assertions\n    }\n}\nclass UnexpectedPeerError extends Error {\n    code;\n    constructor(message = 'Unexpected Peer') {\n        super(message);\n        this.name = 'UnexpectedPeerError';\n        this.code = UnexpectedPeerError.code;\n    }\n    static code = 'ERR_UNEXPECTED_PEER';\n}\nclass InvalidCryptoExchangeError extends Error {\n    code;\n    constructor(message = 'Invalid crypto exchange') {\n        super(message);\n        this.name = 'InvalidCryptoExchangeError';\n        this.code = InvalidCryptoExchangeError.code;\n    }\n    static code = 'ERR_INVALID_CRYPTO_EXCHANGE';\n}\nclass InvalidCryptoTransmissionError extends Error {\n    code;\n    constructor(message = 'Invalid crypto transmission') {\n        super(message);\n        this.name = 'InvalidCryptoTransmissionError';\n        this.code = InvalidCryptoTransmissionError.code;\n    }\n    static code = 'ERR_INVALID_CRYPTO_TRANSMISSION';\n}\n// Error codes\nconst ERR_TIMEOUT = 'ERR_TIMEOUT';\nconst ERR_INVALID_PARAMETERS = 'ERR_INVALID_PARAMETERS';\nconst ERR_NOT_FOUND = 'ERR_NOT_FOUND';\nconst ERR_INVALID_MESSAGE = 'ERR_INVALID_MESSAGE';\n//# sourceMappingURL=errors.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/interface/dist/src/errors.js?");

/***/ }),

/***/ "./node_modules/@libp2p/interface/dist/src/event-target.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@libp2p/interface/dist/src/event-target.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomEvent: () => (/* binding */ CustomEvent),\n/* harmony export */   TypedEventEmitter: () => (/* binding */ TypedEventEmitter)\n/* harmony export */ });\n/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events.js */ \"./node_modules/@libp2p/interface/dist/src/events.js\");\n\n/**\n * An implementation of a typed event target\n * etc\n */\nclass TypedEventEmitter extends EventTarget {\n    #listeners = new Map();\n    constructor() {\n        super();\n        // silence MaxListenersExceededWarning warning on Node.js, this is a red\n        // herring almost all of the time\n        (0,_events_js__WEBPACK_IMPORTED_MODULE_0__.setMaxListeners)(Infinity, this);\n    }\n    listenerCount(type) {\n        const listeners = this.#listeners.get(type);\n        if (listeners == null) {\n            return 0;\n        }\n        return listeners.length;\n    }\n    addEventListener(type, listener, options) {\n        super.addEventListener(type, listener, options);\n        let list = this.#listeners.get(type);\n        if (list == null) {\n            list = [];\n            this.#listeners.set(type, list);\n        }\n        list.push({\n            callback: listener,\n            once: (options !== true && options !== false && options?.once) ?? false\n        });\n    }\n    removeEventListener(type, listener, options) {\n        super.removeEventListener(type.toString(), listener ?? null, options);\n        let list = this.#listeners.get(type);\n        if (list == null) {\n            return;\n        }\n        list = list.filter(({ callback }) => callback !== listener);\n        this.#listeners.set(type, list);\n    }\n    dispatchEvent(event) {\n        const result = super.dispatchEvent(event);\n        let list = this.#listeners.get(event.type);\n        if (list == null) {\n            return result;\n        }\n        list = list.filter(({ once }) => !once);\n        this.#listeners.set(event.type, list);\n        return result;\n    }\n    safeDispatchEvent(type, detail = {}) {\n        return this.dispatchEvent(new CustomEvent(type, detail));\n    }\n}\n/**\n * CustomEvent is a standard event but it's not supported by node.\n *\n * Remove this when https://github.com/nodejs/node/issues/40678 is closed.\n *\n * Ref: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n */\nclass CustomEventPolyfill extends Event {\n    /** Returns any custom data event was created with. Typically used for synthetic events. */\n    detail;\n    constructor(message, data) {\n        super(message, data);\n        // @ts-expect-error could be undefined\n        this.detail = data?.detail;\n    }\n}\nconst CustomEvent = globalThis.CustomEvent ?? CustomEventPolyfill;\n//# sourceMappingURL=event-target.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/interface/dist/src/event-target.js?");

/***/ }),

/***/ "./node_modules/@libp2p/interface/dist/src/events.browser.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@libp2p/interface/dist/src/events.browser.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setMaxListeners: () => (/* binding */ setMaxListeners)\n/* harmony export */ });\n/** Noop for browser compatibility */\nfunction setMaxListeners() { }\n//# sourceMappingURL=events.browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/interface/dist/src/events.browser.js?");

/***/ }),

/***/ "./node_modules/@libp2p/interface/dist/src/events.js":
/*!***********************************************************!*\
  !*** ./node_modules/@libp2p/interface/dist/src/events.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setMaxListeners: () => (/* binding */ setMaxListeners)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"./node_modules/@libp2p/interface/dist/src/events.browser.js\");\n\n// create a setMaxListeners that doesn't break browser usage\nconst setMaxListeners = (n, ...eventTargets) => {\n    try {\n        (0,events__WEBPACK_IMPORTED_MODULE_0__.setMaxListeners)(n, ...eventTargets);\n    }\n    catch {\n        // swallow error, gulp\n    }\n};\n//# sourceMappingURL=events.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/interface/dist/src/events.js?");

/***/ }),

/***/ "./node_modules/@libp2p/interface/dist/src/peer-discovery/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@libp2p/interface/dist/src/peer-discovery/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   peerDiscoverySymbol: () => (/* binding */ peerDiscoverySymbol)\n/* harmony export */ });\n/**\n * Any object that implements this Symbol as a property should return a\n * PeerDiscovery instance as the property value, similar to how\n * `Symbol.Iterable` can be used to return an `Iterable` from an `Iterator`.\n *\n * @example\n *\n * ```TypeScript\n * import { peerDiscovery, PeerDiscovery } from '@libp2p/peer-discovery'\n *\n * class MyPeerDiscoverer implements PeerDiscovery {\n *   get [peerDiscovery] () {\n *     return this\n *   }\n *\n *   // ...other methods\n * }\n * ```\n */\nconst peerDiscoverySymbol = Symbol.for('@libp2p/peer-discovery');\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/interface/dist/src/peer-discovery/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/interface/dist/src/peer-id/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@libp2p/interface/dist/src/peer-id/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPeerId: () => (/* binding */ isPeerId),\n/* harmony export */   peerIdSymbol: () => (/* binding */ peerIdSymbol)\n/* harmony export */ });\nconst peerIdSymbol = Symbol.for('@libp2p/peer-id');\nfunction isPeerId(other) {\n    return other != null && Boolean(other[peerIdSymbol]);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/interface/dist/src/peer-id/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/interface/dist/src/peer-routing/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@libp2p/interface/dist/src/peer-routing/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   peerRoutingSymbol: () => (/* binding */ peerRoutingSymbol)\n/* harmony export */ });\n/**\n * Any object that implements this Symbol as a property should return a\n * PeerRouting instance as the property value, similar to how\n * `Symbol.Iterable` can be used to return an `Iterable` from an `Iterator`.\n *\n * @example\n *\n * ```TypeScript\n * import { peerRouting, PeerRouting } from '@libp2p/peer-routing'\n *\n * class MyPeerRouter implements PeerRouting {\n *   get [peerRouting] () {\n *     return this\n *   }\n *\n *   // ...other methods\n * }\n * ```\n */\nconst peerRoutingSymbol = Symbol.for('@libp2p/peer-routing');\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/interface/dist/src/peer-routing/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/interface/dist/src/peer-store/tags.js":
/*!********************************************************************!*\
  !*** ./node_modules/@libp2p/interface/dist/src/peer-store/tags.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KEEP_ALIVE: () => (/* binding */ KEEP_ALIVE)\n/* harmony export */ });\nconst KEEP_ALIVE = 'keep-alive';\n//# sourceMappingURL=tags.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/interface/dist/src/peer-store/tags.js?");

/***/ }),

/***/ "./node_modules/@libp2p/interface/dist/src/startable.js":
/*!**************************************************************!*\
  !*** ./node_modules/@libp2p/interface/dist/src/startable.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isStartable: () => (/* binding */ isStartable),\n/* harmony export */   start: () => (/* binding */ start),\n/* harmony export */   stop: () => (/* binding */ stop)\n/* harmony export */ });\nfunction isStartable(obj) {\n    return obj != null && typeof obj.start === 'function' && typeof obj.stop === 'function';\n}\nasync function start(...objs) {\n    const startables = [];\n    for (const obj of objs) {\n        if (isStartable(obj)) {\n            startables.push(obj);\n        }\n    }\n    await Promise.all(startables.map(async (s) => {\n        if (s.beforeStart != null) {\n            await s.beforeStart();\n        }\n    }));\n    await Promise.all(startables.map(async (s) => {\n        await s.start();\n    }));\n    await Promise.all(startables.map(async (s) => {\n        if (s.afterStart != null) {\n            await s.afterStart();\n        }\n    }));\n}\nasync function stop(...objs) {\n    const startables = [];\n    for (const obj of objs) {\n        if (isStartable(obj)) {\n            startables.push(obj);\n        }\n    }\n    await Promise.all(startables.map(async (s) => {\n        if (s.beforeStop != null) {\n            await s.beforeStop();\n        }\n    }));\n    await Promise.all(startables.map(async (s) => {\n        await s.stop();\n    }));\n    await Promise.all(startables.map(async (s) => {\n        if (s.afterStop != null) {\n            await s.afterStop();\n        }\n    }));\n}\n//# sourceMappingURL=startable.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/interface/dist/src/startable.js?");

/***/ }),

/***/ "./node_modules/@libp2p/interface/dist/src/transport/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@libp2p/interface/dist/src/transport/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FaultTolerance: () => (/* binding */ FaultTolerance),\n/* harmony export */   isTransport: () => (/* binding */ isTransport),\n/* harmony export */   transportSymbol: () => (/* binding */ transportSymbol)\n/* harmony export */ });\nconst transportSymbol = Symbol.for('@libp2p/transport');\nfunction isTransport(other) {\n    return other != null && Boolean(other[transportSymbol]);\n}\n/**\n * Enum Transport Manager Fault Tolerance values\n */\nvar FaultTolerance;\n(function (FaultTolerance) {\n    /**\n     * should be used for failing in any listen circumstance\n     */\n    FaultTolerance[FaultTolerance[\"FATAL_ALL\"] = 0] = \"FATAL_ALL\";\n    /**\n     * should be used for not failing when not listening\n     */\n    FaultTolerance[FaultTolerance[\"NO_FATAL\"] = 1] = \"NO_FATAL\";\n})(FaultTolerance || (FaultTolerance = {}));\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/interface/dist/src/transport/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/constants.js":
/*!************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/constants.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALPHA: () => (/* binding */ ALPHA),\n/* harmony export */   DEFAULT_QUERY_TIMEOUT: () => (/* binding */ DEFAULT_QUERY_TIMEOUT),\n/* harmony export */   GET_MANY_RECORD_COUNT: () => (/* binding */ GET_MANY_RECORD_COUNT),\n/* harmony export */   K: () => (/* binding */ K),\n/* harmony export */   MAX_RECORD_AGE: () => (/* binding */ MAX_RECORD_AGE),\n/* harmony export */   PROTOCOL: () => (/* binding */ PROTOCOL),\n/* harmony export */   PROVIDERS_CLEANUP_INTERVAL: () => (/* binding */ PROVIDERS_CLEANUP_INTERVAL),\n/* harmony export */   PROVIDERS_LRU_CACHE_SIZE: () => (/* binding */ PROVIDERS_LRU_CACHE_SIZE),\n/* harmony export */   PROVIDERS_VALIDITY: () => (/* binding */ PROVIDERS_VALIDITY),\n/* harmony export */   PROVIDER_KEY_PREFIX: () => (/* binding */ PROVIDER_KEY_PREFIX),\n/* harmony export */   QUERY_SELF_INITIAL_INTERVAL: () => (/* binding */ QUERY_SELF_INITIAL_INTERVAL),\n/* harmony export */   QUERY_SELF_INTERVAL: () => (/* binding */ QUERY_SELF_INTERVAL),\n/* harmony export */   QUERY_SELF_TIMEOUT: () => (/* binding */ QUERY_SELF_TIMEOUT),\n/* harmony export */   READ_MESSAGE_TIMEOUT: () => (/* binding */ READ_MESSAGE_TIMEOUT),\n/* harmony export */   RECORD_KEY_PREFIX: () => (/* binding */ RECORD_KEY_PREFIX),\n/* harmony export */   TABLE_REFRESH_INTERVAL: () => (/* binding */ TABLE_REFRESH_INTERVAL),\n/* harmony export */   TABLE_REFRESH_QUERY_TIMEOUT: () => (/* binding */ TABLE_REFRESH_QUERY_TIMEOUT),\n/* harmony export */   hour: () => (/* binding */ hour),\n/* harmony export */   minute: () => (/* binding */ minute),\n/* harmony export */   second: () => (/* binding */ second)\n/* harmony export */ });\n// MaxRecordAge specifies the maximum time that any node will hold onto a record\n// from the time its received. This does not apply to any other forms of validity that\n// the record may contain.\n// For example, a record may contain an ipns entry with an EOL saying its valid\n// until the year 2020 (a great time in the future). For that record to stick around\n// it must be rebroadcasted more frequently than once every 'MaxRecordAge'\nconst second = 1000;\nconst minute = 60 * second;\nconst hour = 60 * minute;\nconst MAX_RECORD_AGE = 36 * hour;\nconst PROTOCOL = '/ipfs/kad/1.0.0';\nconst RECORD_KEY_PREFIX = '/dht/record';\nconst PROVIDER_KEY_PREFIX = '/dht/provider';\nconst PROVIDERS_LRU_CACHE_SIZE = 256;\nconst PROVIDERS_VALIDITY = 24 * hour;\nconst PROVIDERS_CLEANUP_INTERVAL = hour;\nconst READ_MESSAGE_TIMEOUT = 10 * second;\n// The number of records that will be retrieved on a call to getMany()\nconst GET_MANY_RECORD_COUNT = 16;\n// K is the maximum number of requests to perform before returning failure\nconst K = 20;\n// Alpha is the concurrency for asynchronous requests\nconst ALPHA = 3;\n// How often we look for our closest DHT neighbours\nconst QUERY_SELF_INTERVAL = 5 * minute;\n// How often we look for the first set of our closest DHT neighbours\nconst QUERY_SELF_INITIAL_INTERVAL = second;\n// How long to look for our closest DHT neighbours for\nconst QUERY_SELF_TIMEOUT = 5 * second;\n// How often we try to find new peers\nconst TABLE_REFRESH_INTERVAL = 5 * minute;\n// How how long to look for new peers for\nconst TABLE_REFRESH_QUERY_TIMEOUT = 30 * second;\n// When a timeout is not specified, run a query for this long\nconst DEFAULT_QUERY_TIMEOUT = 30 * second;\n//# sourceMappingURL=constants.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/constants.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/content-fetching/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/content-fetching/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentFetching: () => (/* binding */ ContentFetching)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_record__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/record */ \"./node_modules/@libp2p/record/dist/src/index.js\");\n/* harmony import */ var it_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-map */ \"./node_modules/it-map/dist/src/index.js\");\n/* harmony import */ var it_parallel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-parallel */ \"./node_modules/it-parallel/dist/src/index.js\");\n/* harmony import */ var it_pipe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! it-pipe */ \"./node_modules/it-pipe/dist/src/index.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/@libp2p/kad-dht/dist/src/constants.js\");\n/* harmony import */ var _message_dht_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../message/dht.js */ \"./node_modules/@libp2p/kad-dht/dist/src/message/dht.js\");\n/* harmony import */ var _query_events_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../query/events.js */ \"./node_modules/@libp2p/kad-dht/dist/src/query/events.js\");\n/* harmony import */ var _record_selectors_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../record/selectors.js */ \"./node_modules/@libp2p/kad-dht/dist/src/record/selectors.js\");\n/* harmony import */ var _record_validators_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../record/validators.js */ \"./node_modules/@libp2p/kad-dht/dist/src/record/validators.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/@libp2p/kad-dht/dist/src/utils.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nclass ContentFetching {\n    log;\n    components;\n    validators;\n    selectors;\n    peerRouting;\n    queryManager;\n    network;\n    constructor(components, init) {\n        const { validators, selectors, peerRouting, queryManager, network, logPrefix } = init;\n        this.components = components;\n        this.log = components.logger.forComponent(`${logPrefix}:content-fetching`);\n        this.validators = validators;\n        this.selectors = selectors;\n        this.peerRouting = peerRouting;\n        this.queryManager = queryManager;\n        this.network = network;\n    }\n    /**\n     * Attempt to retrieve the value for the given key from\n     * the local datastore\n     */\n    async getLocal(key) {\n        this.log('getLocal %b', key);\n        const dsKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.bufferToRecordKey)(key);\n        this.log('fetching record for key %k', dsKey);\n        const raw = await this.components.datastore.get(dsKey);\n        this.log('found %k in local datastore', dsKey);\n        const rec = _libp2p_record__WEBPACK_IMPORTED_MODULE_5__.Libp2pRecord.deserialize(raw);\n        await (0,_record_validators_js__WEBPACK_IMPORTED_MODULE_6__.verifyRecord)(this.validators, rec);\n        return rec;\n    }\n    /**\n     * Send the best record found to any peers that have an out of date record\n     */\n    async *sendCorrectionRecord(key, vals, best, options = {}) {\n        this.log('sendCorrection for %b', key);\n        const fixupRec = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.createPutRecord)(key, best);\n        for (const { value, from } of vals) {\n            // no need to do anything\n            if ((0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_3__.equals)(value, best)) {\n                this.log('record was ok');\n                continue;\n            }\n            // correct ourself\n            if (this.components.peerId.equals(from)) {\n                try {\n                    const dsKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.bufferToRecordKey)(key);\n                    this.log(`Storing corrected record for key ${dsKey.toString()}`);\n                    await this.components.datastore.put(dsKey, fixupRec.subarray());\n                }\n                catch (err) {\n                    this.log.error('Failed error correcting self', err);\n                }\n                continue;\n            }\n            // send correction\n            let sentCorrection = false;\n            const request = {\n                type: _message_dht_js__WEBPACK_IMPORTED_MODULE_7__.MessageType.PUT_VALUE,\n                key,\n                record: fixupRec\n            };\n            for await (const event of this.network.sendRequest(from, request, options)) {\n                if (event.name === 'PEER_RESPONSE' && (event.record != null) && (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_3__.equals)(event.record.value, _libp2p_record__WEBPACK_IMPORTED_MODULE_5__.Libp2pRecord.deserialize(fixupRec).value)) {\n                    sentCorrection = true;\n                }\n                yield event;\n            }\n            if (!sentCorrection) {\n                yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_8__.queryErrorEvent)({ from, error: new _libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.CodeError('value not put correctly', 'ERR_PUT_VALUE_INVALID') }, options);\n            }\n            this.log.error('Failed error correcting entry');\n        }\n    }\n    /**\n     * Store the given key/value pair in the DHT\n     */\n    async *put(key, value, options = {}) {\n        this.log('put key %b value %b', key, value);\n        // create record in the dht format\n        const record = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.createPutRecord)(key, value);\n        // store the record locally\n        const dsKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.bufferToRecordKey)(key);\n        this.log(`storing record for key ${dsKey.toString()}`);\n        await this.components.datastore.put(dsKey, record.subarray());\n        // put record to the closest peers\n        yield* (0,it_pipe__WEBPACK_IMPORTED_MODULE_2__.pipe)(this.peerRouting.getClosestPeers(key, { signal: options.signal }), (source) => (0,it_map__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(source, (event) => {\n            return async () => {\n                if (event.name !== 'FINAL_PEER') {\n                    return [event];\n                }\n                const events = [];\n                const msg = {\n                    type: _message_dht_js__WEBPACK_IMPORTED_MODULE_7__.MessageType.PUT_VALUE,\n                    key,\n                    record\n                };\n                this.log('send put to %p', event.peer.id);\n                for await (const putEvent of this.network.sendRequest(event.peer.id, msg, options)) {\n                    events.push(putEvent);\n                    if (putEvent.name !== 'PEER_RESPONSE') {\n                        continue;\n                    }\n                    if (!(putEvent.record != null && (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_3__.equals)(putEvent.record.value, _libp2p_record__WEBPACK_IMPORTED_MODULE_5__.Libp2pRecord.deserialize(record).value))) {\n                        events.push((0,_query_events_js__WEBPACK_IMPORTED_MODULE_8__.queryErrorEvent)({ from: event.peer.id, error: new _libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.CodeError('value not put correctly', 'ERR_PUT_VALUE_INVALID') }, options));\n                    }\n                }\n                return events;\n            };\n        }), (source) => (0,it_parallel__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(source, {\n            ordered: false,\n            concurrency: _constants_js__WEBPACK_IMPORTED_MODULE_10__.ALPHA\n        }), async function* (source) {\n            for await (const events of source) {\n                yield* events;\n            }\n        });\n    }\n    /**\n     * Get the value to the given key\n     */\n    async *get(key, options = {}) {\n        this.log('get %b', key);\n        const vals = [];\n        for await (const event of this.getMany(key, options)) {\n            if (event.name === 'VALUE') {\n                vals.push(event);\n            }\n            yield event;\n        }\n        if (vals.length === 0) {\n            return;\n        }\n        const records = vals.map((v) => v.value);\n        let i = 0;\n        try {\n            i = (0,_record_selectors_js__WEBPACK_IMPORTED_MODULE_11__.bestRecord)(this.selectors, key, records);\n        }\n        catch (err) {\n            // Assume the first record if no selector available\n            if (err.code !== 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY') {\n                throw err;\n            }\n        }\n        const best = records[i];\n        this.log('GetValue %b %b', key, best);\n        if (best == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_9__.CodeError('best value was not found', 'ERR_NOT_FOUND');\n        }\n        yield* this.sendCorrectionRecord(key, vals, best, options);\n        yield vals[i];\n    }\n    /**\n     * Get the `n` values to the given key without sorting\n     */\n    async *getMany(key, options = {}) {\n        this.log('getMany values for %b', key);\n        try {\n            const localRec = await this.getLocal(key);\n            yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_8__.valueEvent)({\n                value: localRec.value,\n                from: this.components.peerId\n            }, options);\n        }\n        catch (err) {\n            this.log('error getting local value for %b', key, err);\n        }\n        const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n        const getValueQuery = async function* ({ peer, signal }) {\n            for await (const event of self.peerRouting.getValueOrPeers(peer, key, { signal })) {\n                yield event;\n                if (event.name === 'PEER_RESPONSE' && (event.record != null)) {\n                    yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_8__.valueEvent)({ from: peer, value: event.record.value }, options);\n                }\n            }\n        };\n        // we have peers, lets send the actual query to them\n        yield* this.queryManager.run(key, getValueQuery, options);\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/content-fetching/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/content-routing/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/content-routing/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentRouting: () => (/* binding */ ContentRouting)\n/* harmony export */ });\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/peer-collections */ \"./node_modules/@libp2p/peer-collections/dist/src/set.js\");\n/* harmony import */ var it_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-map */ \"./node_modules/it-map/dist/src/index.js\");\n/* harmony import */ var it_parallel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-parallel */ \"./node_modules/it-parallel/dist/src/index.js\");\n/* harmony import */ var it_pipe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! it-pipe */ \"./node_modules/it-pipe/dist/src/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/@libp2p/kad-dht/dist/src/constants.js\");\n/* harmony import */ var _message_dht_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../message/dht.js */ \"./node_modules/@libp2p/kad-dht/dist/src/message/dht.js\");\n/* harmony import */ var _message_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../message/utils.js */ \"./node_modules/@libp2p/kad-dht/dist/src/message/utils.js\");\n/* harmony import */ var _query_events_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../query/events.js */ \"./node_modules/@libp2p/kad-dht/dist/src/query/events.js\");\n\n\n\n\n\n\n\n\nclass ContentRouting {\n    log;\n    components;\n    network;\n    peerRouting;\n    queryManager;\n    routingTable;\n    providers;\n    constructor(components, init) {\n        const { network, peerRouting, queryManager, routingTable, providers, logPrefix } = init;\n        this.components = components;\n        this.log = components.logger.forComponent(`${logPrefix}:content-routing`);\n        this.network = network;\n        this.peerRouting = peerRouting;\n        this.queryManager = queryManager;\n        this.routingTable = routingTable;\n        this.providers = providers;\n    }\n    /**\n     * Announce to the network that we can provide the value for a given key and\n     * are contactable on the given multiaddrs\n     */\n    async *provide(key, multiaddrs, options = {}) {\n        this.log('provide %s', key);\n        // Add peer as provider\n        await this.providers.addProvider(key, this.components.peerId);\n        const msg = {\n            type: _message_dht_js__WEBPACK_IMPORTED_MODULE_3__.MessageType.ADD_PROVIDER,\n            key: key.multihash.bytes,\n            providers: [\n                (0,_message_utils_js__WEBPACK_IMPORTED_MODULE_4__.toPbPeerInfo)({\n                    id: this.components.peerId,\n                    multiaddrs\n                })\n            ]\n        };\n        let sent = 0;\n        const maybeNotifyPeer = (event) => {\n            return async () => {\n                if (event.name !== 'FINAL_PEER') {\n                    return [event];\n                }\n                const events = [];\n                this.log('putProvider %s to %p', key, event.peer.id);\n                try {\n                    this.log('sending provider record for %s to %p', key, event.peer.id);\n                    for await (const sendEvent of this.network.sendMessage(event.peer.id, msg, options)) {\n                        if (sendEvent.name === 'PEER_RESPONSE') {\n                            this.log('sent provider record for %s to %p', key, event.peer.id);\n                            sent++;\n                        }\n                        events.push(sendEvent);\n                    }\n                }\n                catch (err) {\n                    this.log.error('error sending provide record to peer %p', event.peer.id, err);\n                    events.push((0,_query_events_js__WEBPACK_IMPORTED_MODULE_5__.queryErrorEvent)({ from: event.peer.id, error: err }, options));\n                }\n                return events;\n            };\n        };\n        // Notify closest peers\n        yield* (0,it_pipe__WEBPACK_IMPORTED_MODULE_2__.pipe)(this.peerRouting.getClosestPeers(key.multihash.bytes, options), (source) => (0,it_map__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(source, (event) => maybeNotifyPeer(event)), (source) => (0,it_parallel__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(source, {\n            ordered: false,\n            concurrency: _constants_js__WEBPACK_IMPORTED_MODULE_6__.ALPHA\n        }), async function* (source) {\n            for await (const events of source) {\n                yield* events;\n            }\n        });\n        this.log('sent provider records to %d peers', sent);\n    }\n    /**\n     * Search the dht for up to `K` providers of the given CID.\n     */\n    async *findProviders(key, options) {\n        const toFind = this.routingTable.kBucketSize;\n        let found = 0;\n        const target = key.multihash.bytes;\n        const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n        this.log('findProviders %c', key);\n        const provs = await this.providers.getProviders(key);\n        // yield values if we have some, also slice because maybe we got lucky and already have too many?\n        if (provs.length > 0) {\n            const providers = [];\n            for (const peerId of provs.slice(0, toFind)) {\n                try {\n                    const peer = await this.components.peerStore.get(peerId);\n                    providers.push({\n                        id: peerId,\n                        multiaddrs: peer.addresses.map(({ multiaddr }) => multiaddr)\n                    });\n                }\n                catch (err) {\n                    if (err.code !== 'ERR_NOT_FOUND') {\n                        throw err;\n                    }\n                    this.log('no peer store entry for %p', peerId);\n                }\n            }\n            yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_5__.peerResponseEvent)({ from: this.components.peerId, messageType: _message_dht_js__WEBPACK_IMPORTED_MODULE_3__.MessageType.GET_PROVIDERS, providers }, options);\n            yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_5__.providerEvent)({ from: this.components.peerId, providers }, options);\n            found += providers.length;\n            if (found >= toFind) {\n                return;\n            }\n        }\n        /**\n         * The query function to use on this particular disjoint path\n         */\n        const findProvidersQuery = async function* ({ peer, signal }) {\n            const request = {\n                type: _message_dht_js__WEBPACK_IMPORTED_MODULE_3__.MessageType.GET_PROVIDERS,\n                key: target\n            };\n            yield* self.network.sendRequest(peer, request, {\n                ...options,\n                signal\n            });\n        };\n        const providers = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_7__.PeerSet(provs);\n        for await (const event of this.queryManager.run(target, findProvidersQuery, options)) {\n            yield event;\n            if (event.name === 'PEER_RESPONSE') {\n                this.log('Found %d provider entries for %c and %d closer peers', event.providers.length, key, event.closer.length);\n                const newProviders = [];\n                for (const peer of event.providers) {\n                    if (providers.has(peer.id)) {\n                        continue;\n                    }\n                    providers.add(peer.id);\n                    newProviders.push(peer);\n                }\n                if (newProviders.length > 0) {\n                    yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_5__.providerEvent)({ from: event.from, providers: newProviders }, options);\n                    found += newProviders.length;\n                    if (found >= toFind) {\n                        return;\n                    }\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/content-routing/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventTypes: () => (/* binding */ EventTypes),\n/* harmony export */   MessageType: () => (/* reexport safe */ _message_dht_js__WEBPACK_IMPORTED_MODULE_2__.MessageType),\n/* harmony export */   Record: () => (/* reexport safe */ _libp2p_record__WEBPACK_IMPORTED_MODULE_0__.Libp2pRecord),\n/* harmony export */   kadDHT: () => (/* binding */ kadDHT),\n/* harmony export */   passthroughMapper: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.passthroughMapper),\n/* harmony export */   removePrivateAddressesMapper: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.removePrivateAddressesMapper),\n/* harmony export */   removePublicAddressesMapper: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_1__.removePublicAddressesMapper)\n/* harmony export */ });\n/* harmony import */ var _kad_dht_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./kad-dht.js */ \"./node_modules/@libp2p/kad-dht/dist/src/kad-dht.js\");\n/* harmony import */ var _message_dht_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./message/dht.js */ \"./node_modules/@libp2p/kad-dht/dist/src/message/dht.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@libp2p/kad-dht/dist/src/utils.js\");\n/* harmony import */ var _libp2p_record__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/record */ \"./node_modules/@libp2p/record/dist/src/index.js\");\n/**\n * @packageDocumentation\n *\n * This module implements the [libp2p Kademlia spec](https://github.com/libp2p/specs/blob/master/kad-dht/README.md) in TypeScript.\n *\n * The Kademlia DHT allow for several operations such as finding peers, searching for providers of DHT records, etc.\n *\n * @example Using with libp2p\n *\n * ```TypeScript\n * import { kadDHT } from '@libp2p/kad-dht'\n * import { createLibp2p } from 'libp2p'\n * import { peerIdFromString } from '@libp2p/peer-id'\n *\n * const node = await createLibp2p({\n *   services: {\n *     dht: kadDHT({\n *       // DHT options\n *     })\n *   }\n * })\n *\n * const peerId = peerIdFromString('QmFoo')\n * const peerInfo = await node.peerRouting.findPeer(peerId)\n *\n * console.info(peerInfo) // peer id, multiaddrs\n * ```\n *\n * @example Connecting to the IPFS Amino DHT\n *\n * The [Amino DHT](https://blog.ipfs.tech/2023-09-amino-refactoring/) is a public-good DHT used by IPFS to fetch content, find peers, etc.\n *\n * If you are trying to access content on the public internet, this is the implementation you want.\n *\n * ```TypeScript\n * import { kadDHT, removePrivateAddressesMapper } from '@libp2p/kad-dht'\n * import { createLibp2p } from 'libp2p'\n * import { peerIdFromString } from '@libp2p/peer-id'\n *\n * const node = await createLibp2p({\n *   services: {\n *     aminoDHT: kadDHT({\n *       protocol: '/ipfs/kad/1.0.0',\n *       peerInfoMapper: removePrivateAddressesMapper\n *     })\n *   }\n * })\n *\n * const peerId = peerIdFromString('QmFoo')\n * const peerInfo = await node.peerRouting.findPeer(peerId)\n *\n * console.info(peerInfo) // peer id, multiaddrs\n * ```\n *\n * @example Connecting to a LAN-only DHT\n *\n * This DHT only works with privately dialable peers.\n *\n * This is for use when peers are on the local area network.\n *\n * ```TypeScript\n * import { kadDHT, removePublicAddressesMapper } from '@libp2p/kad-dht'\n * import { createLibp2p } from 'libp2p'\n * import { peerIdFromString } from '@libp2p/peer-id'\n *\n * const node = await createLibp2p({\n *   services: {\n *     lanDHT: kadDHT({\n *       protocol: '/ipfs/lan/kad/1.0.0',\n *       peerInfoMapper: removePublicAddressesMapper,\n *       clientMode: false\n *     })\n *   }\n * })\n *\n * const peerId = peerIdFromString('QmFoo')\n * const peerInfo = await node.peerRouting.findPeer(peerId)\n *\n * console.info(peerInfo) // peer id, multiaddrs\n * ```\n */\n\n\n\n\n\n/**\n * The types of events emitted during DHT queries\n */\nvar EventTypes;\n(function (EventTypes) {\n    EventTypes[EventTypes[\"SEND_QUERY\"] = 0] = \"SEND_QUERY\";\n    EventTypes[EventTypes[\"PEER_RESPONSE\"] = 1] = \"PEER_RESPONSE\";\n    EventTypes[EventTypes[\"FINAL_PEER\"] = 2] = \"FINAL_PEER\";\n    EventTypes[EventTypes[\"QUERY_ERROR\"] = 3] = \"QUERY_ERROR\";\n    EventTypes[EventTypes[\"PROVIDER\"] = 4] = \"PROVIDER\";\n    EventTypes[EventTypes[\"VALUE\"] = 5] = \"VALUE\";\n    EventTypes[EventTypes[\"ADD_PEER\"] = 6] = \"ADD_PEER\";\n    EventTypes[EventTypes[\"DIAL_PEER\"] = 7] = \"DIAL_PEER\";\n})(EventTypes || (EventTypes = {}));\n/**\n * The types of messages sent to peers during DHT queries\n */\n\n/**\n * Creates a custom DHT implementation, please ensure you pass a `protocol`\n * string as an option.\n */\nfunction kadDHT(init) {\n    return (components) => new _kad_dht_js__WEBPACK_IMPORTED_MODULE_3__.KadDHT(components, init);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/kad-dht.js":
/*!**********************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/kad-dht.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_MAX_INBOUND_STREAMS: () => (/* binding */ DEFAULT_MAX_INBOUND_STREAMS),\n/* harmony export */   DEFAULT_MAX_OUTBOUND_STREAMS: () => (/* binding */ DEFAULT_MAX_OUTBOUND_STREAMS),\n/* harmony export */   KadDHT: () => (/* binding */ KadDHT)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/event-target.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/content-routing/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/peer-routing/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/peer-discovery/index.js\");\n/* harmony import */ var it_drain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-drain */ \"./node_modules/it-drain/dist/src/index.js\");\n/* harmony import */ var p_defer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! p-defer */ \"./node_modules/p-defer/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@libp2p/kad-dht/dist/src/constants.js\");\n/* harmony import */ var _content_fetching_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./content-fetching/index.js */ \"./node_modules/@libp2p/kad-dht/dist/src/content-fetching/index.js\");\n/* harmony import */ var _content_routing_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./content-routing/index.js */ \"./node_modules/@libp2p/kad-dht/dist/src/content-routing/index.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./network.js */ \"./node_modules/@libp2p/kad-dht/dist/src/network.js\");\n/* harmony import */ var _peer_routing_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./peer-routing/index.js */ \"./node_modules/@libp2p/kad-dht/dist/src/peer-routing/index.js\");\n/* harmony import */ var _providers_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./providers.js */ \"./node_modules/@libp2p/kad-dht/dist/src/providers.js\");\n/* harmony import */ var _query_manager_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./query/manager.js */ \"./node_modules/@libp2p/kad-dht/dist/src/query/manager.js\");\n/* harmony import */ var _query_self_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./query-self.js */ \"./node_modules/@libp2p/kad-dht/dist/src/query-self.js\");\n/* harmony import */ var _record_selectors_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./record/selectors.js */ \"./node_modules/@libp2p/kad-dht/dist/src/record/selectors.js\");\n/* harmony import */ var _record_validators_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./record/validators.js */ \"./node_modules/@libp2p/kad-dht/dist/src/record/validators.js\");\n/* harmony import */ var _routing_table_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./routing-table/index.js */ \"./node_modules/@libp2p/kad-dht/dist/src/routing-table/index.js\");\n/* harmony import */ var _routing_table_refresh_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./routing-table/refresh.js */ \"./node_modules/@libp2p/kad-dht/dist/src/routing-table/refresh.js\");\n/* harmony import */ var _rpc_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./rpc/index.js */ \"./node_modules/@libp2p/kad-dht/dist/src/rpc/index.js\");\n/* harmony import */ var _topology_listener_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./topology-listener.js */ \"./node_modules/@libp2p/kad-dht/dist/src/topology-listener.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@libp2p/kad-dht/dist/src/utils.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Wrapper class to convert events into returned values\n */\nclass DHTContentRouting {\n    dht;\n    constructor(dht) {\n        this.dht = dht;\n    }\n    async provide(cid, options = {}) {\n        await (0,it_drain__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.dht.provide(cid, options));\n    }\n    async *findProviders(cid, options = {}) {\n        for await (const event of this.dht.findProviders(cid, options)) {\n            if (event.name === 'PROVIDER') {\n                yield* event.providers;\n            }\n        }\n    }\n    async put(key, value, options) {\n        await (0,it_drain__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.dht.put(key, value, options));\n    }\n    async get(key, options) {\n        for await (const event of this.dht.get(key, options)) {\n            if (event.name === 'VALUE') {\n                return event.value;\n            }\n        }\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Not found', 'ERR_NOT_FOUND');\n    }\n}\n/**\n * Wrapper class to convert events into returned values\n */\nclass DHTPeerRouting {\n    dht;\n    constructor(dht) {\n        this.dht = dht;\n    }\n    async findPeer(peerId, options = {}) {\n        for await (const event of this.dht.findPeer(peerId, options)) {\n            if (event.name === 'FINAL_PEER') {\n                return event.peer;\n            }\n        }\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Not found', 'ERR_NOT_FOUND');\n    }\n    async *getClosestPeers(key, options = {}) {\n        for await (const event of this.dht.getClosestPeers(key, options)) {\n            if (event.name === 'FINAL_PEER') {\n                yield event.peer;\n            }\n        }\n    }\n}\nconst DEFAULT_MAX_INBOUND_STREAMS = 32;\nconst DEFAULT_MAX_OUTBOUND_STREAMS = 64;\n/**\n * A DHT implementation modelled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\nclass KadDHT extends _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.TypedEventEmitter {\n    protocol;\n    routingTable;\n    providers;\n    network;\n    peerRouting;\n    components;\n    log;\n    running;\n    kBucketSize;\n    clientMode;\n    validators;\n    selectors;\n    queryManager;\n    contentFetching;\n    contentRouting;\n    routingTableRefresh;\n    rpc;\n    topologyListener;\n    querySelf;\n    maxInboundStreams;\n    maxOutboundStreams;\n    dhtContentRouting;\n    dhtPeerRouting;\n    peerInfoMapper;\n    /**\n     * Create a new KadDHT\n     */\n    constructor(components, init) {\n        super();\n        const { kBucketSize, clientMode, validators, selectors, querySelfInterval, protocol, logPrefix, pingTimeout, pingConcurrency, maxInboundStreams, maxOutboundStreams, providers: providersInit } = init;\n        const loggingPrefix = logPrefix ?? 'libp2p:kad-dht';\n        this.running = false;\n        this.components = components;\n        this.log = components.logger.forComponent(loggingPrefix);\n        this.protocol = protocol ?? _constants_js__WEBPACK_IMPORTED_MODULE_3__.PROTOCOL;\n        this.kBucketSize = kBucketSize ?? 20;\n        this.clientMode = clientMode ?? true;\n        this.maxInboundStreams = maxInboundStreams ?? DEFAULT_MAX_INBOUND_STREAMS;\n        this.maxOutboundStreams = maxOutboundStreams ?? DEFAULT_MAX_OUTBOUND_STREAMS;\n        this.peerInfoMapper = init.peerInfoMapper ?? _utils_js__WEBPACK_IMPORTED_MODULE_4__.removePrivateAddressesMapper;\n        this.routingTable = new _routing_table_index_js__WEBPACK_IMPORTED_MODULE_5__.RoutingTable(components, {\n            kBucketSize,\n            pingTimeout,\n            pingConcurrency,\n            protocol: this.protocol,\n            logPrefix: loggingPrefix\n        });\n        this.providers = new _providers_js__WEBPACK_IMPORTED_MODULE_6__.Providers(components, providersInit ?? {});\n        this.validators = {\n            ..._record_validators_js__WEBPACK_IMPORTED_MODULE_7__.validators,\n            ...validators\n        };\n        this.selectors = {\n            ..._record_selectors_js__WEBPACK_IMPORTED_MODULE_8__.selectors,\n            ...selectors\n        };\n        this.network = new _network_js__WEBPACK_IMPORTED_MODULE_9__.Network(components, {\n            protocol: this.protocol,\n            logPrefix: loggingPrefix\n        });\n        // all queries should wait for the initial query-self query to run so we have\n        // some peers and don't force consumers to use arbitrary timeouts\n        const initialQuerySelfHasRun = (0,p_defer__WEBPACK_IMPORTED_MODULE_10__[\"default\"])();\n        // if the user doesn't want to wait for query peers, resolve the initial\n        // self-query promise immediately\n        if (init.allowQueryWithZeroPeers === true) {\n            initialQuerySelfHasRun.resolve();\n        }\n        this.queryManager = new _query_manager_js__WEBPACK_IMPORTED_MODULE_11__.QueryManager(components, {\n            // Number of disjoint query paths to use - This is set to `kBucketSize/2` per the S/Kademlia paper\n            disjointPaths: Math.ceil(this.kBucketSize / 2),\n            logPrefix: loggingPrefix,\n            initialQuerySelfHasRun,\n            routingTable: this.routingTable\n        });\n        // DHT components\n        this.peerRouting = new _peer_routing_index_js__WEBPACK_IMPORTED_MODULE_12__.PeerRouting(components, {\n            routingTable: this.routingTable,\n            network: this.network,\n            validators: this.validators,\n            queryManager: this.queryManager,\n            logPrefix: loggingPrefix\n        });\n        this.contentFetching = new _content_fetching_index_js__WEBPACK_IMPORTED_MODULE_13__.ContentFetching(components, {\n            validators: this.validators,\n            selectors: this.selectors,\n            peerRouting: this.peerRouting,\n            queryManager: this.queryManager,\n            network: this.network,\n            logPrefix: loggingPrefix\n        });\n        this.contentRouting = new _content_routing_index_js__WEBPACK_IMPORTED_MODULE_14__.ContentRouting(components, {\n            network: this.network,\n            peerRouting: this.peerRouting,\n            queryManager: this.queryManager,\n            routingTable: this.routingTable,\n            providers: this.providers,\n            logPrefix: loggingPrefix\n        });\n        this.routingTableRefresh = new _routing_table_refresh_js__WEBPACK_IMPORTED_MODULE_15__.RoutingTableRefresh(components, {\n            peerRouting: this.peerRouting,\n            routingTable: this.routingTable,\n            logPrefix: loggingPrefix\n        });\n        this.rpc = new _rpc_index_js__WEBPACK_IMPORTED_MODULE_16__.RPC(components, {\n            routingTable: this.routingTable,\n            providers: this.providers,\n            peerRouting: this.peerRouting,\n            validators: this.validators,\n            logPrefix: loggingPrefix,\n            peerInfoMapper: this.peerInfoMapper\n        });\n        this.topologyListener = new _topology_listener_js__WEBPACK_IMPORTED_MODULE_17__.TopologyListener(components, {\n            protocol: this.protocol,\n            logPrefix: loggingPrefix\n        });\n        this.querySelf = new _query_self_js__WEBPACK_IMPORTED_MODULE_18__.QuerySelf(components, {\n            peerRouting: this.peerRouting,\n            interval: querySelfInterval,\n            initialInterval: init.initialQuerySelfInterval,\n            logPrefix: loggingPrefix,\n            initialQuerySelfHasRun,\n            routingTable: this.routingTable\n        });\n        // handle peers being discovered during processing of DHT messages\n        this.network.addEventListener('peer', (evt) => {\n            const peerData = evt.detail;\n            this.onPeerConnect(peerData).catch(err => {\n                this.log.error('could not add %p to routing table', peerData.id, err);\n            });\n            this.dispatchEvent(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CustomEvent('peer', {\n                detail: peerData\n            }));\n        });\n        // handle peers being discovered via other peer discovery mechanisms\n        this.topologyListener.addEventListener('peer', (evt) => {\n            const peerId = evt.detail;\n            Promise.resolve().then(async () => {\n                const peer = await this.components.peerStore.get(peerId);\n                const peerData = {\n                    id: peerId,\n                    multiaddrs: peer.addresses.map(({ multiaddr }) => multiaddr),\n                    protocols: peer.protocols\n                };\n                await this.onPeerConnect(peerData);\n            }).catch(err => {\n                this.log.error('could not add %p to routing table', peerId, err);\n            });\n        });\n        this.dhtPeerRouting = new DHTPeerRouting(this);\n        this.dhtContentRouting = new DHTContentRouting(this);\n        // if client mode has not been explicitly specified, auto-switch to server\n        // mode when the node's peer data is updated with publicly dialable\n        // addresses\n        if (init.clientMode == null) {\n            components.events.addEventListener('self:peer:update', (evt) => {\n                this.log('received update of self-peer info');\n                void Promise.resolve().then(async () => {\n                    const hasPublicAddress = evt.detail.peer.addresses\n                        .some(({ multiaddr }) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.multiaddrIsPublic)(multiaddr));\n                    const mode = this.getMode();\n                    if (hasPublicAddress && mode === 'client') {\n                        await this.setMode('server');\n                    }\n                    else if (mode === 'server' && !hasPublicAddress) {\n                        await this.setMode('client');\n                    }\n                })\n                    .catch(err => {\n                    this.log.error('error setting dht server mode', err);\n                });\n            });\n        }\n    }\n    get [_libp2p_interface__WEBPACK_IMPORTED_MODULE_19__.contentRoutingSymbol]() {\n        return this.dhtContentRouting;\n    }\n    get [_libp2p_interface__WEBPACK_IMPORTED_MODULE_20__.peerRoutingSymbol]() {\n        return this.dhtPeerRouting;\n    }\n    get [_libp2p_interface__WEBPACK_IMPORTED_MODULE_21__.peerDiscoverySymbol]() {\n        return this;\n    }\n    async onPeerConnect(peerData) {\n        this.log('peer %p connected', peerData.id);\n        peerData = this.peerInfoMapper(peerData);\n        if (peerData.multiaddrs.length === 0) {\n            this.log('ignoring %p as there were no valid addresses in %s after filtering', peerData.id, peerData.multiaddrs.map(addr => addr.toString()));\n            return;\n        }\n        try {\n            await this.routingTable.add(peerData.id);\n        }\n        catch (err) {\n            this.log.error('could not add %p to routing table', peerData.id, err);\n        }\n    }\n    /**\n     * Is this DHT running.\n     */\n    isStarted() {\n        return this.running;\n    }\n    /**\n     * If 'server' this node will respond to DHT queries, if 'client' this node will not\n     */\n    getMode() {\n        return this.clientMode ? 'client' : 'server';\n    }\n    /**\n     * If 'server' this node will respond to DHT queries, if 'client' this node will not\n     */\n    async setMode(mode) {\n        await this.components.registrar.unhandle(this.protocol);\n        if (mode === 'client') {\n            this.log('enabling client mode');\n            this.clientMode = true;\n        }\n        else {\n            this.log('enabling server mode');\n            this.clientMode = false;\n            await this.components.registrar.handle(this.protocol, this.rpc.onIncomingStream.bind(this.rpc), {\n                maxInboundStreams: this.maxInboundStreams,\n                maxOutboundStreams: this.maxOutboundStreams\n            });\n        }\n    }\n    /**\n     * Start listening to incoming connections.\n     */\n    async start() {\n        this.running = true;\n        // Only respond to queries when not in client mode\n        await this.setMode(this.clientMode ? 'client' : 'server');\n        this.querySelf.start();\n        await Promise.all([\n            this.providers.start(),\n            this.queryManager.start(),\n            this.network.start(),\n            this.routingTable.start(),\n            this.topologyListener.start(),\n            this.routingTableRefresh.start()\n        ]);\n    }\n    /**\n     * Stop accepting incoming connections and sending outgoing\n     * messages.\n     */\n    async stop() {\n        this.running = false;\n        this.querySelf.stop();\n        await Promise.all([\n            this.providers.stop(),\n            this.queryManager.stop(),\n            this.network.stop(),\n            this.routingTable.stop(),\n            this.routingTableRefresh.stop(),\n            this.topologyListener.stop()\n        ]);\n    }\n    /**\n     * Store the given key/value pair in the DHT\n     */\n    async *put(key, value, options = {}) {\n        yield* this.contentFetching.put(key, value, options);\n    }\n    /**\n     * Get the value that corresponds to the passed key\n     */\n    async *get(key, options = {}) {\n        yield* this.contentFetching.get(key, options);\n    }\n    // ----------- Content Routing\n    /**\n     * Announce to the network that we can provide given key's value\n     */\n    async *provide(key, options = {}) {\n        yield* this.contentRouting.provide(key, this.components.addressManager.getAddresses(), options);\n    }\n    /**\n     * Search the dht for providers of the given CID\n     */\n    async *findProviders(key, options = {}) {\n        yield* this.contentRouting.findProviders(key, options);\n    }\n    // ----------- Peer Routing -----------\n    /**\n     * Search for a peer with the given ID\n     */\n    async *findPeer(id, options = {}) {\n        yield* this.peerRouting.findPeer(id, options);\n    }\n    /**\n     * Kademlia 'node lookup' operation\n     */\n    async *getClosestPeers(key, options = {}) {\n        yield* this.peerRouting.getClosestPeers(key, options);\n    }\n    async refreshRoutingTable() {\n        this.routingTableRefresh.refreshTable(true);\n    }\n}\n//# sourceMappingURL=kad-dht.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/kad-dht.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/message/dht.js":
/*!**************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/message/dht.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConnectionType: () => (/* binding */ ConnectionType),\n/* harmony export */   Message: () => (/* binding */ Message),\n/* harmony export */   MessageType: () => (/* binding */ MessageType),\n/* harmony export */   PeerInfo: () => (/* binding */ PeerInfo),\n/* harmony export */   Record: () => (/* binding */ Record)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/alloc */ \"./node_modules/uint8arrays/dist/src/alloc.js\");\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n\nvar Record;\n(function (Record) {\n    let _codec;\n    Record.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.key != null) {\n                    w.uint32(10);\n                    w.bytes(obj.key);\n                }\n                if (obj.value != null) {\n                    w.uint32(18);\n                    w.bytes(obj.value);\n                }\n                if (obj.author != null) {\n                    w.uint32(26);\n                    w.bytes(obj.author);\n                }\n                if (obj.signature != null) {\n                    w.uint32(34);\n                    w.bytes(obj.signature);\n                }\n                if (obj.timeReceived != null) {\n                    w.uint32(42);\n                    w.string(obj.timeReceived);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1: {\n                            obj.key = reader.bytes();\n                            break;\n                        }\n                        case 2: {\n                            obj.value = reader.bytes();\n                            break;\n                        }\n                        case 3: {\n                            obj.author = reader.bytes();\n                            break;\n                        }\n                        case 4: {\n                            obj.signature = reader.bytes();\n                            break;\n                        }\n                        case 5: {\n                            obj.timeReceived = reader.string();\n                            break;\n                        }\n                        default: {\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Record.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Record.codec());\n    };\n    Record.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Record.codec());\n    };\n})(Record || (Record = {}));\nvar MessageType;\n(function (MessageType) {\n    MessageType[\"PUT_VALUE\"] = \"PUT_VALUE\";\n    MessageType[\"GET_VALUE\"] = \"GET_VALUE\";\n    MessageType[\"ADD_PROVIDER\"] = \"ADD_PROVIDER\";\n    MessageType[\"GET_PROVIDERS\"] = \"GET_PROVIDERS\";\n    MessageType[\"FIND_NODE\"] = \"FIND_NODE\";\n    MessageType[\"PING\"] = \"PING\";\n})(MessageType || (MessageType = {}));\nvar __MessageTypeValues;\n(function (__MessageTypeValues) {\n    __MessageTypeValues[__MessageTypeValues[\"PUT_VALUE\"] = 0] = \"PUT_VALUE\";\n    __MessageTypeValues[__MessageTypeValues[\"GET_VALUE\"] = 1] = \"GET_VALUE\";\n    __MessageTypeValues[__MessageTypeValues[\"ADD_PROVIDER\"] = 2] = \"ADD_PROVIDER\";\n    __MessageTypeValues[__MessageTypeValues[\"GET_PROVIDERS\"] = 3] = \"GET_PROVIDERS\";\n    __MessageTypeValues[__MessageTypeValues[\"FIND_NODE\"] = 4] = \"FIND_NODE\";\n    __MessageTypeValues[__MessageTypeValues[\"PING\"] = 5] = \"PING\";\n})(__MessageTypeValues || (__MessageTypeValues = {}));\n(function (MessageType) {\n    MessageType.codec = () => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.enumeration)(__MessageTypeValues);\n    };\n})(MessageType || (MessageType = {}));\nvar ConnectionType;\n(function (ConnectionType) {\n    ConnectionType[\"NOT_CONNECTED\"] = \"NOT_CONNECTED\";\n    ConnectionType[\"CONNECTED\"] = \"CONNECTED\";\n    ConnectionType[\"CAN_CONNECT\"] = \"CAN_CONNECT\";\n    ConnectionType[\"CANNOT_CONNECT\"] = \"CANNOT_CONNECT\";\n})(ConnectionType || (ConnectionType = {}));\nvar __ConnectionTypeValues;\n(function (__ConnectionTypeValues) {\n    __ConnectionTypeValues[__ConnectionTypeValues[\"NOT_CONNECTED\"] = 0] = \"NOT_CONNECTED\";\n    __ConnectionTypeValues[__ConnectionTypeValues[\"CONNECTED\"] = 1] = \"CONNECTED\";\n    __ConnectionTypeValues[__ConnectionTypeValues[\"CAN_CONNECT\"] = 2] = \"CAN_CONNECT\";\n    __ConnectionTypeValues[__ConnectionTypeValues[\"CANNOT_CONNECT\"] = 3] = \"CANNOT_CONNECT\";\n})(__ConnectionTypeValues || (__ConnectionTypeValues = {}));\n(function (ConnectionType) {\n    ConnectionType.codec = () => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.enumeration)(__ConnectionTypeValues);\n    };\n})(ConnectionType || (ConnectionType = {}));\nvar PeerInfo;\n(function (PeerInfo) {\n    let _codec;\n    PeerInfo.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.id != null && obj.id.byteLength > 0)) {\n                    w.uint32(10);\n                    w.bytes(obj.id);\n                }\n                if (obj.multiaddrs != null) {\n                    for (const value of obj.multiaddrs) {\n                        w.uint32(18);\n                        w.bytes(value);\n                    }\n                }\n                if (obj.connection != null) {\n                    w.uint32(24);\n                    ConnectionType.codec().encode(obj.connection, w);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    id: (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__.alloc)(0),\n                    multiaddrs: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1: {\n                            obj.id = reader.bytes();\n                            break;\n                        }\n                        case 2: {\n                            obj.multiaddrs.push(reader.bytes());\n                            break;\n                        }\n                        case 3: {\n                            obj.connection = ConnectionType.codec().decode(reader);\n                            break;\n                        }\n                        default: {\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    PeerInfo.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, PeerInfo.codec());\n    };\n    PeerInfo.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, PeerInfo.codec());\n    };\n})(PeerInfo || (PeerInfo = {}));\nvar Message;\n(function (Message) {\n    let _codec;\n    Message.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.type != null && __MessageTypeValues[obj.type] !== 0) {\n                    w.uint32(8);\n                    MessageType.codec().encode(obj.type, w);\n                }\n                if (obj.clusterLevel != null) {\n                    w.uint32(80);\n                    w.int32(obj.clusterLevel);\n                }\n                if (obj.key != null) {\n                    w.uint32(18);\n                    w.bytes(obj.key);\n                }\n                if (obj.record != null) {\n                    w.uint32(26);\n                    w.bytes(obj.record);\n                }\n                if (obj.closer != null) {\n                    for (const value of obj.closer) {\n                        w.uint32(66);\n                        PeerInfo.codec().encode(value, w);\n                    }\n                }\n                if (obj.providers != null) {\n                    for (const value of obj.providers) {\n                        w.uint32(74);\n                        PeerInfo.codec().encode(value, w);\n                    }\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    type: MessageType.PUT_VALUE,\n                    closer: [],\n                    providers: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1: {\n                            obj.type = MessageType.codec().decode(reader);\n                            break;\n                        }\n                        case 10: {\n                            obj.clusterLevel = reader.int32();\n                            break;\n                        }\n                        case 2: {\n                            obj.key = reader.bytes();\n                            break;\n                        }\n                        case 3: {\n                            obj.record = reader.bytes();\n                            break;\n                        }\n                        case 8: {\n                            obj.closer.push(PeerInfo.codec().decode(reader, reader.uint32()));\n                            break;\n                        }\n                        case 9: {\n                            obj.providers.push(PeerInfo.codec().decode(reader, reader.uint32()));\n                            break;\n                        }\n                        default: {\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Message.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Message.codec());\n    };\n    Message.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Message.codec());\n    };\n})(Message || (Message = {}));\n//# sourceMappingURL=dht.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/message/dht.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/message/utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/message/utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromPbPeerInfo: () => (/* binding */ fromPbPeerInfo),\n/* harmony export */   toPbPeerInfo: () => (/* binding */ toPbPeerInfo)\n/* harmony export */ });\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n\n\nfunction toPbPeerInfo(peer, connection) {\n    const output = {\n        id: peer.id.toBytes(),\n        multiaddrs: (peer.multiaddrs ?? []).map((m) => m.bytes),\n        connection\n    };\n    return output;\n}\nfunction fromPbPeerInfo(peer) {\n    if (peer.id == null) {\n        throw new Error('Invalid peer in message');\n    }\n    return {\n        id: (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_1__.peerIdFromBytes)(peer.id),\n        multiaddrs: (peer.multiaddrs ?? []).map((a) => (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(a))\n    };\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/message/utils.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/network.js":
/*!**********************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/network.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Network: () => (/* binding */ Network)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/event-target.js\");\n/* harmony import */ var _libp2p_record__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/record */ \"./node_modules/@libp2p/record/dist/src/index.js\");\n/* harmony import */ var it_protobuf_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-protobuf-stream */ \"./node_modules/it-protobuf-stream/dist/src/index.js\");\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* harmony import */ var _message_dht_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./message/dht.js */ \"./node_modules/@libp2p/kad-dht/dist/src/message/dht.js\");\n/* harmony import */ var _message_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./message/utils.js */ \"./node_modules/@libp2p/kad-dht/dist/src/message/utils.js\");\n/* harmony import */ var _query_events_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./query/events.js */ \"./node_modules/@libp2p/kad-dht/dist/src/query/events.js\");\n\n\n\n\n\n\n\n/**\n * Handle network operations for the dht\n */\nclass Network extends _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.TypedEventEmitter {\n    log;\n    protocol;\n    running;\n    components;\n    /**\n     * Create a new network\n     */\n    constructor(components, init) {\n        super();\n        const { protocol } = init;\n        this.components = components;\n        this.log = components.logger.forComponent(`${init.logPrefix}:network`);\n        this.running = false;\n        this.protocol = protocol;\n    }\n    /**\n     * Start the network\n     */\n    async start() {\n        if (this.running) {\n            return;\n        }\n        this.running = true;\n    }\n    /**\n     * Stop all network activity\n     */\n    async stop() {\n        this.running = false;\n    }\n    /**\n     * Is the network online?\n     */\n    isStarted() {\n        return this.running;\n    }\n    /**\n     * Send a request and record RTT for latency measurements\n     */\n    async *sendRequest(to, msg, options = {}) {\n        if (!this.running) {\n            return;\n        }\n        const type = msg.type;\n        if (type == null) {\n            throw new protons_runtime__WEBPACK_IMPORTED_MODULE_1__.CodeError('Message type was missing', 'ERR_INVALID_PARAMETERS');\n        }\n        this.log('sending %s to %p', msg.type, to);\n        yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_3__.dialPeerEvent)({ peer: to }, options);\n        yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_3__.sendQueryEvent)({ to, type }, options);\n        let stream;\n        try {\n            const connection = await this.components.connectionManager.openConnection(to, options);\n            const stream = await connection.newStream(this.protocol, options);\n            const response = await this._writeReadMessage(stream, msg, options);\n            yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_3__.peerResponseEvent)({\n                from: to,\n                messageType: response.type,\n                closer: response.closer.map(_message_utils_js__WEBPACK_IMPORTED_MODULE_4__.fromPbPeerInfo),\n                providers: response.providers.map(_message_utils_js__WEBPACK_IMPORTED_MODULE_4__.fromPbPeerInfo),\n                record: response.record == null ? undefined : _libp2p_record__WEBPACK_IMPORTED_MODULE_5__.Libp2pRecord.deserialize(response.record)\n            }, options);\n        }\n        catch (err) {\n            this.log.error('could not send %s to %p', msg.type, to, err);\n            yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_3__.queryErrorEvent)({ from: to, error: err }, options);\n        }\n        finally {\n            if (stream != null) {\n                await stream.close();\n            }\n        }\n    }\n    /**\n     * Sends a message without expecting an answer\n     */\n    async *sendMessage(to, msg, options = {}) {\n        if (!this.running) {\n            return;\n        }\n        const type = msg.type;\n        if (type == null) {\n            throw new protons_runtime__WEBPACK_IMPORTED_MODULE_1__.CodeError('Message type was missing', 'ERR_INVALID_PARAMETERS');\n        }\n        this.log('sending %s to %p', msg.type, to);\n        yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_3__.dialPeerEvent)({ peer: to }, options);\n        yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_3__.sendQueryEvent)({ to, type }, options);\n        let stream;\n        try {\n            const connection = await this.components.connectionManager.openConnection(to, options);\n            const stream = await connection.newStream(this.protocol, options);\n            await this._writeMessage(stream, msg, options);\n            yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_3__.peerResponseEvent)({ from: to, messageType: type }, options);\n        }\n        catch (err) {\n            yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_3__.queryErrorEvent)({ from: to, error: err }, options);\n        }\n        finally {\n            if (stream != null) {\n                await stream.close();\n            }\n        }\n    }\n    /**\n     * Write a message to the given stream\n     */\n    async _writeMessage(stream, msg, options) {\n        const pb = (0,it_protobuf_stream__WEBPACK_IMPORTED_MODULE_0__.pbStream)(stream);\n        await pb.write(msg, _message_dht_js__WEBPACK_IMPORTED_MODULE_6__.Message, options);\n        await pb.unwrap().close(options);\n    }\n    /**\n     * Write a message and read its response.\n     * If no response is received after the specified timeout\n     * this will error out.\n     */\n    async _writeReadMessage(stream, msg, options) {\n        const pb = (0,it_protobuf_stream__WEBPACK_IMPORTED_MODULE_0__.pbStream)(stream);\n        await pb.write(msg, _message_dht_js__WEBPACK_IMPORTED_MODULE_6__.Message, options);\n        const message = await pb.read(_message_dht_js__WEBPACK_IMPORTED_MODULE_6__.Message, options);\n        await pb.unwrap().close(options);\n        // tell any listeners about new peers we've seen\n        message.closer.forEach(peerData => {\n            this.safeDispatchEvent('peer', {\n                detail: (0,_message_utils_js__WEBPACK_IMPORTED_MODULE_4__.fromPbPeerInfo)(peerData)\n            });\n        });\n        message.providers.forEach(peerData => {\n            this.safeDispatchEvent('peer', {\n                detail: (0,_message_utils_js__WEBPACK_IMPORTED_MODULE_4__.fromPbPeerInfo)(peerData)\n            });\n        });\n        return message;\n    }\n}\n//# sourceMappingURL=network.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/network.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/peer-list/peer-distance-list.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/peer-list/peer-distance-list.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PeerDistanceList: () => (/* binding */ PeerDistanceList)\n/* harmony export */ });\n/* harmony import */ var uint8arrays_compare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/compare */ \"./node_modules/uint8arrays/dist/src/compare.js\");\n/* harmony import */ var uint8arrays_xor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/xor */ \"./node_modules/uint8arrays/dist/src/xor.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/@libp2p/kad-dht/dist/src/utils.js\");\n\n\n\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\nclass PeerDistanceList {\n    /**\n     * The DHT key from which distance is calculated\n     */\n    originDhtKey;\n    /**\n     * The maximum size of the list\n     */\n    capacity;\n    peerDistances;\n    constructor(originDhtKey, capacity) {\n        this.originDhtKey = originDhtKey;\n        this.capacity = capacity;\n        this.peerDistances = [];\n    }\n    /**\n     * The length of the list\n     */\n    get length() {\n        return this.peerDistances.length;\n    }\n    /**\n     * The peerIds in the list, in order of distance from the origin key\n     */\n    get peers() {\n        return this.peerDistances.map(pd => pd.peerId);\n    }\n    /**\n     * Add a peerId to the list.\n     */\n    async add(peerId) {\n        if (this.peerDistances.find(pd => pd.peerId.equals(peerId)) != null) {\n            return;\n        }\n        const dhtKey = await _utils_js__WEBPACK_IMPORTED_MODULE_2__.convertPeerId(peerId);\n        const el = {\n            peerId,\n            distance: (0,uint8arrays_xor__WEBPACK_IMPORTED_MODULE_1__.xor)(this.originDhtKey, dhtKey)\n        };\n        this.peerDistances.push(el);\n        this.peerDistances.sort((a, b) => (0,uint8arrays_compare__WEBPACK_IMPORTED_MODULE_0__.compare)(a.distance, b.distance));\n        this.peerDistances = this.peerDistances.slice(0, this.capacity);\n    }\n    /**\n     * Indicates whether any of the peerIds passed as a parameter are closer\n     * to the origin key than the furthest peerId in the PeerDistanceList.\n     */\n    async anyCloser(peerIds) {\n        if (peerIds.length === 0) {\n            return false;\n        }\n        if (this.length === 0) {\n            return true;\n        }\n        const dhtKeys = await Promise.all(peerIds.map(_utils_js__WEBPACK_IMPORTED_MODULE_2__.convertPeerId));\n        const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance;\n        for (const dhtKey of dhtKeys) {\n            const keyDistance = (0,uint8arrays_xor__WEBPACK_IMPORTED_MODULE_1__.xor)(this.originDhtKey, dhtKey);\n            if ((0,uint8arrays_compare__WEBPACK_IMPORTED_MODULE_0__.compare)(keyDistance, furthestDistance) < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=peer-distance-list.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/peer-list/peer-distance-list.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/peer-routing/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/peer-routing/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PeerRouting: () => (/* binding */ PeerRouting)\n/* harmony export */ });\n/* harmony import */ var _libp2p_crypto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/crypto */ \"./node_modules/@libp2p/crypto/dist/src/keys/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _libp2p_record__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @libp2p/record */ \"./node_modules/@libp2p/record/dist/src/index.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _message_dht_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../message/dht.js */ \"./node_modules/@libp2p/kad-dht/dist/src/message/dht.js\");\n/* harmony import */ var _peer_list_peer_distance_list_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../peer-list/peer-distance-list.js */ \"./node_modules/@libp2p/kad-dht/dist/src/peer-list/peer-distance-list.js\");\n/* harmony import */ var _query_events_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../query/events.js */ \"./node_modules/@libp2p/kad-dht/dist/src/query/events.js\");\n/* harmony import */ var _record_validators_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../record/validators.js */ \"./node_modules/@libp2p/kad-dht/dist/src/record/validators.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/@libp2p/kad-dht/dist/src/utils.js\");\n\n\n\n\n\n\n\n\n\n\nclass PeerRouting {\n    log;\n    routingTable;\n    network;\n    validators;\n    queryManager;\n    peerStore;\n    peerId;\n    constructor(components, init) {\n        const { routingTable, network, validators, queryManager, logPrefix } = init;\n        this.routingTable = routingTable;\n        this.network = network;\n        this.validators = validators;\n        this.queryManager = queryManager;\n        this.peerStore = components.peerStore;\n        this.peerId = components.peerId;\n        this.log = components.logger.forComponent(`${logPrefix}:peer-routing`);\n    }\n    /**\n     * Look if we are connected to a peer with the given id.\n     * Returns its id and addresses, if found, otherwise `undefined`.\n     */\n    async findPeerLocal(peer) {\n        let peerData;\n        const p = await this.routingTable.find(peer);\n        if (p != null) {\n            this.log('findPeerLocal found %p in routing table', peer);\n            try {\n                peerData = await this.peerStore.get(p);\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n        }\n        if (peerData == null) {\n            try {\n                peerData = await this.peerStore.get(peer);\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n        }\n        if (peerData != null) {\n            this.log('findPeerLocal found %p in peer store', peer);\n            return {\n                id: peerData.id,\n                multiaddrs: peerData.addresses.map((address) => address.multiaddr)\n            };\n        }\n        return undefined;\n    }\n    /**\n     * Get a value via rpc call for the given parameters\n     */\n    async *_getValueSingle(peer, key, options = {}) {\n        const msg = {\n            type: _message_dht_js__WEBPACK_IMPORTED_MODULE_1__.MessageType.GET_VALUE,\n            key\n        };\n        yield* this.network.sendRequest(peer, msg, options);\n    }\n    /**\n     * Get the public key directly from a node\n     */\n    async *getPublicKeyFromNode(peer, options = {}) {\n        const pkKey = _utils_js__WEBPACK_IMPORTED_MODULE_2__.keyForPublicKey(peer);\n        for await (const event of this._getValueSingle(peer, pkKey, options)) {\n            yield event;\n            if (event.name === 'PEER_RESPONSE' && event.record != null) {\n                const recPeer = await (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_3__.peerIdFromKeys)(_libp2p_crypto__WEBPACK_IMPORTED_MODULE_4__.marshalPublicKey({ bytes: event.record.value }));\n                // compare hashes of the pub key\n                if (!recPeer.equals(peer)) {\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.CodeError('public key does not match id', 'ERR_PUBLIC_KEY_DOES_NOT_MATCH_ID');\n                }\n                if (recPeer.publicKey == null) {\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.CodeError('public key missing', 'ERR_PUBLIC_KEY_MISSING');\n                }\n                yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_6__.valueEvent)({ from: peer, value: recPeer.publicKey }, options);\n            }\n        }\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.CodeError(`Node not responding with its public key: ${peer.toString()}`, 'ERR_INVALID_RECORD');\n    }\n    /**\n     * Search for a peer with the given ID\n     */\n    async *findPeer(id, options = {}) {\n        this.log('findPeer %p', id);\n        if (options.useCache !== false) {\n            // Try to find locally\n            const pi = await this.findPeerLocal(id);\n            // already got it\n            if (pi != null) {\n                this.log('found local');\n                yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_6__.finalPeerEvent)({\n                    from: this.peerId,\n                    peer: pi\n                }, options);\n                return;\n            }\n        }\n        let foundPeer = false;\n        if (options.useNetwork !== false) {\n            const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n            const findPeerQuery = async function* ({ peer, signal }) {\n                const request = {\n                    type: _message_dht_js__WEBPACK_IMPORTED_MODULE_1__.MessageType.FIND_NODE,\n                    key: id.toBytes()\n                };\n                for await (const event of self.network.sendRequest(peer, request, {\n                    ...options,\n                    signal\n                })) {\n                    yield event;\n                    if (event.name === 'PEER_RESPONSE') {\n                        const match = event.closer.find((p) => p.id.equals(id));\n                        // found the peer\n                        if (match != null) {\n                            yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_6__.finalPeerEvent)({ from: event.from, peer: match }, options);\n                        }\n                    }\n                }\n            };\n            for await (const event of this.queryManager.run(id.toBytes(), findPeerQuery, options)) {\n                if (event.name === 'FINAL_PEER') {\n                    foundPeer = true;\n                }\n                yield event;\n            }\n        }\n        if (!foundPeer) {\n            yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_6__.queryErrorEvent)({ from: this.peerId, error: new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.CodeError('Not found', 'ERR_NOT_FOUND') }, options);\n        }\n    }\n    /**\n     * Kademlia 'node lookup' operation on a key, which could be a the\n     * bytes from a multihash or a peer ID\n     */\n    async *getClosestPeers(key, options = {}) {\n        this.log('getClosestPeers to %b', key);\n        const id = await _utils_js__WEBPACK_IMPORTED_MODULE_2__.convertBuffer(key);\n        const tablePeers = this.routingTable.closestPeers(id);\n        const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n        const peers = new _peer_list_peer_distance_list_js__WEBPACK_IMPORTED_MODULE_7__.PeerDistanceList(id, this.routingTable.kBucketSize);\n        await Promise.all(tablePeers.map(async (peer) => { await peers.add(peer); }));\n        const getCloserPeersQuery = async function* ({ peer, signal }) {\n            self.log('closerPeersSingle %s from %p', (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(key, 'base32'), peer);\n            const request = {\n                type: _message_dht_js__WEBPACK_IMPORTED_MODULE_1__.MessageType.FIND_NODE,\n                key\n            };\n            yield* self.network.sendRequest(peer, request, {\n                ...options,\n                signal\n            });\n        };\n        for await (const event of this.queryManager.run(key, getCloserPeersQuery, options)) {\n            yield event;\n            if (event.name === 'PEER_RESPONSE') {\n                await Promise.all(event.closer.map(async (peerData) => { await peers.add(peerData.id); }));\n            }\n        }\n        this.log('found %d peers close to %b', peers.length, key);\n        for (const peerId of peers.peers) {\n            try {\n                const peer = await this.peerStore.get(peerId);\n                yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_6__.finalPeerEvent)({\n                    from: this.peerId,\n                    peer: {\n                        id: peerId,\n                        multiaddrs: peer.addresses.map(({ multiaddr }) => multiaddr)\n                    }\n                }, options);\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n        }\n    }\n    /**\n     * Query a particular peer for the value for the given key.\n     * It will either return the value or a list of closer peers.\n     *\n     * Note: The peerStore is updated with new addresses found for the given peer.\n     */\n    async *getValueOrPeers(peer, key, options = {}) {\n        for await (const event of this._getValueSingle(peer, key, options)) {\n            if (event.name === 'PEER_RESPONSE') {\n                if (event.record != null) {\n                    // We have a record\n                    try {\n                        await this._verifyRecordOnline(event.record);\n                    }\n                    catch (err) {\n                        const errMsg = 'invalid record received, discarded';\n                        this.log(errMsg);\n                        yield (0,_query_events_js__WEBPACK_IMPORTED_MODULE_6__.queryErrorEvent)({ from: event.from, error: new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.CodeError(errMsg, 'ERR_INVALID_RECORD') }, options);\n                        continue;\n                    }\n                }\n            }\n            yield event;\n        }\n    }\n    /**\n     * Verify a record, fetching missing public keys from the network.\n     * Throws an error if the record is invalid.\n     */\n    async _verifyRecordOnline(record) {\n        if (record.timeReceived == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.CodeError('invalid record received', 'ERR_INVALID_RECORD');\n        }\n        await (0,_record_validators_js__WEBPACK_IMPORTED_MODULE_8__.verifyRecord)(this.validators, new _libp2p_record__WEBPACK_IMPORTED_MODULE_9__.Libp2pRecord(record.key, record.value, record.timeReceived));\n    }\n    /**\n     * Get the nearest peers to the given query, but if closer\n     * than self\n     */\n    async getCloserPeersOffline(key, closerThan) {\n        const id = await _utils_js__WEBPACK_IMPORTED_MODULE_2__.convertBuffer(key);\n        const ids = this.routingTable.closestPeers(id);\n        const output = [];\n        for (const peerId of ids) {\n            if (peerId.equals(closerThan)) {\n                continue;\n            }\n            try {\n                const peer = await this.peerStore.get(peerId);\n                output.push({\n                    id: peerId,\n                    multiaddrs: peer.addresses.map(({ multiaddr }) => multiaddr)\n                });\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n        }\n        if (output.length > 0) {\n            this.log('getCloserPeersOffline found %d peer(s) closer to %b than %p', output.length, key, closerThan);\n        }\n        else {\n            this.log('getCloserPeersOffline could not find peer closer to %b than %p', key, closerThan);\n        }\n        return output;\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/peer-routing/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/providers.js":
/*!************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/providers.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Providers: () => (/* binding */ Providers)\n/* harmony export */ });\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var hashlru__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hashlru */ \"./node_modules/hashlru/index.js\");\n/* harmony import */ var interface_datastore_key__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! interface-datastore/key */ \"./node_modules/interface-datastore/dist/src/key.js\");\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! p-queue */ \"./node_modules/p-queue/dist/index.js\");\n/* harmony import */ var uint8_varint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8-varint */ \"./node_modules/uint8-varint/dist/src/index.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@libp2p/kad-dht/dist/src/constants.js\");\n\n\n\n\n\n\n\n/**\n * This class manages known providers.\n * A provider is a peer that we know to have the content for a given CID.\n *\n * Every `cleanupInterval` providers are checked if they\n * are still valid, i.e. younger than the `provideValidity`.\n * If they are not, they are deleted.\n *\n * To ensure the list survives restarts of the daemon,\n * providers are stored in the datastore, but to ensure\n * access is fast there is an LRU cache in front of that.\n */\nclass Providers {\n    log;\n    datastore;\n    cache;\n    cleanupInterval;\n    provideValidity;\n    syncQueue;\n    started;\n    cleaner;\n    constructor(components, init = {}) {\n        const { cacheSize, cleanupInterval, provideValidity } = init;\n        this.log = components.logger.forComponent('libp2p:kad-dht:providers');\n        this.datastore = components.datastore;\n        this.cleanupInterval = cleanupInterval ?? _constants_js__WEBPACK_IMPORTED_MODULE_4__.PROVIDERS_CLEANUP_INTERVAL;\n        this.provideValidity = provideValidity ?? _constants_js__WEBPACK_IMPORTED_MODULE_4__.PROVIDERS_VALIDITY;\n        this.cache = hashlru__WEBPACK_IMPORTED_MODULE_0__(cacheSize ?? _constants_js__WEBPACK_IMPORTED_MODULE_4__.PROVIDERS_LRU_CACHE_SIZE);\n        this.syncQueue = new p_queue__WEBPACK_IMPORTED_MODULE_5__[\"default\"]({ concurrency: 1 });\n        this.started = false;\n    }\n    isStarted() {\n        return this.started;\n    }\n    /**\n     * Start the provider cleanup service\n     */\n    async start() {\n        if (this.started) {\n            return;\n        }\n        this.started = true;\n        this.cleaner = setInterval(() => {\n            this._cleanup().catch(err => {\n                this.log.error(err);\n            });\n        }, this.cleanupInterval);\n    }\n    /**\n     * Release any resources.\n     */\n    async stop() {\n        this.started = false;\n        if (this.cleaner != null) {\n            clearInterval(this.cleaner);\n            this.cleaner = undefined;\n        }\n    }\n    /**\n     * Check all providers if they are still valid, and if not delete them\n     */\n    async _cleanup() {\n        await this.syncQueue.add(async () => {\n            const start = Date.now();\n            let count = 0;\n            let deleteCount = 0;\n            const deleted = new Map();\n            const batch = this.datastore.batch();\n            // Get all provider entries from the datastore\n            const query = this.datastore.query({ prefix: _constants_js__WEBPACK_IMPORTED_MODULE_4__.PROVIDER_KEY_PREFIX });\n            for await (const entry of query) {\n                try {\n                    // Add a delete to the batch for each expired entry\n                    const { cid, peerId } = parseProviderKey(entry.key);\n                    const time = readTime(entry.value).getTime();\n                    const now = Date.now();\n                    const delta = now - time;\n                    const expired = delta > this.provideValidity;\n                    this.log('comparing: %d - %d = %d > %d %s', now, time, delta, this.provideValidity, expired ? '(expired)' : '');\n                    if (expired) {\n                        deleteCount++;\n                        batch.delete(entry.key);\n                        const peers = deleted.get(cid) ?? new Set();\n                        peers.add(peerId);\n                        deleted.set(cid, peers);\n                    }\n                    count++;\n                }\n                catch (err) {\n                    this.log.error(err.message);\n                }\n            }\n            // Commit the deletes to the datastore\n            if (deleted.size > 0) {\n                this.log('deleting %d / %d entries', deleteCount, count);\n                await batch.commit();\n            }\n            else {\n                this.log('nothing to delete');\n            }\n            // Clear expired entries from the cache\n            for (const [cid, peers] of deleted) {\n                const key = makeProviderKey(cid);\n                const provs = this.cache.get(key);\n                if (provs != null) {\n                    for (const peerId of peers) {\n                        provs.delete(peerId);\n                    }\n                    if (provs.size === 0) {\n                        this.cache.remove(key);\n                    }\n                    else {\n                        this.cache.set(key, provs);\n                    }\n                }\n            }\n            this.log('Cleanup successful (%dms)', Date.now() - start);\n        });\n    }\n    /**\n     * Get the currently known provider peer ids for a given CID\n     */\n    async _getProvidersMap(cid) {\n        const cacheKey = makeProviderKey(cid);\n        let provs = this.cache.get(cacheKey);\n        if (provs == null) {\n            provs = await loadProviders(this.datastore, cid);\n            this.cache.set(cacheKey, provs);\n        }\n        return provs;\n    }\n    /**\n     * Add a new provider for the given CID\n     */\n    async addProvider(cid, provider) {\n        await this.syncQueue.add(async () => {\n            this.log('%p provides %s', provider, cid);\n            const provs = await this._getProvidersMap(cid);\n            this.log('loaded %s provs', provs.size);\n            const now = new Date();\n            provs.set(provider.toString(), now);\n            const dsKey = makeProviderKey(cid);\n            this.cache.set(dsKey, provs);\n            await writeProviderEntry(this.datastore, cid, provider, now);\n        });\n    }\n    /**\n     * Get a list of providers for the given CID\n     */\n    async getProviders(cid) {\n        return this.syncQueue.add(async () => {\n            this.log('get providers for %s', cid);\n            const provs = await this._getProvidersMap(cid);\n            return [...provs.keys()].map(peerIdStr => {\n                return (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_6__.peerIdFromString)(peerIdStr);\n            });\n        }, {\n            // no timeout is specified for this queue so it will not\n            // throw, but this is required to get the right return\n            // type since p-queue@7.3.4\n            throwOnTimeout: true\n        });\n    }\n}\n/**\n * Encode the given key its matching datastore key\n */\nfunction makeProviderKey(cid) {\n    const cidStr = typeof cid === 'string' ? cid : (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_3__.toString)(cid.multihash.bytes, 'base32');\n    return `${_constants_js__WEBPACK_IMPORTED_MODULE_4__.PROVIDER_KEY_PREFIX}/${cidStr}`;\n}\n/**\n * Write a provider into the given store\n */\nasync function writeProviderEntry(store, cid, peer, time) {\n    const dsKey = [\n        makeProviderKey(cid),\n        '/',\n        peer.toString()\n    ].join('');\n    const key = new interface_datastore_key__WEBPACK_IMPORTED_MODULE_1__.Key(dsKey);\n    const buffer = uint8_varint__WEBPACK_IMPORTED_MODULE_2__.encode(time.getTime());\n    await store.put(key, buffer);\n}\n/**\n * Parse the CID and provider peer id from the key\n */\nfunction parseProviderKey(key) {\n    const parts = key.toString().split('/');\n    if (parts.length !== 5) {\n        throw new Error(`incorrectly formatted provider entry key in datastore: ${key.toString()}`);\n    }\n    return {\n        cid: parts[3],\n        peerId: parts[4]\n    };\n}\n/**\n * Load providers for the given CID from the store\n */\nasync function loadProviders(store, cid) {\n    const providers = new Map();\n    const query = store.query({ prefix: makeProviderKey(cid) });\n    for await (const entry of query) {\n        const { peerId } = parseProviderKey(entry.key);\n        providers.set(peerId, readTime(entry.value));\n    }\n    return providers;\n}\nfunction readTime(buf) {\n    return new Date(uint8_varint__WEBPACK_IMPORTED_MODULE_2__.decode(buf));\n}\n//# sourceMappingURL=providers.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/providers.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/query-self.js":
/*!*************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/query-self.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QuerySelf: () => (/* binding */ QuerySelf)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/events.js\");\n/* harmony import */ var any_signal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! any-signal */ \"./node_modules/any-signal/dist/src/index.js\");\n/* harmony import */ var it_length__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-length */ \"./node_modules/it-length/dist/src/index.js\");\n/* harmony import */ var it_pipe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! it-pipe */ \"./node_modules/it-pipe/dist/src/index.js\");\n/* harmony import */ var it_take__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! it-take */ \"./node_modules/it-take/dist/src/index.js\");\n/* harmony import */ var p_defer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! p-defer */ \"./node_modules/p-defer/index.js\");\n/* harmony import */ var p_event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! p-event */ \"./node_modules/p-event/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@libp2p/kad-dht/dist/src/constants.js\");\n\n\n\n\n\n\n\n\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\nclass QuerySelf {\n    log;\n    peerId;\n    peerRouting;\n    routingTable;\n    count;\n    interval;\n    initialInterval;\n    queryTimeout;\n    started;\n    timeoutId;\n    controller;\n    initialQuerySelfHasRun;\n    querySelfPromise;\n    constructor(components, init) {\n        const { peerRouting, logPrefix, count, interval, queryTimeout, routingTable } = init;\n        this.peerId = components.peerId;\n        this.log = components.logger.forComponent(`${logPrefix}:query-self`);\n        this.started = false;\n        this.peerRouting = peerRouting;\n        this.routingTable = routingTable;\n        this.count = count ?? _constants_js__WEBPACK_IMPORTED_MODULE_4__.K;\n        this.interval = interval ?? _constants_js__WEBPACK_IMPORTED_MODULE_4__.QUERY_SELF_INTERVAL;\n        this.initialInterval = init.initialInterval ?? _constants_js__WEBPACK_IMPORTED_MODULE_4__.QUERY_SELF_INITIAL_INTERVAL;\n        this.queryTimeout = queryTimeout ?? _constants_js__WEBPACK_IMPORTED_MODULE_4__.QUERY_SELF_TIMEOUT;\n        this.initialQuerySelfHasRun = init.initialQuerySelfHasRun;\n    }\n    isStarted() {\n        return this.started;\n    }\n    start() {\n        if (this.started) {\n            return;\n        }\n        this.started = true;\n        clearTimeout(this.timeoutId);\n        this.timeoutId = setTimeout(() => {\n            this.querySelf()\n                .catch(err => {\n                this.log.error('error running self-query', err);\n            });\n        }, this.initialInterval);\n    }\n    stop() {\n        this.started = false;\n        if (this.timeoutId != null) {\n            clearTimeout(this.timeoutId);\n        }\n        if (this.controller != null) {\n            this.controller.abort();\n        }\n    }\n    async querySelf() {\n        if (!this.started) {\n            this.log('skip self-query because we are not started');\n            return;\n        }\n        if (this.querySelfPromise != null) {\n            this.log('joining existing self query');\n            return this.querySelfPromise.promise;\n        }\n        this.querySelfPromise = (0,p_defer__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\n        if (this.started) {\n            this.controller = new AbortController();\n            const timeoutSignal = AbortSignal.timeout(this.queryTimeout);\n            const signal = (0,any_signal__WEBPACK_IMPORTED_MODULE_0__.anySignal)([this.controller.signal, timeoutSignal]);\n            // this controller will get used for lots of dial attempts so make sure we don't cause warnings to be logged\n            (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_6__.setMaxListeners)(Infinity, signal, this.controller.signal, timeoutSignal);\n            try {\n                if (this.routingTable.size === 0) {\n                    this.log('routing table was empty, waiting for some peers before running query');\n                    // wait to discover at least one DHT peer\n                    await (0,p_event__WEBPACK_IMPORTED_MODULE_7__.pEvent)(this.routingTable, 'peer:add', {\n                        signal\n                    });\n                }\n                this.log('run self-query, look for %d peers timing out after %dms', this.count, this.queryTimeout);\n                const start = Date.now();\n                const found = await (0,it_pipe__WEBPACK_IMPORTED_MODULE_2__.pipe)(this.peerRouting.getClosestPeers(this.peerId.toBytes(), {\n                    signal,\n                    isSelfQuery: true\n                }), (source) => (0,it_take__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(source, this.count), async (source) => (0,it_length__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(source));\n                this.log('self-query found %d peers in %dms', found, Date.now() - start);\n            }\n            catch (err) {\n                this.log.error('self-query error', err);\n            }\n            finally {\n                signal.clear();\n                if (this.initialQuerySelfHasRun != null) {\n                    this.initialQuerySelfHasRun.resolve();\n                    this.initialQuerySelfHasRun = undefined;\n                }\n            }\n        }\n        this.querySelfPromise.resolve();\n        this.querySelfPromise = undefined;\n        if (!this.started) {\n            return;\n        }\n        this.timeoutId = setTimeout(() => {\n            this.querySelf()\n                .catch(err => {\n                this.log.error('error running self-query', err);\n            });\n        }, this.interval);\n    }\n}\n//# sourceMappingURL=query-self.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/query-self.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/query/events.js":
/*!***************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/query/events.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPeerEvent: () => (/* binding */ addPeerEvent),\n/* harmony export */   dialPeerEvent: () => (/* binding */ dialPeerEvent),\n/* harmony export */   finalPeerEvent: () => (/* binding */ finalPeerEvent),\n/* harmony export */   peerResponseEvent: () => (/* binding */ peerResponseEvent),\n/* harmony export */   providerEvent: () => (/* binding */ providerEvent),\n/* harmony export */   queryErrorEvent: () => (/* binding */ queryErrorEvent),\n/* harmony export */   sendQueryEvent: () => (/* binding */ sendQueryEvent),\n/* harmony export */   valueEvent: () => (/* binding */ valueEvent)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/event-target.js\");\n\nfunction sendQueryEvent(fields, options = {}) {\n    const event = {\n        ...fields,\n        name: 'SEND_QUERY',\n        type: 0,\n        messageName: fields.type,\n        messageType: fields.type\n    };\n    options.onProgress?.(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CustomEvent('kad-dht:query:send-query', { detail: event }));\n    return event;\n}\nfunction peerResponseEvent(fields, options = {}) {\n    const event = {\n        ...fields,\n        name: 'PEER_RESPONSE',\n        type: 1,\n        messageName: fields.messageType,\n        closer: (fields.closer != null) ? fields.closer : [],\n        providers: (fields.providers != null) ? fields.providers : []\n    };\n    options.onProgress?.(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CustomEvent('kad-dht:query:peer-response', { detail: event }));\n    return event;\n}\nfunction finalPeerEvent(fields, options = {}) {\n    const event = {\n        ...fields,\n        name: 'FINAL_PEER',\n        type: 2\n    };\n    options.onProgress?.(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CustomEvent('kad-dht:query:final-peer', { detail: event }));\n    return event;\n}\nfunction queryErrorEvent(fields, options = {}) {\n    const event = {\n        ...fields,\n        name: 'QUERY_ERROR',\n        type: 3\n    };\n    options.onProgress?.(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CustomEvent('kad-dht:query:query-error', { detail: event }));\n    return event;\n}\nfunction providerEvent(fields, options = {}) {\n    const event = {\n        ...fields,\n        name: 'PROVIDER',\n        type: 4\n    };\n    options.onProgress?.(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CustomEvent('kad-dht:query:provider', { detail: event }));\n    return event;\n}\nfunction valueEvent(fields, options = {}) {\n    const event = {\n        ...fields,\n        name: 'VALUE',\n        type: 5\n    };\n    options.onProgress?.(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CustomEvent('kad-dht:query:value', { detail: event }));\n    return event;\n}\nfunction addPeerEvent(fields, options = {}) {\n    const event = {\n        ...fields,\n        name: 'ADD_PEER',\n        type: 6\n    };\n    options.onProgress?.(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CustomEvent('kad-dht:query:add-peer', { detail: event }));\n    return event;\n}\nfunction dialPeerEvent(fields, options = {}) {\n    const event = {\n        ...fields,\n        name: 'DIAL_PEER',\n        type: 7\n    };\n    options.onProgress?.(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CustomEvent('kad-dht:query:dial-peer', { detail: event }));\n    return event;\n}\n//# sourceMappingURL=events.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/query/events.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/query/manager.js":
/*!****************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/query/manager.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryManager: () => (/* binding */ QueryManager)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/events.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/event-target.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/peer-collections */ \"./node_modules/@libp2p/peer-collections/dist/src/set.js\");\n/* harmony import */ var any_signal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! any-signal */ \"./node_modules/any-signal/dist/src/index.js\");\n/* harmony import */ var it_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-merge */ \"./node_modules/it-merge/dist/src/index.js\");\n/* harmony import */ var race_signal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! race-signal */ \"./node_modules/race-signal/dist/src/index.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/@libp2p/kad-dht/dist/src/constants.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/@libp2p/kad-dht/dist/src/utils.js\");\n/* harmony import */ var _query_path_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./query-path.js */ \"./node_modules/@libp2p/kad-dht/dist/src/query/query-path.js\");\n\n\n\n\n\n\n\n\n\n/**\n * Keeps track of all running queries\n */\nclass QueryManager {\n    disjointPaths;\n    alpha;\n    shutDownController;\n    running;\n    queries;\n    logger;\n    peerId;\n    routingTable;\n    initialQuerySelfHasRun;\n    logPrefix;\n    metrics;\n    constructor(components, init) {\n        const { disjointPaths = _constants_js__WEBPACK_IMPORTED_MODULE_4__.K, alpha = _constants_js__WEBPACK_IMPORTED_MODULE_4__.ALPHA, logPrefix } = init;\n        this.logPrefix = logPrefix;\n        this.disjointPaths = disjointPaths ?? _constants_js__WEBPACK_IMPORTED_MODULE_4__.K;\n        this.running = false;\n        this.alpha = alpha ?? _constants_js__WEBPACK_IMPORTED_MODULE_4__.ALPHA;\n        this.queries = 0;\n        this.initialQuerySelfHasRun = init.initialQuerySelfHasRun;\n        this.routingTable = init.routingTable;\n        this.logger = components.logger;\n        this.peerId = components.peerId;\n        if (components.metrics != null) {\n            this.metrics = {\n                runningQueries: components.metrics.registerMetric(`${logPrefix.replaceAll(':', '_')}_running_queries`),\n                queryTime: components.metrics.registerMetric(`${logPrefix.replaceAll(':', '_')}_query_time_seconds`)\n            };\n        }\n        // allow us to stop queries on shut down\n        this.shutDownController = new AbortController();\n        // make sure we don't make a lot of noise in the logs\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.setMaxListeners)(Infinity, this.shutDownController.signal);\n    }\n    isStarted() {\n        return this.running;\n    }\n    /**\n     * Starts the query manager\n     */\n    async start() {\n        this.running = true;\n        // allow us to stop queries on shut down\n        this.shutDownController = new AbortController();\n        // make sure we don't make a lot of noise in the logs\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.setMaxListeners)(Infinity, this.shutDownController.signal);\n    }\n    /**\n     * Stops all queries\n     */\n    async stop() {\n        this.running = false;\n        this.shutDownController.abort();\n    }\n    async *run(key, queryFunc, options = {}) {\n        if (!this.running) {\n            throw new Error('QueryManager not started');\n        }\n        const stopQueryTimer = this.metrics?.queryTime.timer();\n        if (options.signal == null) {\n            // don't let queries run forever\n            const signal = AbortSignal.timeout(_constants_js__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_QUERY_TIMEOUT);\n            // this signal will get listened to for network requests, etc\n            // so make sure we don't make a lot of noise in the logs\n            (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.setMaxListeners)(Infinity, signal);\n            options = {\n                ...options,\n                signal\n            };\n        }\n        // if the user breaks out of a for..await of loop iterating over query\n        // results we need to cancel any in-flight network requests\n        const queryEarlyExitController = new AbortController();\n        const signal = (0,any_signal__WEBPACK_IMPORTED_MODULE_0__.anySignal)([\n            this.shutDownController.signal,\n            queryEarlyExitController.signal,\n            options.signal\n        ]);\n        // this signal will get listened to for every invocation of queryFunc\n        // so make sure we don't make a lot of noise in the logs\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.setMaxListeners)(Infinity, signal, queryEarlyExitController.signal);\n        const log = this.logger.forComponent(`${this.logPrefix}:query:` + (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_3__.toString)(key, 'base58btc'));\n        // query a subset of peers up to `kBucketSize / 2` in length\n        const startTime = Date.now();\n        const cleanUp = new _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__.TypedEventEmitter();\n        let queryFinished = false;\n        try {\n            if (options.isSelfQuery !== true && this.initialQuerySelfHasRun != null) {\n                log('waiting for initial query-self query before continuing');\n                await (0,race_signal__WEBPACK_IMPORTED_MODULE_2__.raceSignal)(this.initialQuerySelfHasRun.promise, signal);\n                this.initialQuerySelfHasRun = undefined;\n            }\n            log('query:start');\n            this.queries++;\n            this.metrics?.runningQueries.update(this.queries);\n            const id = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_7__.convertBuffer)(key);\n            const peers = this.routingTable.closestPeers(id);\n            const peersToQuery = peers.slice(0, Math.min(this.disjointPaths, peers.length));\n            if (peers.length === 0) {\n                log.error('Running query with no peers');\n                return;\n            }\n            // make sure we don't get trapped in a loop\n            const peersSeen = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_8__.PeerSet();\n            // Create query paths from the starting peers\n            const paths = peersToQuery.map((peer, index) => {\n                return (0,_query_path_js__WEBPACK_IMPORTED_MODULE_9__.queryPath)({\n                    key,\n                    startingPeer: peer,\n                    ourPeerId: this.peerId,\n                    signal,\n                    query: queryFunc,\n                    pathIndex: index,\n                    numPaths: peersToQuery.length,\n                    alpha: this.alpha,\n                    cleanUp,\n                    queryFuncTimeout: options.queryFuncTimeout,\n                    log,\n                    peersSeen,\n                    onProgress: options.onProgress\n                });\n            });\n            // Execute the query along each disjoint path and yield their results as they become available\n            for await (const event of (0,it_merge__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(...paths)) {\n                if (event.name === 'QUERY_ERROR') {\n                    log.error('query error', event.error);\n                }\n                yield event;\n            }\n            queryFinished = true;\n        }\n        catch (err) {\n            if (!this.running && err.code === 'ERR_QUERY_ABORTED') {\n                // ignore query aborted errors that were thrown during query manager shutdown\n            }\n            else {\n                throw err;\n            }\n        }\n        finally {\n            if (!queryFinished) {\n                log('query exited early');\n                queryEarlyExitController.abort();\n            }\n            signal.clear();\n            this.queries--;\n            this.metrics?.runningQueries.update(this.queries);\n            if (stopQueryTimer != null) {\n                stopQueryTimer();\n            }\n            cleanUp.dispatchEvent(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__.CustomEvent('cleanup'));\n            log('query:done in %dms', Date.now() - startTime);\n        }\n    }\n}\n//# sourceMappingURL=manager.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/query/manager.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/query/query-path.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/query/query-path.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   queryPath: () => (/* binding */ queryPath)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/events.js\");\n/* harmony import */ var any_signal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! any-signal */ \"./node_modules/any-signal/dist/src/index.js\");\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! p-queue */ \"./node_modules/p-queue/dist/index.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var uint8arrays_xor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/xor */ \"./node_modules/uint8arrays/dist/src/xor.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/@libp2p/kad-dht/dist/src/utils.js\");\n/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./events.js */ \"./node_modules/@libp2p/kad-dht/dist/src/query/events.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@libp2p/kad-dht/dist/src/query/utils.js\");\n\n\n\n\n\n\n\n\nconst MAX_XOR = BigInt('0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF');\n/**\n * Walks a path through the DHT, calling the passed query function for\n * every peer encountered that we have not seen before\n */\nasync function* queryPath(options) {\n    const { key, startingPeer, ourPeerId, signal, query, alpha, pathIndex, numPaths, cleanUp, queryFuncTimeout, log, peersSeen } = options;\n    // Only ALPHA node/value lookups are allowed at any given time for each process\n    // https://github.com/libp2p/specs/tree/master/kad-dht#alpha-concurrency-parameter-%CE%B1\n    const queue = new p_queue__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n        concurrency: alpha\n    });\n    // perform lookups on kadId, not the actual value\n    const kadId = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.convertBuffer)(key);\n    /**\n     * Adds the passed peer to the query queue if it's not us and no\n     * other path has passed through this peer\n     */\n    function queryPeer(peer, peerKadId) {\n        if (peer == null) {\n            return;\n        }\n        peersSeen.add(peer);\n        const peerXor = BigInt('0x' + (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)((0,uint8arrays_xor__WEBPACK_IMPORTED_MODULE_2__.xor)(peerKadId, kadId), 'base16'));\n        queue.add(async () => {\n            const signals = [signal];\n            if (queryFuncTimeout != null) {\n                signals.push(AbortSignal.timeout(queryFuncTimeout));\n            }\n            const compoundSignal = (0,any_signal__WEBPACK_IMPORTED_MODULE_0__.anySignal)(signals);\n            // this signal can get listened to a lot\n            (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.setMaxListeners)(Infinity, compoundSignal);\n            try {\n                for await (const event of query({\n                    key,\n                    peer,\n                    signal: compoundSignal,\n                    pathIndex,\n                    numPaths\n                })) {\n                    if (compoundSignal.aborted) {\n                        return;\n                    }\n                    // if there are closer peers and the query has not completed, continue the query\n                    if (event.name === 'PEER_RESPONSE') {\n                        for (const closerPeer of event.closer) {\n                            if (peersSeen.has(closerPeer.id)) { // eslint-disable-line max-depth\n                                log('already seen %p in query', closerPeer.id);\n                                continue;\n                            }\n                            if (ourPeerId.equals(closerPeer.id)) { // eslint-disable-line max-depth\n                                log('not querying ourselves');\n                                continue;\n                            }\n                            const closerPeerKadId = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.convertPeerId)(closerPeer.id);\n                            const closerPeerXor = BigInt('0x' + (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)((0,uint8arrays_xor__WEBPACK_IMPORTED_MODULE_2__.xor)(closerPeerKadId, kadId), 'base16'));\n                            // only continue query if closer peer is actually closer\n                            if (closerPeerXor > peerXor) { // eslint-disable-line max-depth\n                                log('skipping %p as they are not closer to %b than %p', closerPeer.id, key, peer);\n                                continue;\n                            }\n                            log('querying closer peer %p', closerPeer.id);\n                            queryPeer(closerPeer.id, closerPeerKadId);\n                        }\n                    }\n                    queue.emit('completed', event);\n                }\n            }\n            catch (err) {\n                if (!signal.aborted) {\n                    return (0,_events_js__WEBPACK_IMPORTED_MODULE_6__.queryErrorEvent)({\n                        from: peer,\n                        error: err\n                    }, options);\n                }\n            }\n            finally {\n                compoundSignal.clear();\n            }\n        }, {\n            // use xor value as the queue priority - closer peers should execute first\n            // subtract it from MAX_XOR because higher priority values execute sooner\n            // @ts-expect-error this is supposed to be a Number but it's ok to use BigInts\n            // as long as all priorities are BigInts since we won't mix BigInts and Number\n            // values in arithmetic operations\n            priority: MAX_XOR - peerXor\n        }).catch(err => {\n            log.error(err);\n        });\n    }\n    // begin the query with the starting peer\n    queryPeer(startingPeer, await (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.convertPeerId)(startingPeer));\n    // yield results as they come in\n    yield* (0,_utils_js__WEBPACK_IMPORTED_MODULE_7__.queueToGenerator)(queue, signal, cleanUp, log);\n}\n//# sourceMappingURL=query-path.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/query/query-path.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/query/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/query/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   queueToGenerator: () => (/* binding */ queueToGenerator)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var it_pushable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-pushable */ \"./node_modules/it-pushable/dist/src/index.js\");\n\n\nasync function* queueToGenerator(queue, signal, cleanUp, log) {\n    const stream = (0,it_pushable__WEBPACK_IMPORTED_MODULE_0__.pushable)({\n        objectMode: true\n    });\n    const cleanup = (err) => {\n        log('clean up queue, results %d, queue size %d, pending tasks %d', stream.readableLength, queue.size, queue.pending);\n        queue.clear();\n        stream.end(err);\n    };\n    const onQueueJobComplete = (result) => {\n        if (result != null) {\n            stream.push(result);\n        }\n    };\n    const onQueueError = (err) => {\n        log('queue error', err);\n        cleanup(err);\n    };\n    const onQueueIdle = () => {\n        log('queue idle');\n        cleanup();\n    };\n    // clear the queue and throw if the query is aborted\n    const onSignalAbort = () => {\n        log('abort queue');\n        cleanup(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Query aborted', 'ERR_QUERY_ABORTED'));\n    };\n    // the user broke out of the loop early, ensure we resolve the deferred result\n    // promise and clear the queue of any remaining jobs\n    const onCleanUp = () => {\n        cleanup();\n    };\n    // add listeners\n    queue.on('completed', onQueueJobComplete);\n    queue.on('error', onQueueError);\n    queue.on('idle', onQueueIdle);\n    signal.addEventListener('abort', onSignalAbort);\n    cleanUp.addEventListener('cleanup', onCleanUp);\n    try {\n        yield* stream;\n    }\n    finally {\n        // remove listeners\n        queue.removeListener('completed', onQueueJobComplete);\n        queue.removeListener('error', onQueueError);\n        queue.removeListener('idle', onQueueIdle);\n        signal.removeEventListener('abort', onSignalAbort);\n        cleanUp.removeEventListener('cleanup', onCleanUp);\n    }\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/query/utils.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/record/selectors.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/record/selectors.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bestRecord: () => (/* binding */ bestRecord),\n/* harmony export */   selectors: () => (/* binding */ selectors)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n\n\n/**\n * Select the best record out of the given records\n */\nfunction bestRecord(selectors, k, records) {\n    if (records.length === 0) {\n        const errMsg = 'No records given';\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(errMsg, 'ERR_NO_RECORDS_RECEIVED');\n    }\n    const kStr = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(k);\n    const parts = kStr.split('/');\n    if (parts.length < 3) {\n        const errMsg = 'Record key does not have a selector function';\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(errMsg, 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY');\n    }\n    const selector = selectors[parts[1].toString()];\n    if (selector == null) {\n        const errMsg = `No selector function configured for key type \"${parts[1]}\"`;\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(errMsg, 'ERR_UNRECOGNIZED_KEY_PREFIX');\n    }\n    if (records.length === 1) {\n        return 0;\n    }\n    return selector(k, records);\n}\n/**\n * Best record selector, for public key records.\n * Simply returns the first record, as all valid public key\n * records are equal\n */\nfunction publickKey(k, records) {\n    return 0;\n}\nconst selectors = {\n    pk: publickKey\n};\n//# sourceMappingURL=selectors.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/record/selectors.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/record/validators.js":
/*!********************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/record/validators.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validators: () => (/* binding */ validators),\n/* harmony export */   verifyRecord: () => (/* binding */ verifyRecord)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/hashes/sha2 */ \"./node_modules/multiformats/dist/src/hashes/sha2-browser.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n\n\n\n\n/**\n * Checks a record and ensures it is still valid.\n * It runs the needed validators.\n * If verification fails the returned Promise will reject with the error.\n */\nasync function verifyRecord(validators, record) {\n    const key = record.key;\n    const keyString = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(key);\n    const parts = keyString.split('/');\n    if (parts.length < 3) {\n        // No validator available\n        return;\n    }\n    const validator = validators[parts[1].toString()];\n    if (validator == null) {\n        const errMsg = `No validator available for key type \"${parts[1]}\"`;\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(errMsg, 'ERR_INVALID_RECORD_KEY_TYPE');\n    }\n    await validator(key, record.value);\n}\n/**\n * Validator for public key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n * If validation fails the returned Promise will reject with the error.\n *\n * @param {Uint8Array} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Uint8Array} publicKey - The public key to validate against (protobuf encoded).\n */\nconst validatePublicKeyRecord = async (key, publicKey) => {\n    if (!(key instanceof Uint8Array)) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('\"key\" must be a Uint8Array', 'ERR_INVALID_RECORD_KEY_NOT_BUFFER');\n    }\n    if (key.byteLength < 5) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('invalid public key record', 'ERR_INVALID_RECORD_KEY_TOO_SHORT');\n    }\n    const prefix = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(key.subarray(0, 4));\n    if (prefix !== '/pk/') {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('key was not prefixed with /pk/', 'ERR_INVALID_RECORD_KEY_BAD_PREFIX');\n    }\n    const keyhash = key.slice(4);\n    const publicKeyHash = await multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_0__.sha256.digest(publicKey);\n    if (!(0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_1__.equals)(keyhash, publicKeyHash.bytes)) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('public key does not match passed in key', 'ERR_INVALID_RECORD_HASH_MISMATCH');\n    }\n};\nconst validators = {\n    pk: validatePublicKeyRecord\n};\n//# sourceMappingURL=validators.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/record/validators.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/routing-table/generated-prefix-list-browser.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/routing-table/generated-prefix-list-browser.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ([\n    77591, 22417, 43971, 28421, 740, 29829, 71467, 228973, 196661, 78537, 27689, 36431, 44415, 14362, 19456, 106025,\n    96308, 2882, 49509, 21149, 87173, 131409, 75844, 23676, 121838, 30291, 17492, 2953, 7564, 110620, 129477, 127283,\n    53113, 72417, 165166, 109690, 21200, 102125, 24049, 71504, 90342, 25307, 72039, 26812, 26715, 32264, 133800, 71161,\n    88956, 171987, 51779, 24425, 16671, 30251, 186294, 247761, 14202, 2121, 8465, 35024, 4876, 85917, 169730, 3638,\n    256836, 96184, 943, 18678, 6583, 52907, 35807, 112254, 214097, 18796, 11595, 9243, 23554, 887, 268203, 382004,\n    24590, 111335, 11625, 16619, 29039, 102425, 69006, 97976, 92362, 32552, 63717, 41433, 128974, 137630, 59943, 10019,\n    13986, 35430, 33665, 108037, 43799, 43280, 38195, 29078, 58629, 18265, 14425, 46832, 235538, 40830, 77881, 110717,\n    58937, 3463, 325358, 51300, 47623, 117252, 19007, 10170, 20540, 91237, 294813, 4951, 79841, 56232, 36270, 128547,\n    69209, 66275, 100156, 32063, 73531, 34439, 80937, 28892, 44466, 88595, 216307, 32583, 49620, 16605, 82127, 45807,\n    21630, 78726, 20235, 40163, 111007, 96926, 5567, 72083, 21665, 58844, 39419, 179767, 48328, 42662, 51550, 5251,\n    37811, 49608, 81056, 50854, 55513, 20922, 18891, 197409, 164656, 32593, 71449, 220474, 58919, 85682, 67854, 13758,\n    35066, 3565, 61905, 214793, 119572, 141419, 21504, 10302, 27354, 67003, 46131, 32668, 15165, 64871, 34450, 17821,\n    2757, 11452, 34189, 5160, 12257, 85523, 560, 53385, 65887, 119549, 135620, 312353, 115979, 122356, 10867, 193231,\n    124537, 54783, 90675, 120791, 4715, 142253, 50943, 17271, 43358, 25331, 4917, 120566, 34580, 12878, 33786, 160528,\n    32523, 4869, 301307, 104817, 81491, 23276, 8832, 97911, 31265, 52065, 7998, 49622, 9715, 43998, 34091, 84587,\n    20664, 69041, 29419, 53205, 10838, 58288, 116145, 6185, 5154, 141795, 35924, 21307, 144738, 43730, 12085, 8279,\n    10002, 119, 133779, 199668, 72938, 31768, 39176, 67875, 38453, 9700, 44144, 4121, 116048, 41733, 12868, 82669,\n    92308, 128, 34262, 11332, 7712, 90764, 36141, 13553, 71312, 77470, 117314, 96549, 49135, 23602, 54468, 28605,\n    6327, 62308, 17171, 67531, 21319, 14105, 894, 107722, 46157, 8503, 51069, 100472, 45138, 15246, 14577, 35609,\n    191464, 1757, 13364, 161349, 32067, 91705, 81144, 52339, 5408, 91066, 21983, 14157, 100545, 4372, 26630, 129112,\n    1423, 29676, 213626, 4397, 88436, 99190, 6877, 49958, 26122, 114348, 60661, 29818, 293118, 50042, 179738, 16400,\n    163423, 89627, 31040, 43973, 36638, 45952, 5153, 1894, 109322, 1898, 134021, 12402, 112077, 68309, 190269, 69866,\n    31938, 107383, 11522, 105232, 11248, 14868, 39852, 71707, 186525, 16530, 38162, 106212, 11700, 5130, 16608, 26998,\n    59586, 108399, 230033, 43683, 48135, 82179, 2073, 5015, 196684, 189293, 16378, 23452, 8301, 35640, 11632, 214551,\n    29240, 57644, 33137, 91949, 55157, 52384, 117313, 5090, 17717, 89668, 49363, 82238, 241035, 66216, 29066, 184088,\n    97206, 62820, 26595, 4241, 135635, 173672, 8202, 459, 71355, 146294, 29587, 3008, 135385, 141203, 14803, 6634,\n    45094, 69362, 50925, 546, 51884, 62011, 83296, 234584, 44515, 56050, 89476, 87751, 19373, 12691, 149923, 19794,\n    13833, 35846, 87557, 58339, 2884, 19145, 25647, 12224, 11024, 77338, 64608, 122297, 53025, 7205, 36189, 36294,\n    170779, 21750, 7739, 173883, 75192, 35664, 224240, 113121, 30181, 26267, 27036, 117827, 92015, 106516, 55628, 203549,\n    67949, 60462, 60844, 35911, 20457, 1820, 920, 19773, 8738, 73173, 181993, 38521, 98254, 76257, 46008, 92796,\n    5384, 26868, 151566, 22124, 2411, 15919, 186872, 180021, 28099, 152961, 78811, 80237, 62352, 102653, 74259, 184890,\n    16792, 123702, 224945, 29940, 19512, 75283, 14059, 112691, 92811, 233329, 20411, 138569, 53341, 109802, 50600, 134528,\n    66747, 5529, 166531, 31578, 64732, 67189, 1596, 126357, 967, 167999, 206598, 109752, 119431, 207825, 78791, 91938,\n    10301, 27311, 24233, 252343, 28831, 32812, 66002, 112267, 90895, 8786, 8095, 16824, 22866, 21813, 60507, 174833,\n    19549, 130985, 117051, 52110, 6938, 81923, 123864, 38061, 919, 18680, 53534, 46739, 112893, 161529, 85429, 26761,\n    11900, 81121, 91968, 15390, 217947, 56524, 1713, 6654, 37089, 85630, 138866, 61850, 16491, 75577, 16884, 98296,\n    73523, 6140, 44645, 6062, 36366, 29844, 57946, 37932, 42472, 5266, 20834, 19309, 33753, 127182, 134259, 35810,\n    41805, 45878, 312001, 14881, 47757, 49251, 120050, 44252, 3708, 25856, 107864, 120347, 1228, 36550, 41682, 34496,\n    47025, 8393, 173365, 246526, 12894, 161607, 35670, 90785, 126572, 2095, 124731, 157033, 58694, 554, 12786, 9642,\n    4817, 16136, 47864, 174698, 66992, 4639, 69284, 10625, 40710, 27763, 51738, 30404, 264105, 137904, 109882, 52487,\n    42824, 57514, 2740, 10479, 146799, 107390, 16586, 88038, 174951, 9410, 16185, 44158, 5568, 40658, 46108, 12763,\n    97385, 26175, 108859, 664, 230732, 67470, 46663, 14395, 50750, 141320, 93140, 15361, 47997, 55784, 6791, 307840,\n    118569, 107326, 18056, 58281, 260415, 54691, 8790, 73332, 45633, 7511, 45674, 143373, 14031, 11799, 94491, 35646,\n    96544, 14560, 26049, 32983, 25791, 83814, 42094, 231370, 63955, 139212, 2359, 169908, 3108, 183486, 105867, 28197,\n    32941, 124968, 26402, 88267, 149768, 23053, 3078, 19091, 52924, 25383, 19209, 111548, 97361, 3959, 24880, 235061,\n    9099, 24921, 161254, 151405, 20508, 7159, 34381, 20133, 11434, 74036, 19974, 34769, 36585, 1076, 22454, 17354,\n    38727, 235160, 111547, 96454, 117448, 156940, 91330, 37299, 7310, 26915, 117060, 51369, 22620, 61861, 322264, 106850,\n    111694, 15091, 2624, 40345, 300446, 177064, 1707, 27389, 54792, 327783, 132669, 183543, 59003, 17744, 20603, 151134,\n    106923, 53084, 71803, 279424, 319816, 11579, 21946, 16728, 38274, 72711, 5085, 83391, 88646, 40159, 25027, 34680,\n    10752, 12988, 54126, 30365, 18338, 100445, 230674, 44874, 84974, 143877, 123253, 139372, 28082, 91477, 144002, 13096,\n    219729, 46016, 50029, 42377, 14601, 6660, 58244, 58978, 23918, 88206, 113611, 64452, 17541, 41032, 10942, 12021,\n    49189, 10978, 40175, 37156, 10947, 71709, 106894, 112538, 57007, 137486, 150608, 152719, 40615, 7746, 279716, 13101,\n    19524, 28708, 40578, 72320, 1096, 182051, 94527, 51275, 22833, 45164, 81917, 77519, 48508, 5421, 140302, 37845,\n    149830, 5587, 27579, 5357, 428725, 248187, 6326, 206760, 39814, 32585, 89923, 44341, 288753, 284443, 96368, 31201,\n    94189, 119504, 20359, 52073, 103216, 179, 27934, 32801, 96035, 34111, 34309, 101326, 18198, 20704, 210266, 37643,\n    27880, 141873, 106000, 19414, 56614, 167714, 66483, 107885, 86602, 4379, 20796, 75467, 4987, 5017, 118857, 26003,\n    34308, 114428, 29198, 6686, 29697, 73632, 3739, 69795, 16798, 41504, 7207, 30722, 21436, 36735, 28067, 28545,\n    3239, 11221, 36031, 41889, 100010, 19247, 317673, 29495, 174554, 6424, 129725, 53845, 94986, 7955, 59676, 2604,\n    191497, 19735, 102214, 62954, 23844, 11872, 179525, 261436, 34492, 428, 78404, 142035, 16747, 17246, 27578, 37021,\n    33672, 57944, 26056, 135760, 2369, 61674, 122066, 31327, 19374, 157065, 40553, 130982, 69619, 71290, 38855, 72100,\n    92903, 95940, 51422, 165999, 65713, 57873, 50726, 7288, 20272, 2081, 42326, 22624, 81120, 57914, 79352, 19447,\n    1684, 72302, 11774, 302559, 161481, 96396, 13692, 414988, 3721, 79066, 56627, 46883, 21150, 11747, 12184, 5856,\n    113458, 176117, 84416, 52079, 27933, 3354, 59765, 141359, 2212, 216309, 2555, 23458, 196722, 142463, 45701, 44548,\n    28798, 19418, 215, 29916, 9396, 10574, 114226, 84475, 13520, 18694, 34056, 4524, 90302, 62930, 13539, 19407,\n    77209, 7728, 38088, 9535, 2263, 23875, 183945, 17750, 26274, 67172, 10585, 28042, 22199, 7478, 51331, 66030,\n    26774, 192929, 31434, 25850, 50197, 52926, 178158, 4679, 181256, 70184, 229600, 9959, 105594, 72158, 73974, 2726,\n    35085, 78087, 23284, 35568, 51713, 155676, 5401, 27254, 11966, 17569, 223253, 71993, 103357, 111477, 55722, 30504,\n    26034, 46774, 35392, 36285, 214814, 41143, 163465, 1051, 16094, 81044, 6636, 76489, 179102, 20712, 39178, 35683,\n    125177, 54219, 30617, 52994, 25324, 50123, 2543, 87529, 58995, 10688, 125199, 12388, 60158, 125481, 131646, 7642,\n    133350, 65874, 3438, 97277, 101450, 10075, 56344, 116821, 50778, 60547, 98016, 106135, 13859, 14255, 16300, 77373,\n    173521, 8285, 45932, 37426, 4054, 114295, 55947, 7703, 39114, 52, 51119, 128135, 19714, 60715, 9554, 50492,\n    88180, 2823, 118271, 52993, 122625, 97919, 23859, 37895, 25040, 33614, 32102, 20431, 3577, 9275, 15686, 43031,\n    157741, 110358, 1884, 40291, 125391, 13736, 5008, 64881, 87336, 77381, 70711, 43032, 49155, 118587, 70494, 4318,\n    10168, 30126, 12580, 10524, 280104, 104001, 145413, 2862, 84140, 6603, 106005, 13566, 12780, 11251, 42830, 571,\n    179910, 82443, 13146, 469, 42714, 32591, 265217, 424024, 92553, 54721, 134100, 6007, 15242, 114681, 59030, 16718,\n    85465, 200214, 85982, 55174, 165013, 23493, 56964, 82529, 109150, 32706, 27568, 82442, 5350, 14976, 13165, 44890,\n    60021, 21343, 33978, 17264, 4655, 22328, 27819, 75730, 16567, 55483, 14510, 17926, 45827, 150609, 3704, 7385,\n    272531, 161543, 76904, 122163, 52405, 2039, 19165, 41623, 14423, 228354, 3369, 176360, 85491, 7122, 35789, 303724,\n    4465, 13628, 2233, 55311, 118771, 20713, 10006, 221519, 45115, 71021, 35650, 29775, 7337, 10864, 20665, 21142,\n    1746, 15080, 1624, 32449, 10905, 105743, 229797, 7701, 3940, 22997, 178467, 57208, 389057, 39683, 59403, 63344,\n    63125, 54847, 69691, 18336, 56448, 3362, 37202, 18282, 29648, 138224, 35867, 10495, 5911, 28814, 26653, 31514,\n    176702, 26550, 45621, 11734, 4525, 40543, 73944, 121080, 27858, 155561, 14887, 44670, 30742, 8796, 107455, 113472,\n    56369, 75581, 183777, 240095, 133699, 153299, 8768, 160464, 26058, 49078, 103971, 21875, 71486, 44888, 17156, 9678,\n    89541, 123019, 102337, 3972, 83930, 21245, 87852, 109660, 287918, 183019, 686, 10100, 39177, 283941, 11274, 24736,\n    26793, 26214, 25995, 77011, 141580, 4070, 23742, 46285, 46632, 30700, 26669, 19056, 35951, 115575, 174034, 56097,\n    35463, 87425, 24575, 44245, 38701, 82317, 85922, 281616, 100333, 147697, 61503, 7730, 84330, 8530, 59917, 61597,\n    17173, 9092, 32658, 90288, 193136, 39023, 20381, 56654, 31132, 7779, 1919, 1375, 117128, 30819, 11169, 40938,\n    23935, 115201, 101155, 151034, 4835, 11231, 74550, 89388, 59951, 91704, 107312, 167882, 115062, 12732, 72738, 88703,\n    464019, 158267, 57995, 60496, 737, 14371, 123867, 4174, 243339, 159946, 7568, 16025, 134556, 110916, 38103, 191,\n    80226, 88794, 29688, 27230, 10454, 76308, 57647, 77409, 113483, 66864, 14745, 19808, 12023, 46583, 84805, 16015,\n    17102, 2231, 20611, 3547, 95740, 250131, 34559, 108894, 8498, 15853, 159169, 148920, 20942, 2813, 93160, 45188,\n    210613, 45531, 52587, 149062, 39782, 28194, 57849, 60965, 84954, 89766, 84453, 100927, 16501, 27658, 165311, 103841,\n    54192, 207341, 19558, 20084, 319622, 5672, 205467, 98462, 61849, 36279, 13609, 147177, 24726, 165015, 209489, 59591,\n    31157, 6551, 117580, 75060, 141146, 277310, 21072, 22023, 106474, 63041, 137443, 122965, 68371, 5383, 42146, 98961,\n    113467, 30863, 23794, 4843, 99630, 30392, 82679, 13699, 241612, 33601, 93146, 24319, 18643, 32155, 95669, 40440,\n    15333, 34089, 67799, 142144, 58245, 38633, 114531, 117400, 77861, 188726, 5507, 2568, 8853, 10987, 107222, 2663,\n    2421, 11530, 13345, 30075, 41785, 118661, 104786, 17459, 12490, 16281, 71936, 193555, 17431, 5944, 71758, 26485,\n    77317, 20803, 367167, 158, 7362, 93430, 11735, 172445, 46002, 11532, 54482, 930, 62911, 2235, 23004, 179236,\n    4764, 101859, 208113, 22477, 55163, 95579, 14098, 67320, 162556, 90709, 156949, 3826, 57492, 4025, 34092, 87442,\n    104565, 6718, 186015, 28214, 14209, 10039, 107186, 233912, 58877, 81637, 55265, 39828, 6194, 145813, 50831, 105849,\n    4974, 88319, 122296, 10272, 197216, 95714, 51540, 72418, 23324, 91555, 8743, 140452, 250249, 51666, 34124, 7229,\n    38592, 129641, 78169, 174242, 22464, 149964, 51450, 14034, 10026, 95376, 26190, 120062, 14401, 8700, 265, 31386,\n    143573, 7203, 229889, 61567, 4227, 140981, 2466, 72052, 10787, 10062, 30958, 6099, 38471, 30103, 23202, 208101,\n    70847, 467, 58934, 32271, 32984, 36637, 24107, 30771, 17109, 73353, 13650, 2098, 157040, 67366, 66904, 106018,\n    265380, 107238, 18535, 44025, 32681, 144983, 62505, 91295, 56120, 3082, 77508, 10322, 63023, 36700, 81885, 224127,\n    16721, 45023, 239261, 111272, 13852, 7866, 149243, 204199, 32309, 22084, 42029, 38316, 126644, 104973, 14406, 43454,\n    67322, 61310, 15789, 40285, 24026, 181047, 6301, 70927, 23319, 115823, 27248, 66693, 115875, 278566, 63007, 146844,\n    56841, 59007, 87368, 180001, 22370, 42114, 80605, 12022, 10374, 308, 25079, 14689, 12618, 63368, 7936, 264973,\n    212291, 136713, 95999, 105801, 18965, 32075, 48700, 52230, 35119, 96912, 32992, 8586, 16606, 101333, 101812, 14969,\n    39930, 759, 193090, 27387, 42914, 12937, 5058, 62646, 64528, 38624, 25743, 37502, 3716, 4435, 30352, 178687,\n    26461, 132611, 42002, 138442, 35833, 59582, 16345, 8048, 60319, 49349, 309, 47800, 49739, 90482, 26405, 34470,\n    63786, 32479, 85028, 39866, 47846, 11649, 23934, 29466, 2816, 42864, 31828, 7410, 74885, 49632, 47629, 111801,\n    90749, 19536, 18767, 105764, 59606, 21223, 10746, 76298, 22220, 39408, 7190, 79654, 64856, 11602, 82156, 272765,\n    17079, 70089, 245473, 51813, 184407, 384678, 1576, 122249, 5064, 27481, 6188, 25790, 74361, 27541, 318284, 45430,\n    31488, 620, 93579, 45723, 192118, 22670, 51913, 4162, 70244, 35966, 26397, 16199, 50899, 209613, 121702, 287507,\n    2993, 36101, 132229, 67345, 33062, 76295, 118628, 78705, 52316, 34375, 107083, 107454, 44863, 127561, 33964, 3073,\n    154010, 190914, 55967, 39074, 6272, 31047, 5550, 41123, 26154, 98638, 47110, 19998, 148091, 50229, 31329, 59900,\n    195442, 19106, 61347, 73497, 70015, 682, 45850, 25776, 38022, 148951, 6288, 37411, 232526, 109277, 27286, 32342,\n    9262, 5220, 16651, 23175, 46740, 129438, 78614, 121925, 66914, 88710, 127952, 5563, 21500, 34521, 10739, 14863,\n    191006, 62956, 17359, 16749, 67027, 56284, 69134, 43301, 35039, 58883, 54466, 60823, 404451, 75743, 59856, 86979,\n    7923, 34273, 83785, 32142, 7693, 268986, 197428, 282681, 17049, 22346, 22990, 92245, 107180, 3357, 37104, 96724,\n    49153, 7683, 31197, 43267, 82231, 164276, 23696, 20848, 188364, 22309, 24821, 158707, 1018, 22514, 70922, 27792,\n    45589, 59709, 10765, 736, 35218, 63479, 51987, 24275, 63588, 55361, 92929, 81964, 4658, 20122, 12330, 44058,\n    13065, 311456, 72224, 8337, 211229, 38979, 22590, 138478, 52757, 32595, 133600, 8838, 31549, 94412, 43391, 90056,\n    1585, 94802, 127271, 6223, 31889, 137038, 132910, 2165, 57616, 230152, 6080, 10748, 36737, 74579, 134062, 50525,\n    180532, 119270, 34556, 76155, 82394, 52595, 29258, 31435, 87820, 67996, 26943, 183878, 38007, 2410, 13526, 180297,\n    69856, 3503, 187396, 167700, 7838, 16701, 9199, 56267, 3661, 37407, 65994, 23767, 5708, 62508, 221700, 67088,\n    86978, 46776, 84434, 32088, 5612, 9149, 88244, 21685, 95151, 46750, 189612, 2979, 506311, 2594, 3628, 40074,\n    105039, 78243, 28523, 6651, 38058, 71999, 30992, 12764, 68261, 108991, 6165, 26450, 61961, 13400, 22426, 7490,\n    60890, 109623, 2070, 12958, 50355, 67979, 257096, 7213, 42578, 52121, 35716, 65461, 7516, 124758, 39268, 302,\n    64712, 14977, 1467, 219452, 2840, 34229, 11121, 21602, 19270, 63574, 8024, 1532, 17331, 79839, 78885, 52029,\n    180767, 57957, 6069, 91265, 61380, 55767, 8927, 32881, 287603, 22149, 35029, 68876, 6428, 199567, 46926, 13412,\n    104132, 21434, 366616, 45060, 110046, 81924, 128910, 45886, 52821, 130416, 29416, 77342, 21762, 67329, 121432, 79924,\n    11724, 38625, 81006, 102033, 28338, 13326, 3250, 82056, 82526, 38212, 21112, 12382, 111495, 3263, 7414, 86274,\n    93490, 40844, 30224, 45212, 24019, 48411, 71367, 24941, 76729, 57776, 3769, 38114, 202019, 197745, 31953, 237533,\n    33270, 201580, 255648, 100798, 44741, 32241, 98468, 106931, 10085, 15090, 170358, 33154, 66787, 18819, 69760, 25061,\n    234005, 82660, 6295, 131975, 16874, 9076, 4094, 25005, 17740, 40908, 19533, 220019, 44330, 99792, 50040, 19619,\n    13950, 55228, 24423, 31253, 95308, 103177, 184795, 28590, 82285, 5059, 3210, 75525, 49894, 70007, 56178, 10580,\n    36051, 139681, 21617, 98736, 3555, 106306, 164189, 37352, 63915, 47824, 24883, 145530, 61904, 28444, 11483, 19837,\n    145446, 30420, 112972, 85939, 11835, 191233, 2262, 20705, 58630, 1753, 148334, 1197, 144714, 6887, 11223, 107667,\n    60879, 77914, 4151, 57417, 81594, 96681, 169430, 1784, 20444, 95138, 254041, 27038, 596, 7117, 72808, 13759,\n    3353, 126776, 21074, 55322, 27081, 36942, 39547, 139830, 179275, 4453, 713, 8722, 71399, 19204, 25785, 22794,\n    23923, 104114, 11291, 25458, 102309, 88396, 75288, 230440, 206396, 104551, 58447, 130857, 37247, 94734, 31548, 176529,\n    226077, 65159, 20104, 10096, 66881, 94191, 237909, 27109, 37404, 1520, 27421, 25220, 113003, 23423, 24884, 50585,\n    6286, 231877, 150800, 11789, 3226, 90004, 60642, 5053, 202400, 61442, 132531, 175329, 57138, 30116, 103847, 9973,\n    75367, 16452, 32360, 59119, 21246, 10191, 164804, 23305, 61051, 37348, 154530, 13214, 5468, 50403, 66754, 130976,\n    50559, 80515, 14436, 155492, 84017, 5472, 43107, 41240, 2890, 90431, 70188, 382, 76234, 48040, 50211, 281038,\n    237007, 32115, 142178, 1536, 22761, 96429, 1811, 31243, 1679, 49143, 55209, 17402, 235054, 61494, 7462, 77030,\n    34925, 87609, 78002, 9499, 9027, 73289, 201078, 101379, 63544, 27666, 5469, 10642, 30029, 49816, 132979, 95620,\n    58086, 351930, 116300, 2110, 2043, 30845, 6154, 11279, 16727, 4122, 2277, 27281, 4971, 3650, 39060, 61970,\n    65951, 39674, 75686, 38151, 11370, 130809, 177895, 32665, 63725, 122267, 7857, 39618, 118483, 44792, 157755, 178624,\n    136994, 24260, 41308, 22471, 12404, 21707, 12486, 30473, 52781, 50246, 20247, 39065, 909, 56825, 103158, 128603,\n    31542, 1089, 41935, 32744, 12428, 37963, 84420, 33134, 72921, 208449, 42622, 168151, 127335, 147107, 46699, 38216,\n    12591, 94342, 85814, 31423, 24944, 2605, 87542, 67473, 192551, 4496, 56321, 91819, 17630, 6300, 256183, 114569,\n    202090, 33209, 35289, 34897, 24967, 40520, 43470, 5344, 10199, 34810, 14283, 10381, 10017, 62923, 49924, 23233,\n    64539, 13051, 35686, 19698, 11570, 135555, 120868, 44924, 87065, 52318, 52335, 47586, 140906, 245885, 109834, 78668,\n    9065, 46990, 25258, 72022, 61243, 40838, 4545, 146387, 10537, 11557, 17470, 36930, 68104, 46711, 24264, 79401,\n    81043, 18225, 120488, 24746, 84338, 81652, 28266, 13776, 21878, 46973, 1047, 230465, 73357, 95777, 24973, 210160,\n    62210, 58404, 110633, 169651, 6937, 41870, 9909, 26822, 191062, 76553, 27519, 96256, 239070, 2478, 205678, 67955,\n    58532, 20601, 50120, 19148, 78501, 195724, 110740, 8249, 109665, 27446, 30568, 57631, 31425, 49752, 32820, 65504,\n    50079, 3663, 102256, 219898, 23849, 211315, 14645, 4359, 91767, 9528, 12449, 49366, 7941, 49763, 107848, 8930,\n    27086, 50686, 9744, 10447, 81935, 39513, 46514, 1670, 29229, 6172, 22312, 137280, 97759, 9806, 14445, 22976,\n    56458, 73391, 34983, 93760, 174219, 52573, 33149, 59747, 2429, 136277, 75123, 165263, 91040, 7446, 57632, 48633,\n    97140, 246081, 84766, 151684, 79918, 93268, 120346, 54059, 54875, 77858, 32996, 103590, 45276, 11968, 19600, 25849,\n    17159, 132907, 42828, 16817, 4913, 99462, 103303, 27395, 5737, 74184, 20749, 21160, 14377, 77062, 131403, 158735,\n    10999, 27799, 77785, 9320, 34366, 51593, 61070, 33746, 47048, 29268, 36675, 30262, 53297, 9832, 82000, 20188,\n    122292, 39917, 7331, 18160, 68301, 185935, 134830, 15031, 4935, 10004, 165845, 185534, 46923, 30109, 44134, 122631,\n    18874, 22903, 112790, 26561, 18549, 348902, 82871, 140345, 255565, 135390, 63556, 103747, 145055, 179600, 145662, 296111,\n    61661, 211987, 23952, 52342, 126343, 48450, 32919, 44277, 82185, 9591, 62139, 205363, 376969, 394874, 108461, 18040,\n    120885, 14798, 39863, 16571, 16794, 58271, 81025, 55206, 14640, 118656, 6361, 44092, 85970, 6262, 153863, 108244,\n    180200, 72264, 79947, 38044, 10050, 5735, 61221, 80712, 5471, 115689, 11391, 11661, 184257, 20010, 60116, 30320,\n    19327, 134598, 45455, 27542, 18004, 125092, 452272, 1549, 91523, 46567, 180063, 156026, 2608, 11174, 58848, 37788,\n    65907, 80194, 30490, 5786, 40775, 119519, 106241, 11323, 156297, 8425, 61495, 2617, 29675, 2425, 59886, 112582,\n    49142, 59618, 4863, 50597, 86710, 50650, 168632, 27693, 85641, 83643, 18993, 25768, 84284, 28090, 93592, 36627,\n    312804, 43381, 9887, 9402, 100931, 97165, 3311, 173330, 66805, 28935, 4963, 184460, 3201, 78102, 19126, 21607,\n    37496, 24938, 22615, 16153, 32862, 134792, 153318, 61120, 6067, 2812, 12826, 12792, 23825, 37559, 64662, 202250,\n    102694, 155488, 85881, 149193, 46233, 65383, 15521, 106982, 11358, 176786, 25752, 39717, 34208, 24510, 32464, 77742,\n    39371, 72028, 138229, 60688, 71386, 102834, 132477, 2208, 11548, 63670, 271279, 28351, 30338, 38620, 32491, 99845,\n    143885, 152266, 13252, 2825, 178663, 108097, 1775, 78201, 14897, 113573, 163346, 62292, 171129, 22183, 96598, 38733,\n    64971, 166776, 117445, 9968, 146393, 44677, 74867, 20908, 97328, 12761, 25656, 26785, 9148, 112344, 26115, 99176,\n    110121, 22437, 49547, 6180, 79320, 5835, 31392, 43328, 33377, 75870, 119860, 69497, 80273, 7325, 155219, 43167,\n    111173, 28347, 20222, 3763, 71752, 55041, 47252, 14618, 28088, 15012, 97805, 194698, 54636, 2036, 41349, 6173,\n    96604, 61530, 51859, 43782, 13361, 24334, 22668, 24792, 7070, 23441, 16789, 3209, 36211, 208475, 26242, 32880,\n    122181, 182407, 21444, 31060, 88459, 29929, 77907, 12716, 10934, 97005, 20599, 31690, 8403, 58445, 30303, 22700,\n    10336, 86731, 103115, 337709, 72556, 46788, 112566, 47684, 67089, 53548, 36874, 56487, 41387, 125985, 26893, 40071,\n    106683, 73712, 18787, 40105, 72992, 67246, 137276, 50802, 36790, 70328, 138827, 22466, 39263, 183295, 29858, 50975,\n    9322, 57397, 10654, 24364, 30383, 55799, 41600, 23584, 127295, 296610, 129078, 143558, 244131, 86397, 36049, 1085,\n    80677, 3820, 108139, 5476, 34767, 24683, 7758, 13060, 7239, 131671, 250593, 59556, 103392, 29810, 4188, 252323,\n    39404, 116877, 7651, 43600, 40338, 13554, 157253, 39196, 25978, 144387, 61211, 234, 50104, 6129, 10449, 93777,\n    9240, 356378, 274148, 4439, 72970, 3724, 147770, 78680, 62570, 115877, 40027, 40547, 36817, 224392, 64609, 34795,\n    165027, 67440, 2477, 37206, 23431, 50754, 164797, 46018, 94995, 170982, 27051, 7957, 22767, 3674, 27900, 56419,\n    18930, 60701, 41302, 2692, 84749, 339721, 61996, 111094, 80221, 50129, 1045, 8153, 62945, 19202, 8250, 37208,\n    37418, 32560, 79477, 41106, 88569, 33963, 36693, 5892, 30570, 1581, 66471, 49647, 11922, 160717, 29442, 5643,\n    114865, 82962, 95982, 132098, 22633, 22838, 94726, 54556, 28566, 205039, 162340, 33216, 16849, 35847, 221339, 94851,\n    26533, 71469, 1805, 3804, 12935, 45483, 71020, 36310, 65381, 192960, 34240, 35165, 59773, 1248, 46954, 155332,\n    96864, 4246, 388800, 16129, 57133, 74592, 44807, 442014, 38203, 42574, 80818, 91592, 26377, 36424, 65760, 977,\n    77387, 22628, 147610, 28018, 30561, 98454, 6969, 119628, 63648, 18170, 36854, 26601, 64018, 22027, 37279, 51395,\n    152934, 21153, 9430, 58760, 194742, 5330, 55115, 34158, 28917, 174111, 13171, 122326, 1526, 43896, 66094, 25325,\n    4234, 148354, 11450, 275, 18999, 112191, 44365, 22723, 68409, 8733, 57746, 96565, 75007, 14196, 108844, 29475,\n    88599, 177563, 100792, 106156, 86323, 93726, 14248, 135341, 194131, 40126, 47099, 14779, 8272, 39597, 95983, 171398,\n    65882, 28052, 10393, 47213, 40689, 22120, 72212, 106829, 34964, 109146, 753, 648, 21660, 30047, 17527, 181025,\n    5619, 145357, 4085, 216883, 9359, 186951, 24779, 53931, 24545, 36197, 223296, 62628, 168101, 4243, 107313, 30321,\n    26642, 13049, 51059, 31027, 107912, 807, 73550, 26551, 84369, 122422, 165872, 49754, 74213, 234264, 33151, 52014,\n    33100, 87183, 22365, 52500, 40013, 23302, 5652, 72723, 21404, 26107, 48434, 587, 94049, 168493, 96418, 32871,\n    70860, 31709, 25128, 443, 71597, 166253, 15670, 70994, 26341, 133675, 28280, 75491, 54756, 47955, 56028, 26182,\n    11952, 113272, 472197, 64640, 110753, 17919, 337, 50642, 22576, 142, 87371, 53391, 93210, 126694, 15285, 19642,\n    85667, 14148, 1506, 42092, 52962, 33243, 11970, 20734, 135843, 57044, 58880, 13002, 219134, 22876, 64754, 232519,\n    4257, 43120, 321573, 24799, 64526, 124728, 52579, 81472, 70831, 276848, 17403, 74359, 23021, 182101, 74597, 23744,\n    148267, 12055, 7976, 5349, 11772, 67540, 167347, 65318, 18720, 127832, 108238, 22828, 90233, 9987, 259080, 118185,\n    73209, 79270, 13775, 90100, 137742, 90799, 70569, 15699, 19961, 9087, 67475, 57872, 39731, 8810, 134897, 131868,\n    146849, 19898, 3334, 2281, 167061, 91073, 60356, 467742, 74712, 188, 53179, 137679, 92769, 29241, 9537, 132595,\n    80119, 1041, 88962, 5976, 40171, 44911, 102859, 139059, 104558, 98987, 47761, 19272, 71472, 113864, 175377, 73338,\n    10857, 23402, 23758, 1591, 139864, 5644, 4076, 118760, 16427, 134198, 18853, 20291, 100849, 37423, 22038, 36677,\n    19071, 195521, 57445, 11069, 31869, 55718, 66882, 148490, 44, 41296, 75242, 49704, 166810, 9906, 20943, 122258,\n    49112, 105667, 15969, 10344, 6408, 187694, 21399, 72742, 58970, 14867, 14376, 81889, 41856, 23225, 15042, 56993,\n    16074, 131389, 74276, 72407, 53875, 383108, 53597, 37363, 68993, 44854, 122548, 430927, 198279, 38430, 80409, 12245,\n    2981, 628, 2818, 17760, 37437, 238229, 7968, 46892, 2200, 3730, 34190, 65983, 37959, 112291, 87850, 70827,\n    6522, 20750, 73913, 111621, 41652, 19587, 2780, 58668, 25916, 85259, 18200, 168962, 95781, 42445, 102050, 7776,\n    57662, 103313, 47742, 96358, 41964, 66174, 100396, 29069, 204735, 19679, 27978, 7479, 40264, 22534, 61183, 36081,\n    107436, 58223, 14680, 23002, 101311, 24716, 124108, 12908, 5646, 31750, 40380, 14215, 232799, 102772, 14122, 96775,\n    61398, 50917, 12096, 149880, 67833, 598749, 124194, 155871, 49216, 790, 14677, 65319, 56917, 7440, 145744, 95701,\n    12206, 49405, 129269, 76199, 45732, 9767, 11058, 9047, 210885, 11051, 7392, 26307, 2130, 8132, 147526, 20802,\n    232698, 115660, 50060, 59789, 57344, 107623, 80343, 112676, 23291, 9866, 160971, 34032, 118291, 15719, 59730, 164911,\n    28975, 2659, 58046, 78480, 21854, 66209, 53863, 109085, 116045, 29021, 46481, 107552, 22130, 18764, 70254, 31272,\n    11300, 52460, 43933, 84738, 20721, 53869, 190840, 79673, 105300, 7561, 321817, 66924, 13940, 33281, 101046, 183181,\n    32176, 71878, 5678, 62924, 79535, 56646, 40303, 19559, 27703, 93042, 73368, 42187, 3670, 37376, 46440, 7023,\n    36816, 109628, 20680, 5940, 276440, 275233, 170848, 112093, 136996, 14984, 20226, 111441, 77693, 112960, 48577, 39370,\n    55707, 50314, 123404, 26570, 54281, 61372, 123391, 4857, 35928, 246740, 132507, 106646, 44241, 7196, 92258, 9825,\n    37688, 51197, 303141, 5590, 15476, 132986, 10955, 85782, 34486, 26696, 7991, 28813, 18858, 39546, 11703, 11365,\n    38185, 5716, 93555, 11925, 40121, 60002, 6985, 10976, 171384, 3887, 43394, 13337, 56346, 6381, 252336, 39573,\n    75042, 53711, 1028, 31781, 44295, 95925, 131713, 7214, 68125, 43571, 70954, 213234, 1628, 8760, 13391, 65485,\n    17320, 56038, 1710, 25248, 60803, 57399, 19839, 3870, 326, 281556, 50945, 72400, 21460, 316244, 75619, 56246,\n    98775, 481, 13513, 55765, 50427, 7388, 123519, 32929, 57908, 27124, 61316, 101097, 57467, 30228, 48792, 10788,\n    20402, 37318, 50526, 155730, 34456, 158065, 145305, 17832, 43733, 64052, 4506, 35072, 205355, 177028, 184004, 187081,\n    68616, 35938, 83703, 10367, 36892, 93186, 260137, 51934, 89970, 4985, 23445, 26755, 21558, 7948, 78741, 23376,\n    124405, 85594, 68596, 57536, 49351, 12619, 56593, 132668, 99924, 109728, 71844, 71935, 196018, 65464, 17617, 14987,\n    89701, 143773, 33997, 8687, 22701, 33258, 2914, 4436, 72108, 85610, 9671, 49067, 2327, 82988, 1361, 1672,\n    44033, 35777, 30269, 24057, 10605, 82236, 616, 15793, 13919, 47249, 112086, 116698, 9484, 80207, 90574, 33304,\n    68624, 93127, 56101, 42210, 160929, 4827, 38995, 38095, 4701, 125119, 5027, 33680, 9236, 231236, 14135, 87837,\n    23318, 70261, 78893, 30151, 81482, 14332, 1084, 74256, 27532, 46644, 79185, 3148, 62615, 6981, 55672, 31668,\n    36825, 1849, 14536, 37446, 14738, 23779, 43058, 162749, 72199, 1168, 21346, 5592, 85932, 85302, 9668, 18351,\n    57135, 150360, 2080, 228015, 77953, 34670, 119302, 151751, 31009, 106725, 84265, 45214, 59289, 74178, 113071, 263206,\n    111009, 4021, 44449, 188119, 192629, 123592, 392506, 292847, 114487, 12831, 205858, 9852, 20780, 79648, 75767, 357014,\n    97721, 18166, 21005, 67950, 33226, 204009, 16536, 2987, 11335, 66717, 144910, 47950, 17262, 55060, 15063, 2934,\n    51038, 26775, 178497, 66008, 3427, 49433, 128592, 20036, 157553, 63861, 3089, 23015, 51210, 28696, 35933, 49942,\n    71135, 231518, 99620, 17248, 21835, 176536, 20676, 16944, 38700, 165831, 233253, 295625, 36723, 13023, 52745, 10907,\n    19423, 67972, 125868, 95473, 82875, 1183, 108455, 52685, 33417, 64095, 21433, 52438, 33191, 127809, 44505, 211823,\n    7810, 2752, 95548, 162031, 7185, 91196, 47563, 61721, 33359, 17897, 23682, 42806, 178101, 22874, 49707, 199897,\n    75419, 82456, 8618, 11171, 79712, 116847, 18783, 44190, 46564, 5346, 59046, 95032, 7893, 14916, 3214, 26800,\n    24172, 121453, 34362, 10250, 17408, 18888, 4840, 68696, 22831, 13162, 36005, 32512, 14800, 62357, 41723, 45046,\n    27247, 37486, 5372, 2564, 34261, 298500, 66509, 133920, 89138, 31305, 117697, 19097, 108304, 81386, 84106, 23802,\n    46411, 63304, 946, 51417, 41777, 41041, 19501, 115864, 60743, 294354, 37955, 94165, 18116, 1156, 17937, 20645,\n    57114, 90804, 58042, 48643, 92288, 9861, 2557, 88546, 61333, 101008, 12853, 5148, 87856, 4152, 144503, 73841,\n    18718, 9789, 147565, 10846, 42085, 12789, 30223, 8993, 56352, 67203, 2448, 28215, 6052, 23540, 126319, 75933,\n    36689, 80235, 23231, 23561, 21383, 38800, 77548, 102798, 21234, 31468, 158608, 46188, 63960, 191679, 8051, 67014,\n    11185, 170078, 42186, 28827, 34777, 41930, 212079, 12421, 34750, 24111, 110344, 73918, 45171, 70826, 141949, 40063,\n    23979, 24254, 37309, 26724, 27179, 24718, 83648, 54938, 14591, 17425, 29525, 102675, 48975, 48654, 12316, 8929,\n    60640, 41709, 50168, 63264, 89812, 50716, 48632, 38755, 138583, 160123, 55579, 71829, 24230, 233277, 46322, 39650,\n    166388, 34718, 24108, 98252, 7031, 106695, 62498, 18258, 35062, 217827, 78731, 34824, 33354, 19520, 60852, 2432,\n    60224, 8587, 2836, 62955, 702, 20227, 42285, 40560, 95592, 62486, 11094, 53035, 143291, 18842, 46177, 77994,\n    1770, 9657, 107422, 172915, 32655, 128716, 25886, 25164, 156740, 119928, 165875, 85817, 11007, 89110, 33956, 12652,\n    65156, 180266, 8494, 36889, 19958, 20955, 96, 1264, 118288, 135769, 44754, 86671, 5632, 19026, 168220, 289120,\n    33569, 93821, 66144, 70635, 7687, 5642, 2714, 55445, 56636, 71545, 184182, 93133, 7332, 37389, 12643, 52315,\n    22729, 11014, 158742, 17050, 152889, 50178, 34601, 41945, 52136, 9948, 26914, 63548, 95721, 115951, 40759, 8960,\n    158258, 38938, 49232, 48325, 42234, 81523, 253019, 66128, 40978, 20048, 238048, 38760, 62928, 122560, 118532, 43687,\n    137472, 163689, 26680, 9878, 17448, 51035, 16211, 60834, 36749, 29178, 14241, 59868, 150086, 2305, 26477, 42422,\n    34342, 165341, 83279, 33894, 14257, 29928, 12743, 13957, 125571, 89134, 66712, 10952, 16507, 147839, 30146, 7249,\n    16565, 45399, 39874, 114565, 215780, 31990, 230881, 171477, 102, 196546, 44538, 10880, 84948, 281705, 86651, 10617,\n    31395, 2342, 453658, 43569, 60561, 132901, 21845, 17727, 58556, 258242, 22262, 58728, 4008, 77997, 11806, 37431,\n    30599, 81375, 109137, 185787, 114085, 217292, 97453, 169085, 30593, 60212, 11544, 102056, 65580, 2384, 91655, 4855,\n    95725, 7295, 157994, 16228, 20669, 53276, 141590, 105246, 17334, 25440, 76067, 17967, 39321, 38911, 11362, 28559,\n    63807, 21627, 26468, 85816, 40120, 1025, 15234, 58319, 69516, 66512, 124548, 75845, 78873, 22137, 46681, 51242,\n    85683, 32909, 76747, 35555, 43396, 101465, 1765, 73094, 1077, 2962, 39028, 66777, 57831, 42048, 15828, 13962,\n    36041, 63657, 52412, 5242, 58846, 2141, 5506, 219012, 134451, 3936, 182230, 17558, 17153, 152237, 22621, 49377,\n    170216, 35257, 68233, 65374, 6510, 11126, 212151, 7184, 2480, 22517, 3437, 33073, 30156, 16557, 3768, 55067,\n    86829, 91000, 12350, 148650, 66017, 79424, 70885, 49066, 28250, 21369, 51213, 34533, 11510, 3258, 18176, 18465,\n    84413, 6315, 36411, 163765, 4346, 356, 107618, 598, 13727, 285026, 162695, 8749, 14583, 7132, 63521, 184253,\n    32378, 25991, 5604, 30961, 53675, 4874, 84693, 5086, 34811, 26978, 56564, 7904, 33519, 51221, 113942, 69253,\n    6664, 125563, 22055, 220680, 102008, 742, 51930, 19494, 176108, 44424, 35123, 13025, 75685, 11759, 74335, 22250,\n    181453, 131147, 16984, 132115, 154311, 11991, 76452, 52609, 85351, 196, 30969, 9198, 74919, 2529, 56838, 71779,\n    29187, 116304, 3504, 62330, 41190, 86153, 28393, 254926, 104228, 105189, 13264, 84359, 3574, 12415, 8534, 57147,\n    10175, 188174, 59504, 60932, 66318, 16407, 107921, 17638, 99103, 49278, 28403, 39786, 145865, 8462, 3558, 43406,\n    142271, 29139, 21989, 36552, 93955, 72365, 7176, 13556, 106185, 37957, 321774, 17782, 129017, 51154, 27938, 24952,\n    1935, 39366, 2791, 33489, 41582, 56078, 24558, 9311, 5449, 218786, 27808, 190429, 68013, 36020, 86003, 29735,\n    3404, 87348, 119357, 115714, 2324, 86796, 81973, 40992, 43376, 93621, 28784, 16808, 36367, 2517, 2909, 191926,\n    24978, 55303, 53308, 205724, 60068, 3098, 21375, 64784, 23949, 26579, 63121, 12319, 80145, 39967, 97861, 6757,\n    70143, 67642, 37082, 34698, 69140, 122883, 46151, 62187, 80934, 429, 19437, 135071, 137885, 222647, 13331, 154065,\n    327, 61778, 74257, 40116, 37493, 14855, 85079, 237641, 42342, 102164, 199965, 71204, 4662, 29368, 5042, 113914,\n    122214, 8955, 13149, 102503, 43173, 5659, 163787, 69003, 307084, 63392, 171080, 21390, 81918, 86666, 36622, 24126,\n    28887, 5736, 28054, 207170, 163428, 79891, 346467, 95363, 38980, 111806, 80828, 9200, 19288, 294896, 114468, 87405,\n    111715, 141705, 7015, 72754, 68463, 48738, 243147, 33397, 101210, 37051, 98801, 82847, 20397, 4940, 185559, 18716,\n    54718, 83491, 11725, 40803, 1128, 12128, 23060, 5174, 7745, 67007, 46701, 1571, 27807, 180186, 256996, 18975,\n    16837, 7877, 212758, 250379, 15440, 87954, 57755, 24719, 124057, 83461, 258, 50864, 8874, 29038, 71289, 31627,\n    15429, 9005, 4061, 113851, 107716, 82819, 13651, 79656, 117851, 17539, 111446, 12938, 39724, 190787, 4352, 15402,\n    21070, 62708, 8539, 23777, 73853, 13552, 38810, 86117, 16285, 56400, 1718, 75342, 142863, 29033, 378, 110113,\n    180321, 32586, 23606, 26393, 160984, 207987, 23783, 8406, 16904, 24596, 47274, 11693, 46539, 60524, 78595, 48423,\n    31718, 20170, 9009, 146268, 15183, 191060, 172765, 1349, 138436, 37365, 10970, 40509, 225817, 20021, 70394, 152138,\n    21541, 66559, 66544, 89352, 2725, 17258, 91345, 7313, 3815, 115868, 8660, 40362, 4071, 103524, 39388, 118275,\n    21950, 6549, 38226, 32754, 209574, 29201, 43495, 18028, 20296, 40597, 18370, 47520, 202450, 24134, 2219, 8195,\n    69545, 38041, 136934, 46374, 19041, 159811, 84865, 58620, 846, 98749, 13569, 30714, 97246, 32186, 4479, 27355,\n    92973, 35214, 151491, 75963, 37631, 1561, 27200, 238083, 23182, 60756, 12291, 25766, 39355, 102333, 87362, 65741,\n    59906, 19538, 201575, 48772, 102938, 24438, 292580, 39964, 66366, 9004, 61379, 50548, 37622, 38732, 28379, 68180,\n    76622, 17488, 69849, 5963, 7219, 48143, 43413, 55358, 540, 58691, 29506, 19245, 52193, 48621, 5518, 13048,\n    118625, 44755, 191081, 42061, 89197, 2259, 60665, 66994, 71210, 51232, 3585, 142096, 55024, 7892, 8345, 58653,\n    463307, 65658, 64319, 137941, 136323, 53499, 12746, 43492, 6978, 95163, 29925, 60175, 5128, 7352, 41463, 184756,\n    121146, 20473, 18426, 4598, 5309, 54580, 14277, 121151, 10691, 56711, 43880, 63409, 76682, 11830, 172218, 264898,\n    32632, 66536, 81062, 31649, 25788, 92774, 60222, 11100, 63159, 9432, 224657, 25240, 53613, 152, 138620, 163829,\n    2397, 85345, 12501, 37507, 64932, 38575, 43522, 65789, 80198, 78796, 35226, 3851, 108891, 73311, 3060, 28391,\n    93671, 39663, 46142, 30982, 66041, 37281, 68157, 26553, 71872, 81142, 211527, 39747, 118119, 22695, 2859, 11066,\n    20232, 168911, 7933, 197005, 17066, 111071, 44434, 133994, 120798, 12766, 227798, 45756, 132852, 29917, 36076, 55352,\n    65281, 129800, 41958, 18944, 84678, 18580, 168093, 132621, 39997, 54092, 27740, 32354, 3770, 114118, 103242, 43918,\n    15899, 18574, 145944, 3190, 123469, 219903, 24169, 100571, 62403, 16776, 92779, 14535, 17168, 16475, 14304, 37231,\n    1712, 28218, 242754, 61688, 28980, 1318, 51359, 222657, 99200, 67989, 31772, 23932, 35351, 201251, 49041, 27306,\n    19128, 40135, 3986, 77333, 19649, 120683, 151927, 21081, 7076, 78375, 77501, 101599, 8011, 89585, 96715, 58179,\n    5378, 102138, 106793, 26051, 217276, 4197, 16297, 27014, 46721, 13322, 22806, 5278, 29629, 70632, 9647, 71519,\n    58818, 40603, 128530, 8903, 36770, 56900, 31483, 26935, 43845, 34265, 34920, 87658, 6114, 84767, 64250, 47318,\n    50720, 19264, 162514, 33357, 13117, 6705, 46696, 75032, 71054, 87004, 42035, 69138, 11903, 99854, 102328, 19611,\n    34525, 69312, 6431, 49842, 101600, 133178, 108751, 41829, 89939, 225664, 48916, 99556, 9195, 130387, 5960, 36857,\n    116724, 53518, 94002, 39077, 53996, 6945, 22261, 64291, 8314, 152785, 57588, 16522, 9091, 5048, 87671, 35441,\n    39509, 1945, 12423, 158923, 178413, 37549, 14095, 1475, 73188, 62878, 4819, 24012, 68534, 42606, 4010, 120809,\n    57497, 59564, 101758, 103718, 32701, 80116, 12345, 95834, 46918, 21468, 53213, 15665, 31200, 3867, 5140, 96013,\n    250744, 21016, 10069, 13968, 35449, 180829, 27683, 39704, 59956, 22893, 3115, 26293, 32785, 75934, 62445, 141162,\n    62720, 2018, 83638, 19949, 114012, 95006, 3330, 99829, 130935, 309272, 9565, 55874, 121727, 37017, 23586, 319858,\n    40970, 27602, 8625, 112329, 61060, 100088, 118525, 25922, 16232, 1907, 60671, 51583, 44553, 80993, 5262, 94679,\n    8676, 940, 20736, 11823, 3020, 16476, 12340, 152600, 97416, 3703, 25744, 66826, 16245, 16876, 46446, 84798,\n    74227, 176020, 45192, 61955, 75496, 23946, 23626, 40372, 26036, 6149, 11822, 30582, 16541, 41914, 82385, 232823,\n    40921, 80773, 14930, 3631, 7517, 39619, 4348, 36180, 126106, 138939, 62611, 1477, 113512, 47321, 25052, 14546,\n    118881, 29060, 23589, 128322, 36795, 18401, 137921, 104699, 267929, 36194, 172791, 18113, 4766, 188215, 30083, 332586,\n    94089, 5805, 77909, 22194, 68234, 154976, 43220, 40660, 70001, 184893, 138095, 11128, 103010, 22663, 5108, 212615,\n    8485, 5565, 49222, 54614, 26530, 42639, 16319, 55062, 152662, 105595, 21114, 22216, 10294, 68158, 10436, 86950,\n    7206, 62115, 3977, 3657, 59874, 456, 118617, 18156, 106663, 112229, 80992, 17442, 8217, 55551, 5133, 34344,\n    251927, 51153, 39364, 201321, 7816, 66803, 23057, 156724, 145664, 14276, 95705, 979, 2796, 6875, 13429, 212525,\n    50602, 26276, 28284, 3424, 19465, 52397, 46963, 31420, 51399, 206476, 92317, 48851, 637, 100820, 83349, 10317,\n    60227, 21972, 6908, 282439, 32857, 224767, 95629, 83882, 42106, 87338, 69757, 29840, 68709, 37665, 45244, 114577,\n    49188, 175943, 54009, 186746, 106158, 70168, 3358, 234002, 50555, 9221, 129338, 9562, 20118, 32923, 78479, 118280,\n    65752, 4977, 10474, 102174, 60947, 129006, 10570, 83451, 8598, 8078, 159367, 123785, 80438, 16742, 5905, 5281,\n    181513, 42402, 6977, 163136, 93179, 42191, 14968, 50421, 112401, 105440, 33456, 57347, 121611, 4221, 94954, 36517,\n    24046, 27796, 6255, 33394, 72990, 135408, 116627, 1233, 57874, 25654, 95419, 68156, 401399, 313338, 55208, 45573,\n    93124, 119251, 47200, 38196, 11909, 130667, 45391, 73904, 64964, 167846, 4137, 115606, 52036, 62214, 7969, 160925,\n    7187, 1132, 134835, 40309, 73195, 64494, 80472, 444841, 61111, 26500, 45323, 40743, 53625, 52797, 22659, 15631,\n    29739, 36706, 28841, 39147, 102836, 26794, 10536, 14845, 87305, 45874, 12241, 127587, 83833, 57183, 79722, 30844,\n    41304, 84655, 20825, 92500, 3722, 25655, 27811, 10157, 81634, 31362, 34088, 92487, 70123, 22190, 185100, 72658,\n    139035, 192523, 88241, 2078, 230490, 44528, 85638, 100198, 22088, 29982, 291233, 241062, 13865, 4445, 137791, 37835,\n    107218, 31726, 19718, 38234, 72528, 23046, 19177, 66695, 5109, 17251, 28077, 5617, 21554, 47839, 72425, 133825,\n    1486, 73065, 181275, 141508, 21768, 62971, 63082, 2512, 34200, 9904, 120309, 6392, 91243, 68416, 268253, 41199,\n    116757, 138551, 185526, 41246, 28986, 4093, 19057, 17295, 4148, 245766, 122360, 35356, 112075, 20301, 75441, 10998,\n    7977, 19769, 62922, 937, 63547, 100196, 26427, 157820, 20983, 236696, 22935, 8140, 90315, 156004, 47204, 140973,\n    7726, 45097, 52725, 22636, 23436, 257282, 105247, 522, 88389, 216031, 202204, 46812, 211666, 19693, 68828, 81691,\n    45925, 11256, 30292, 372, 5236, 167826, 88328, 232776, 151611, 5360, 82104, 18841, 80393, 25465, 18285, 20320,\n    72377, 31730, 33160, 45803, 38715, 27705, 37379, 24163, 18360, 103586, 4015, 32305, 269494, 91252, 20080, 36567,\n    54650, 7797, 57073, 12650, 31164, 42209, 6375, 261663, 105528, 81661, 106002, 2800, 5375, 17247, 43151, 4442,\n    15727, 194619, 100855, 144898, 62320, 78465, 39929, 16454, 1967, 28311, 61363, 17219, 9395, 8745, 121445, 76939,\n    80385, 162380, 22009, 54191, 44248, 16299, 122830, 48151, 74429, 78291, 64755, 14238, 44966, 2511, 17712, 67954,\n    93583, 829, 105899, 49935, 84750, 11591, 33185, 85447, 42717, 27409, 208542, 28965, 62052, 52525, 5597, 25694,\n    65594, 16343, 63224, 276188, 12475, 9331, 127507, 38522, 57287, 24128, 133161, 79723, 105548, 133695, 48917, 27558,\n    43278, 46520, 13778, 141954, 110785, 83366, 17715, 46317, 105763, 66298, 147013, 41086, 94180, 16478, 220447, 44611,\n    730, 19722, 78975, 117889, 125643, 26254, 16574, 18480, 65006, 15806, 38549, 246418, 46052, 36056, 8440, 34984,\n    30170, 3163, 59800, 4458, 115442, 4283, 41970, 33507, 104078, 1653, 22, 121158, 276486, 3655, 6338, 24048,\n    133421, 23641, 2161, 24422, 36006, 8086, 10675, 181474, 12307, 29514, 59143, 14729, 52509, 87128, 122470, 19446,\n    80852, 33314, 24573, 119864, 14237, 9652, 57779, 6612, 51851, 15284, 98871, 90581, 124466, 156831, 21190, 22015,\n    71380, 161906, 87247, 69201, 18392, 17908, 108470, 72962, 40719, 14338, 17911, 95260, 43339, 20610, 78916, 20710,\n    72451, 11315, 31448, 17263, 58853, 178878, 48111, 116002, 45497, 80506, 82605, 85880, 36300, 121755, 25215, 36118,\n    301929, 88728, 405223, 276136, 553, 34704, 212438, 49970, 78329, 922, 20711, 25036, 257130, 38295, 145369, 18128,\n    15385, 30829, 55656, 48345, 8012, 3561, 28004, 122041, 192900, 58338, 112508, 41085, 29976, 87040, 47117, 23905,\n    4336, 92061, 138880, 97407, 42083, 172121, 6256, 25192, 172671, 5, 93568, 1420, 12677, 31605, 56743, 40620,\n    6015, 78415, 231077, 31298, 80026, 13902, 19048, 24924, 170586, 32955, 176119, 87859, 36731, 6773, 27711, 24658,\n    26475, 115216, 133207, 93250, 95820, 88522, 8317, 5714, 124047, 55219, 86860, 19677, 23961, 22928, 162209, 8904,\n    225992, 359835, 56084, 96201, 29392, 96558, 86071, 93643, 55114, 13347, 8183, 95129, 82012, 2017, 123336, 34219,\n    115554, 157159, 47747, 101684, 41008, 18735, 193781, 104151, 226906, 7552, 179874, 124113, 31159, 21162, 44010, 14771,\n    51268, 166128, 31382, 73124, 77438, 92830, 205709, 12113, 1292, 38937, 13114, 1334, 2118, 15597, 69581, 14449,\n    21934, 76618, 48728, 67038, 14967, 51495, 24243, 87736, 147249, 26720, 11119, 46063, 43749, 5843, 44147, 152629,\n    133428, 65703, 14269, 45604, 57982, 28672, 55616, 45957, 8438, 95433, 37698, 220862, 132034, 39456, 61870, 4161,\n    26501, 73560, 56418, 9845, 4654, 20916, 10456, 88920, 119358, 9015, 65931, 96507, 48029, 38534, 21676, 109081,\n    43078, 34943, 25089, 6131, 28766, 23665, 5477, 10255, 16695, 67, 45778, 42443, 42770, 29534, 23733, 100513,\n    62617, 42630, 48746, 14191, 43753, 50295, 26007, 8792, 57243, 43119, 54725, 164253, 58250, 112304, 131796, 25165,\n    4651, 3188, 24831, 47748, 3705, 19540, 13211, 102095, 5593, 18699, 23666, 32005, 117571, 33541, 60584, 74573,\n    86311, 99443, 25172, 27222, 168938, 7143, 11853, 53560, 18834, 19960, 86522, 28217, 53266, 117700, 72989, 34323,\n    18721, 66450, 34346, 74056, 47217, 202002, 46269, 9429, 68582, 75458, 37823, 82843, 96652, 32549, 145144, 27958,\n    19820, 158086, 31955, 201406, 135379, 31207, 192545, 12950, 51704, 9094, 248263, 76147, 64028, 110009, 79407, 89345,\n    99284, 223492, 47966, 26848, 15359, 201137, 2861, 110507, 71231, 72297, 31851, 118777, 71039, 151051, 240855, 16333,\n    50766, 14727, 7939, 4149, 80908, 418780, 88378, 59276, 1327, 7284, 38576, 79814, 65820, 42199, 84860, 49574,\n    62596, 12396, 70598, 40117, 8648, 7994, 16836, 7630, 14047, 359699, 106878, 525, 29037, 28064, 13380, 11675,\n    50669, 74216, 103539, 180314, 27449, 56299, 172344, 19274, 7301, 246099, 32043, 19422, 36506, 129317, 6806, 30140,\n    4614, 46639, 66926, 932, 86600, 6322, 27847, 233103, 10541, 39025, 34887, 3517, 12972, 26220, 2031, 66561,\n    115015, 48658, 47596, 12714, 33845, 3893, 16165, 35237, 89983, 14769, 11962, 147224, 47018, 29977, 27979, 5552,\n    82338, 86023, 131368, 1218, 24853, 237840, 132193, 15455, 40873, 3668, 65351, 53388, 15229, 59889, 272245, 47934,\n    11858, 34347, 18038, 90853, 86981, 300602, 19343, 114181, 29362, 84921, 6095, 106059, 79472, 38015, 1206, 48741,\n    6208, 80000, 21916, 17423, 6002, 108083, 24479, 34931, 56661, 9511, 26995, 100694, 163853, 35997, 81254, 58321,\n    18919, 171890, 86877, 91341, 74503, 70477, 53412, 7027, 59281, 39892, 131302, 5864, 15947, 61301, 67466, 162369,\n    47956, 27874, 35624, 282324, 21270, 111847, 102548, 41482, 30955, 116737, 28264, 8592, 55458, 22301, 75090, 29821,\n    30697, 51709, 3041, 19208, 8038, 24634, 30467, 87509, 126428, 19389, 18814, 152686, 20701, 83474, 45832, 80891,\n    105808, 11378, 153223, 120770, 98186, 150633, 49838, 9141, 12755, 30962, 5260, 74490, 21256, 31678, 65062, 33326,\n    289838, 187831, 20595, 89768, 2805, 58535, 10844, 70085, 12090, 2451, 138068, 98544, 24461, 4511, 6754, 41684,\n    28203, 3383, 65355, 82833, 30161, 83924, 234361, 128424, 28921, 222594, 33975, 125491, 34069, 11508, 67464, 144226,\n    41850, 98703, 34371, 7901, 21254, 38398, 65651, 23549, 53883, 213340, 123269, 12028, 71764, 177701, 28758, 2623,\n    68395, 11549, 15232, 68603, 9660, 63116, 36079, 57093, 31198, 20475, 48467, 89984, 35619, 186847, 107469, 31389,\n    43631, 73867, 41949, 68841, 114250, 1605, 30564, 63403, 17588, 27680, 99533, 12641, 70325, 50428, 73426, 78379,\n    11855, 91651, 72081, 91720, 60198, 15743, 12065, 83398, 140046, 6761, 46598, 45900, 5068, 886, 62448, 148968,\n    37347, 19405, 9680, 15819, 43496, 63370, 75667, 163700, 37639, 3633, 22774, 34341, 183131, 134335, 37200, 23915,\n    7054, 14194, 12970, 26438, 13350, 285521, 25594, 8219, 104410, 91039, 168804, 138480, 149734, 15907, 33818, 61132,\n    60082, 4622, 110187, 56736, 13551, 73571, 3945, 73463, 65498, 17758, 263266, 17593, 2710, 27585, 54469, 38200,\n    45367, 63754, 28881, 3473, 12791, 98287, 31895, 65787, 4463, 94536, 24951, 36332, 59901, 28803, 52130, 86403,\n    7668, 181822, 74831, 18977, 9850, 177206, 145485, 109798, 7292, 31421, 26280, 77211, 58511, 12507, 127004, 11113,\n    147, 8729, 56208, 43066, 79926, 129937, 31345, 83947, 39915, 46146, 98763, 42566, 1337, 13192, 18323, 105163,\n    80570, 117753, 16555, 72883, 11077, 159438, 40764, 70933, 83329, 26066, 12276, 72059, 21655, 173836, 126713, 69454,\n    153482, 91585, 70644, 102558, 110483, 6764, 127864, 190133, 3961, 101798, 20945, 71138, 82402, 90884, 69669, 44753,\n    923, 16939, 59700, 164258, 25969, 27082, 31399, 43846, 6306, 246093, 51342, 6153, 151581, 202801, 182731, 56475,\n    162188, 89426, 141356, 14355, 121815, 27536, 28023, 65257, 77523, 106668, 127314, 24947, 12790, 38796, 169698, 23555,\n    10725, 44573, 183083, 42088, 62716, 43265, 105958, 32050, 44067, 50118, 1668, 3874, 6243, 318411, 16599, 1691,\n    94999, 52378, 28671, 216728, 123258, 2059, 34969, 69225, 5913, 136280, 171443, 141515, 91662, 22175, 135282, 80020,\n    92270, 1663, 4808, 4482, 3495, 34691, 5226, 109830, 108512, 17342, 107488, 11606, 123190, 100247, 29666, 146527,\n    113014, 15794, 30894, 13224, 39585, 243192, 22351, 9903, 7836, 47699, 11078, 25468, 122291, 48821, 26780, 122679,\n    75521, 81450, 630, 4895, 92900, 55074, 74293, 17441, 3563, 111657, 103102, 51613, 12318, 52370, 36191, 68245,\n    34269, 40445, 41354, 122901, 168604, 182500, 62012, 42557, 11259, 24428, 115113, 86345, 12362, 3909, 78430, 86852,\n    134602, 20459, 47853, 93879, 22577, 7659, 3688, 38555, 13349, 17381, 56715, 91639, 12493, 10895, 92438, 3142,\n    37057, 28928, 2004, 36427, 32268, 34222, 209974, 10432, 67436, 41989, 173518, 107930, 27079, 62729, 30908, 55558,\n    5828, 45031, 14902, 53546, 8204, 144263, 60255, 14520, 88212, 86582, 109589, 69356, 8064, 47449, 8505, 66558,\n    16886, 4844, 52817, 111260, 215129, 12941, 91118, 650, 20770, 6273, 73089, 40618, 62790, 2873, 35002, 14023,\n    97208, 19386, 102646, 36993, 143736, 135457, 35385, 113601, 17893, 32627, 84439, 100619, 56016, 6581, 57264, 172160,\n    45452, 111710, 203627, 70131, 24100, 322787, 1996, 35665, 70078, 22358, 90922, 83658, 4097, 63200, 58499, 14542,\n    99153, 52159, 6615, 12414, 63415, 31986, 16823, 1579, 65405, 137809, 8841, 16898, 48082, 259, 33014, 42375,\n    12260, 179850, 73667, 91389, 98882, 29532, 17311, 326251, 41092, 5928, 20742, 44964, 48019, 43505, 9317, 49265,\n    6643, 192712, 48424, 163487, 19861, 20113, 70848, 31928, 105333, 23685, 78563, 14638, 54755, 7158, 24142, 44018,\n    20774, 125255, 20331, 24280, 10163, 1285, 2336, 39851, 4299, 117269, 46714, 63816, 87779, 159624, 11731, 9971,\n    990, 137317, 108831, 50994, 74554, 162680, 23640, 131597, 146962, 170620, 34829, 91205, 21184, 1913, 63616, 18427,\n    93136, 156592, 17519, 67565, 115882, 138220, 78622, 88535, 18115, 2711, 33554, 109492, 54298, 971, 24914, 25863,\n    36363, 45715, 27099, 194995, 14299, 178181, 111488, 72395, 322385, 157719, 130787, 11897, 81843, 83999, 11369, 49280,\n    118604, 40922, 61332, 110343, 53407, 75639, 40582, 300440, 54722, 25637, 13694, 48248, 48278, 194521, 56203, 52779,\n    48783, 72627, 10953, 376, 16733, 280238, 26351, 230789, 15132, 25168, 137270, 3588, 63704, 73376, 94031, 74284,\n    19443, 159557, 9697, 39901, 13351, 119050, 15406, 146455, 3460, 29556, 75195, 37673, 102524, 92329, 47289, 98413,\n    15311, 100684, 56345, 7116, 95480, 11590, 7200, 167, 23610, 58426, 17730, 136656, 27944, 53151, 2701, 8824,\n    103124, 3017, 90744, 113588, 53216, 79736, 65940, 26931, 498, 29568, 80540, 143543, 21292, 1740, 59268, 16561,\n    180816, 42323, 50174, 40890, 52866, 10703, 57169, 4700, 17191, 4424, 93511, 49698, 166650, 26972, 48631, 165169,\n    82879, 69326, 202970, 4007, 2376, 231325, 139592, 22119, 62851, 37504, 68816, 58345, 67398, 186643, 43331, 277416,\n    53749, 15746, 23102, 17432, 4793, 151138, 48822, 54265, 48203, 198688, 14305, 54287, 2291, 18018, 113378, 123260,\n    7180, 97549, 87027, 120085, 2920, 76080, 8190, 102005, 5641, 64580, 14955, 59802, 54028, 58884, 19367, 81779,\n    412567, 85957, 97053, 103637, 78871, 29364, 27637, 141728, 4767, 30686, 112738, 130146, 42745, 12730, 105040, 14844,\n    232, 210944, 36581, 152317, 135543, 29744, 3129, 55647, 58149, 46319, 27265, 17499, 28005, 59948, 7170, 34138,\n    5702, 293047, 110892, 408, 91760, 218674, 18469, 46095, 81403, 14389, 4610, 35672, 73060, 11006, 74848, 104820,\n    118143, 190357, 20043, 105358, 141735, 5115, 27093, 45924, 123073, 52599, 29433, 9616, 238350, 78610, 24851, 58858,\n    26769, 31969, 24613, 18294, 4982, 32735, 39639, 143563, 112073, 202205, 12567, 4873, 88601, 44897, 81503, 101648,\n    81362, 34662, 85277, 17574, 48173, 21435, 221188, 40215, 39576, 80786, 26544, 64668, 81841, 10731, 37733, 247986,\n    149188, 127703, 495, 18382, 54388, 72446, 43071, 30974, 198723, 89608, 41360, 190, 33045, 8386, 31658, 19992,\n    237838, 119015, 137622, 50890, 100913, 6460, 116233, 267230, 26621, 104129, 65114, 14190, 41542, 14888, 85962, 23342,\n    23041, 26453, 43725, 71809, 45186, 4770, 46452, 53894, 56616, 221286, 18973, 9038, 109299, 55365, 19366, 26863,\n    18808, 60909, 69353, 41738, 83463, 12100, 68561, 72860, 3980, 13796, 49340, 12332, 31311, 27418, 4255, 53430,\n    18976, 45523, 510, 14224, 30477, 26581, 4530, 3651, 101663, 139840, 22709, 150861, 31996, 63923, 120623, 262522,\n    3076, 10528, 2929, 14672, 130238, 18087, 9816, 121894, 100308, 25085, 55111, 14565, 18952, 53293, 2042, 369988,\n    23674, 61789, 133529, 28783, 108293, 35477, 47119, 36448, 71049, 40015, 33055, 78598, 198442, 1833, 159937, 40654,\n    77444, 189245, 113153, 8621, 18599, 38553, 35223, 166072, 2375, 11659, 21786, 89523, 6032, 12116, 63046, 159398,\n    18454, 3678, 32521, 47626, 11411, 103527, 38896, 42946, 15696, 26370, 10185, 8413, 37080, 165583, 4331, 63555,\n    14907, 72220, 50056, 6623, 62236, 36565, 49783, 10049, 17503, 100581, 55951, 146244, 24724, 9626, 17969, 25524,\n    109300, 173965, 99994, 101056, 46459, 43647, 53737, 277968, 8347, 123521, 74858, 33829, 44762, 77574, 877, 81377,\n    222525, 123532, 30602, 43881, 53145, 2973, 16284, 81940, 61281, 127044, 63620, 9875, 14756, 114829, 19032, 9202,\n    52759, 119141, 23928, 120551, 19607, 3599, 33401, 76821, 73233, 117430, 39968, 36539, 7071, 5446, 121735, 194059,\n    15206, 45283, 6706, 15603, 65615, 1207, 165723, 92275, 34773, 104447, 8396, 32353, 205240, 164323, 13600, 60555,\n    79205, 25532, 22907, 33410, 57480, 107111, 69630, 32137, 47832, 70913, 33161, 20321, 2371, 117348, 10714, 86246,\n    1625, 11763, 17900, 268, 78457, 99175, 97940, 101092, 86660, 32221, 14041, 128504, 125080, 53744, 124263, 31017,\n    13897, 403, 31859, 21964, 5633, 111630, 5547, 77329, 17961, 18241, 84995, 25984, 12983, 67491, 62168, 47262,\n    5241, 297, 51191, 7351, 8967, 147212, 82060, 16821, 782, 11033, 82431, 62957, 5026, 43459, 77963, 203477,\n    53528, 6247, 191852, 87774, 74164, 215654, 13467, 1522, 219964, 28589, 244104, 16242, 117821, 67725, 72570, 156792,\n    17186, 15979, 26990, 44128, 193014, 35276, 57125, 16212, 166451, 68017, 6905, 77608, 16364, 53777, 75921, 76426,\n    37975, 26203, 269296, 64099, 84122, 12077, 38533, 830, 4407, 20139, 963, 43028, 38902, 42911, 37503, 83343,\n    85045, 16979, 1165, 60835, 137387, 58380, 86990, 110066, 134540, 56331, 193845, 81238, 17922, 163093, 38744, 110641,\n    12502, 56404, 34862, 26865, 125964, 12965, 111648, 25547, 7771, 27196, 136980, 9555, 29551, 107158, 57885, 18831,\n    37705, 35505, 101742, 13970, 102109, 62548, 124657, 23328, 11124, 89592, 146376, 248050, 6241, 22033, 18337, 80685,\n    29898, 11908, 216623, 67721, 106162, 146610, 21377, 15085, 91552, 42041, 62560, 122532, 125336, 102365, 121537, 142559,\n    29693, 223919, 11515, 110495, 18776, 22494, 5895, 185059, 103592, 229351, 51220, 100102, 37027, 257855, 29359, 54123,\n    36066, 106493, 12244, 79258, 32002, 432, 56205, 94836, 90182, 6726, 14762, 29391, 48938, 26864, 38083, 60364,\n    3310, 60192, 14766, 205567, 57504, 110760, 22649, 24666, 46333, 21517, 3430, 13135, 28873, 27052, 158809, 11597,\n    20529, 6695, 23138, 22960, 37137, 45574, 6545, 305877, 43423, 26153, 24769, 59844, 14501, 10430, 134352, 56169,\n    13213, 103432, 49523, 35181, 13435, 12408, 129475, 64620, 230854, 77390, 51990, 15653, 83248, 33466, 44571, 117828,\n    51481, 2187, 10559, 68019, 18021, 54895, 48247, 18354, 33737, 4554, 108595, 37288, 39767, 116707, 9175, 3726,\n    108877, 21616, 83684, 49862, 1938, 8543, 276466, 20134, 108498, 48770, 102254, 31914, 131520, 185291, 100559, 51890,\n    209, 19526, 76471, 50544, 71814, 99351, 8172, 198526, 28816, 20419, 9109, 98389, 136777, 76479, 75596, 30635,\n    165417, 48216, 120220, 25955, 211071, 39314, 24308, 32164, 2559, 146280, 43403, 9233, 17947, 90585, 1786, 86920,\n    125662, 2457, 64741, 32152, 32918, 122882, 78538, 44001, 31723, 56426, 23375, 103172, 88177, 145697, 52506, 49319,\n    68016, 31664, 41488, 18486, 110400, 7030, 28241, 986, 109199, 19900, 42147, 56864, 65287, 49183, 7858, 24000,\n    30453, 840, 16673, 25907, 68916, 89927, 6309, 158335, 36407, 199737, 130464, 13137, 59603, 201778, 195292, 21015,\n    42466, 179062, 172561, 89492, 11075, 180407, 31868, 72493, 20998, 60217, 9865, 19530, 39274, 130266, 54539, 21623,\n    12535, 13505, 40641, 73375, 4087, 85633, 2153, 3117, 70680, 55788, 92096, 47509, 98493, 37490, 271936, 151475,\n    3032, 16171, 96642, 34106, 78425, 125761, 19591, 3366, 19316, 54508, 24183, 50786, 194248, 91528, 33253, 34622,\n    108355, 41741, 705, 3814, 3883, 108929, 13203, 67831, 10142, 59754, 68208, 29128, 84820, 56880, 38794, 24972,\n    48571, 40821, 40476, 18137, 164254, 24064, 236309, 79181, 11282, 395, 39169, 2013, 51587, 28551, 9645, 701,\n    109513, 115899, 113566, 12762, 62045, 58322, 103726, 41343, 40866, 244102, 143816, 2490, 70346, 40973, 52618, 15412,\n    30720, 104315, 38917, 42027, 93676, 17513, 107418, 20706, 123890, 13399, 97727, 24044, 87962, 65606, 44250, 98044,\n    65276, 74790, 101473, 19350, 91570, 1326, 87790, 172042, 7577, 100813, 86896, 85891, 41512, 108130, 27794, 14875,\n    71431, 12835, 156250, 58135, 3759, 22476, 42176, 115873, 34686, 56523, 73643, 108505, 51491, 20838, 12721, 32863,\n    45700, 29496, 13700, 34294, 55360, 29206, 155942, 123812, 7706, 163234, 203, 132720, 49358, 144431, 8130, 175788,\n    35818, 3270, 76832, 25710, 54095, 97274, 28779, 94621, 74396, 19092, 128242, 58067, 20885, 14670, 93255, 15107,\n    63291, 23654, 126900, 129421, 59294, 262659, 9798, 3251, 67344, 28600, 44629, 50672, 29072, 26999, 31526, 23183,\n    49175, 165843, 175455, 17282, 175411, 32022, 45989, 30298, 90690, 78118, 83156, 23749, 35636, 31317, 7069, 80381,\n    94561, 133756, 14960, 97404, 6138, 41065, 78041, 32843, 16601, 34123, 9559, 146529, 123377, 96395, 54441, 42012,\n    84257, 123541, 10745, 22139, 106459, 11720, 150883, 172651, 154996, 110538, 4728, 53447, 25704, 2009, 71152, 119354,\n    21166, 66604, 1429, 216162, 8637, 122250, 63520, 27180, 29172, 36124, 276428, 107787, 77184, 4680, 14952, 104903,\n    24418, 14793, 51561, 52931, 8371, 26342, 48526, 7118, 92066, 67280, 40653, 8847, 34597, 105438, 14198, 50163,\n    61188, 146286, 50315, 41205, 170829, 161496, 585, 197359, 95056, 1687, 365794, 91349, 48507, 5804, 49263, 5146,\n    104902, 96365, 117343, 132222, 46084, 96919, 16875, 8073, 262381, 79982, 52663, 13928, 16056, 153908, 15145, 109256,\n    132308, 18763, 24904, 167644, 13618, 40750, 18686, 147124, 114709, 150038, 52849, 2938, 12568, 48617, 8778, 5459,\n    44202, 44591, 74914, 17183, 248689, 13878, 7822, 80060, 23116, 194037, 18487, 2067, 7798, 43077, 33678, 244028,\n    31320, 74273, 2794, 19466, 8218, 36280, 183997, 48124, 19416, 29656, 19280, 98734, 7715, 18311, 30701, 133602,\n    150307, 126956, 7378, 2933, 79903, 13178, 12593, 86571, 26604, 92446, 13574, 44205, 65699, 427599, 21118, 8245,\n    14407, 27877, 47936, 33542, 7916, 26460, 117762, 21596, 37818, 2249, 127359, 209394, 60044, 47677, 308089, 36791,\n    154971, 31417, 6998, 150042, 174360, 12255, 43009, 29335, 48739, 3912, 101398, 53340, 2580, 146939, 151295, 45360,\n    125275, 15273, 45383, 27456, 48761, 23314, 8750, 60801, 85823, 104759, 27894, 123685, 66968, 39480, 26917, 55290,\n    83305, 2696, 98390, 57569, 145853, 340733, 4919, 20024, 52268, 30884, 7413, 203685, 70989, 112855, 4129, 50536,\n    349518, 68205, 332641, 159581, 135361, 236026, 37563, 176404, 64899, 6578, 122033, 63871, 1850, 85234, 82089, 66124,\n    74145, 121098, 107351, 12687, 36881, 117334, 13136, 14698, 85933, 93866, 18047, 32620, 310, 15094, 46000, 88451,\n    23632, 36645, 27940, 87618, 80520, 58892, 20976, 27702, 140090, 96075, 67841, 103292, 238964, 87778, 107338, 17019,\n    83427, 67522, 7302, 8261, 47570, 116787, 8730, 80484, 61772, 174422, 56005, 131193, 52875, 14588, 28471, 59817,\n    9586, 15720, 158155, 51307, 109734, 15196, 11025, 59331, 3884, 52626, 102602, 84797, 25158, 27314, 4437, 20488,\n    76214, 189248, 35023, 114952, 157376, 2827, 62439, 102878, 129749, 36405, 10329, 109339, 108633, 36662, 1254, 13267,\n    5470, 87105, 58004, 15397, 10434, 159667, 21864, 52022, 179464, 3013, 32147, 31496, 116832, 18494, 105502, 129227,\n    107267, 50033, 13481, 9954, 24267, 22141, 16257, 116154, 36185, 950, 115685, 11305, 176708, 2048, 178671, 112573,\n    287867, 162328, 497663, 95170, 50979, 193861, 50987, 30368, 136257, 31830, 46549, 15119, 169876, 23788, 17462, 249887,\n    57377, 1949, 35448, 14791, 43769, 210091, 3783, 34612, 282103, 88380, 245190, 5457, 20491, 98908, 11402, 86899,\n    117916, 16028, 162584, 60644, 320177, 156096, 31065, 55876, 22000, 77655, 9992, 23397, 13757, 317623, 63978, 215255,\n    2443, 17648, 93231, 27388, 104529, 93807, 55505, 140477, 12046, 112040, 70887, 40152, 94365, 112353, 25063, 114679,\n    266061, 71248, 119555, 15589, 2244, 617, 14129, 211431, 70110, 100652, 7777, 4383, 85911, 89221, 21010, 120615,\n    58357, 86405, 37554, 41647, 18, 15143, 69662, 60491, 14714, 186134, 148344, 42347, 5410, 168175, 44535, 42449,\n    343894, 129417, 99682, 20659, 27272, 140483, 63455, 222159, 17536, 13722, 42637, 62324, 11976, 114691, 148109, 2283,\n    32057, 182393, 4295, 147364, 33705, 2075, 44303, 30274, 28331, 63740, 69740, 29148, 10346, 44862, 33716, 73937,\n    153333, 12930, 38784, 247159, 2515, 41053, 20256, 83368, 256189, 54639, 115240, 5096, 24661, 175419, 153552, 26516,\n    141, 138176, 63885, 34115, 47222, 55709, 2765, 28479, 38875, 236608, 12229, 22921, 77291, 54426, 45388, 2860,\n    57787, 114579, 295139, 105782, 17826, 71066, 19119, 54364, 69385, 16568, 12323, 28057, 33346, 34919, 124763, 155533,\n    101386, 31644, 8627, 49001, 303600, 29868, 63213, 9103, 77280, 71333, 9696, 138789, 37059, 24823, 5057, 21352,\n    32368, 114208, 56803, 19424, 10445, 58514, 8661, 209508, 26187, 171838, 10460, 63454, 14016, 122504, 41328, 21329,\n    46618, 32493, 38225, 7855, 31763, 7945, 29876, 8734, 6438, 24205, 97490, 139977, 130740, 47323, 33195, 85390,\n    57194, 13813, 60600, 21313, 96251, 7699, 27584, 170521, 139271, 1363, 4402, 336738, 129223, 84983, 69150, 13147,\n    3590, 163929, 207225, 155260, 55916, 20288, 4503, 8398, 98490, 11773, 27512, 37113, 84976, 86558, 28365, 11756,\n    116005, 182148, 13733, 115313, 47644, 67208, 85069, 9347, 14995, 226141, 14704, 101835, 41159, 35314, 13113, 63526,\n    214039, 29978, 50446, 83339, 17440, 129441, 72522, 118641, 97816, 24907, 73844, 15717, 118884, 167255, 96509, 162793,\n    30847, 36849, 51297, 78974, 77793, 10427, 1873, 2972, 9999, 35074, 28190, 64297, 146836, 46298, 60038, 163007,\n    108919, 61219, 2403, 75022, 127339, 4233, 110389, 69022, 9833, 128097, 88016, 79390, 222936, 22570, 94657, 28462,\n    56956, 38803, 81536, 30474, 152794, 19566, 16481, 147408, 74574, 81895, 20731, 1918, 1366, 76367, 187321, 54494,\n    24366, 21690, 61696, 33283, 107477, 77499, 31112, 414383, 74362, 18463, 218441, 120929, 59848, 258629, 201924, 69269,\n    454, 19989, 13054, 59894, 3623, 58908, 20681, 35723, 78523, 102680, 38988, 184112, 108087, 50944, 132704, 52966,\n    21699, 18860, 96349, 201411, 82697, 85395, 95658, 5093, 6427, 177894, 44191, 32755, 26961, 155739, 6249, 31310,\n    81030, 26574, 84311, 120155, 86730, 113535, 7424, 48888, 13516, 45747, 98098, 20077, 183995, 81945, 43210, 26704,\n    40420, 75831, 45648, 11180, 6855, 57927, 65528, 124096, 34851, 2598, 156633, 107572, 127352, 38169, 123845, 60142,\n    62722, 105584, 232364, 23211, 68120, 1601, 22169, 89299, 747, 258039, 80572, 7258, 152249, 11862, 101204, 8834,\n    121434, 33761, 19175, 133142, 46343, 40178, 48723, 3589, 41977, 30210, 38868, 62257, 10087, 82658, 87827, 90646,\n    16415, 47552, 351723, 28298, 72225, 91146, 272760, 1701, 11295, 1652, 109651, 300747, 51863, 198800, 29446, 11794,\n    32345, 37538, 22356, 33102, 37590, 113544, 37970, 11478, 179743, 25454, 103417, 59905, 221970, 105196, 145604, 7817,\n    164809, 102360, 16974, 75840, 255333, 56902, 6659, 1954, 645, 59400, 67769, 7689, 18675, 5215, 13793, 20536,\n    27852, 3387, 29523, 259718, 16860, 94625, 43143, 29245, 15848, 233581, 22685, 63631, 78557, 22836, 133302, 84513,\n    1348, 51826, 47129, 98836, 58284, 1830, 1749, 94642, 10933, 6145, 12506, 10975, 13879, 103781, 144434, 10268,\n    28409, 32346, 52968, 121567, 107374, 77268, 23686, 35097, 10501, 155275, 15303, 47136, 21102, 168741, 55332, 90385,\n    15996, 84817, 681, 137803, 25054, 142275, 6163, 38175, 8056, 124296, 240642, 65621, 4934, 178205, 16101, 62803,\n    60964, 18230, 100622, 76465, 44689, 14545, 9543, 47514, 16852, 93380, 28048, 12047, 107106, 37575, 101485, 77047,\n    57326, 34819, 96137, 76916, 6469, 46264, 115983, 75768, 87668, 69942, 13027, 165, 8373, 114231, 26434, 52844,\n    42799, 182044, 23580, 146254, 38081, 43236, 33883, 146220, 382894, 14606, 46035, 36481, 166621, 35417, 95382, 2957,\n    59384, 60428, 36358, 66343, 75378, 22267, 22950, 83528, 17577, 56474, 25285, 4619, 179691, 75355, 95836, 53295,\n    34588, 171410, 4487, 14679, 84208, 44015, 18562, 109133, 54101, 11531, 86052, 174479, 303157, 28095, 9953, 35642,\n    14564, 39802, 16145, 77606, 117406, 53038, 121117, 53624, 22062, 1212, 7632, 127157, 237292, 189087, 10478, 127345,\n    102515, 181997, 86752, 87623, 10966, 121602, 68783, 68681, 83042, 114380, 138349, 191305, 67176, 50085, 39016, 1427,\n    42384, 1412, 67118, 122616, 72389, 25260, 2237, 13576, 137346, 19938, 20304, 2191, 68759, 5373, 61364, 238507,\n    75814, 23931, 69565, 38993, 131741, 38364, 12528, 87762, 5679, 129853, 5310, 186831, 32653, 90338, 260176, 389531,\n    108118, 26843, 43985, 50175, 30563, 25106, 56965, 18130, 140428, 4542, 165503, 117991, 24219, 229605, 1819, 129663,\n    1240, 3797, 76093, 18398, 71339, 51919, 93043, 27175, 47060, 216257, 6483, 35051, 1217, 16512, 80798, 129064,\n    13225, 69339, 8548, 237079, 72298, 2575, 34280, 51379, 117910, 55671, 53345, 247552, 29486, 39328, 140821, 34681,\n    57045, 60177, 5004, 90269, 78522, 2479, 322607, 48474, 61296, 13057, 31558, 4678, 59271, 6699, 27044, 31988,\n    35944, 12503, 83480, 4389, 136508, 3781, 114121, 70279, 4488, 155829, 42214, 2898, 68191, 75695, 305850, 45041,\n    74344, 106509, 30087, 17429, 93292, 12477, 290, 23080, 114802, 35714, 18751, 26554, 105424, 17775, 2144, 2412,\n    100610, 65192, 113975, 52975, 180272, 135050, 129815, 76238, 106483, 21440, 63186, 4260, 46189, 9711, 28249, 4169,\n    23429, 23390, 8324, 141585, 63809, 67668, 38457, 38063, 39226, 59972, 1189, 203916, 62368, 14403, 16949, 61767,\n    85801, 1739, 40147, 35049, 76757, 33124, 62102, 15780, 103593, 103009, 53484, 22952, 67973, 114645, 6566, 5245,\n    50462, 7601, 8288, 3513, 194571, 80276, 1908, 54592, 5124, 58571, 2513, 6800, 273997, 193904, 1119, 17991,\n    117245, 2508, 129156, 82366, 26278, 71465, 63341, 56943, 39662, 106116, 94966, 156875, 9736, 2204, 122308, 94418,\n    27134, 1280, 24539, 49022, 45314, 3764, 50904, 46424, 30699, 28087, 293839, 9400, 33646, 40165, 822, 147499,\n    50263, 116179, 29085, 11863, 31314, 5578, 17797, 5104, 12454, 1604, 15342, 219206, 10232, 67800, 94261, 25872,\n    13565, 90339, 78971, 75377, 26649, 41184, 47695, 11514, 35369, 20767, 14227, 41953, 309396, 148270, 147938, 33074,\n    14453, 27499, 109019, 39018, 25738, 240196, 158931, 52820, 8612, 95853, 21524, 137010, 84901, 70869, 70021, 116794,\n    48404, 38771, 6732, 1070, 70990, 187297, 49140, 5238, 576, 3564, 253975, 16027, 16483, 2811, 37775, 19034,\n    25259, 4053, 2000, 70083, 95774, 19713, 33431, 92703, 91314, 42381, 288770, 48194, 95985, 3991, 77418, 13406,\n    241328, 245086, 56533, 35275, 62725, 9246, 51924, 70181, 95331, 16163, 31410, 79016, 39312, 120878, 119371, 275987,\n    80124, 27712, 9186, 220, 23598, 146167, 85209, 68238, 282190, 57048, 31273, 30555, 80913, 17594, 75779, 59160,\n    135002, 101219, 189377, 29225, 96735, 60126, 62522, 104000, 27620, 86814, 17240, 147533, 11001, 5425, 43682, 410,\n    49460, 87270, 69480, 46315, 59448, 1816, 76201, 9431, 11788, 87960, 29063, 65539, 47347, 11678, 33846, 7008,\n    196704, 9895, 6753, 8633, 120892, 59970, 572824, 115934, 6646, 202559, 892, 48351, 37611, 251282, 57823, 67263,\n    57750, 26527, 34485, 90747, 7685, 88370, 6144, 64182, 1709, 41969, 21458, 62327, 181657, 49247, 225330, 122600,\n    114574, 107124, 85361, 111833, 63243, 71420, 15655, 191178, 72430, 18063, 51425, 54002, 12364, 53225, 86557, 18193,\n    97580, 41232, 138398, 67821, 128724, 8944, 233212, 101353, 52099, 42127, 14006, 120107, 32789, 32132, 3498, 18123,\n    33758, 56058, 5779, 128760, 59888, 98869, 18445, 84702, 51911, 13234, 218379, 20093, 39031, 8074, 70195, 20708,\n    23462, 24355, 131384, 60189, 26390, 10403, 41060, 7140, 10781, 49410, 42261, 87202, 82566, 41663, 43105, 60276,\n    2768, 5733, 74176, 28329, 2297, 145430, 131632, 83615, 122915, 105441, 655, 224102, 5284, 136426, 67763, 16294,\n    188511, 32538, 61049, 27893, 3394, 13951, 159099, 28542, 17930, 145360, 9492, 190122, 32285, 78855, 26440, 13570,\n    58648, 73908, 4239, 124561, 2444, 74172, 53131, 11468, 10794, 73566, 11623, 35343, 64710, 30481, 4163, 10328,\n    38309, 29901, 10538, 154377, 76132, 92405, 24839, 11679, 3465, 13449, 11637, 7824, 2337, 57754, 1260, 14458,\n    41118, 19878, 38661, 13416, 159180, 37074, 163164, 54137, 28627, 52134, 184900, 8520, 40385, 29546, 30502, 22386,\n    66527, 107458, 6850, 24022, 47983, 30603, 35083, 8934, 304066, 39500, 9, 28261, 33026, 77251, 9374, 44833,\n    116312, 34990, 29236, 63563, 125639, 135405, 165398, 159055, 55690, 88141, 69643, 236964, 31983, 25572, 20436, 36746,\n    60896, 31850, 16179, 11828, 5888, 3043, 66368, 9750, 31167, 7915, 53111, 36430, 1333, 64344, 93659, 20061,\n    60596, 180191, 51630, 6792, 30244, 43509, 101058, 22409, 420, 44210, 109783, 43223, 27030, 72477, 72831, 32679,\n    29235, 7675, 47556, 12258, 39907, 149412, 84926, 118247, 24692, 71717, 105038, 86009, 45941, 41189, 89453, 29856,\n    52543, 30627, 226798, 67303, 59230, 67415, 34408, 1367, 99685, 16867, 128419, 52147, 4111, 125381, 117881, 16173,\n    44093, 102224, 31575, 23234, 24870, 83790, 127407, 239098, 3200, 994, 1255, 100903, 242275, 117266, 55116, 38205,\n    16140, 29662, 11307, 40414, 208793, 123355, 56470, 4862, 75600, 30119, 58218, 70828, 24075, 26974, 7802, 192353,\n    4851, 5475, 78720, 66596, 3409, 28573, 64396, 30381, 30690, 59859, 88256, 5406, 99945, 103064, 34463, 37727,\n    24238, 86643, 60088, 4057, 23741, 5967, 162904, 38240, 28356, 93858, 25510, 122879, 6897, 3278, 7057, 11971,\n    4400, 35461, 211413, 21395, 59615, 39471, 87233, 55795, 128426, 3051, 22470, 41950, 14705, 3974, 180108, 80476,\n    78442, 204996, 91987, 15634, 67610, 139015, 142373, 35611, 51134, 10387, 4353, 153456, 57749, 181039, 14183, 68447,\n    151532, 21107, 36452, 20551, 3186, 46247, 46383, 129666, 88736, 140662, 146243, 2066, 8360, 7978, 64818, 106963,\n    17896, 47801, 10723, 114821, 223295, 74192, 3293, 3393, 16987, 74064, 11277, 91622, 4270, 29828, 27951, 387869,\n    103235, 1374, 61988, 120083, 477, 145892, 128378, 11779, 211263, 61354, 18221, 17869, 46530, 83061, 108538, 157981,\n    90608, 67199, 95080, 49064, 195814, 12302, 66307, 10348, 231346, 160732, 112859, 63633, 146558, 21271, 31037, 198802,\n    47622, 12862, 95710, 3910, 77850, 73961, 85585, 34752, 61000, 4082, 24595, 103679, 71107, 8208, 79568, 150019,\n    16615, 24961, 139857, 32664, 197366, 4559, 54735, 32696, 4126, 162019, 75698, 13916, 70108, 159638, 19834, 9349,\n    24675, 175560, 49643, 18206, 52459, 27992, 10809, 88865, 401975, 133172, 29000, 34558, 30915, 3658, 25834, 42430,\n    36562, 125265, 18182, 10155, 40149, 97082, 208980, 19575, 60853, 90529, 66545, 9600, 789, 46420, 2317, 88593,\n    55595, 98980, 115302, 5742, 169155, 1073, 177901, 3472, 11189, 63711, 78643, 65472, 50459, 127979, 93, 42202,\n    67053, 21720, 157650, 11145, 141378, 42033, 22824, 85705, 79114, 35584, 15974, 1510, 54172, 28562, 12451, 104226,\n    19190, 97151, 73024, 20948, 5151, 81741, 21499, 29006, 84183, 198074, 54003, 45120, 170125, 26240, 35177, 28389,\n    64863, 79974, 60778, 176915, 232183, 45342, 2038, 80253, 41564, 40703, 32689, 5430, 100689, 5366, 23007, 134279,\n    14266, 26712, 73993, 24934, 64242, 52113, 102887, 61801, 46415, 201049, 54251, 62133, 122757, 164883, 30815, 139966,\n    2319, 30842, 766, 13362, 10287, 134518, 86111, 81665, 82440, 28333, 43019, 18963, 8804, 161944, 23439, 102144,\n    101145, 80029, 39052, 248708, 30350, 117340, 11878, 128467, 974, 138625, 63961, 5237, 74778, 61834, 67040, 43814,\n    13690, 65947, 33809, 232476, 115258, 181745, 28824, 94013, 9510, 10246, 93722, 81976, 7217, 114383, 3493, 16014,\n    69045, 72692, 12145, 80981, 9507, 6692, 1620, 60820, 330444, 35474, 33962, 4797, 7053, 295463, 46445, 27026,\n    12491, 77988, 49524, 35675, 90947, 29114, 166705, 101385, 133782, 32704, 6186, 84595, 176031, 185623, 45966, 151302,\n    63069, 1699, 107491, 947, 15458, 74452, 196212, 6046, 10498, 12163, 10239, 35191, 243951, 9277, 9090, 29539,\n    54460, 22820, 26514, 112549, 60372, 51753, 48756, 21812, 70861, 260326, 41, 44222, 10441, 16961, 48148, 138771,\n    216194, 5914, 52153, 53400, 212036, 56519, 26245, 10117, 45888, 15294, 138019, 90913, 26368, 43842, 42111, 23348,\n    6082, 194845, 161089, 156206, 51546, 11647, 30759, 302912, 262094, 8635, 78876, 26535, 35283, 54183, 31183, 85484,\n    147873, 12989, 5197, 6356, 72894, 65347, 20150, 27370, 73787, 1493, 45918, 12366, 190217, 20724, 13858, 10981,\n    67449, 81213, 7553, 14115, 72242, 271517, 11842, 48310, 88743, 143726, 22177, 3290, 243231, 58452, 62937, 12592,\n    1654, 40066, 33477, 13751, 9921, 128442, 15868, 7106, 75236, 83773, 10775, 36938, 10482, 170465, 17368, 17469,\n    161508, 32752, 98340, 800, 19824, 264456, 3901, 87319, 2867, 26782, 9630, 113102, 185815, 24197, 44584, 86366,\n    40224, 3636, 140916, 31731, 267731, 9567, 53678, 72984, 29389, 27963, 17106, 50282, 284911, 60170, 8322, 12608,\n    23374, 89652, 5268, 39044, 229766, 8869, 151350, 31436, 177342, 12269, 183212, 120418, 116270, 2843, 78888, 69192,\n    7865, 184099, 1086, 129897, 18383, 70508, 20242, 18508, 229924, 124569, 35749, 50589, 55626, 9884, 83115, 40971,\n    30671, 18135, 14452, 38861, 17844, 201826, 5549, 26413, 17189, 13561, 38539, 10679, 143331, 3314, 36785, 171194,\n    49685, 187713, 67506, 4618, 104039, 17060, 195080, 50648, 33159, 19238, 67559, 134840, 28599, 157523, 17130, 38064,\n    117398, 94355, 31918, 13575, 34538, 40326, 13997, 3494, 348283, 62481, 26862, 3603, 104426, 244363, 153709, 112487,\n    304612, 199674, 41239, 35545, 54869, 293005, 28223, 26277, 26899, 4533, 18518, 15492, 38587, 80488, 70485, 160395,\n    263, 60162, 11382, 222152, 4696, 250751, 51921, 182609, 10707, 48463, 46243, 1227, 49111, 111564, 46502, 33342,\n    56846, 68541, 63559, 858, 139927, 16654, 229375, 76759, 26478, 33205, 95828, 23399, 92945, 2637, 35630, 28470,\n    143992, 50214, 14174, 21456, 166191, 65665, 1711, 21594, 78019, 97599, 111701, 36, 147151, 110246, 189022, 43021,\n    30397, 40757, 131935, 42065, 73335, 48039, 26596, 28984, 15102, 2361, 7421, 202167, 69744, 43766, 52826, 3642,\n    83304, 33873, 75140, 63169, 192389, 36551, 92748, 13039, 123959, 233220, 21738, 84447, 77230, 20228, 187852, 19095,\n    25799, 92136, 108774, 29237, 53947, 2299, 118106, 2687, 8830, 42331, 202924, 33667, 2023, 73763, 30704, 19363,\n    19779, 16737, 35629, 48081, 24068, 101013, 162338, 291912, 13749, 24745, 328289, 167679, 70086, 48299, 23306, 16732,\n    17801, 43322, 54589, 3586, 63653, 43624, 53474, 925, 109177, 251316, 43805, 13082, 19511, 86565, 142182, 92461,\n    17117, 101033, 103319, 64589, 4022, 4351, 235897, 5352, 82705, 107142, 46391, 156084, 5860, 61365, 10558, 13045,\n    7717, 18357, 33922, 12590, 33065, 6928, 46993, 783, 46937, 67846, 8952, 26295, 6107, 119656, 18799, 17458,\n    50747, 4229, 179559, 112727, 118080, 20683, 41464, 125468, 51560, 49749, 44231, 7359, 35339, 62988, 136487, 67015,\n    5208, 29150, 24956, 105186, 48858, 6143, 18097, 6972, 16404, 73489, 58742, 97196, 36357, 164616, 5834, 32267,\n    13746, 147733, 15113, 132091, 34127, 106298, 39729, 106426, 22294, 9780, 15602, 36213, 71502, 42808, 66802, 599,\n    60755, 5851, 39120, 67363, 108623, 126368, 72770, 91263, 32486, 30596, 151717, 7951, 52002, 43103, 11768, 68942,\n    40901, 39344, 24037, 127500, 116890, 48403, 16926, 86750, 17745, 48648, 159545, 34460, 58419, 5634, 114317, 67865,\n    31462, 23352, 24010, 98185, 125708, 69686, 68337, 13610, 26271, 70691, 2980, 4768, 27225, 102402, 75453, 28106,\n    8104, 6931, 1176, 6274, 6475, 112635, 22498, 6176, 238686, 26832, 28893, 90319, 14441, 15682, 15087, 39517,\n    45270, 109134, 104440, 45965, 47645, 81772, 7876, 52683, 87720, 12898, 4505, 185665, 2769, 113401, 15664, 57592,\n    105229, 137381, 97059, 119268, 6876, 43309, 33886, 128363, 35476, 144249, 67013, 143587, 83367, 25703, 91436, 59347,\n    53236, 2289, 16519, 19844, 46309, 58558, 99834, 23313, 218816, 231303, 36388, 51333, 183535, 109792, 139277, 54306,\n    90139, 18235, 8275, 32710, 37677, 82464, 86025, 92204, 88842, 117723, 37570, 128723, 234242, 76350, 73795, 34896,\n    148247, 58424, 11105, 11744, 45746, 63372, 17118, 49772, 199520, 81902, 38004, 22911, 33752, 3125, 1995, 53792,\n    4689, 26909, 108150, 146062, 69674, 41811, 161444, 84855, 8999, 28561, 16731, 93937, 3189, 21967, 24890, 22943,\n    1356, 145300, 51569, 28802, 517, 118679, 31703, 40607, 48098, 108854, 25003, 10233, 73969, 177495, 5248, 24516,\n    215347, 146192, 48712, 60626, 69188, 40735, 5866, 586, 101541, 6509, 47590, 52129, 5969, 222045, 110933, 25733,\n    24223, 65339, 62812, 2414, 155418, 35819, 16022, 78423, 43138, 20995, 128255, 240673, 46745, 236093, 72176, 57085,\n    97841, 61248, 107, 36068, 193177, 105427, 55726, 215229, 20446, 47228, 100420, 87091, 14429, 121708, 23605, 21157,\n    187721, 21880, 2997, 203976, 99166, 95068, 25877, 7724, 98925, 83401, 4829, 13182, 18229, 13718, 239662, 38653,\n    116505, 153497, 30589, 89029, 38962, 181302, 43853, 78872, 180301, 4786, 248240, 7401, 106136, 112590, 77745, 19731,\n    60880, 77789, 125748, 135487, 5975, 48627, 34084, 12419, 215770, 47557, 254582, 10364, 106495, 21856, 67539, 88981,\n    38805, 21428, 48732, 42316, 12149, 16078, 52808, 25327, 51322, 33850, 51147, 12253, 122354, 46077, 56483, 254553,\n    115417, 81834, 150991, 94662, 86668, 7381, 12841, 100650, 18218, 15741, 22372, 68294, 50705, 15535, 84660, 61887,\n    22553, 72299, 31361, 24824, 17743, 46820, 64288, 31582, 77006, 111674, 116384, 30760, 80920, 86149, 77192, 51979,\n    79691, 60342, 122805, 103800, 240873, 160744, 233114, 78962, 54920, 8608, 3484, 316104, 72548, 24337, 5088, 230040,\n    21926, 10172, 36838, 26, 86221, 83458, 102176, 12062, 17571, 41929, 41170, 28428, 68239, 41750, 103930, 2634,\n    18313, 53019, 34825, 97837, 63115, 24606, 73157, 152474, 14715, 91439, 37033, 109806, 140259, 30668, 174760, 380,\n    135597, 95673, 136073, 65073, 134249, 13829, 17279, 122305, 4420, 46444, 10237, 64848, 203623, 70728, 10349, 182885,\n    65075, 24519, 25783, 40318, 34139, 22222, 63394, 55266, 102764, 41422, 20126, 65100, 90408, 53640, 35128, 48932,\n    11192, 38935, 96839, 34782, 39492, 19396, 41332, 6250, 5511, 19492, 51304, 25936, 104466, 54099, 73771, 86115,\n    5080, 7669, 30891, 111700, 13931, 25276, 72289, 135447, 14820, 258641, 25265, 31005, 281179, 75286, 393, 95359,\n    14623, 13584, 6680, 101227, 80173, 44933, 76666, 54542, 13244, 39348, 458, 25379, 109451, 134348, 81143, 6959,\n    65554, 12027, 51311, 8716, 57589, 140731, 28467, 23316, 17272, 30458, 25980, 55229, 77197, 83798, 28302, 114784,\n    7428, 34548, 26241, 14712, 39336, 103304, 18928, 54080, 12870, 334, 87722, 15208, 16895, 142098, 114262, 39820,\n    83913, 57817, 28682, 7721, 14900, 108672, 11250, 62246, 42849, 415188, 1724, 26555, 24549, 25505, 26443, 107450,\n    145899, 61035, 43528, 6901, 60726, 65906, 267741, 21338, 147590, 42079, 18924, 73017, 135236, 15393, 5206, 4026,\n    84185, 1531, 5988, 113890, 82647, 303391, 7386, 69844, 71611, 189865, 76523, 31877, 13315, 19314, 198575, 32821,\n    1928, 67641, 25913, 104475, 103489, 3297, 70391, 18406, 15446, 113347, 19295, 93790, 27856, 1792, 167471, 116449,\n    8541, 4408, 41757, 63233, 25765, 86680, 64501, 27034, 24816, 34975, 6079, 4486, 49693, 36229, 16917, 21581,\n    62426, 27862, 11612, 54284, 35702, 194034, 355, 24277, 48262, 87411, 70504, 310164, 118018, 12516, 47559, 43502,\n    57433, 107139, 9290, 66533, 80863, 14634, 34312, 91725, 28606, 21342, 67241, 72355, 43244, 375789, 37402, 174015,\n    105070, 8342, 44167, 67494, 1890, 16365, 11723, 271002, 1865, 47918, 8350, 45564, 27742, 25110, 125803, 8553,\n    49504, 81925, 62211, 4534, 15491, 19011, 80373, 206920, 667, 102405, 128623, 245524, 5553, 113309, 192739, 65766,\n    19567, 22832, 261958, 29679, 21293, 71134, 20962, 105123, 24721, 860, 21752, 33448, 18372, 157167, 94822, 35770,\n    173224, 232737, 75729, 28937, 46828, 28062, 25453, 5207, 140366, 36665, 30652, 6169, 67920, 150458, 92040, 23186,\n    184604, 92330, 20891, 176492, 49427, 27828, 38305, 42495, 143982, 49560, 25503, 90043, 29747, 65328, 47830, 12932,\n    11068, 77721, 9003, 25213, 94205, 140426, 46090, 89945, 138173, 192691, 33329, 112232, 129905, 35709, 27514, 1841,\n    19957, 31411, 127476, 53572, 17497, 173549, 55063, 175135, 19841, 69314, 5192, 237921, 117660, 150697, 4060, 273045,\n    50414, 98940, 65348, 153665, 164423, 58804, 156695, 48994, 213928, 86036, 28608, 8355, 39574, 34540, 16927, 135680,\n    18374, 151587, 10830, 53805, 16878, 16623, 4282, 48030, 8537, 14986, 46102, 13062, 72897, 72, 33050, 108227,\n    39451, 45935, 651, 113320, 40535, 95176, 57450, 48843, 5003, 19019, 10407, 211163, 3848, 1068, 4988, 32091,\n    30095, 41692, 15099, 43602, 107434, 50744, 7627, 171349, 16313, 150832, 352665, 207750, 33937, 38256, 51091, 156000,\n    87889, 90663, 84175, 24908, 114900, 50365, 31494, 83829, 5398, 169342, 47521, 54818, 18935, 8356, 43094, 41212,\n    174536, 10082, 92550, 6678, 60614, 23355, 69721, 14796, 34149, 128830, 58187, 3179, 208, 40325, 28399, 225029,\n    401412, 51150, 31580, 207268, 6657, 10993, 69818, 64282, 289845, 23308, 12961, 38447, 6681, 52944, 31855, 2572,\n    47646, 120728, 179148, 37240, 45196, 218274, 4816, 3695, 21961, 50084, 35209, 18073, 51452, 27004, 6100, 33941,\n    1377, 84831, 171214, 85, 141510, 9078, 99227, 32610, 6417, 11718, 49868, 65579, 87902, 73018, 49062, 46280,\n    61742, 21512, 40862, 107733, 15941, 29168, 157765, 144919, 14487, 5767, 158014, 140070, 7241, 573, 71584, 16921,\n    223566, 40331, 179473, 35081, 47926, 140885, 41508, 52104, 59180, 42310, 32811, 29048, 123517, 102413, 80208, 10104,\n    14746, 12649, 153641, 126022, 37965, 113017, 4171, 83, 142592, 2809, 6362, 50416, 71323, 116894, 260776, 16204,\n    1524, 5760, 30351, 12658, 20703, 54403, 36083, 45408, 74772, 4946, 14485, 50759, 111222, 10890, 2195, 167147,\n    92962, 130534, 16283, 177256, 35016, 15472, 210156, 151187, 73922, 117691, 43250, 52051, 37392, 24811, 24358, 30830,\n    5775, 818, 21969, 1476, 127322, 151783, 58392, 31021, 106913, 65215, 89407, 90802, 28531, 11690, 20234, 95249,\n    44602, 37256, 18707, 11928, 5161, 4410, 26571, 51903, 49768, 22008, 25252, 65780, 209499, 68769, 203726, 13249,\n    137363, 48845, 86823, 6658, 5674, 31881, 1083, 1823, 108676, 34518, 166752, 13791, 14287, 91576, 91429, 8665,\n    11529, 26401, 16191, 91972, 30964, 5254, 28486, 54697, 79613, 66520, 18447, 22870, 45203, 194466, 22822, 51703,\n    12278, 76716, 44595, 73455, 33546, 12235, 144843, 36154, 51247, 11116, 33040, 3180, 225753, 60864, 1972, 28469,\n    12891, 28879, 10338, 144157, 56294, 353058, 38302, 41447, 87532, 110616, 27065, 168438, 6557, 1213, 50804, 144643,\n    24817, 2390, 136531, 38174, 247513, 16190, 4059, 122791, 131994, 137430, 39506, 57650, 16305, 5188, 54309, 106128,\n    20628, 88071, 67394, 395446, 250285, 66176, 91254, 1399, 114196, 43915, 60230, 44853, 27206, 106353, 43013, 18733,\n    345105, 226453, 51202, 16607, 57106, 117175, 35492, 10476, 89598, 127439, 15187, 39624, 13688, 61570, 10615, 31111,\n    59370, 6238, 175252, 32143, 224492, 41388, 95408, 34384, 148238, 78307, 38959, 9340, 160091, 61443, 15737, 11216,\n    41244, 170, 38299, 102443, 113097, 26382, 14027, 33707, 3957, 76300, 66160, 19431, 18900, 6952, 1717, 108656,\n    82206, 188021, 257335, 27295, 43999, 41210, 31777, 46956, 57457, 12657, 11489, 15697, 48060, 204748, 53583, 82422,\n    284790, 30503, 137341, 8120, 19615, 220311, 15991, 10217, 63424, 9808, 67431, 70976, 98221, 4491, 15177, 28535,\n    144789, 751, 13230, 2394, 1504, 33977, 132104, 30316, 22230, 931, 97193, 185240, 24826, 22687, 174322, 15307,\n    22988, 1390, 188745, 180325, 29580, 59068, 74903, 18994, 29195, 79, 15436, 7622, 38462, 11566, 138710, 44828,\n    45774, 37768, 99236, 68137, 84083, 19282, 22698, 17134, 74807, 126662, 173497, 46248, 16938, 119735, 3212, 28292,\n    213652, 49013, 9975, 32180, 45660, 86250, 4801, 68788, 95490, 77482, 113751, 11994, 44624, 94452, 46839, 128497,\n    100316, 5798, 58588, 73184, 202987, 65417, 37790, 88524, 1606, 43156, 97964, 105717, 34947, 11203, 100060, 37742,\n    130074, 93653, 107799, 94311, 196106, 41347, 8035, 10780, 16390, 27883, 118236, 167395, 1979, 25006, 19375, 31628,\n    18916, 144723, 78502, 114047, 103107, 86492, 107686, 5844, 20934, 206963, 23556, 22591, 16562, 146333, 20167, 10471,\n    117434, 33085, 2863, 9740, 36669, 41849, 37271, 22790, 18209, 28979, 8231, 12952, 54408, 21731, 25130, 45208,\n    55748, 138120, 75826, 414, 29593, 9925, 292865, 25999, 683, 123149, 7036, 92159, 86055, 61827, 103680, 23176,\n    54918, 58466, 57578, 13305, 5709, 86479, 16697, 31064, 17660, 200919, 10770, 49793, 33423, 32370, 52047, 16488,\n    62555, 6459, 8426, 83493, 7763, 59725, 82812, 18628, 67760, 79405, 68557, 9612, 7673, 28102, 56517, 69620,\n    171797, 32458, 29541, 15870, 81109, 32080, 207644, 71495, 21202, 11039, 91036, 61230, 2810, 130800, 32260, 4613,\n    60590, 37112, 75214, 33979, 126402, 155062, 30642, 63875, 12810, 194463, 82799, 47664, 16725, 36685, 43367, 61099,\n    449, 172150, 102867, 21691, 301838, 36745, 7130, 18671, 57316, 34852, 38034, 54182, 35578, 65900, 99486, 19771,\n    3456, 2658, 16914, 99866, 28390, 28109, 8262, 21147, 34353, 20006, 4228, 137085, 1675, 203023, 283196, 198286,\n    214375, 163329, 290603, 152574, 40471, 83506, 30068, 14730, 23177, 131539, 34759, 27668, 32178, 71896, 104799, 116305,\n    85430, 119262, 42860, 25160, 8911, 23428, 49437, 105322, 6519, 16203, 6349, 74711, 1230, 38045, 8540, 75165,\n    44736, 25909, 51026, 317034, 4984, 32281, 91312, 27060, 44431, 17817, 45363, 155937, 239085, 35697, 59784, 91993,\n    29531, 126740, 213757, 76560, 167776, 285273, 24262, 8237, 65030, 41160, 74437, 48804, 118916, 13159, 37842, 1031,\n    75349, 1478, 11655, 108777, 23435, 277425, 101734, 67469, 70231, 124711, 43532, 28514, 65526, 54956, 1000, 21882,\n    17728, 25302, 40952, 52214, 149632, 1999, 2111, 3259, 63362, 89961, 220561, 39777, 26335, 9063, 10572, 12416,\n    34551, 34623, 38604, 24723, 5947, 15588, 69927, 66252, 119177, 69173, 46629, 28714, 70715, 212408, 20521, 406913,\n    74380, 11716, 50659, 50862, 37009, 88460, 130101, 7210, 53853, 538, 65120, 151950, 55806, 163748, 52837, 13153,\n    21100, 16674, 64536, 6091, 138201, 44837, 58547, 3723, 163, 2177, 32288, 85454, 34033, 8497, 14282, 25742,\n    10535, 10741, 79559, 117493, 243787, 49337, 100718, 79495, 40139, 42956, 7551, 55433, 15421, 31509, 23034, 45081,\n    547, 61176, 53434, 328001, 8470, 36263, 30145, 4519, 74173, 53935, 11845, 73774, 60211, 78025, 3, 4102,\n    73782, 109293, 315332, 48412, 26683, 13714, 6865, 20128, 18490, 104141, 325, 39470, 171970, 115860, 15707, 7268,\n    73301, 74336, 31370, 2368, 111827, 107757, 136231, 142844, 97138, 96638, 84053, 38691, 23801, 1588, 10573, 122098,\n    77039, 240, 186135, 146101, 11996, 18143, 112963, 46171, 155836, 348769, 47795, 121213, 116266, 132515, 3344, 144804,\n    31286, 99187, 255838, 129694, 35894, 48779, 55235, 148582, 71967, 65282, 15174, 13920, 47080, 6147, 108242, 157593,\n    125025, 7136, 1286, 28957, 127956, 28402, 98813, 20805, 7532, 109417, 40610, 5041, 32958, 15142, 18408, 108596,\n    33543, 50517, 27748, 80114, 233434, 91447, 487, 37094, 100048, 30541, 43477, 10639, 89862, 155868, 37667, 8726,\n    60684, 237903, 73408, 99589, 12190, 38739, 97348, 3914, 13594, 2680, 149016, 13907, 30171, 28343, 23530, 115225,\n    61104, 35821, 147679, 14337, 4297, 244282, 24085, 326976, 56428, 7851, 21303, 131620, 71446, 83253, 68692, 111870,\n    5224, 15813, 38197, 49026, 45057, 13660, 3306, 76345, 40671, 27905, 91072, 996, 68527, 62085, 91351, 122634,\n    55109, 168209, 2024, 27560, 112707, 17352, 8306, 167115, 169921, 166958, 5031, 46020, 11844, 67284, 19130, 76185,\n    6920, 32849, 5450, 14610, 22451, 21002, 17392, 31872, 66682, 84796, 13709, 40210, 59898, 12029, 8719, 53564,\n    21462, 91884, 21647, 88379, 194428, 12754, 37797, 132826, 160016, 22567, 54383, 53186, 77611, 31107, 8339, 4694,\n    19185, 90355, 23597, 17222, 140675, 28442, 23668, 55977, 9128, 61555, 28774, 155229, 17658, 9390, 24379, 69357,\n    15752, 127381, 239631, 62460, 93181, 55913, 45133, 140155, 18676, 25249, 33164, 29581, 82837, 67223, 22362, 29975,\n    7317, 52813, 1943, 29613, 20012, 207130, 49617, 49651, 5636, 15334, 36313, 29226, 28084, 95247, 72072, 19000,\n    224932, 15811, 114, 32127, 38097, 37508, 88507, 37225, 27359, 91626, 12193, 69279, 20608, 11055, 88156, 92808,\n    2152, 57259, 55275, 72789, 24475, 104414, 1708, 9882, 3818, 48661, 66897, 1631, 34806, 227930, 85815, 87753,\n    18321, 250664, 72733, 25107, 206797, 50891, 8082, 196411, 92596, 96764, 152823, 65514, 22819, 387277, 62176, 51225,\n    40329, 15563, 189, 3659, 73670, 64357, 51793, 275136, 33482, 86653, 74615, 67058, 11318, 125720, 15388, 22388,\n    8267, 1730, 102663, 170910, 40784, 7144, 85373, 13040, 7088, 94309, 583, 44224, 140424, 77439, 18496, 164026,\n    36578, 4722, 9151, 5824, 63365, 26510, 35199, 40500, 79277, 32495, 44614, 35233, 9566, 203293, 152144, 7097,\n    2330, 183480, 98629, 13423, 330887, 44130, 68600, 30939, 97829, 31012, 345465, 56747, 94879, 4939, 160027, 149761,\n    99423, 46099, 32251, 15332, 8761, 96094, 128555, 5763, 235318, 222223, 55729, 30241, 55420, 201746, 3987, 81382,\n    8259, 49325, 23287, 7719, 24633, 251100, 92311, 18591, 110533, 64759, 170260, 393860, 7175, 21144, 132887, 3593,\n    75346, 101277, 91109, 16387, 259187, 11627, 57459, 173829, 44694, 55780, 49797, 89192, 120443, 62622, 3904, 14814,\n    23887, 1027, 112258, 64955, 99800, 11132, 66353, 36202, 48624, 18158, 88481, 96882, 43059, 11040, 2455, 7077,\n    21651, 181159, 99126, 100434, 61388, 68186, 19161, 110468, 120052, 8819, 55324, 41494, 7014, 37689, 3618, 87729,\n    92615, 207943, 9823, 128657, 12587, 15857, 6379, 67628, 51216, 71775, 157617, 63244, 1503, 3864, 218754, 110864,\n    5769, 21492, 7243, 1192, 87921, 85529, 31512, 18537, 42698, 35350, 73510, 84474, 34301, 8991, 21013, 35034,\n    566, 38832, 19838, 35586, 37216, 39413, 55006, 12178, 59742, 856, 84563, 6900, 25632, 17437, 49786, 30723,\n    13847, 70845, 4044, 7843, 23944, 235976, 55530, 48942, 6518, 20939, 73769, 192653, 52936, 95207, 23895, 132542,\n    142982, 22632, 87452, 48042, 54018, 178468, 10728, 26230, 23559, 363, 81269, 142012, 5718, 346258, 31456, 84333,\n    246476, 51018, 66692, 101804, 120570, 39962, 30373, 70593, 2864, 60541, 19425, 54209, 104092, 7201, 31545, 48018,\n    25865, 15442, 46257, 40443, 8328, 6451, 111782, 47527, 97754, 33046, 470, 245116, 31095, 39, 91934, 87208,\n    73470, 36708, 36521, 12801, 70624, 36272, 8892, 79768, 12427, 55454, 103756, 5908, 52390, 62962, 22720, 141138,\n    94634, 41689, 128402, 126390, 6628, 106394, 35527, 134394, 82727, 254651, 194502, 148064, 89549, 3202, 28359, 957,\n    21954, 27906, 49840, 142747, 8307, 24206, 48978, 1186, 71728, 133038, 71474, 91306, 6333, 110959, 74600, 70387,\n    18983, 62609, 56057, 22970, 1147, 135850, 1321, 28834, 3578, 59715, 102227, 32827, 81415, 99952, 55636, 257598,\n    390, 22702, 35701, 85872, 402916, 39216, 189795, 14929, 19467, 10112, 144422, 61514, 5279, 63421, 134686, 41436,\n    8424, 51925, 10598, 132295, 124416, 4604, 194739, 210929, 57866, 31829, 51626, 50007, 9976, 91878, 61906, 56168,\n    81906, 60918, 61859, 40017, 23059, 16887, 40927, 62064, 12785, 32893, 32913, 21782, 93965, 20169, 44387, 79084,\n    38463, 11457, 93950, 27127, 157050, 2697, 337088, 5116, 54128, 48255, 33279, 8821, 27352, 25515, 124022, 65710,\n    28906, 38557, 33390, 1722, 104435, 72215, 38551, 12094, 30978, 25113, 6671, 37355, 175109, 42862, 98024, 65406,\n    221276, 59624, 118012, 64637, 78760, 86697, 21426, 1639, 40350, 12584, 67193, 84144, 31396, 7863, 143011, 69629,\n    63112, 9454, 28666, 65798, 46372, 134721, 6314, 51402, 30837, 151922, 2847, 38676, 38008, 92823, 136245, 17540,\n    5504, 109295, 205242, 37606, 5211, 214892, 1586, 20670, 208711, 137743, 19328, 40652, 16995, 20023, 14657, 154919,\n    34422, 12996, 13918, 38221, 47690, 16398, 2959, 37680, 89122, 6721, 198469, 91876, 172043, 83898, 101992, 26084,\n    94570, 3635, 76958, 22853, 76497, 38266, 176590, 168403, 44464, 142840, 79180, 184594, 1984, 41806, 83147, 11985,\n    6546, 366068, 59732, 24533, 271505, 8736, 39084, 222992, 93429, 28962, 58985, 86665, 8432, 30028, 14548, 32439,\n    54424, 165029, 55175, 27458, 69046, 121277, 46168, 33732, 20661, 24581, 135574, 123110, 37556, 79260, 72611, 16957,\n    12939, 46162, 58238, 44907, 72936, 253758, 41324, 32518, 96480, 11949, 124438, 65280, 43256, 34107, 53533, 43531,\n    37037, 28366, 45970, 32741, 173438, 6121, 194202, 62969, 26355, 30314, 58370, 28455, 1848, 50519, 82830, 90393,\n    21761, 295490, 10936, 256940, 133568, 44050, 20269, 4089, 27457, 21610, 219460, 36743, 14821, 101388, 52005, 13124,\n    30979, 140816, 167362, 26054, 18458, 60789, 34917, 40447, 26606, 33422, 9066, 3452, 83614, 5761, 20263, 137238,\n    25038, 91310, 101, 52322, 74548, 42572, 38084, 214054, 186568, 31802, 17665, 30620, 141936, 37730, 14420, 4265,\n    187218, 49640, 188208, 51441, 55388, 96452, 66659, 40869, 42039, 60967, 221027, 19234, 178581, 29105, 96050, 9165,\n    196118, 157335, 3738, 40354, 117436, 2965, 34136, 59659, 15570, 50843, 230035, 31444, 71260, 43886, 18316, 5387,\n    38500, 168508, 17406, 32174, 8828, 103373, 143806, 90367, 3560, 18719, 122310, 16508, 26719, 2541, 105429, 6645,\n    37998, 73190, 10591, 235916, 49737, 87112, 233941, 53188, 32193, 79154, 4544, 52905, 126477, 7580, 63501, 57314,\n    3216, 31337, 6541, 103083, 60846, 49, 9756, 15481, 1355, 43840, 14319, 13743, 27486, 10222, 73114, 230718,\n    418644, 16706, 6674, 279748, 23058, 45273, 295831, 86306, 2743, 5535, 88773, 21829, 35253, 120938, 31153, 3169,\n    16839, 42847, 8751, 80974, 33942, 36867, 35514, 16485, 26474, 77775, 56877, 5391, 48346, 3882, 108713, 31403,\n    27804, 55248, 26235, 43821, 136104, 40118, 175507, 28034, 203908, 18732, 1788, 34030, 106427, 36958, 54359, 7251,\n    44936, 15356, 69139, 455, 157915, 22173, 140291, 50348, 43275, 82066, 49621, 54952, 15216, 36226, 96695, 66855,\n    6936, 1987, 8227, 196087, 4631, 68827, 99004, 47541, 110265, 17953, 147605, 110242, 58520, 31312, 38724, 329975,\n    642, 3155, 34497, 75937, 6207, 73843, 6120, 17249, 51429, 117746, 3218, 910, 68961, 319671, 14938, 29555,\n    34700, 1649, 66673, 72268, 9655, 76800, 153087, 6941, 210168, 27130, 35398, 1780, 73242, 3135, 56689, 19556,\n    165307, 8765, 35967, 121458, 13333, 70453, 17350, 117253, 22265, 13340, 44265, 39869, 441, 3742, 135025, 23581,\n    33309, 16543, 17731, 13291, 157637, 283005, 21408, 101360, 63887, 52312, 83873, 5338, 233779, 23759, 186949, 34531,\n    177320, 38069, 156465, 91004, 19353, 59852, 68160, 14891, 1338, 1072, 29823, 1950, 28901, 81407, 313445, 73038,\n    84807, 162348, 240257, 37162, 138934, 16111, 58013, 41253, 102951, 16457, 96056, 19541, 56402, 67217, 41638, 94381,\n    89674, 29481, 37456, 80815, 151579, 13937, 13683, 132537, 19699, 134545, 67020, 29816, 222341, 141235, 427578, 48868,\n    129557, 233342, 23077, 87871, 16213, 18728, 16184, 9469, 37913, 19680, 2798, 171356, 178328, 13216, 50049, 72690,\n    71904, 124644, 55455, 7504, 29052, 41036, 266546, 19899, 30391, 188755, 8659, 59469, 16, 104298, 112943, 53865,\n    76203, 138226, 68857, 139953, 14125, 107625, 119795, 173133, 4398, 50273, 48808, 54390, 16466, 122086, 31835, 67035,\n    50971, 48859, 7508, 46427, 66477, 73021, 84615, 39985, 83076, 46779, 201569, 53336, 36443, 60865, 168164, 143810,\n    51393, 25548, 169307, 32896, 24485, 38424, 21837, 29087, 275813, 51674, 6714, 64883, 46169, 187369, 55186, 76192,\n    12852, 12018, 62134, 31067, 118303, 16542, 12125, 10579, 4928, 26291, 43854, 7091, 10946, 253716, 109062, 39283,\n    17261, 113012, 258512, 47764, 125126, 32646, 55892, 80279, 201623, 149872, 3192, 385, 1208, 48750, 5376, 58738,\n    22335, 5427, 82416, 47811, 32435, 143086, 38930, 94128, 59975, 156037, 37977, 38224, 62485, 7698, 50405, 71027,\n    16462, 21559, 136153, 34131, 107506, 162069, 63703, 3101, 215029, 40407, 4178, 3774, 9187, 80019, 17880, 97926,\n    67579, 2600, 18405, 8351, 47924, 86638, 70820, 92206, 86453, 29610, 42241, 119200, 3198, 15466, 67813, 57863,\n    35454, 4779, 99518, 4649, 104641, 144269, 33730, 38073, 65864, 6838, 109456, 193298, 154007, 5623, 45741, 30846,\n    182578, 25573, 157224, 1543, 58575, 138703, 146140, 44971, 49356, 18275, 59064, 20300, 13122, 11848, 24453, 11973,\n    9797, 86843, 2919, 25530, 49210, 1130, 161220, 76788, 75373, 85604, 34926, 36014, 17777, 17255, 51533, 11676,\n    92226, 51845, 119859, 21525, 5936, 18507, 28050, 1140, 31418, 14857, 34207, 47859, 10750, 36382, 32079, 106909,\n    59426, 87757, 38393, 110042, 15965, 97104, 33757, 35344, 97993, 53979, 33651, 45407, 41884, 82515, 173089, 7177,\n    58371, 35365, 47543, 51927, 35587, 10670, 23544, 29306, 84233, 39976, 76076, 62097, 9007, 8668, 28119, 78281,\n    120790, 19835, 143020, 54968, 18670, 64959, 20649, 34469, 42570, 33001, 136570, 87796, 120044, 1106, 58700, 63951,\n    127623, 12805, 83057, 40212, 31773, 49850, 7361, 54336, 347524, 101314, 23751, 19569, 48791, 29174, 49369, 20467,\n    7465, 75842, 38281, 623, 112457, 60210, 28849, 51003, 94720, 6426, 90047, 85560, 43761, 3579, 85105, 34607,\n    90410, 118528, 7224, 42907, 111163, 18168, 6960, 161135, 191298, 5247, 100584, 127552, 171568, 20121, 91173, 12636,\n    54615, 20199, 63730, 98105, 2396, 40387, 14438, 125012, 4765, 33235, 12865, 45299, 37728, 82098, 77872, 114037,\n    59253, 19675, 24838, 398016, 102561, 11446, 17069, 57508, 178277, 65836, 99941, 26114, 2585, 271882, 136866, 50126,\n    11027, 155648, 118367, 14585, 8910, 123015, 335383, 40434, 41016, 53021, 14439, 87098, 176860, 201543, 121888, 2358,\n    9286, 5739, 22666, 54270, 37884, 169381, 33984, 93859, 16124, 89364, 72207, 51639, 76366, 99029, 65812, 2198,\n    12147, 174891, 194289, 6986, 30252, 88822, 21284, 11445, 288337, 160821, 33034, 100869, 43852, 25761, 52882, 1144,\n    103809, 1924, 84458, 86079, 43411, 13542, 139276, 18141, 34978, 41298, 7276, 26481, 173800, 33210, 17951, 142652,\n    33616, 33677, 2210, 19941, 98568, 2486, 192414, 80136, 12058, 235883, 50963, 249638, 29572, 27221, 47034, 6124,\n    72107, 63346, 97620, 158513, 299699, 40388, 23235, 37176, 224244, 198386, 121323, 67992, 23827, 63170, 17838, 106622,\n    158590, 26807, 5345, 23489, 91891, 55474, 74834, 37981, 13058, 5977, 72552, 34706, 26828, 145172, 19904, 21367,\n    34043, 960, 77092, 91381, 4733, 47446, 7680, 41697, 5170, 16960, 14741, 46101, 13656, 473, 51842, 37433,\n    11103, 11551, 121951, 13191, 97536, 165932, 50397, 51628, 129028, 9069, 44885, 6590, 59195, 47045, 32940, 225472,\n    90345, 21833, 13303, 29407, 96615, 141951, 5198, 6028, 18395, 7181, 3861, 14966, 156358, 167182, 36529, 55253,\n    25942, 173153, 30959, 27261, 50691, 150176, 162201, 38467, 48462, 80602, 42163, 118482, 168, 108756, 26011, 17166,\n    54149, 456538, 22512, 91374, 13816, 90358, 131615, 18132, 226707, 1824, 28139, 26860, 42253, 93877, 77351, 65575,\n    8980, 80574, 22020, 27948, 40422, 91324, 76376, 13528, 39281, 91685, 82215, 122541, 144066, 1983, 193851, 17283,\n    26320, 2739, 194978, 4790, 26845, 42627, 61300, 65815, 174612, 55133, 4200, 191130, 79771, 158321, 52280, 166796,\n    221620, 62461, 11278, 4067, 88152, 83409, 31717, 121367, 13522, 47325, 37945, 10406, 174348, 249321, 154101, 64912,\n    29938, 51775, 17220, 15776, 166138, 78890, 84425, 54121, 42861, 16368, 24572, 291647, 10197, 32073, 22651, 11677,\n    97509, 26952, 35787, 18424, 41910, 71614, 94977, 72318, 41594, 70024, 275419, 37702, 60199, 7335, 39107, 61315,\n    18271, 18394, 33768, 87884, 104277, 123724, 7277, 56288, 71981, 189803, 49320, 3352, 6798, 14240, 8954, 69220,\n    94433, 57372, 28620, 68863, 193727, 85575, 42309, 41667, 67689, 42081, 22543, 44824, 12719, 28540, 114236, 101553,\n    27638, 27296, 4300, 5353, 4663, 19379, 94098, 3758, 95888, 95144, 80344, 87320, 28447, 259518, 12718, 71391,\n    152731, 37063, 24132, 31911, 104896, 15672, 103782, 1521, 4945, 72541, 23717, 122632, 15619, 87175, 206120, 29428,\n    189780, 61416, 28350, 44457, 972, 1175, 47233, 198738, 95789, 41907, 21953, 97034, 59341, 22864, 53713, 16873,\n    32971, 20693, 20954, 31336, 21477, 16169, 38370, 16412, 9019, 3841, 24599, 21938, 17085, 6484, 81198, 76413,\n    5849, 72514, 12320, 65247, 276175, 37234, 59796, 52642, 16312, 57349, 198507, 94148, 46134, 18958, 125552, 1747,\n    18725, 151873, 14901, 5490, 68287, 29470, 3689, 64794, 40814, 26018, 25692, 54450, 2703, 88278, 124886, 173087,\n    174000, 24159, 179477, 24276, 46004, 201876, 209202, 445, 52876, 31948, 30206, 157610, 39180, 18439, 44124, 50469,\n    5774, 96278, 222758, 200216, 50290, 45486, 20435, 46986, 46276, 140133, 142326, 15569, 13363, 47522, 92583, 2182,\n    7135, 16853, 22998, 30272, 4952, 63263, 35623, 39096, 53789, 44864, 20053, 110392, 124213, 4630, 16087, 28221,\n    127787, 25839, 77481, 44693, 13464, 113146, 6983, 27069, 55717, 50102, 4760, 7107, 26186, 66507, 59145, 36032,\n    104182, 71328, 29425, 64317, 50781, 47465, 94298, 69706, 74899, 22754, 120756, 25108, 93077, 56834, 73286, 39928,\n    16218, 41699, 176763, 7555, 70819, 50083, 26895, 23315, 26014, 16773, 123079, 41712, 5719, 31516, 90427, 158540,\n    85051, 183128, 40864, 27505, 55392, 9058, 45224, 96857, 30901, 136622, 96557, 56304, 120061, 11501, 151448, 5773,\n    89743, 7769, 86069, 2935, 18471, 41628, 10114, 33660, 110170, 49479, 26745, 92846, 33221, 26731, 18795, 87076,\n    8550, 2100, 29972, 120289, 3077, 72490, 33784, 2630, 208722, 50861, 63483, 79029, 6419, 39467, 14302, 45286,\n    64207, 9686, 67513, 44170, 1050, 77246, 59266, 17055, 53801, 7150, 11111, 42432, 4278, 94579, 362117, 36175,\n    42902, 41933, 39002, 98489, 22913, 74161, 84773, 57036, 17556, 162288, 74485, 178760, 93867, 73635, 128860, 50362,\n    261, 67455, 80001, 46080, 35662, 4368, 25247, 19230, 74393, 22588, 1822, 27682, 235324, 13798, 85998, 13194,\n    235067, 23514, 71669, 147632, 23191, 134748, 214683, 105101, 1518, 25489, 247114, 7380, 54842, 26922, 3971, 26361,\n    20844, 68642, 170517, 77339, 123255, 8963, 77818, 150998, 48466, 36806, 2732, 23261, 11741, 236162, 18243, 126216,\n    28690, 50546, 16385, 92760, 197383, 246558, 201295, 88255, 67588, 71687, 176076, 172653, 169058, 33906, 63747, 24835,\n    157621, 43338, 30050, 46152, 132741, 2770, 51371, 94835, 6614, 15112, 11749, 56936, 1250, 19027, 399017, 58036,\n    100215, 23388, 55815, 308768, 124152, 94803, 9521, 64186, 8971, 28, 30427, 62163, 7616, 103838, 35079, 29203,\n    131235, 7743, 17389, 10882, 37420, 61460, 228512, 85363, 41581, 131077, 62822, 119647, 10130, 54445, 26925, 19968,\n    29016, 24446, 74028, 24176, 61448, 67185, 9254, 8563, 119129, 9771, 99184, 37716, 39514, 10532, 221512, 258753,\n    218630, 55980, 23394, 32141, 61924, 66749, 32411, 3741, 36475, 26678, 77010, 44946, 91203, 128749, 116953, 20476,\n    49625, 53116, 13735, 102335, 29376, 51946, 83407, 67892, 59212, 34685, 21083, 1546, 112982, 32972, 74397, 1078,\n    190545, 16082, 86140, 58591, 89611, 101531, 10061, 105104, 76319, 20035, 17551, 52611, 169061, 190842, 100780, 23907,\n    90413, 115619, 9675, 34710, 193435, 49443, 129734, 11183, 258877, 16318, 136182, 126808, 44635, 27304, 192375, 2599,\n    125648, 47051, 12091, 23814, 721, 58800, 40137, 66726, 97930, 60877, 74487, 7942, 54326, 9841, 41428, 13762,\n    8211, 85383, 6950, 99177, 79806, 201786, 296464, 124087, 13144, 29741, 41721, 47634, 55088, 254286, 106408, 17041,\n    99064, 12942, 64086, 45233, 14005, 2612, 55827, 255, 7984, 13980, 38574, 12776, 46654, 73499, 249951, 2101,\n    26676, 25996, 132326, 116415, 119062, 50449, 31033, 23038, 11589, 179252, 20007, 14860, 129270, 21143, 17796, 144715,\n    60106, 70758, 69842, 34674, 282133, 44014, 16774, 57268, 38528, 24053, 46373, 201667, 28327, 471023, 51889, 102667,\n    21193, 114909, 84132, 69317, 96723, 67969, 16134, 68145, 15058, 28765, 32035, 2524, 101089, 98664, 25045, 76571,\n    14957, 86040, 118506, 262428, 154764, 81573, 39681, 283900, 73287, 127825, 544, 80448, 52347, 38512, 175971, 15180,\n    45467, 33086, 46552, 48894, 81107, 43213, 36672, 54025, 76703, 8053, 7608, 13299, 56619, 20752, 238099, 54164,\n    105133, 1444, 32942, 953, 37564, 8000, 66316, 119463, 106817, 404, 13667, 149108, 128597, 31267, 10269, 49836,\n    106150, 1484, 52330, 76965, 160486, 171648, 38456, 31263, 22424, 37738, 66245, 67467, 143369, 60471, 75610, 20895,\n    115528, 86070, 60854, 40796, 49347, 18989, 15030, 11371, 37578, 15779, 79867, 10187, 86462, 46402, 155626, 93200,\n    40229, 7090, 57547, 108053, 99598, 11088, 47505, 41218, 206017, 2173, 20988, 30219, 22919, 80563, 57566, 42369,\n    93141, 41675, 2407, 182519, 120495, 27154, 16702, 29456, 14349, 7958, 16688, 117177, 140375, 42467, 261919, 74916,\n    153569, 10836, 34742, 49526, 7621, 105997, 12212, 2270, 392377, 7755, 17959, 25086, 232152, 138791, 33847, 13860,\n    35316, 5811, 1344, 71259, 50452, 207539, 92635, 50359, 5821, 33674, 30255, 2086, 2587, 96264, 17543, 42,\n    6029, 9580, 43007, 139248, 82831, 12917, 29607, 25786, 51467, 42137, 85161, 100698, 31561, 88989, 121990, 278500,\n    3602, 109344, 37982, 15279, 116442, 28936, 30880, 87894, 58079, 128661, 126731, 67392, 28051, 146885, 4861, 16216,\n    97344, 42827, 147561, 153948, 22684, 21335, 47685, 1853, 43349, 15185, 59642, 10229, 25520, 187921, 108972, 5579,\n    98037, 24945, 6697, 19193, 63734, 137934, 75056, 89740, 19767, 224268, 56138, 63643, 151661, 39313, 70618, 84031,\n    89723, 84074, 13703, 85626, 35460, 8867, 64845, 3439, 57906, 99776, 63968, 49270, 81130, 34356, 16210, 23547,\n    36446, 34090, 140028, 72439, 2221, 22163, 57058, 363492, 113754, 18913, 95451, 48663, 54464, 54037, 176097, 68425,\n    3023, 34906, 29482, 117389, 341780, 80431, 58330, 16753, 92616, 60907, 94846, 147486, 4498, 48646, 7773, 46801,\n    7778, 18946, 464978, 47558, 33223, 177444, 7328, 15626, 63337, 94700, 11743, 9351, 255024, 39098, 16447, 42647,\n    96230, 39769, 58840, 10068, 63439, 35800, 65843, 58823, 413844, 9156, 51258, 7434, 61791, 85018, 6872, 3692,\n    28096, 7121, 33024, 6009, 75532, 31997, 192535, 9661, 3304, 9547, 14753, 31987, 25314, 55689, 15896, 20430,\n    39472, 31340, 99744, 25398, 115569, 54883, 28719, 205423, 23071, 57855, 64638, 149867, 25671, 82403, 37616, 20668,\n    39989, 77996, 74948, 140555, 175248, 64810, 36515, 46595, 4958, 248773, 24045, 28728, 136673, 168704, 20804, 114833,\n    100325, 27135, 21205, 96151, 153134, 45992, 7093, 13992, 76047, 1980, 19432, 145001, 75159, 87462, 17710, 1013,\n    45556, 34297, 144882, 20648, 26061, 11319, 129567, 108555, 18872, 464580, 33386, 22717, 65948, 167189, 5603, 135042,\n    79542, 8801, 202632, 18114, 91882, 5973, 5239, 67315, 4431, 60916, 47819, 71693, 32597, 32606, 18183, 45072,\n    80329, 76385, 24749, 51305, 40314, 156514, 14693, 130345, 13168, 66214, 18029, 12858, 34801, 27628, 14544, 10823,\n    40522, 40185, 33739, 148694, 23548, 9923, 61012, 28859, 17933, 19442, 34364, 99849, 164107, 141167, 30629, 21054,\n    6744, 36491, 8096, 42474, 41706, 155060, 30650, 10600, 163442, 1143, 96655, 61390, 52359, 7559, 51568, 64256,\n    203854, 4467, 22453, 14504, 436398, 7878, 6980, 8293, 63610, 293747, 16167, 35763, 19627, 147603, 15419, 18032,\n    110744, 51346, 33681, 54571, 40472, 48615, 39073, 21604, 13754, 173027, 92560, 11083, 47299, 63062, 11813, 52007,\n    29883, 9734, 139722, 15953, 1550, 20651, 13616, 49306, 16113, 90089, 92326, 7584, 30712, 72424, 164858, 6831,\n    152871, 55746, 197721, 34167, 196442, 6022, 112107, 55215, 7538, 123381, 4920, 43539, 77165, 8939, 50392, 34192,\n    20225, 79762, 22505, 58667, 40770, 29788, 97180, 82835, 4568, 8579, 13273, 363569, 35898, 49983, 436, 36598,\n    3237, 131691, 62418, 35591, 8101, 4073, 379438, 65218, 76072, 33887, 2968, 27573, 212619, 288680, 68278, 72851,\n    150504, 217896, 6913, 121339, 22017, 35340, 51072, 43616, 75043, 31437, 10833, 81487, 4364, 22968, 41454, 106687,\n    85446, 19863, 109625, 149241, 524, 141850, 214404, 54376, 657, 237023, 9401, 108137, 53800, 32474, 49712, 53334,\n    126876, 27337, 45552, 177696, 8269, 15036, 12097, 42240, 2328, 125374, 119295, 99715, 2500, 19624, 39441, 27220,\n    102691, 60957, 94543, 39101, 18566, 67362, 13975, 78230, 25017, 34017, 239007, 90027, 39351, 41681, 35354, 43822,\n    1043, 916, 58587, 141983, 94818, 38799, 75459, 41114, 67432, 16195, 36606, 59568, 22272, 126769, 31424, 68659,\n    12287, 134302, 257977, 5756, 207285, 95637, 47248, 117689, 19583, 77451, 22373, 12200, 54993, 117118, 34244, 29386,\n    34562, 53819, 71267, 64172, 77665, 49368, 7716, 59301, 25749, 45426, 194789, 17297, 2650, 1766, 32501, 45198,\n    20403, 20984, 6600, 14171, 94604, 19037, 5402, 29896, 9938, 59935, 109708, 88081, 145182, 44844, 39167, 352626,\n    164173, 35374, 45982, 6122, 154, 73419, 220487, 53834, 53601, 17992, 8609, 229321, 5610, 68098, 66815, 71012,\n    95069, 140968, 27396, 8957, 134489, 24656, 86659, 56598, 134852, 17316, 123838, 255436, 6613, 41610, 138033, 81452,\n    32023, 32396, 123687, 63398, 8693, 29712, 30407, 19296, 121188, 3551, 36099, 20032, 111948, 56624, 16547, 27453,\n    35916, 15378, 52039, 56849, 13489, 22214, 73177, 53097, 277349, 2157, 14029, 187886, 10260, 141743, 246460, 91880,\n    50869, 3788, 49486, 133566, 54950, 33120, 129337, 53768, 18333, 9525, 26902, 312251, 10297, 9020, 70759, 16647,\n    112432, 59260, 84609, 9818, 82766, 73569, 468, 46001, 75780, 55028, 52106, 11498, 43645, 108069, 17150, 17753,\n    29417, 16705, 31799, 9606, 289, 122254, 115975, 8620, 6133, 255357, 56908, 14456, 133464, 43554, 79224, 11247,\n    29630, 160, 12756, 25464, 65960, 350428, 62521, 321796, 100359, 67358, 35169, 46172, 113128, 48988, 88868, 31094,\n    33266, 6847, 60887, 98188, 49659, 69117, 92977, 220228, 13947, 80181, 35103, 62170, 97351, 13475, 2440, 199768,\n    19498, 36597, 46971, 25234, 67806, 62881, 84717, 73648, 181966, 10488, 94149, 21550, 26655, 63436, 48375, 14405,\n    165650, 9621, 24439, 28043, 42735, 4490, 29963, 56674, 45373, 1934, 262446, 50855, 67098, 26898, 5261, 52696,\n    40644, 33900, 9440, 180286, 87162, 22940, 19704, 26936, 69769, 10254, 101759, 27406, 12243, 48000, 73926, 113215,\n    54935, 5726, 192787, 4312, 106216, 9366, 11550, 52949, 23457, 212271, 277152, 133895, 108374, 6191, 96477, 29980,\n    218916, 58024, 54696, 40853, 91124, 65894, 91170, 65908, 252552, 6793, 29212, 15389, 44516, 122515, 52617, 35058,\n    9017, 103536, 39510, 49136, 19242, 130652, 662077, 74699, 47024, 31422, 8517, 73351, 24399, 13867, 128360, 4810,\n    4434, 61779, 111983, 61036, 17798, 110240, 59722, 102960, 39688, 10001, 23803, 23039, 176498, 56659, 44814, 134295,\n    17188, 77577, 74466, 226175, 102472, 154333, 63900, 111747, 18062, 41171, 79669, 32773, 408933, 42562, 28931, 30907,\n    107388, 43487, 2946, 240310, 23938, 24354, 319, 184983, 7927, 6488, 1422, 10790, 68809, 68209, 64775, 4361,\n    202, 17123, 59634, 51200, 44391, 18188, 17843, 2619, 74278, 3230, 9540, 47187, 21702, 36274, 56894, 43907,\n    16310, 34790, 16866, 6150, 5561, 13587, 107545, 108873, 126867, 86986, 28640, 33427, 19017, 5762, 80637, 17430,\n    46903, 2047, 131055, 25958, 13558, 5444, 47152, 13900, 44563, 122857, 45348, 70863, 39593, 54332, 38068, 33637,\n    318, 40310, 143467, 18502, 24520, 11377, 62013, 28942, 27246, 28269, 83545, 17999, 59015, 90707, 30065, 15161,\n    34720, 1263, 37008, 2012, 6060, 98575, 92933, 5721, 299, 199555, 24578, 29223, 2985, 743, 115825, 109523,\n    136657, 47454, 26378, 53586, 3733, 174945, 93340, 244456, 5693, 37386, 28782, 89767, 27545, 23573, 18798, 136425,\n    34320, 84778, 20041, 48453, 38215, 7477, 71958, 40621, 8773, 5874, 187927, 105965, 51100, 43533, 18083, 8443,\n    10180, 43597, 2003, 183999, 69689, 12216, 129696, 146188, 62389, 34044, 68410, 12765, 43273, 26949, 266807, 3345,\n    34477, 79197, 5688, 47539, 213110, 21634, 22257, 50092, 32222, 42346, 39530, 63668, 98, 134978, 74022, 5152,\n    59088, 174145, 37220, 9934, 9545, 118937, 5724, 87240, 19875, 15784, 40143, 23263, 87513, 181654, 285152, 37881,\n    263241, 4966, 43934, 10433, 186657, 6470, 74416, 225854, 25908, 142677, 246262, 32280, 6192, 75890, 45546, 143264,\n    135305, 29742, 47013, 77787, 11732, 126658, 8763, 37950, 21806, 57557, 113464, 89465, 108995, 164574, 23894, 22996,\n    23169, 15369, 23117, 17642, 130607, 40503, 36239, 280990, 44666, 9981, 40427, 147487, 26869, 168452, 32886, 32991,\n    46798, 240839, 15111, 70502, 65697, 88548, 44145, 28701, 48767, 31139, 206777, 35659, 181164, 166262, 14554, 171445,\n    31786, 66523, 76607, 17956, 6507, 31279, 90476, 116611, 167918, 6560, 1243, 115324, 80128, 41867, 55897, 187323,\n    37069, 32596, 189444, 145931, 13390, 105530, 65709, 26805, 6999, 55714, 41300, 22915, 68951, 22138, 21120, 22264,\n    10058, 19945, 33635, 56123, 99085, 10032, 5818, 6016, 46649, 57476, 35264, 94413, 112522, 262288, 93686, 83038,\n    14341, 23204, 28807, 66084, 77987, 6101, 126673, 7133, 38126, 5923, 122091, 170240, 97772, 46874, 215746, 43948,\n    41622, 3272, 55596, 8332, 146411, 251315, 13533, 8561, 81521, 115449, 48616, 175175, 2063, 186556, 3036, 134537,\n    75772, 29728, 82360, 22973, 186559, 86348, 89100, 38388, 82297, 45610, 2613, 87082, 9986, 177812, 57884, 23591,\n    47485, 42543, 33582, 44713, 74439, 257444, 252451, 31825, 35631, 38540, 33066, 5147, 13973, 4343, 51830, 70378,\n    22827, 26448, 95560, 36896, 241741, 48067, 203953, 298860, 61620, 20450, 3220, 67272, 6586, 107662, 100160, 108684,\n    6929, 57226, 4762, 7457, 1320, 40404, 77204, 99309, 62750, 208653, 59977, 44000, 74315, 34332, 5819, 172217,\n    64904, 114077, 18147, 84012, 1791, 98456, 90930, 21446, 116669, 103938, 7422, 85140, 59713, 5768, 326211, 16239,\n    75411, 13229, 29398, 10758, 236107, 1539, 112472, 95979, 152154, 151294, 306, 21196, 38146, 10700, 6891, 84282,\n    109646, 56492, 40539, 6589, 119491, 51354, 30685, 140209, 136906, 29622, 73617, 49553, 70525, 51671, 166869, 139616,\n    74395, 37439, 49595, 45678, 11959, 33211, 86560, 52434, 9282, 62690, 112155, 130810, 5243, 108261, 99970, 265613,\n    72551, 80049, 6391, 33365, 90721, 66737, 69872, 87011, 1860, 9032, 112544, 60905, 37371, 89015, 140351, 19076,\n    850, 373531, 2802, 36725, 218795, 72062, 28990, 16550, 24614, 7815, 6187, 26336, 33373, 32162, 42791, 73555,\n    32062, 23386, 10244, 56392, 49442, 27076, 136262, 12412, 14883, 1134, 33675, 97153, 199281, 15608, 100152, 74072,\n    47942, 254301, 36451, 16026, 10687, 65067, 56708, 254030, 30290, 50490, 13864, 57941, 259331, 35588, 23485, 43486,\n    24869, 21620, 92971, 22072, 88645, 1048, 182050, 13343, 32452, 14825, 19509, 3325, 216938, 45740, 99716, 189082,\n    53740, 78245, 25609, 24311, 176777, 47340, 308354, 40669, 66085, 14102, 125339, 9225, 128709, 97207, 1271, 200933,\n    78439, 113451, 88975, 18324, 46521, 11819, 18570, 141756, 72512, 170020, 52754, 63550, 118515, 103073, 93330, 32736,\n    50499, 14722, 31600, 68452, 398867, 29316, 172786, 18417, 104924, 2606, 5670, 84818, 16288, 67106, 59580, 82929,\n    607401, 291, 85829, 359, 15897, 35830, 50696, 65630, 52672, 22115, 356968, 29895, 40837, 231192, 34024, 38957,\n    26722, 406, 23335, 124952, 72068, 68804, 13268, 147101, 164740, 276569, 162596, 66943, 11569, 26654, 66358, 4777,\n    23229, 102127, 5848, 978, 2921, 59666, 5371, 28212, 90108, 42938, 39320, 2499, 4271, 108792, 33510, 125072,\n    71653, 65239, 38250, 66357, 38577, 13964, 86251, 35708, 50755, 36010, 29448, 12209, 3844, 38222, 206337, 100876,\n    67827, 137088, 14167, 252225, 84163, 195270, 1306, 5703, 54198, 779, 46802, 22028, 51124, 86759, 70560, 113164,\n    35685, 162145, 45471, 34561, 422, 2611, 6464, 47486, 19223, 38246, 9191, 18331, 89942, 243642, 212364, 15893,\n    17518, 22617, 6409, 30046, 126182, 59716, 36560, 104428, 18846, 26592, 19458, 50793, 147333, 30826, 1388, 27647,\n    10922, 14495, 33545, 19269, 135828, 39727, 41601, 46931, 233379, 49169, 131130, 182112, 16276, 82381, 118209, 142445,\n    128310, 19672, 28740, 82907, 33436, 3118, 102206, 28723, 24819, 41937, 38854, 5157, 3881, 111491, 1142, 9776,\n    421673, 152241, 29309, 14961, 87854, 6054, 15424, 3796, 82656, 54996, 2108, 55367, 239450, 154525, 9643, 118103,\n    106041, 64601, 68549, 48707, 30266, 25772, 18740, 9462, 229669, 91798, 112152, 191327, 14493, 72828, 8175, 66636,\n    236474, 25817, 87351, 129027, 76653, 20422, 22983, 71240, 27846, 44661, 12399, 46158, 77704, 53101, 35032, 11072,\n    17300, 109294, 33638, 24408, 1895, 11241, 760, 17584, 82479, 125877, 63150, 141075, 34259, 23274, 81698, 15732,\n    43577, 48340, 91584, 14688, 16379, 24481, 150280, 96420, 262050, 48635, 43727, 61819, 56268, 72003, 88178, 17281,\n    79912, 13218, 122519, 125295, 166396, 11811, 2171, 118930, 67746, 17636, 178278, 174656, 95661, 173039, 83845, 79689,\n    17473, 98555, 127696, 203415, 54730, 22925, 232239, 9309, 12136, 175026, 20740, 180188, 10747, 39816, 314017, 266131,\n    10040, 175732, 112550, 220651, 31974, 37393, 888, 23008, 86799, 4303, 64905, 148467, 75337, 251, 3284, 370102,\n    50264, 9835, 5438, 23655, 4481, 29851, 329, 12855, 7162, 64931, 78141, 12804, 42372, 296771, 83547, 18624,\n    34874, 86271, 3360, 48665, 77735, 88767, 11463, 63527, 28889, 22258, 29140, 194315, 113924, 25499, 6406, 31334,\n    1845, 4802, 49184, 43455, 35469, 127594, 92970, 61038, 115005, 38840, 87761, 106838, 8811, 20572, 55637, 11162,\n    96721, 132425, 108925, 2948, 125457, 36356, 3502, 75270, 27622, 127192, 2561, 123095, 49394, 61155, 16897, 110064,\n    9699, 89448, 53356, 19628, 220310, 21622, 83036, 9885, 112214, 6087, 26713, 17901, 161912, 91492, 3440, 68594,\n    9266, 92238, 8087, 6866, 150194, 72175, 80701, 13459, 31836, 43243, 239700, 95846, 44749, 50647, 21945, 230538,\n    120612, 132371, 244604, 5193, 105637, 34661, 41341, 68775, 85393, 1874, 8771, 33718, 49672, 77403, 595452, 99507,\n    6490, 58895, 128742, 7704, 39239, 73217, 43816, 62824, 37804, 199976, 22361, 80005, 87514, 94832, 14089, 4574,\n    139975, 59142, 75523, 100268, 43906, 53442, 15152, 2547, 186002, 17011, 19513, 204282, 3343, 60568, 128318, 119250,\n    4298, 51871, 41336, 71759, 21921, 45074, 98169, 145889, 99427, 11350, 1237, 5520, 28799, 7803, 53702, 21026,\n    136352, 38293, 128690, 12158, 90132, 44600, 10184, 26957, 39459, 126025, 78904, 82999, 59373, 39301, 150198, 120529,\n    153042, 20177, 50089, 14764, 271571, 30530, 123161, 38975, 101562, 22941, 5648, 124654, 109243, 69817, 71675, 49162,\n    106884, 21241, 107795, 30258, 16572, 188262, 141456, 7688, 60718, 8271, 11044, 32440, 104608, 103419, 236109, 93156,\n    43293, 128929, 42107, 67180, 25201, 115254, 185488, 130954, 72813, 167547, 20537, 39969, 38432, 22582, 184022, 1139,\n    27199, 5655, 17767, 97412, 122606, 209377, 27070, 35871, 326617, 188954, 42680, 73512, 80911, 22629, 3011, 95021,\n    315242, 157737, 383, 41821, 41808, 19335, 27950, 15674, 25677, 110950, 35375, 76835, 59108, 57370, 35262, 16569,\n    160415, 37706, 78086, 32041, 49691, 137143, 9782, 172080, 50148, 77917, 6323, 10110, 69172, 17711, 21795, 59511,\n    76184, 135114, 31046, 132319, 59105, 157578, 20549, 80778, 57649, 158421, 65143, 4575, 72235, 21899, 10797, 92745,\n    34035, 106079, 80159, 4508, 78304, 25350, 75457, 46458, 32937, 25623, 47, 8531, 104751, 84953, 8138, 36508,\n    187199, 66310, 115274, 13253, 32461, 38536, 1916, 42007, 187160, 35055, 26325, 84394, 35963, 94216, 45590, 97782\n]);\n//# sourceMappingURL=generated-prefix-list-browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/routing-table/generated-prefix-list-browser.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/routing-table/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/routing-table/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KAD_CLOSE_TAG_NAME: () => (/* binding */ KAD_CLOSE_TAG_NAME),\n/* harmony export */   KAD_CLOSE_TAG_VALUE: () => (/* binding */ KAD_CLOSE_TAG_VALUE),\n/* harmony export */   KBUCKET_SIZE: () => (/* binding */ KBUCKET_SIZE),\n/* harmony export */   PING_CONCURRENCY: () => (/* binding */ PING_CONCURRENCY),\n/* harmony export */   PING_TIMEOUT: () => (/* binding */ PING_TIMEOUT),\n/* harmony export */   RoutingTable: () => (/* binding */ RoutingTable)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/event-target.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/peer-collections */ \"./node_modules/@libp2p/peer-collections/dist/src/set.js\");\n/* harmony import */ var _libp2p_utils_peer_queue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/utils/peer-queue */ \"./node_modules/@libp2p/utils/dist/src/peer-queue.js\");\n/* harmony import */ var it_protobuf_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-protobuf-stream */ \"./node_modules/it-protobuf-stream/dist/src/index.js\");\n/* harmony import */ var _message_dht_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../message/dht.js */ \"./node_modules/@libp2p/kad-dht/dist/src/message/dht.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/@libp2p/kad-dht/dist/src/utils.js\");\n/* harmony import */ var _k_bucket_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./k-bucket.js */ \"./node_modules/@libp2p/kad-dht/dist/src/routing-table/k-bucket.js\");\n\n\n\n\n\n\n\nconst KAD_CLOSE_TAG_NAME = 'kad-close';\nconst KAD_CLOSE_TAG_VALUE = 50;\nconst KBUCKET_SIZE = 20;\nconst PING_TIMEOUT = 10000;\nconst PING_CONCURRENCY = 10;\n/**\n * A wrapper around `k-bucket`, to provide easy store and\n * retrieval for peers.\n */\nclass RoutingTable extends _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.TypedEventEmitter {\n    kBucketSize;\n    kb;\n    pingQueue;\n    log;\n    components;\n    pingTimeout;\n    pingConcurrency;\n    running;\n    protocol;\n    tagName;\n    tagValue;\n    metrics;\n    constructor(components, init) {\n        super();\n        const { kBucketSize, pingTimeout, logPrefix, pingConcurrency, protocol, tagName, tagValue } = init;\n        this.components = components;\n        this.log = components.logger.forComponent(`${logPrefix}:routing-table`);\n        this.kBucketSize = kBucketSize ?? KBUCKET_SIZE;\n        this.pingTimeout = pingTimeout ?? PING_TIMEOUT;\n        this.pingConcurrency = pingConcurrency ?? PING_CONCURRENCY;\n        this.running = false;\n        this.protocol = protocol;\n        this.tagName = tagName ?? KAD_CLOSE_TAG_NAME;\n        this.tagValue = tagValue ?? KAD_CLOSE_TAG_VALUE;\n        this.pingQueue = new _libp2p_utils_peer_queue__WEBPACK_IMPORTED_MODULE_2__.PeerQueue({\n            concurrency: this.pingConcurrency,\n            metricName: `${logPrefix.replaceAll(':', '_')}_ping_queue`,\n            metrics: this.components.metrics\n        });\n        this.pingQueue.addEventListener('error', evt => {\n            this.log.error('error pinging peer', evt.detail);\n        });\n        if (this.components.metrics != null) {\n            this.metrics = {\n                routingTableSize: this.components.metrics.registerMetric(`${logPrefix.replaceAll(':', '_')}_routing_table_size`)\n            };\n        }\n    }\n    isStarted() {\n        return this.running;\n    }\n    async start() {\n        this.running = true;\n        const kBuck = new _k_bucket_js__WEBPACK_IMPORTED_MODULE_3__.KBucket({\n            localNodeId: await _utils_js__WEBPACK_IMPORTED_MODULE_4__.convertPeerId(this.components.peerId),\n            numberOfNodesPerKBucket: this.kBucketSize,\n            numberOfNodesToPing: 1\n        });\n        this.kb = kBuck;\n        // test whether to evict peers\n        kBuck.addEventListener('ping', (evt) => {\n            this._onPing(evt).catch(err => {\n                this.log.error('could not process k-bucket ping event', err);\n            });\n        });\n        // tag kad-close peers\n        this._tagPeers(kBuck);\n    }\n    async stop() {\n        this.running = false;\n        this.pingQueue.clear();\n        this.kb = undefined;\n    }\n    /**\n     * Keep track of our k-closest peers and tag them in the peer store as such\n     * - this will lower the chances that connections to them get closed when\n     * we reach connection limits\n     */\n    _tagPeers(kBuck) {\n        let kClosest = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_5__.PeerSet();\n        const updatePeerTags = _utils_js__WEBPACK_IMPORTED_MODULE_4__.debounce(() => {\n            const newClosest = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_5__.PeerSet(kBuck.closest(kBuck.localNodeId, KBUCKET_SIZE).map(contact => contact.peer));\n            const addedPeers = newClosest.difference(kClosest);\n            const removedPeers = kClosest.difference(newClosest);\n            Promise.resolve()\n                .then(async () => {\n                for (const peer of addedPeers) {\n                    await this.components.peerStore.merge(peer, {\n                        tags: {\n                            [this.tagName]: {\n                                value: this.tagValue\n                            }\n                        }\n                    });\n                }\n                for (const peer of removedPeers) {\n                    await this.components.peerStore.merge(peer, {\n                        tags: {\n                            [this.tagName]: undefined\n                        }\n                    });\n                }\n            })\n                .catch(err => {\n                this.log.error('Could not update peer tags', err);\n            });\n            kClosest = newClosest;\n        });\n        kBuck.addEventListener('added', (evt) => {\n            updatePeerTags();\n            this.safeDispatchEvent('peer:add', { detail: evt.detail.peer });\n        });\n        kBuck.addEventListener('removed', (evt) => {\n            updatePeerTags();\n            this.safeDispatchEvent('peer:remove', { detail: evt.detail.peer });\n        });\n    }\n    /**\n     * Called on the `ping` event from `k-bucket` when a bucket is full\n     * and cannot split.\n     *\n     * `oldContacts.length` is defined by the `numberOfNodesToPing` param\n     * passed to the `k-bucket` constructor.\n     *\n     * `oldContacts` will not be empty and is the list of contacts that\n     * have not been contacted for the longest.\n     */\n    async _onPing(evt) {\n        if (!this.running) {\n            return;\n        }\n        const { oldContacts, newContact } = evt.detail;\n        const results = await Promise.all(oldContacts.map(async (oldContact) => {\n            // if a previous ping wants us to ping this contact, re-use the result\n            const pingJob = this.pingQueue.find(oldContact.peer);\n            if (pingJob != null) {\n                return pingJob.join();\n            }\n            return this.pingQueue.add(async () => {\n                let stream;\n                try {\n                    const options = {\n                        signal: AbortSignal.timeout(this.pingTimeout)\n                    };\n                    this.log('pinging old contact %p', oldContact.peer);\n                    const connection = await this.components.connectionManager.openConnection(oldContact.peer, options);\n                    stream = await connection.newStream(this.protocol, options);\n                    const pb = (0,it_protobuf_stream__WEBPACK_IMPORTED_MODULE_0__.pbStream)(stream);\n                    await pb.write({\n                        type: _message_dht_js__WEBPACK_IMPORTED_MODULE_6__.MessageType.PING\n                    }, _message_dht_js__WEBPACK_IMPORTED_MODULE_6__.Message, options);\n                    const response = await pb.read(_message_dht_js__WEBPACK_IMPORTED_MODULE_6__.Message, options);\n                    await pb.unwrap().close();\n                    if (response.type !== _message_dht_js__WEBPACK_IMPORTED_MODULE_6__.MessageType.PING) {\n                        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Incorrect message type received, expected PING got ${response.type}`, 'ERR_BAD_PING_RESPONSE');\n                    }\n                    return true;\n                }\n                catch (err) {\n                    if (this.running && this.kb != null) {\n                        // only evict peers if we are still running, otherwise we evict\n                        // when dialing is cancelled due to shutdown in progress\n                        this.log.error('could not ping peer %p', oldContact.peer, err);\n                        this.log('evicting old contact after ping failed %p', oldContact.peer);\n                        this.kb.remove(oldContact.id);\n                    }\n                    stream?.abort(err);\n                    return false;\n                }\n                finally {\n                    this.metrics?.routingTableSize.update(this.size);\n                }\n            }, {\n                peerId: oldContact.peer\n            });\n        }));\n        const responded = results\n            .filter(res => res)\n            .length;\n        if (this.running && responded < oldContacts.length && this.kb != null) {\n            this.log('adding new contact %p', newContact.peer);\n            this.kb.add(newContact);\n        }\n    }\n    // -- Public Interface\n    /**\n     * Amount of currently stored peers\n     */\n    get size() {\n        if (this.kb == null) {\n            return 0;\n        }\n        return this.kb.count();\n    }\n    /**\n     * Find a specific peer by id\n     */\n    async find(peer) {\n        const key = await _utils_js__WEBPACK_IMPORTED_MODULE_4__.convertPeerId(peer);\n        const closest = this.closestPeer(key);\n        if (closest != null && peer.equals(closest)) {\n            return closest;\n        }\n        return undefined;\n    }\n    /**\n     * Retrieve the closest peers to the given key\n     */\n    closestPeer(key) {\n        const res = this.closestPeers(key, 1);\n        if (res.length > 0) {\n            return res[0];\n        }\n        return undefined;\n    }\n    /**\n     * Retrieve the `count`-closest peers to the given key\n     */\n    closestPeers(key, count = this.kBucketSize) {\n        if (this.kb == null) {\n            return [];\n        }\n        const closest = this.kb.closest(key, count);\n        return closest.map(p => p.peer);\n    }\n    /**\n     * Add or update the routing table with the given peer\n     */\n    async add(peer) {\n        if (this.kb == null) {\n            throw new Error('RoutingTable is not started');\n        }\n        const id = await _utils_js__WEBPACK_IMPORTED_MODULE_4__.convertPeerId(peer);\n        this.kb.add({ id, peer });\n        this.log('added %p with kad id %b', peer, id);\n        this.metrics?.routingTableSize.update(this.size);\n    }\n    /**\n     * Remove a given peer from the table\n     */\n    async remove(peer) {\n        if (this.kb == null) {\n            throw new Error('RoutingTable is not started');\n        }\n        const id = await _utils_js__WEBPACK_IMPORTED_MODULE_4__.convertPeerId(peer);\n        this.kb.remove(id);\n        this.metrics?.routingTableSize.update(this.size);\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/routing-table/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/routing-table/k-bucket.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/routing-table/k-bucket.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KBucket: () => (/* binding */ KBucket)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/event-target.js\");\n/*\nindex.js - Kademlia DHT K-bucket implementation as a binary tree.\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-2021 Tristan Slominski\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n*/\n\nfunction arrayEquals(array1, array2) {\n    if (array1 === array2) {\n        return true;\n    }\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    for (let i = 0, length = array1.length; i < length; ++i) {\n        if (array1[i] !== array2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction createNode() {\n    // @ts-expect-error loose types\n    return { contacts: [], dontSplit: false, left: null, right: null };\n}\nfunction ensureInt8(name, val) {\n    if (!(val instanceof Uint8Array)) {\n        throw new TypeError(name + ' is not a Uint8Array');\n    }\n}\n/**\n * Implementation of a Kademlia DHT k-bucket used for storing\n * contact (peer node) information.\n */\nclass KBucket extends _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.TypedEventEmitter {\n    localNodeId;\n    root;\n    numberOfNodesPerKBucket;\n    numberOfNodesToPing;\n    distance;\n    arbiter;\n    constructor(options) {\n        super();\n        this.localNodeId = options.localNodeId;\n        this.numberOfNodesPerKBucket = options.numberOfNodesPerKBucket ?? 20;\n        this.numberOfNodesToPing = options.numberOfNodesToPing ?? 3;\n        this.distance = options.distance ?? KBucket.distance;\n        // use an arbiter from options or vectorClock arbiter by default\n        this.arbiter = options.arbiter ?? KBucket.arbiter;\n        ensureInt8('option.localNodeId as parameter 1', this.localNodeId);\n        this.root = createNode();\n    }\n    /**\n     * Default arbiter function for contacts with the same id. Uses\n     * contact.vectorClock to select which contact to update the k-bucket with.\n     * Contact with larger vectorClock field will be selected. If vectorClock is\n     * the same, candidate will be selected.\n     *\n     * @param {object} incumbent - Contact currently stored in the k-bucket.\n     * @param {object} candidate - Contact being added to the k-bucket.\n     * @returns {object} Contact to updated the k-bucket with.\n     */\n    static arbiter(incumbent, candidate) {\n        return (incumbent.vectorClock ?? 0) > (candidate.vectorClock ?? 0) ? incumbent : candidate;\n    }\n    /**\n     * Default distance function. Finds the XOR\n     * distance between firstId and secondId.\n     *\n     * @param  {Uint8Array} firstId -  Uint8Array containing first id.\n     * @param  {Uint8Array} secondId -  Uint8Array containing second id.\n     * @returns {number} Integer The XOR distance between firstId and secondId.\n     */\n    static distance(firstId, secondId) {\n        let distance = 0;\n        let i = 0;\n        const min = Math.min(firstId.length, secondId.length);\n        const max = Math.max(firstId.length, secondId.length);\n        for (; i < min; ++i) {\n            distance = distance * 256 + (firstId[i] ^ secondId[i]);\n        }\n        for (; i < max; ++i)\n            distance = distance * 256 + 255;\n        return distance;\n    }\n    /**\n     * Adds a contact to the k-bucket.\n     *\n     * @param {object} contact - the contact object to add\n     */\n    add(contact) {\n        ensureInt8('contact.id', contact?.id);\n        let bitIndex = 0;\n        let node = this.root;\n        while (node.contacts === null) {\n            // this is not a leaf node but an inner node with 'low' and 'high'\n            // branches; we will check the appropriate bit of the identifier and\n            // delegate to the appropriate node for further processing\n            node = this._determineNode(node, contact.id, bitIndex++);\n        }\n        // check if the contact already exists\n        const index = this._indexOf(node, contact.id);\n        if (index >= 0) {\n            this._update(node, index, contact);\n            return this;\n        }\n        if (node.contacts.length < this.numberOfNodesPerKBucket) {\n            node.contacts.push(contact);\n            this.safeDispatchEvent('added', { detail: contact });\n            return this;\n        }\n        // the bucket is full\n        if (node.dontSplit) {\n            // we are not allowed to split the bucket\n            // we need to ping the first this.numberOfNodesToPing\n            // in order to determine if they are alive\n            // only if one of the pinged nodes does not respond, can the new contact\n            // be added (this prevents DoS flodding with new invalid contacts)\n            this.safeDispatchEvent('ping', {\n                detail: {\n                    oldContacts: node.contacts.slice(0, this.numberOfNodesToPing),\n                    newContact: contact\n                }\n            });\n            return this;\n        }\n        this._split(node, bitIndex);\n        return this.add(contact);\n    }\n    /**\n     * Get the n closest contacts to the provided node id. \"Closest\" here means:\n     * closest according to the XOR metric of the contact node id.\n     *\n     * @param {Uint8Array} id - Contact node id\n     * @param {number} n - Integer (Default: Infinity) The maximum number of closest contacts to return\n     * @returns {Array} Array Maximum of n closest contacts to the node id\n     */\n    closest(id, n = Infinity) {\n        ensureInt8('id', id);\n        if ((!Number.isInteger(n) && n !== Infinity) || n <= 0) {\n            throw new TypeError('n is not positive number');\n        }\n        let contacts = [];\n        for (let nodes = [this.root], bitIndex = 0; nodes.length > 0 && contacts.length < n;) {\n            const node = nodes.pop();\n            if (node == null) {\n                continue;\n            }\n            if (node.contacts === null) {\n                const detNode = this._determineNode(node, id, bitIndex++);\n                nodes.push(node.left === detNode ? node.right : node.left);\n                nodes.push(detNode);\n            }\n            else {\n                contacts = contacts.concat(node.contacts);\n            }\n        }\n        return contacts\n            .map(a => ({\n            distance: this.distance(a.id, id),\n            contact: a\n        }))\n            .sort((a, b) => a.distance - b.distance)\n            .slice(0, n)\n            .map(a => a.contact);\n    }\n    /**\n     * Counts the total number of contacts in the tree.\n     *\n     * @returns {number} The number of contacts held in the tree\n     */\n    count() {\n        // return this.toArray().length\n        let count = 0;\n        for (const nodes = [this.root]; nodes.length > 0;) {\n            const node = nodes.pop();\n            if (node == null) {\n                continue;\n            }\n            if (node.contacts === null) {\n                nodes.push(node.right, node.left);\n            }\n            else {\n                count += node.contacts.length;\n            }\n        }\n        return count;\n    }\n    /**\n     * Determines whether the id at the bitIndex is 0 or 1.\n     * Return left leaf if `id` at `bitIndex` is 0, right leaf otherwise\n     *\n     * @param {object} node - internal object that has 2 leafs: left and right\n     * @param {Uint8Array} id - Id to compare localNodeId with.\n     * @param {number} bitIndex - Integer (Default: 0) The bit index to which bit to check in the id Uint8Array.\n     * @returns {object} left leaf if id at bitIndex is 0, right leaf otherwise.\n     */\n    _determineNode(node, id, bitIndex) {\n        // **NOTE** remember that id is a Uint8Array and has granularity of\n        // bytes (8 bits), whereas the bitIndex is the _bit_ index (not byte)\n        // id's that are too short are put in low bucket (1 byte = 8 bits)\n        // (bitIndex >> 3) finds how many bytes the bitIndex describes\n        // bitIndex % 8 checks if we have extra bits beyond byte multiples\n        // if number of bytes is <= no. of bytes described by bitIndex and there\n        // are extra bits to consider, this means id has less bits than what\n        // bitIndex describes, id therefore is too short, and will be put in low\n        // bucket\n        const bytesDescribedByBitIndex = bitIndex >> 3;\n        const bitIndexWithinByte = bitIndex % 8;\n        if ((id.length <= bytesDescribedByBitIndex) && (bitIndexWithinByte !== 0)) {\n            return node.left;\n        }\n        const byteUnderConsideration = id[bytesDescribedByBitIndex];\n        // byteUnderConsideration is an integer from 0 to 255 represented by 8 bits\n        // where 255 is 11111111 and 0 is 00000000\n        // in order to find out whether the bit at bitIndexWithinByte is set\n        // we construct (1 << (7 - bitIndexWithinByte)) which will consist\n        // of all bits being 0, with only one bit set to 1\n        // for example, if bitIndexWithinByte is 3, we will construct 00010000 by\n        // (1 << (7 - 3)) -> (1 << 4) -> 16\n        if ((byteUnderConsideration & (1 << (7 - bitIndexWithinByte))) !== 0) {\n            return node.right;\n        }\n        return node.left;\n    }\n    /**\n     * Get a contact by its exact ID.\n     * If this is a leaf, loop through the bucket contents and return the correct\n     * contact if we have it or null if not. If this is an inner node, determine\n     * which branch of the tree to traverse and repeat.\n     *\n     * @param {Uint8Array} id - The ID of the contact to fetch.\n     * @returns {object | null} The contact if available, otherwise null\n     */\n    get(id) {\n        ensureInt8('id', id);\n        let bitIndex = 0;\n        let node = this.root;\n        while (node.contacts === null) {\n            node = this._determineNode(node, id, bitIndex++);\n        }\n        // index of uses contact id for matching\n        const index = this._indexOf(node, id);\n        return index >= 0 ? node.contacts[index] : undefined;\n    }\n    /**\n     * Returns the index of the contact with provided\n     * id if it exists, returns -1 otherwise.\n     *\n     * @param {object} node - internal object that has 2 leafs: left and right\n     * @param {Uint8Array} id - Contact node id.\n     * @returns {number} Integer Index of contact with provided id if it exists, -1 otherwise.\n     */\n    _indexOf(node, id) {\n        for (let i = 0; i < node.contacts.length; ++i) {\n            if (arrayEquals(node.contacts[i].id, id))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Removes contact with the provided id.\n     *\n     * @param {Uint8Array} id - The ID of the contact to remove\n     * @returns {object} The k-bucket itself\n     */\n    remove(id) {\n        ensureInt8('the id as parameter 1', id);\n        let bitIndex = 0;\n        let node = this.root;\n        while (node.contacts === null) {\n            node = this._determineNode(node, id, bitIndex++);\n        }\n        const index = this._indexOf(node, id);\n        if (index >= 0) {\n            const contact = node.contacts.splice(index, 1)[0];\n            this.safeDispatchEvent('removed', {\n                detail: contact\n            });\n        }\n        return this;\n    }\n    /**\n     * Splits the node, redistributes contacts to the new nodes, and marks the\n     * node that was split as an inner node of the binary tree of nodes by\n     * setting this.root.contacts = null\n     *\n     * @param {object} node - node for splitting\n     * @param {number} bitIndex - the bitIndex to which byte to check in the Uint8Array for navigating the binary tree\n     */\n    _split(node, bitIndex) {\n        node.left = createNode();\n        node.right = createNode();\n        // redistribute existing contacts amongst the two newly created nodes\n        for (const contact of node.contacts) {\n            this._determineNode(node, contact.id, bitIndex).contacts.push(contact);\n        }\n        // @ts-expect-error loose types\n        node.contacts = null; // mark as inner tree node\n        // don't split the \"far away\" node\n        // we check where the local node would end up and mark the other one as\n        // \"dontSplit\" (i.e. \"far away\")\n        const detNode = this._determineNode(node, this.localNodeId, bitIndex);\n        const otherNode = node.left === detNode ? node.right : node.left;\n        otherNode.dontSplit = true;\n    }\n    /**\n     * Returns all the contacts contained in the tree as an array.\n     * If this is a leaf, return a copy of the bucket. If this is not a leaf,\n     * return the union of the low and high branches (themselves also as arrays).\n     *\n     * @returns {Array} All of the contacts in the tree, as an array\n     */\n    toArray() {\n        let result = [];\n        for (const nodes = [this.root]; nodes.length > 0;) {\n            const node = nodes.pop();\n            if (node == null) {\n                continue;\n            }\n            if (node.contacts === null) {\n                nodes.push(node.right, node.left);\n            }\n            else {\n                result = result.concat(node.contacts);\n            }\n        }\n        return result;\n    }\n    /**\n     * Similar to `toArray()` but instead of buffering everything up into an\n     * array before returning it, yields contacts as they are encountered while\n     * walking the tree.\n     *\n     * @returns {Iterable} All of the contacts in the tree, as an iterable\n     */\n    *toIterable() {\n        for (const nodes = [this.root]; nodes.length > 0;) {\n            const node = nodes.pop();\n            if (node == null) {\n                continue;\n            }\n            if (node.contacts === null) {\n                nodes.push(node.right, node.left);\n            }\n            else {\n                yield* node.contacts;\n            }\n        }\n    }\n    /**\n     * Updates the contact selected by the arbiter.\n     * If the selection is our old contact and the candidate is some new contact\n     * then the new contact is abandoned (not added).\n     * If the selection is our old contact and the candidate is our old contact\n     * then we are refreshing the contact and it is marked as most recently\n     * contacted (by being moved to the right/end of the bucket array).\n     * If the selection is our new contact, the old contact is removed and the new\n     * contact is marked as most recently contacted.\n     *\n     * @param {object} node - internal object that has 2 leafs: left and right\n     * @param {number} index - the index in the bucket where contact exists (index has already been computed in a previous calculation)\n     * @param {object} contact - The contact object to update\n     */\n    _update(node, index, contact) {\n        // sanity check\n        if (!arrayEquals(node.contacts[index].id, contact.id)) {\n            throw new Error('wrong index for _update');\n        }\n        const incumbent = node.contacts[index];\n        const selection = this.arbiter(incumbent, contact);\n        // if the selection is our old contact and the candidate is some new\n        // contact, then there is nothing to do\n        if (selection === incumbent && incumbent !== contact)\n            return;\n        node.contacts.splice(index, 1); // remove old contact\n        node.contacts.push(selection); // add more recent contact version\n        this.safeDispatchEvent('updated', {\n            detail: {\n                incumbent, selection\n            }\n        });\n    }\n}\n//# sourceMappingURL=k-bucket.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/routing-table/k-bucket.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/routing-table/refresh.js":
/*!************************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/routing-table/refresh.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RoutingTableRefresh: () => (/* binding */ RoutingTableRefresh)\n/* harmony export */ });\n/* harmony import */ var _libp2p_crypto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/crypto */ \"./node_modules/@libp2p/crypto/dist/src/random-bytes.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var it_length__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-length */ \"./node_modules/it-length/dist/src/index.js\");\n/* harmony import */ var multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/hashes/sha2 */ \"./node_modules/multiformats/dist/src/hashes/sha2-browser.js\");\n/* harmony import */ var uint8arrays_xor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/xor */ \"./node_modules/uint8arrays/dist/src/xor.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/@libp2p/kad-dht/dist/src/constants.js\");\n/* harmony import */ var _generated_prefix_list_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./generated-prefix-list.js */ \"./node_modules/@libp2p/kad-dht/dist/src/routing-table/generated-prefix-list-browser.js\");\n\n\n\n\n\n\n\n/**\n * Cannot generate random KadIds longer than this + 1\n */\nconst MAX_COMMON_PREFIX_LENGTH = 15;\n/**\n * A wrapper around `k-bucket`, to provide easy store and\n * retrieval for peers.\n */\nclass RoutingTableRefresh {\n    log;\n    peerRouting;\n    routingTable;\n    refreshInterval;\n    refreshQueryTimeout;\n    commonPrefixLengthRefreshedAt;\n    refreshTimeoutId;\n    constructor(components, init) {\n        const { peerRouting, routingTable, refreshInterval, refreshQueryTimeout, logPrefix } = init;\n        this.log = components.logger.forComponent(`${logPrefix}:routing-table:refresh`);\n        this.peerRouting = peerRouting;\n        this.routingTable = routingTable;\n        this.refreshInterval = refreshInterval ?? _constants_js__WEBPACK_IMPORTED_MODULE_3__.TABLE_REFRESH_INTERVAL;\n        this.refreshQueryTimeout = refreshQueryTimeout ?? _constants_js__WEBPACK_IMPORTED_MODULE_3__.TABLE_REFRESH_QUERY_TIMEOUT;\n        this.commonPrefixLengthRefreshedAt = [];\n        this.refreshTable = this.refreshTable.bind(this);\n    }\n    async start() {\n        this.log(`refreshing routing table every ${this.refreshInterval}ms`);\n        this.refreshTable(true);\n    }\n    async stop() {\n        if (this.refreshTimeoutId != null) {\n            clearTimeout(this.refreshTimeoutId);\n        }\n    }\n    /**\n     * To speed lookups, we seed the table with random PeerIds. This means\n     * when we are asked to locate a peer on the network, we can find a KadId\n     * that is close to the requested peer ID and query that, then network\n     * peers will tell us who they know who is close to the fake ID\n     */\n    refreshTable(force = false) {\n        this.log('refreshing routing table');\n        const prefixLength = this._maxCommonPrefix();\n        const refreshCpls = this._getTrackedCommonPrefixLengthsForRefresh(prefixLength);\n        this.log(`max common prefix length ${prefixLength}`);\n        this.log(`tracked CPLs [ ${refreshCpls.map(date => date.toISOString()).join(', ')} ]`);\n        /**\n         * If we see a gap at a common prefix length in the Routing table, we ONLY refresh up until\n         * the maximum cpl we have in the Routing Table OR (2 * (Cpl+ 1) with the gap), whichever\n         * is smaller.\n         *\n         * This is to prevent refreshes for Cpls that have no peers in the network but happen to be\n         * before a very high max Cpl for which we do have peers in the network.\n         *\n         * The number of 2 * (Cpl + 1) can be proved and a proof would have been written here if\n         * the programmer had paid more attention in the Math classes at university.\n         *\n         * So, please be patient and a doc explaining it will be published soon.\n         *\n         * https://github.com/libp2p/go-libp2p-kad-dht/commit/2851c88acb0a3f86bcfe3cfd0f4604a03db801d8#diff-ad45f4ba97ffbc4083c2eb87a4420c1157057b233f048030d67c6b551855ccf6R219\n         */\n        Promise.all(refreshCpls.map(async (lastRefresh, index) => {\n            try {\n                await this._refreshCommonPrefixLength(index, lastRefresh, force);\n                if (this._numPeersForCpl(prefixLength) === 0) {\n                    const lastCpl = Math.min(2 * (index + 1), refreshCpls.length - 1);\n                    for (let n = index + 1; n < lastCpl + 1; n++) {\n                        try {\n                            await this._refreshCommonPrefixLength(n, lastRefresh, force);\n                        }\n                        catch (err) {\n                            this.log.error(err);\n                        }\n                    }\n                }\n            }\n            catch (err) {\n                this.log.error(err);\n            }\n        })).catch(err => {\n            this.log.error(err);\n        }).then(() => {\n            this.refreshTimeoutId = setTimeout(this.refreshTable, this.refreshInterval);\n            if (this.refreshTimeoutId.unref != null) {\n                this.refreshTimeoutId.unref();\n            }\n        }).catch(err => {\n            this.log.error(err);\n        });\n    }\n    async _refreshCommonPrefixLength(cpl, lastRefresh, force) {\n        if (!force && lastRefresh.getTime() > (Date.now() - this.refreshInterval)) {\n            this.log('not running refresh for cpl %s as time since last refresh not above interval', cpl);\n            return;\n        }\n        // gen a key for the query to refresh the cpl\n        const peerId = await this._generateRandomPeerId(cpl);\n        this.log('starting refreshing cpl %s with key %p (routing table size was %s)', cpl, peerId, this.routingTable.size);\n        const peers = await (0,it_length__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.peerRouting.getClosestPeers(peerId.toBytes(), { signal: AbortSignal.timeout(this.refreshQueryTimeout) }));\n        this.log(`found ${peers} peers that were close to imaginary peer %p`, peerId);\n        this.log('finished refreshing cpl %s with key %p (routing table size is now %s)', cpl, peerId, this.routingTable.size);\n    }\n    _getTrackedCommonPrefixLengthsForRefresh(maxCommonPrefix) {\n        if (maxCommonPrefix > MAX_COMMON_PREFIX_LENGTH) {\n            maxCommonPrefix = MAX_COMMON_PREFIX_LENGTH;\n        }\n        const dates = [];\n        for (let i = 0; i <= maxCommonPrefix; i++) {\n            // defaults to the zero value if we haven't refreshed it yet.\n            dates[i] = this.commonPrefixLengthRefreshedAt[i] ?? new Date();\n        }\n        return dates;\n    }\n    async _generateRandomPeerId(targetCommonPrefixLength) {\n        if (this.routingTable.kb == null) {\n            throw new Error('Routing table not started');\n        }\n        const randomData = (0,_libp2p_crypto__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(2);\n        const randomUint16 = (randomData[1] << 8) + randomData[0];\n        const key = await this._makePeerId(this.routingTable.kb.localNodeId, randomUint16, targetCommonPrefixLength);\n        return (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_5__.peerIdFromBytes)(key);\n    }\n    async _makePeerId(localKadId, randomPrefix, targetCommonPrefixLength) {\n        if (targetCommonPrefixLength > MAX_COMMON_PREFIX_LENGTH) {\n            throw new Error(`Cannot generate peer ID for common prefix length greater than ${MAX_COMMON_PREFIX_LENGTH}`);\n        }\n        const view = new DataView(localKadId.buffer, localKadId.byteOffset, localKadId.byteLength);\n        const localPrefix = view.getUint16(0, false);\n        // For host with ID `L`, an ID `K` belongs to a bucket with ID `B` ONLY IF CommonPrefixLen(L,K) is EXACTLY B.\n        // Hence, to achieve a targetPrefix `T`, we must toggle the (T+1)th bit in L & then copy (T+1) bits from L\n        // to our randomly generated prefix.\n        const toggledLocalPrefix = localPrefix ^ (0x8000 >> targetCommonPrefixLength);\n        // Combine the toggled local prefix and the random bits at the correct offset\n        // such that ONLY the first `targetCommonPrefixLength` bits match the local ID.\n        const mask = 65535 << (16 - (targetCommonPrefixLength + 1));\n        const targetPrefix = (toggledLocalPrefix & mask) | (randomPrefix & ~mask);\n        // Convert to a known peer ID.\n        const keyPrefix = _generated_prefix_list_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"][targetPrefix];\n        const keyBuffer = new ArrayBuffer(34);\n        const keyView = new DataView(keyBuffer, 0, keyBuffer.byteLength);\n        keyView.setUint8(0, multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_1__.sha256.code);\n        keyView.setUint8(1, 32);\n        keyView.setUint32(2, keyPrefix, false);\n        return new Uint8Array(keyView.buffer, keyView.byteOffset, keyView.byteLength);\n    }\n    /**\n     * returns the maximum common prefix length between any peer in the table\n     * and the current peer\n     */\n    _maxCommonPrefix() {\n        // xor our KadId with every KadId in the k-bucket tree,\n        // return the longest id prefix that is the same\n        let prefixLength = 0;\n        for (const length of this._prefixLengths()) {\n            if (length > prefixLength) {\n                prefixLength = length;\n            }\n        }\n        return prefixLength;\n    }\n    /**\n     * Returns the number of peers in the table with a given prefix length\n     */\n    _numPeersForCpl(prefixLength) {\n        let count = 0;\n        for (const length of this._prefixLengths()) {\n            if (length === prefixLength) {\n                count++;\n            }\n        }\n        return count;\n    }\n    /**\n     * Yields the common prefix length of every peer in the table\n     */\n    *_prefixLengths() {\n        if (this.routingTable.kb == null) {\n            return;\n        }\n        for (const { id } of this.routingTable.kb.toIterable()) {\n            const distance = (0,uint8arrays_xor__WEBPACK_IMPORTED_MODULE_2__.xor)(this.routingTable.kb.localNodeId, id);\n            let leadingZeros = 0;\n            for (const byte of distance) {\n                if (byte === 0) {\n                    leadingZeros++;\n                }\n                else {\n                    break;\n                }\n            }\n            yield leadingZeros;\n        }\n    }\n}\n//# sourceMappingURL=refresh.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/routing-table/refresh.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/add-provider.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/add-provider.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddProviderHandler: () => (/* binding */ AddProviderHandler)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var multiformats_cid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/cid */ \"./node_modules/multiformats/dist/src/cid.js\");\n\n\n\n\nclass AddProviderHandler {\n    providers;\n    log;\n    constructor(components, init) {\n        this.log = components.logger.forComponent(`${init.logPrefix}:rpc:handlers:add-provider`);\n        this.providers = init.providers;\n    }\n    async handle(peerId, msg) {\n        this.log('start');\n        if (msg.key == null || msg.key.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('Missing key', 'ERR_MISSING_KEY');\n        }\n        let cid;\n        try {\n            // this is actually just the multihash, not the whole CID\n            cid = multiformats_cid__WEBPACK_IMPORTED_MODULE_1__.CID.decode(msg.key);\n        }\n        catch (err) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('Invalid CID', 'ERR_INVALID_CID');\n        }\n        if (msg.providers == null || msg.providers.length === 0) {\n            this.log.error('no providers found in message');\n        }\n        await Promise.all(msg.providers.map(async (pi) => {\n            // Ignore providers not from the originator\n            if (!peerId.equals(pi.id)) {\n                this.log('invalid provider peer %p from %p', pi.id, peerId);\n                return;\n            }\n            if (pi.multiaddrs.length < 1) {\n                this.log('no valid addresses for provider %p. Ignore', peerId);\n                return;\n            }\n            this.log('received provider %p for %s (addrs %s)', peerId, cid, pi.multiaddrs.map((m) => (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(m).toString()));\n            await this.providers.addProvider(cid, (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_3__.peerIdFromBytes)(pi.id));\n        }));\n        return undefined;\n    }\n}\n//# sourceMappingURL=add-provider.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/add-provider.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/find-node.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/find-node.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FindNodeHandler: () => (/* binding */ FindNodeHandler)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays */ \"./node_modules/uint8arrays/dist/src/index.js\");\n/* harmony import */ var _message_dht_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../message/dht.js */ \"./node_modules/@libp2p/kad-dht/dist/src/message/dht.js\");\n\n\n\n\nclass FindNodeHandler {\n    peerRouting;\n    peerInfoMapper;\n    peerId;\n    addressManager;\n    log;\n    constructor(components, init) {\n        const { peerRouting, logPrefix } = init;\n        this.log = components.logger.forComponent(`${logPrefix}:rpc:handlers:find-node`);\n        this.peerId = components.peerId;\n        this.addressManager = components.addressManager;\n        this.peerRouting = peerRouting;\n        this.peerInfoMapper = init.peerInfoMapper;\n    }\n    /**\n     * Process `FindNode` DHT messages\n     */\n    async handle(peerId, msg) {\n        this.log('incoming request from %p for peers closer to %b', peerId, msg.key);\n        let closer = [];\n        if (msg.key == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('Invalid FIND_NODE message received - key was missing', 'ERR_INVALID_MESSAGE');\n        }\n        if ((0,uint8arrays__WEBPACK_IMPORTED_MODULE_1__.equals)(this.peerId.toBytes(), msg.key)) {\n            closer = [{\n                    id: this.peerId,\n                    multiaddrs: this.addressManager.getAddresses().map(ma => ma.decapsulateCode((0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)('p2p').code))\n                }];\n        }\n        else {\n            closer = await this.peerRouting.getCloserPeersOffline(msg.key, peerId);\n        }\n        const response = {\n            type: _message_dht_js__WEBPACK_IMPORTED_MODULE_3__.MessageType.FIND_NODE,\n            clusterLevel: msg.clusterLevel,\n            closer: closer\n                .map(this.peerInfoMapper)\n                .filter(({ multiaddrs }) => multiaddrs.length)\n                .map(peerInfo => ({\n                id: peerInfo.id.toBytes(),\n                multiaddrs: peerInfo.multiaddrs.map(ma => ma.bytes)\n            })),\n            providers: []\n        };\n        if (response.closer.length === 0) {\n            this.log('could not find any peers closer to %b than %p', msg.key, peerId);\n        }\n        return response;\n    }\n}\n//# sourceMappingURL=find-node.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/find-node.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/get-providers.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/get-providers.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GetProvidersHandler: () => (/* binding */ GetProvidersHandler)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var multiformats_cid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/cid */ \"./node_modules/multiformats/dist/src/cid.js\");\n/* harmony import */ var _message_dht_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../message/dht.js */ \"./node_modules/@libp2p/kad-dht/dist/src/message/dht.js\");\n\n\n\nclass GetProvidersHandler {\n    peerRouting;\n    providers;\n    peerStore;\n    peerInfoMapper;\n    log;\n    constructor(components, init) {\n        const { peerRouting, providers, logPrefix } = init;\n        this.log = components.logger.forComponent(`${logPrefix}:rpc:handlers:get-providers`);\n        this.peerStore = components.peerStore;\n        this.peerRouting = peerRouting;\n        this.providers = providers;\n        this.peerInfoMapper = init.peerInfoMapper;\n    }\n    async handle(peerId, msg) {\n        if (msg.key == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Invalid FIND_NODE message received - key was missing', 'ERR_INVALID_MESSAGE');\n        }\n        let cid;\n        try {\n            cid = multiformats_cid__WEBPACK_IMPORTED_MODULE_0__.CID.decode(msg.key);\n        }\n        catch (err) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Invalid CID', 'ERR_INVALID_CID');\n        }\n        this.log('%p asking for providers for %s', peerId, cid);\n        const [peers, closer] = await Promise.all([\n            this.providers.getProviders(cid),\n            this.peerRouting.getCloserPeersOffline(msg.key, peerId)\n        ]);\n        const providerPeers = await this._getPeers(peers);\n        const closerPeers = await this._getPeers(closer.map(({ id }) => id));\n        const response = {\n            type: _message_dht_js__WEBPACK_IMPORTED_MODULE_2__.MessageType.GET_PROVIDERS,\n            key: msg.key,\n            clusterLevel: msg.clusterLevel,\n            closer: closerPeers\n                .map(this.peerInfoMapper)\n                .filter(({ multiaddrs }) => multiaddrs.length)\n                .map(peerInfo => ({\n                id: peerInfo.id.toBytes(),\n                multiaddrs: peerInfo.multiaddrs.map(ma => ma.bytes)\n            })),\n            providers: providerPeers\n                .map(this.peerInfoMapper)\n                .filter(({ multiaddrs }) => multiaddrs.length)\n                .map(peerInfo => ({\n                id: peerInfo.id.toBytes(),\n                multiaddrs: peerInfo.multiaddrs.map(ma => ma.bytes)\n            }))\n        };\n        this.log('got %s providers %s closerPeers', response.providers.length, response.closer.length);\n        return response;\n    }\n    async _getAddresses(peerId) {\n        return [];\n    }\n    async _getPeers(peerIds) {\n        const output = [];\n        for (const peerId of peerIds) {\n            try {\n                const peer = await this.peerStore.get(peerId);\n                const peerAfterFilter = this.peerInfoMapper({\n                    id: peerId,\n                    multiaddrs: peer.addresses.map(({ multiaddr }) => multiaddr)\n                });\n                if (peerAfterFilter.multiaddrs.length > 0) {\n                    output.push(peerAfterFilter);\n                }\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n        }\n        return output;\n    }\n}\n//# sourceMappingURL=get-providers.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/get-providers.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/get-value.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/get-value.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GetValueHandler: () => (/* binding */ GetValueHandler)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_record__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/record */ \"./node_modules/@libp2p/record/dist/src/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../constants.js */ \"./node_modules/@libp2p/kad-dht/dist/src/constants.js\");\n/* harmony import */ var _message_dht_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../message/dht.js */ \"./node_modules/@libp2p/kad-dht/dist/src/message/dht.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils.js */ \"./node_modules/@libp2p/kad-dht/dist/src/utils.js\");\n\n\n\n\n\nclass GetValueHandler {\n    peerStore;\n    datastore;\n    peerRouting;\n    log;\n    constructor(components, init) {\n        this.log = components.logger.forComponent(`${init.logPrefix}:rpc:handlers:get-value`);\n        this.peerStore = components.peerStore;\n        this.datastore = components.datastore;\n        this.peerRouting = init.peerRouting;\n    }\n    async handle(peerId, msg) {\n        const key = msg.key;\n        this.log('%p asked for key %b', peerId, key);\n        if (key == null || key.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError('Invalid key', 'ERR_INVALID_KEY');\n        }\n        const response = {\n            type: _message_dht_js__WEBPACK_IMPORTED_MODULE_1__.MessageType.GET_VALUE,\n            key,\n            clusterLevel: msg.clusterLevel,\n            closer: [],\n            providers: []\n        };\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isPublicKeyKey)(key)) {\n            this.log('is public key');\n            const idFromKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.fromPublicKeyKey)(key);\n            let pubKey;\n            try {\n                const peer = await this.peerStore.get(idFromKey);\n                if (peer.id.publicKey == null) {\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError('No public key found in key book', 'ERR_NOT_FOUND');\n                }\n                pubKey = peer.id.publicKey;\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n            }\n            if (pubKey != null) {\n                this.log('returning found public key');\n                response.record = new _libp2p_record__WEBPACK_IMPORTED_MODULE_3__.Libp2pRecord(key, pubKey, new Date()).serialize();\n                return response;\n            }\n        }\n        const [record, closer] = await Promise.all([\n            this._checkLocalDatastore(key),\n            this.peerRouting.getCloserPeersOffline(key, peerId)\n        ]);\n        if (record != null) {\n            this.log('had record for %b in local datastore', key);\n            response.record = record.serialize();\n        }\n        if (closer.length > 0) {\n            this.log('had %s closer peers in routing table', closer.length);\n            response.closer = closer.map(peerInfo => ({\n                id: peerInfo.id.toBytes(),\n                multiaddrs: peerInfo.multiaddrs.map(ma => ma.bytes)\n            }));\n        }\n        return response;\n    }\n    /**\n     * Try to fetch a given record by from the local datastore.\n     * Returns the record if it is still valid, meaning\n     * - it was either authored by this node, or\n     * - it was received less than `MAX_RECORD_AGE` ago.\n     */\n    async _checkLocalDatastore(key) {\n        this.log('checkLocalDatastore looking for %b', key);\n        const dsKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.bufferToRecordKey)(key);\n        // Fetch value from ds\n        let rawRecord;\n        try {\n            rawRecord = await this.datastore.get(dsKey);\n        }\n        catch (err) {\n            if (err.code === 'ERR_NOT_FOUND') {\n                return undefined;\n            }\n            throw err;\n        }\n        // Create record from the returned bytes\n        const record = _libp2p_record__WEBPACK_IMPORTED_MODULE_3__.Libp2pRecord.deserialize(rawRecord);\n        if (record == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError('Invalid record', 'ERR_INVALID_RECORD');\n        }\n        // Check validity: compare time received with max record age\n        if (record.timeReceived == null ||\n            Date.now() - record.timeReceived.getTime() > _constants_js__WEBPACK_IMPORTED_MODULE_4__.MAX_RECORD_AGE) {\n            // If record is bad delete it and return\n            await this.datastore.delete(dsKey);\n            return undefined;\n        }\n        // Record is valid\n        return record;\n    }\n}\n//# sourceMappingURL=get-value.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/get-value.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/ping.js":
/*!********************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/ping.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PingHandler: () => (/* binding */ PingHandler)\n/* harmony export */ });\nclass PingHandler {\n    log;\n    constructor(components, init) {\n        this.log = components.logger.forComponent(`${init.logPrefix}:rpc:handlers:ping`);\n    }\n    async handle(peerId, msg) {\n        this.log('ping from %p', peerId);\n        return msg;\n    }\n}\n//# sourceMappingURL=ping.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/ping.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/put-value.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/put-value.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PutValueHandler: () => (/* binding */ PutValueHandler)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_record__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/record */ \"./node_modules/@libp2p/record/dist/src/index.js\");\n/* harmony import */ var _record_validators_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../record/validators.js */ \"./node_modules/@libp2p/kad-dht/dist/src/record/validators.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils.js */ \"./node_modules/@libp2p/kad-dht/dist/src/utils.js\");\n\n\n\n\nclass PutValueHandler {\n    components;\n    validators;\n    log;\n    constructor(components, init) {\n        const { validators } = init;\n        this.components = components;\n        this.log = components.logger.forComponent(`${init.logPrefix}:rpc:handlers:put-value`);\n        this.validators = validators;\n    }\n    async handle(peerId, msg) {\n        const key = msg.key;\n        this.log('%p asked us to store value for key %b', peerId, key);\n        if (msg.record == null) {\n            const errMsg = `Empty record from: ${peerId.toString()}`;\n            this.log.error(errMsg);\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError(errMsg, 'ERR_EMPTY_RECORD');\n        }\n        try {\n            const deserializedRecord = _libp2p_record__WEBPACK_IMPORTED_MODULE_1__.Libp2pRecord.deserialize(msg.record);\n            await (0,_record_validators_js__WEBPACK_IMPORTED_MODULE_2__.verifyRecord)(this.validators, deserializedRecord);\n            deserializedRecord.timeReceived = new Date();\n            const recordKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.bufferToRecordKey)(deserializedRecord.key);\n            await this.components.datastore.put(recordKey, deserializedRecord.serialize().subarray());\n            this.log('put record for %b into datastore under key %k', key, recordKey);\n        }\n        catch (err) {\n            this.log('did not put record for key %b into datastore %o', key, err);\n        }\n        return msg;\n    }\n}\n//# sourceMappingURL=put-value.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/put-value.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/rpc/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/rpc/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RPC: () => (/* binding */ RPC)\n/* harmony export */ });\n/* harmony import */ var it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-length-prefixed */ \"./node_modules/it-length-prefixed/dist/src/index.js\");\n/* harmony import */ var it_pipe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-pipe */ \"./node_modules/it-pipe/dist/src/index.js\");\n/* harmony import */ var _message_dht_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../message/dht.js */ \"./node_modules/@libp2p/kad-dht/dist/src/message/dht.js\");\n/* harmony import */ var _handlers_add_provider_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./handlers/add-provider.js */ \"./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/add-provider.js\");\n/* harmony import */ var _handlers_find_node_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./handlers/find-node.js */ \"./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/find-node.js\");\n/* harmony import */ var _handlers_get_providers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./handlers/get-providers.js */ \"./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/get-providers.js\");\n/* harmony import */ var _handlers_get_value_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./handlers/get-value.js */ \"./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/get-value.js\");\n/* harmony import */ var _handlers_ping_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./handlers/ping.js */ \"./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/ping.js\");\n/* harmony import */ var _handlers_put_value_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./handlers/put-value.js */ \"./node_modules/@libp2p/kad-dht/dist/src/rpc/handlers/put-value.js\");\n\n\n\n\n\n\n\n\n\nclass RPC {\n    handlers;\n    routingTable;\n    log;\n    constructor(components, init) {\n        const { providers, peerRouting, validators, logPrefix, peerInfoMapper } = init;\n        this.log = components.logger.forComponent(`${logPrefix}:rpc`);\n        this.routingTable = init.routingTable;\n        this.handlers = {\n            [_message_dht_js__WEBPACK_IMPORTED_MODULE_2__.MessageType.GET_VALUE.toString()]: new _handlers_get_value_js__WEBPACK_IMPORTED_MODULE_3__.GetValueHandler(components, { peerRouting, logPrefix }),\n            [_message_dht_js__WEBPACK_IMPORTED_MODULE_2__.MessageType.PUT_VALUE.toString()]: new _handlers_put_value_js__WEBPACK_IMPORTED_MODULE_4__.PutValueHandler(components, { validators, logPrefix }),\n            [_message_dht_js__WEBPACK_IMPORTED_MODULE_2__.MessageType.FIND_NODE.toString()]: new _handlers_find_node_js__WEBPACK_IMPORTED_MODULE_5__.FindNodeHandler(components, { peerRouting, logPrefix, peerInfoMapper }),\n            [_message_dht_js__WEBPACK_IMPORTED_MODULE_2__.MessageType.ADD_PROVIDER.toString()]: new _handlers_add_provider_js__WEBPACK_IMPORTED_MODULE_6__.AddProviderHandler(components, { providers, logPrefix }),\n            [_message_dht_js__WEBPACK_IMPORTED_MODULE_2__.MessageType.GET_PROVIDERS.toString()]: new _handlers_get_providers_js__WEBPACK_IMPORTED_MODULE_7__.GetProvidersHandler(components, { peerRouting, providers, logPrefix, peerInfoMapper }),\n            [_message_dht_js__WEBPACK_IMPORTED_MODULE_2__.MessageType.PING.toString()]: new _handlers_ping_js__WEBPACK_IMPORTED_MODULE_8__.PingHandler(components, { logPrefix })\n        };\n    }\n    /**\n     * Process incoming DHT messages\n     */\n    async handleMessage(peerId, msg) {\n        try {\n            await this.routingTable.add(peerId);\n        }\n        catch (err) {\n            this.log.error('Failed to update the kbucket store', err);\n        }\n        // get handler & execute it\n        const handler = this.handlers[msg.type];\n        if (handler == null) {\n            this.log.error(`no handler found for message type: ${msg.type}`);\n            return;\n        }\n        return handler.handle(peerId, msg);\n    }\n    /**\n     * Handle incoming streams on the dht protocol\n     */\n    onIncomingStream(data) {\n        Promise.resolve().then(async () => {\n            const { stream, connection } = data;\n            const peerId = connection.remotePeer;\n            try {\n                await this.routingTable.add(peerId);\n            }\n            catch (err) {\n                this.log.error(err);\n            }\n            const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n            await (0,it_pipe__WEBPACK_IMPORTED_MODULE_1__.pipe)(stream, (source) => it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__.decode(source), async function* (source) {\n                for await (const msg of source) {\n                    // handle the message\n                    const desMessage = _message_dht_js__WEBPACK_IMPORTED_MODULE_2__.Message.decode(msg);\n                    self.log('incoming %s from %p', desMessage.type, peerId);\n                    const res = await self.handleMessage(peerId, desMessage);\n                    // Not all handlers will return a response\n                    if (res != null) {\n                        yield _message_dht_js__WEBPACK_IMPORTED_MODULE_2__.Message.encode(res);\n                    }\n                }\n            }, (source) => it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__.encode(source), stream);\n        })\n            .catch(err => {\n            this.log.error(err);\n        });\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/rpc/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/topology-listener.js":
/*!********************************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/topology-listener.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TopologyListener: () => (/* binding */ TopologyListener)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/event-target.js\");\n\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\nclass TopologyListener extends _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.TypedEventEmitter {\n    log;\n    components;\n    protocol;\n    running;\n    registrarId;\n    constructor(components, init) {\n        super();\n        const { protocol, logPrefix } = init;\n        this.components = components;\n        this.log = components.logger.forComponent(`${logPrefix}:topology-listener`);\n        this.running = false;\n        this.protocol = protocol;\n    }\n    isStarted() {\n        return this.running;\n    }\n    /**\n     * Start the network\n     */\n    async start() {\n        if (this.running) {\n            return;\n        }\n        this.running = true;\n        // register protocol with topology\n        this.registrarId = await this.components.registrar.register(this.protocol, {\n            onConnect: (peerId) => {\n                this.log('observed peer %p with protocol %s', peerId, this.protocol);\n                this.dispatchEvent(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CustomEvent('peer', {\n                    detail: peerId\n                }));\n            }\n        });\n    }\n    /**\n     * Stop all network activity\n     */\n    async stop() {\n        this.running = false;\n        // unregister protocol and handlers\n        if (this.registrarId != null) {\n            this.components.registrar.unregister(this.registrarId);\n            this.registrarId = undefined;\n        }\n    }\n}\n//# sourceMappingURL=topology-listener.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/topology-listener.js?");

/***/ }),

/***/ "./node_modules/@libp2p/kad-dht/dist/src/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/@libp2p/kad-dht/dist/src/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufferToKey: () => (/* binding */ bufferToKey),\n/* harmony export */   bufferToRecordKey: () => (/* binding */ bufferToRecordKey),\n/* harmony export */   convertBuffer: () => (/* binding */ convertBuffer),\n/* harmony export */   convertPeerId: () => (/* binding */ convertPeerId),\n/* harmony export */   createPutRecord: () => (/* binding */ createPutRecord),\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   fromPublicKeyKey: () => (/* binding */ fromPublicKeyKey),\n/* harmony export */   isIPNSKey: () => (/* binding */ isIPNSKey),\n/* harmony export */   isPublicKeyKey: () => (/* binding */ isPublicKeyKey),\n/* harmony export */   keyForPublicKey: () => (/* binding */ keyForPublicKey),\n/* harmony export */   multiaddrIsPublic: () => (/* binding */ multiaddrIsPublic),\n/* harmony export */   passthroughMapper: () => (/* binding */ passthroughMapper),\n/* harmony export */   removePrivateAddressesMapper: () => (/* binding */ removePrivateAddressesMapper),\n/* harmony export */   removePublicAddressesMapper: () => (/* binding */ removePublicAddressesMapper)\n/* harmony export */ });\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _libp2p_record__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/record */ \"./node_modules/@libp2p/record/dist/src/index.js\");\n/* harmony import */ var _libp2p_utils_private_ip__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/utils/private-ip */ \"./node_modules/@libp2p/utils/dist/src/private-ip.js\");\n/* harmony import */ var interface_datastore_key__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! interface-datastore/key */ \"./node_modules/interface-datastore/dist/src/key.js\");\n/* harmony import */ var multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/hashes/sha2 */ \"./node_modules/multiformats/dist/src/hashes/sha2-browser.js\");\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/concat */ \"./node_modules/uint8arrays/dist/src/concat.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@libp2p/kad-dht/dist/src/constants.js\");\n\n\n\n\n\n\n\n\n\n// const IPNS_PREFIX = uint8ArrayFromString('/ipns/')\nconst PK_PREFIX = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)('/pk/');\nfunction removePrivateAddressesMapper(peer) {\n    return {\n        ...peer,\n        multiaddrs: peer.multiaddrs.filter(multiaddr => {\n            const [[type, addr]] = multiaddr.stringTuples();\n            // treat /dns, /dns4, and /dns6 addrs as public\n            if (type === 53 || type === 54 || type === 55) {\n                // localhost can be a dns address but it's private\n                if (addr === 'localhost') {\n                    return false;\n                }\n                return true;\n            }\n            if (type !== 4 && type !== 6) {\n                return false;\n            }\n            if (addr == null) {\n                return false;\n            }\n            const isPrivate = (0,_libp2p_utils_private_ip__WEBPACK_IMPORTED_MODULE_5__.isPrivateIp)(addr);\n            if (isPrivate == null) {\n                // not an ip address\n                return true;\n            }\n            return !isPrivate;\n        })\n    };\n}\nfunction removePublicAddressesMapper(peer) {\n    return {\n        ...peer,\n        multiaddrs: peer.multiaddrs.filter(multiaddr => {\n            const [[type, addr]] = multiaddr.stringTuples();\n            if (addr === 'localhost') {\n                return true;\n            }\n            if (type !== 4 && type !== 6) {\n                return false;\n            }\n            if (addr == null) {\n                return false;\n            }\n            const isPrivate = (0,_libp2p_utils_private_ip__WEBPACK_IMPORTED_MODULE_5__.isPrivateIp)(addr);\n            if (isPrivate == null) {\n                // not an ip address\n                return false;\n            }\n            return isPrivate;\n        })\n    };\n}\nfunction passthroughMapper(info) {\n    return info;\n}\n/**\n * Creates a DHT ID by hashing a given Uint8Array\n */\nasync function convertBuffer(buf) {\n    const multihash = await multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_1__.sha256.digest(buf);\n    return multihash.digest;\n}\n/**\n * Creates a DHT ID by hashing a Peer ID\n */\nasync function convertPeerId(peerId) {\n    return convertBuffer(peerId.toBytes());\n}\n/**\n * Convert a Uint8Array to their SHA2-256 hash\n */\nfunction bufferToKey(buf) {\n    return new interface_datastore_key__WEBPACK_IMPORTED_MODULE_0__.Key('/' + (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)(buf, 'base32'), false);\n}\n/**\n * Convert a Uint8Array to their SHA2-256 hash\n */\nfunction bufferToRecordKey(buf) {\n    return new interface_datastore_key__WEBPACK_IMPORTED_MODULE_0__.Key(`${_constants_js__WEBPACK_IMPORTED_MODULE_6__.RECORD_KEY_PREFIX}/${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)(buf, 'base32')}`, false);\n}\n/**\n * Generate the key for a public key.\n */\nfunction keyForPublicKey(peer) {\n    return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_2__.concat)([\n        PK_PREFIX,\n        peer.toBytes()\n    ]);\n}\nfunction isPublicKeyKey(key) {\n    return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)(key.subarray(0, 4)) === '/pk/';\n}\nfunction isIPNSKey(key) {\n    return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)(key.subarray(0, 4)) === '/ipns/';\n}\nfunction fromPublicKeyKey(key) {\n    return (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_7__.peerIdFromBytes)(key.subarray(4));\n}\n/**\n * Create a new put record, encodes and signs it if enabled\n */\nfunction createPutRecord(key, value) {\n    const timeReceived = new Date();\n    const rec = new _libp2p_record__WEBPACK_IMPORTED_MODULE_8__.Libp2pRecord(key, value, timeReceived);\n    return rec.serialize();\n}\nfunction debounce(callback, wait = 100) {\n    let timeout;\n    return () => {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => { callback(); }, wait);\n    };\n}\n// see https://github.com/multiformats/multiaddr/blob/master/protocols.csv\nconst P2P_CIRCUIT_CODE = 290;\nconst DNS4_CODE = 54;\nconst DNS6_CODE = 55;\nconst DNSADDR_CODE = 56;\nconst IP4_CODE = 4;\nconst IP6_CODE = 41;\nfunction multiaddrIsPublic(multiaddr) {\n    const tuples = multiaddr.stringTuples();\n    // p2p-circuit should not enable server mode\n    for (const tuple of tuples) {\n        if (tuple[0] === P2P_CIRCUIT_CODE) {\n            return false;\n        }\n    }\n    // dns4 or dns6 or dnsaddr\n    if (tuples[0][0] === DNS4_CODE || tuples[0][0] === DNS6_CODE || tuples[0][0] === DNSADDR_CODE) {\n        return true;\n    }\n    // ip4 or ip6\n    if (tuples[0][0] === IP4_CODE || tuples[0][0] === IP6_CODE) {\n        const result = (0,_libp2p_utils_private_ip__WEBPACK_IMPORTED_MODULE_5__.isPrivateIp)(`${tuples[0][1]}`);\n        const isPublic = result == null || !result;\n        return isPublic;\n    }\n    return false;\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/kad-dht/dist/src/utils.js?");

/***/ }),

/***/ "./node_modules/@libp2p/keychain/dist/src/errors.js":
/*!**********************************************************!*\
  !*** ./node_modules/@libp2p/keychain/dist/src/errors.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codes: () => (/* binding */ codes)\n/* harmony export */ });\nvar codes;\n(function (codes) {\n    codes[\"ERR_INVALID_PARAMETERS\"] = \"ERR_INVALID_PARAMETERS\";\n    codes[\"ERR_INVALID_KEY_NAME\"] = \"ERR_INVALID_KEY_NAME\";\n    codes[\"ERR_INVALID_KEY_TYPE\"] = \"ERR_INVALID_KEY_TYPE\";\n    codes[\"ERR_KEY_ALREADY_EXISTS\"] = \"ERR_KEY_ALREADY_EXISTS\";\n    codes[\"ERR_INVALID_KEY_SIZE\"] = \"ERR_INVALID_KEY_SIZE\";\n    codes[\"ERR_KEY_NOT_FOUND\"] = \"ERR_KEY_NOT_FOUND\";\n    codes[\"ERR_OLD_KEY_NAME_INVALID\"] = \"ERR_OLD_KEY_NAME_INVALID\";\n    codes[\"ERR_NEW_KEY_NAME_INVALID\"] = \"ERR_NEW_KEY_NAME_INVALID\";\n    codes[\"ERR_PASSWORD_REQUIRED\"] = \"ERR_PASSWORD_REQUIRED\";\n    codes[\"ERR_PEM_REQUIRED\"] = \"ERR_PEM_REQUIRED\";\n    codes[\"ERR_CANNOT_READ_KEY\"] = \"ERR_CANNOT_READ_KEY\";\n    codes[\"ERR_MISSING_PRIVATE_KEY\"] = \"ERR_MISSING_PRIVATE_KEY\";\n    codes[\"ERR_INVALID_OLD_PASS_TYPE\"] = \"ERR_INVALID_OLD_PASS_TYPE\";\n    codes[\"ERR_INVALID_NEW_PASS_TYPE\"] = \"ERR_INVALID_NEW_PASS_TYPE\";\n    codes[\"ERR_INVALID_PASS_LENGTH\"] = \"ERR_INVALID_PASS_LENGTH\";\n})(codes || (codes = {}));\n//# sourceMappingURL=errors.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/keychain/dist/src/errors.js?");

/***/ }),

/***/ "./node_modules/@libp2p/keychain/dist/src/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@libp2p/keychain/dist/src/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keychain: () => (/* binding */ keychain)\n/* harmony export */ });\n/* harmony import */ var _keychain_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keychain.js */ \"./node_modules/@libp2p/keychain/dist/src/keychain.js\");\n/**\n * @packageDocumentation\n *\n * - Manages the lifecycle of a key\n * - Keys are encrypted at rest\n * - Enforces the use of safe key names\n * - Uses encrypted PKCS 8 for key storage\n * - Uses PBKDF2 for a \"stetched\" key encryption key\n * - Enforces NIST SP 800-131A and NIST SP 800-132\n * - Delays reporting errors to slow down brute force attacks\n *\n * ## KeyInfo\n *\n * The key management and naming service API all return a `KeyInfo` object.  The `id` is a universally unique identifier for the key.  The `name` is local to the key chain.\n *\n * ```JSON\n * {\n *   \"name\": \"rsa-key\",\n *   \"id\": \"QmYWYSUZ4PV6MRFYpdtEDJBiGs4UrmE6g8wmAWSePekXVW\"\n * }\n * ```\n *\n * The **key id** is the SHA-256 [multihash](https://github.com/multiformats/multihash) of its public key.\n *\n * The *public key* is a [protobuf encoding](https://github.com/libp2p/js-libp2p/blob/main/packages/crypto/src/keys/keys.proto.js) containing a type and the [DER encoding](https://en.wikipedia.org/wiki/X.690) of the PKCS [SubjectPublicKeyInfo](https://www.ietf.org/rfc/rfc3279.txt).\n *\n * ## Private key storage\n *\n * A private key is stored as an encrypted PKCS 8 structure in the PEM format. It is protected by a key generated from the key chain's *passPhrase* using **PBKDF2**.\n *\n * The default options for generating the derived encryption key are in the `dek` object.  This, along with the passPhrase, is the input to a `PBKDF2` function.\n *\n * ```TypeScript\n * const defaultOptions = {\n *   // See https://cryptosense.com/parameter-choice-for-pbkdf2/\n *   dek: {\n *     keyLength: 512 / 8,\n *     iterationCount: 1000,\n *     salt: 'at least 16 characters long',\n *     hash: 'sha2-512'\n *   }\n * }\n * ```\n *\n * ![key storage](./doc/private-key.png?raw=true)\n *\n * ## Physical storage\n *\n * The actual physical storage of an encrypted key is left to implementations of [interface-datastore](https://github.com/ipfs/interface-datastore/).\n *\n * A key benefit is that now the key chain can be used in browser with the [js-datastore-level](https://github.com/ipfs/js-datastore-level) implementation.\n */\n\nfunction keychain(init = {}) {\n    return (components) => {\n        return new _keychain_js__WEBPACK_IMPORTED_MODULE_0__.DefaultKeychain(components, init);\n    };\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/keychain/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/keychain/dist/src/keychain.js":
/*!************************************************************!*\
  !*** ./node_modules/@libp2p/keychain/dist/src/keychain.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultKeychain: () => (/* binding */ DefaultKeychain)\n/* harmony export */ });\n/* harmony import */ var _libp2p_crypto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/crypto */ \"./node_modules/@libp2p/crypto/dist/src/pbkdf2.js\");\n/* harmony import */ var _libp2p_crypto__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/crypto */ \"./node_modules/@libp2p/crypto/dist/src/random-bytes.js\");\n/* harmony import */ var _libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @libp2p/crypto/keys */ \"./node_modules/@libp2p/crypto/dist/src/keys/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var interface_datastore_key__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! interface-datastore/key */ \"./node_modules/interface-datastore/dist/src/key.js\");\n/* harmony import */ var merge_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! merge-options */ \"./node_modules/merge-options/index.mjs\");\n/* harmony import */ var sanitize_filename__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sanitize-filename */ \"./node_modules/sanitize-filename/index.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/@libp2p/keychain/dist/src/errors.js\");\n/* eslint max-nested-callbacks: [\"error\", 5] */\n\n\n\n\n\n\n\n\n\n\nconst keyPrefix = '/pkcs8/';\nconst infoPrefix = '/info/';\nconst privates = new WeakMap();\n// NIST SP 800-132\nconst NIST = {\n    minKeyLength: 112 / 8,\n    minSaltLength: 128 / 8,\n    minIterationCount: 1000\n};\nconst defaultOptions = {\n    // See https://cryptosense.com/parametesr-choice-for-pbkdf2/\n    dek: {\n        keyLength: 512 / 8,\n        iterationCount: 10000,\n        salt: 'you should override this value with a crypto secure random number',\n        hash: 'sha2-512'\n    }\n};\nfunction validateKeyName(name) {\n    if (name == null) {\n        return false;\n    }\n    if (typeof name !== 'string') {\n        return false;\n    }\n    return name === sanitize_filename__WEBPACK_IMPORTED_MODULE_2__(name.trim()) && name.length > 0;\n}\n/**\n * Throws an error after a delay\n *\n * This assumes than an error indicates that the keychain is under attack. Delay returning an\n * error to make brute force attacks harder.\n */\nasync function randomDelay() {\n    const min = 200;\n    const max = 1000;\n    const delay = Math.random() * (max - min) + min;\n    await new Promise(resolve => setTimeout(resolve, delay));\n}\n/**\n * Converts a key name into a datastore name\n */\nfunction DsName(name) {\n    return new interface_datastore_key__WEBPACK_IMPORTED_MODULE_0__.Key(keyPrefix + name);\n}\n/**\n * Converts a key name into a datastore info name\n */\nfunction DsInfoName(name) {\n    return new interface_datastore_key__WEBPACK_IMPORTED_MODULE_0__.Key(infoPrefix + name);\n}\n/**\n * Manages the lifecycle of a key. Keys are encrypted at rest using PKCS #8.\n *\n * A key in the store has two entries\n * - '/info/*key-name*', contains the KeyInfo for the key\n * - '/pkcs8/*key-name*', contains the PKCS #8 for the key\n *\n */\nclass DefaultKeychain {\n    components;\n    init;\n    log;\n    /**\n     * Creates a new instance of a key chain\n     */\n    constructor(components, init) {\n        this.components = components;\n        this.log = components.logger.forComponent('libp2p:keychain');\n        this.init = (0,merge_options__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(defaultOptions, init);\n        // Enforce NIST SP 800-132\n        if (this.init.pass != null && this.init.pass?.length < 20) {\n            throw new Error('pass must be least 20 characters');\n        }\n        if (this.init.dek?.keyLength != null && this.init.dek.keyLength < NIST.minKeyLength) {\n            throw new Error(`dek.keyLength must be least ${NIST.minKeyLength} bytes`);\n        }\n        if (this.init.dek?.salt?.length != null && this.init.dek.salt.length < NIST.minSaltLength) {\n            throw new Error(`dek.saltLength must be least ${NIST.minSaltLength} bytes`);\n        }\n        if (this.init.dek?.iterationCount != null && this.init.dek.iterationCount < NIST.minIterationCount) {\n            throw new Error(`dek.iterationCount must be least ${NIST.minIterationCount}`);\n        }\n        const dek = this.init.pass != null && this.init.dek?.salt != null\n            ? (0,_libp2p_crypto__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this.init.pass, this.init.dek?.salt, this.init.dek?.iterationCount, this.init.dek?.keyLength, this.init.dek?.hash)\n            : '';\n        privates.set(this, { dek });\n    }\n    /**\n     * Generates the options for a keychain.  A random salt is produced.\n     *\n     * @returns {object}\n     */\n    static generateOptions() {\n        const options = Object.assign({}, defaultOptions);\n        const saltLength = Math.ceil(NIST.minSaltLength / 3) * 3; // no base64 padding\n        options.dek.salt = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)((0,_libp2p_crypto__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(saltLength), 'base64');\n        return options;\n    }\n    /**\n     * Gets an object that can encrypt/decrypt protected data.\n     * The default options for a keychain.\n     *\n     * @returns {object}\n     */\n    static get options() {\n        return defaultOptions;\n    }\n    /**\n     * Create a new key.\n     *\n     * @param {string} name - The local key name; cannot already exist.\n     * @param {string} type - One of the key types; 'rsa'.\n     * @param {number} [size = 2048] - The key size in bits. Used for rsa keys only\n     */\n    async createKey(name, type, size = 2048) {\n        if (!validateKeyName(name) || name === 'self') {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('Invalid key name', _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_KEY_NAME);\n        }\n        if (typeof type !== 'string') {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('Invalid key type', _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_KEY_TYPE);\n        }\n        const dsname = DsName(name);\n        const exists = await this.components.datastore.has(dsname);\n        if (exists) {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('Key name already exists', _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_KEY_ALREADY_EXISTS);\n        }\n        switch (type.toLowerCase()) {\n            case 'rsa':\n                if (!Number.isSafeInteger(size) || size < 2048) {\n                    await randomDelay();\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('Invalid RSA key size', _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_KEY_SIZE);\n                }\n                break;\n            default:\n                break;\n        }\n        let keyInfo;\n        try {\n            const keypair = await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_9__.generateKeyPair)(type, size);\n            const kid = await keypair.id();\n            const cached = privates.get(this);\n            if (cached == null) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('dek missing', _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_PARAMETERS);\n            }\n            const dek = cached.dek;\n            const pem = await keypair.export(dek);\n            keyInfo = {\n                name,\n                id: kid\n            };\n            const batch = this.components.datastore.batch();\n            batch.put(dsname, (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(pem));\n            batch.put(DsInfoName(name), (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(JSON.stringify(keyInfo)));\n            await batch.commit();\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n        return keyInfo;\n    }\n    /**\n     * List all the keys.\n     *\n     * @returns {Promise<KeyInfo[]>}\n     */\n    async listKeys() {\n        const query = {\n            prefix: infoPrefix\n        };\n        const info = [];\n        for await (const value of this.components.datastore.query(query)) {\n            info.push(JSON.parse((0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)(value.value)));\n        }\n        return info;\n    }\n    /**\n     * Find a key by it's id\n     */\n    async findKeyById(id) {\n        try {\n            const keys = await this.listKeys();\n            const key = keys.find((k) => k.id === id);\n            if (key == null) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Key with id '${id}' does not exist.`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_KEY_NOT_FOUND);\n            }\n            return key;\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n    }\n    /**\n     * Find a key by it's name.\n     *\n     * @param {string} name - The local key name.\n     * @returns {Promise<KeyInfo>}\n     */\n    async findKeyByName(name) {\n        if (!validateKeyName(name)) {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Invalid key name '${name}'`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_KEY_NAME);\n        }\n        const dsname = DsInfoName(name);\n        try {\n            const res = await this.components.datastore.get(dsname);\n            return JSON.parse((0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)(res));\n        }\n        catch (err) {\n            await randomDelay();\n            this.log.error(err);\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Key '${name}' does not exist.`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_KEY_NOT_FOUND);\n        }\n    }\n    /**\n     * Remove an existing key.\n     *\n     * @param {string} name - The local key name; must already exist.\n     * @returns {Promise<KeyInfo>}\n     */\n    async removeKey(name) {\n        if (!validateKeyName(name) || name === 'self') {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Invalid key name '${name}'`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_KEY_NAME);\n        }\n        const dsname = DsName(name);\n        const keyInfo = await this.findKeyByName(name);\n        const batch = this.components.datastore.batch();\n        batch.delete(dsname);\n        batch.delete(DsInfoName(name));\n        await batch.commit();\n        return keyInfo;\n    }\n    /**\n     * Rename a key\n     *\n     * @param {string} oldName - The old local key name; must already exist.\n     * @param {string} newName - The new local key name; must not already exist.\n     * @returns {Promise<KeyInfo>}\n     */\n    async renameKey(oldName, newName) {\n        if (!validateKeyName(oldName) || oldName === 'self') {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Invalid old key name '${oldName}'`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_OLD_KEY_NAME_INVALID);\n        }\n        if (!validateKeyName(newName) || newName === 'self') {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Invalid new key name '${newName}'`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_NEW_KEY_NAME_INVALID);\n        }\n        const oldDsname = DsName(oldName);\n        const newDsname = DsName(newName);\n        const oldInfoName = DsInfoName(oldName);\n        const newInfoName = DsInfoName(newName);\n        const exists = await this.components.datastore.has(newDsname);\n        if (exists) {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Key '${newName}' already exists`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_KEY_ALREADY_EXISTS);\n        }\n        try {\n            const pem = await this.components.datastore.get(oldDsname);\n            const res = await this.components.datastore.get(oldInfoName);\n            const keyInfo = JSON.parse((0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)(res));\n            keyInfo.name = newName;\n            const batch = this.components.datastore.batch();\n            batch.put(newDsname, pem);\n            batch.put(newInfoName, (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(JSON.stringify(keyInfo)));\n            batch.delete(oldDsname);\n            batch.delete(oldInfoName);\n            await batch.commit();\n            return keyInfo;\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n    }\n    /**\n     * Export an existing key as a PEM encrypted PKCS #8 string\n     */\n    async exportKey(name, password) {\n        if (!validateKeyName(name)) {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Invalid key name '${name}'`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_KEY_NAME);\n        }\n        if (password == null) {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('Password is required', _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_PASSWORD_REQUIRED);\n        }\n        const dsname = DsName(name);\n        try {\n            const res = await this.components.datastore.get(dsname);\n            const pem = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)(res);\n            const cached = privates.get(this);\n            if (cached == null) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('dek missing', _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_PARAMETERS);\n            }\n            const dek = cached.dek;\n            const privateKey = await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_9__.importKey)(pem, dek);\n            const keyString = await privateKey.export(password);\n            return keyString;\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n    }\n    /**\n     * Export an existing key as a PeerId\n     */\n    async exportPeerId(name) {\n        const password = 'temporary-password';\n        const pem = await this.exportKey(name, password);\n        const privateKey = await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_9__.importKey)(pem, password);\n        return (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_10__.peerIdFromKeys)(privateKey.public.bytes, privateKey.bytes);\n    }\n    /**\n     * Import a new key from a PEM encoded PKCS #8 string\n     *\n     * @param {string} name - The local key name; must not already exist.\n     * @param {string} pem - The PEM encoded PKCS #8 string\n     * @param {string} password - The password.\n     * @returns {Promise<KeyInfo>}\n     */\n    async importKey(name, pem, password) {\n        if (!validateKeyName(name) || name === 'self') {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Invalid key name '${name}'`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_KEY_NAME);\n        }\n        if (pem == null) {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('PEM encoded key is required', _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_PEM_REQUIRED);\n        }\n        const dsname = DsName(name);\n        const exists = await this.components.datastore.has(dsname);\n        if (exists) {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Key '${name}' already exists`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_KEY_ALREADY_EXISTS);\n        }\n        let privateKey;\n        try {\n            privateKey = await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_9__.importKey)(pem, password);\n        }\n        catch (err) {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('Cannot read the key, most likely the password is wrong', _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_CANNOT_READ_KEY);\n        }\n        let kid;\n        try {\n            kid = await privateKey.id();\n            const cached = privates.get(this);\n            if (cached == null) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('dek missing', _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_PARAMETERS);\n            }\n            const dek = cached.dek;\n            pem = await privateKey.export(dek);\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n        const keyInfo = {\n            name,\n            id: kid\n        };\n        const batch = this.components.datastore.batch();\n        batch.put(dsname, (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(pem));\n        batch.put(DsInfoName(name), (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(JSON.stringify(keyInfo)));\n        await batch.commit();\n        return keyInfo;\n    }\n    /**\n     * Import a peer key\n     */\n    async importPeer(name, peer) {\n        try {\n            if (!validateKeyName(name)) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Invalid key name '${name}'`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_KEY_NAME);\n            }\n            if (peer == null) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('PeerId is required', _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_MISSING_PRIVATE_KEY);\n            }\n            if (peer.privateKey == null) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('PeerId.privKey is required', _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_MISSING_PRIVATE_KEY);\n            }\n            const privateKey = await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_9__.unmarshalPrivateKey)(peer.privateKey);\n            const dsname = DsName(name);\n            const exists = await this.components.datastore.has(dsname);\n            if (exists) {\n                await randomDelay();\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Key '${name}' already exists`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_KEY_ALREADY_EXISTS);\n            }\n            const cached = privates.get(this);\n            if (cached == null) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('dek missing', _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_PARAMETERS);\n            }\n            const dek = cached.dek;\n            const pem = await privateKey.export(dek);\n            const keyInfo = {\n                name,\n                id: peer.toString()\n            };\n            const batch = this.components.datastore.batch();\n            batch.put(dsname, (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(pem));\n            batch.put(DsInfoName(name), (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(JSON.stringify(keyInfo)));\n            await batch.commit();\n            return keyInfo;\n        }\n        catch (err) {\n            await randomDelay();\n            throw err;\n        }\n    }\n    /**\n     * Gets the private key as PEM encoded PKCS #8 string\n     */\n    async getPrivateKey(name) {\n        if (!validateKeyName(name)) {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Invalid key name '${name}'`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_KEY_NAME);\n        }\n        try {\n            const dsname = DsName(name);\n            const res = await this.components.datastore.get(dsname);\n            return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)(res);\n        }\n        catch (err) {\n            await randomDelay();\n            this.log.error(err);\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Key '${name}' does not exist.`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_KEY_NOT_FOUND);\n        }\n    }\n    /**\n     * Rotate keychain password and re-encrypt all associated keys\n     */\n    async rotateKeychainPass(oldPass, newPass) {\n        if (typeof oldPass !== 'string') {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Invalid old pass type '${typeof oldPass}'`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_OLD_PASS_TYPE);\n        }\n        if (typeof newPass !== 'string') {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Invalid new pass type '${typeof newPass}'`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_NEW_PASS_TYPE);\n        }\n        if (newPass.length < 20) {\n            await randomDelay();\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Invalid pass length ${newPass.length}`, _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_PASS_LENGTH);\n        }\n        this.log('recreating keychain');\n        const cached = privates.get(this);\n        if (cached == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('dek missing', _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_INVALID_PARAMETERS);\n        }\n        const oldDek = cached.dek;\n        this.init.pass = newPass;\n        const newDek = newPass != null && this.init.dek?.salt != null\n            ? (0,_libp2p_crypto__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(newPass, this.init.dek.salt, this.init.dek?.iterationCount, this.init.dek?.keyLength, this.init.dek?.hash)\n            : '';\n        privates.set(this, { dek: newDek });\n        const keys = await this.listKeys();\n        for (const key of keys) {\n            const res = await this.components.datastore.get(DsName(key.name));\n            const pem = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_4__.toString)(res);\n            const privateKey = await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_9__.importKey)(pem, oldDek);\n            const password = newDek.toString();\n            const keyAsPEM = await privateKey.export(password);\n            // Update stored key\n            const batch = this.components.datastore.batch();\n            const keyInfo = {\n                name: key.name,\n                id: key.id\n            };\n            batch.put(DsName(key.name), (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(keyAsPEM));\n            batch.put(DsInfoName(key.name), (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(JSON.stringify(keyInfo)));\n            await batch.commit();\n        }\n        this.log('keychain reconstructed');\n    }\n}\n//# sourceMappingURL=keychain.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/keychain/dist/src/keychain.js?");

/***/ }),

/***/ "./node_modules/@libp2p/mplex/dist/src/decode.js":
/*!*******************************************************!*\
  !*** ./node_modules/@libp2p/mplex/dist/src/decode.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Decoder: () => (/* binding */ Decoder),\n/* harmony export */   MAX_MSG_QUEUE_SIZE: () => (/* binding */ MAX_MSG_QUEUE_SIZE),\n/* harmony export */   MAX_MSG_SIZE: () => (/* binding */ MAX_MSG_SIZE)\n/* harmony export */ });\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var _message_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./message-types.js */ \"./node_modules/@libp2p/mplex/dist/src/message-types.js\");\n\n\nconst MAX_MSG_SIZE = 1 << 20; // 1MB\nconst MAX_MSG_QUEUE_SIZE = 4 << 20; // 4MB\nclass Decoder {\n    _buffer;\n    _headerInfo;\n    _maxMessageSize;\n    _maxUnprocessedMessageQueueSize;\n    constructor(maxMessageSize = MAX_MSG_SIZE, maxUnprocessedMessageQueueSize = MAX_MSG_QUEUE_SIZE) {\n        this._buffer = new uint8arraylist__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayList();\n        this._headerInfo = null;\n        this._maxMessageSize = maxMessageSize;\n        this._maxUnprocessedMessageQueueSize = maxUnprocessedMessageQueueSize;\n    }\n    write(chunk) {\n        if (chunk == null || chunk.length === 0) {\n            return [];\n        }\n        this._buffer.append(chunk);\n        if (this._buffer.byteLength > this._maxUnprocessedMessageQueueSize) {\n            throw Object.assign(new Error('unprocessed message queue size too large!'), { code: 'ERR_MSG_QUEUE_TOO_BIG' });\n        }\n        const msgs = [];\n        while (this._buffer.length !== 0) {\n            if (this._headerInfo == null) {\n                try {\n                    this._headerInfo = this._decodeHeader(this._buffer);\n                }\n                catch (err) {\n                    if (err.code === 'ERR_MSG_TOO_BIG') {\n                        throw err;\n                    }\n                    break; // We haven't received enough data yet\n                }\n            }\n            const { id, type, length, offset } = this._headerInfo;\n            const bufferedDataLength = this._buffer.length - offset;\n            if (bufferedDataLength < length) {\n                break; // not enough data yet\n            }\n            const msg = {\n                id,\n                type\n            };\n            if (type === _message_types_js__WEBPACK_IMPORTED_MODULE_1__.MessageTypes.NEW_STREAM || type === _message_types_js__WEBPACK_IMPORTED_MODULE_1__.MessageTypes.MESSAGE_INITIATOR || type === _message_types_js__WEBPACK_IMPORTED_MODULE_1__.MessageTypes.MESSAGE_RECEIVER) {\n                msg.data = this._buffer.sublist(offset, offset + length);\n            }\n            msgs.push(msg);\n            this._buffer.consume(offset + length);\n            this._headerInfo = null;\n        }\n        return msgs;\n    }\n    /**\n     * Attempts to decode the message header from the buffer\n     */\n    _decodeHeader(data) {\n        const { value: h, offset } = readVarInt(data);\n        const { value: length, offset: end } = readVarInt(data, offset);\n        const type = h & 7;\n        // @ts-expect-error h is a number not a CODE\n        if (_message_types_js__WEBPACK_IMPORTED_MODULE_1__.MessageTypeNames[type] == null) {\n            throw new Error(`Invalid type received: ${type}`);\n        }\n        // test message type varint + data length\n        if (length > this._maxMessageSize) {\n            throw Object.assign(new Error('message size too large!'), { code: 'ERR_MSG_TOO_BIG' });\n        }\n        // @ts-expect-error h is a number not a CODE\n        return { id: h >> 3, type, offset: offset + end, length };\n    }\n}\nconst MSB = 0x80;\nconst REST = 0x7F;\nfunction readVarInt(buf, offset = 0) {\n    let res = 0;\n    let shift = 0;\n    let counter = offset;\n    let b;\n    const l = buf.length;\n    do {\n        if (counter >= l || shift > 49) {\n            offset = 0;\n            throw new RangeError('Could not decode varint');\n        }\n        b = buf.get(counter++);\n        res += shift < 28\n            ? (b & REST) << shift\n            : (b & REST) * Math.pow(2, shift);\n        shift += 7;\n    } while (b >= MSB);\n    offset = counter - offset;\n    return {\n        value: res,\n        offset\n    };\n}\n//# sourceMappingURL=decode.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/mplex/dist/src/decode.js?");

/***/ }),

/***/ "./node_modules/@libp2p/mplex/dist/src/encode.js":
/*!*******************************************************!*\
  !*** ./node_modules/@libp2p/mplex/dist/src/encode.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\n/* harmony import */ var uint8_varint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8-varint */ \"./node_modules/uint8-varint/dist/src/index.js\");\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/alloc */ \"./node_modules/uint8arrays/dist/src/alloc.js\");\n/* harmony import */ var _message_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./message-types.js */ \"./node_modules/@libp2p/mplex/dist/src/message-types.js\");\n\n\n\n\nconst POOL_SIZE = 10 * 1024;\nclass Encoder {\n    _pool;\n    _poolOffset;\n    constructor() {\n        this._pool = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__.allocUnsafe)(POOL_SIZE);\n        this._poolOffset = 0;\n    }\n    /**\n     * Encodes the given message and adds it to the passed list\n     */\n    write(msg, list) {\n        const pool = this._pool;\n        let offset = this._poolOffset;\n        uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encode(msg.id << 3 | msg.type, pool, offset);\n        offset += uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encodingLength(msg.id << 3 | msg.type);\n        if ((msg.type === _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.NEW_STREAM || msg.type === _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.MESSAGE_INITIATOR || msg.type === _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.MESSAGE_RECEIVER) && msg.data != null) {\n            uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encode(msg.data.length, pool, offset);\n            offset += uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encodingLength(msg.data.length);\n        }\n        else {\n            uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encode(0, pool, offset);\n            offset += uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encodingLength(0);\n        }\n        const header = pool.subarray(this._poolOffset, offset);\n        if (POOL_SIZE - offset < 100) {\n            this._pool = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__.allocUnsafe)(POOL_SIZE);\n            this._poolOffset = 0;\n        }\n        else {\n            this._poolOffset = offset;\n        }\n        list.append(header);\n        if ((msg.type === _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.NEW_STREAM || msg.type === _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.MESSAGE_INITIATOR || msg.type === _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.MESSAGE_RECEIVER) && msg.data != null) {\n            list.append(msg.data);\n        }\n    }\n}\nconst encoder = new Encoder();\n/**\n * Encode and yield one or more messages\n */\nasync function* encode(source) {\n    for await (const message of source) {\n        const list = new uint8arraylist__WEBPACK_IMPORTED_MODULE_1__.Uint8ArrayList();\n        encoder.write(message, list);\n        yield list;\n    }\n}\n//# sourceMappingURL=encode.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/mplex/dist/src/encode.js?");

/***/ }),

/***/ "./node_modules/@libp2p/mplex/dist/src/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@libp2p/mplex/dist/src/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mplex: () => (/* binding */ mplex)\n/* harmony export */ });\n/* harmony import */ var _mplex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mplex.js */ \"./node_modules/@libp2p/mplex/dist/src/mplex.js\");\n/**\n * @packageDocumentation\n *\n * This is a [simple stream multiplexer(https://docs.libp2p.io/concepts/multiplex/mplex/) that has been deprecated.\n *\n * Please use [@chainsafe/libp2p-yamux](https://www.npmjs.com/package/@chainsafe/libp2p-yamux) instead.\n *\n * @example\n *\n * ```TypeScript\n * import { mplex } from '@libp2p/mplex'\n * import { pipe } from 'it-pipe'\n *\n * const factory = mplex()\n *\n * const muxer = factory.createStreamMuxer(components, {\n *   onStream: stream => { // Receive a duplex stream from the remote\n *     // ...receive data from the remote and optionally send data back\n *   },\n *   onStreamEnd: stream => {\n *     // ...handle any tracking you may need of stream closures\n *   }\n * })\n *\n * pipe(conn, muxer, conn) // conn is duplex connection to another peer\n *\n * const stream = muxer.newStream() // Create a new duplex stream to the remote\n *\n * // Use the duplex stream to send some data to the remote...\n * pipe([1, 2, 3], stream)\n * ```\n */\n\nclass Mplex {\n    protocol = '/mplex/6.7.0';\n    _init;\n    components;\n    constructor(components, init = {}) {\n        this.components = components;\n        this._init = init;\n    }\n    createStreamMuxer(init = {}) {\n        return new _mplex_js__WEBPACK_IMPORTED_MODULE_0__.MplexStreamMuxer(this.components, {\n            ...init,\n            ...this._init\n        });\n    }\n}\nfunction mplex(init = {}) {\n    return (components) => new Mplex(components, init);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/mplex/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/mplex/dist/src/message-types.js":
/*!**************************************************************!*\
  !*** ./node_modules/@libp2p/mplex/dist/src/message-types.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InitiatorMessageTypes: () => (/* binding */ InitiatorMessageTypes),\n/* harmony export */   MessageTypeNames: () => (/* binding */ MessageTypeNames),\n/* harmony export */   MessageTypes: () => (/* binding */ MessageTypes),\n/* harmony export */   ReceiverMessageTypes: () => (/* binding */ ReceiverMessageTypes)\n/* harmony export */ });\nvar MessageTypes;\n(function (MessageTypes) {\n    MessageTypes[MessageTypes[\"NEW_STREAM\"] = 0] = \"NEW_STREAM\";\n    MessageTypes[MessageTypes[\"MESSAGE_RECEIVER\"] = 1] = \"MESSAGE_RECEIVER\";\n    MessageTypes[MessageTypes[\"MESSAGE_INITIATOR\"] = 2] = \"MESSAGE_INITIATOR\";\n    MessageTypes[MessageTypes[\"CLOSE_RECEIVER\"] = 3] = \"CLOSE_RECEIVER\";\n    MessageTypes[MessageTypes[\"CLOSE_INITIATOR\"] = 4] = \"CLOSE_INITIATOR\";\n    MessageTypes[MessageTypes[\"RESET_RECEIVER\"] = 5] = \"RESET_RECEIVER\";\n    MessageTypes[MessageTypes[\"RESET_INITIATOR\"] = 6] = \"RESET_INITIATOR\";\n})(MessageTypes || (MessageTypes = {}));\nconst MessageTypeNames = Object.freeze({\n    0: 'NEW_STREAM',\n    1: 'MESSAGE_RECEIVER',\n    2: 'MESSAGE_INITIATOR',\n    3: 'CLOSE_RECEIVER',\n    4: 'CLOSE_INITIATOR',\n    5: 'RESET_RECEIVER',\n    6: 'RESET_INITIATOR'\n});\nconst InitiatorMessageTypes = Object.freeze({\n    NEW_STREAM: MessageTypes.NEW_STREAM,\n    MESSAGE: MessageTypes.MESSAGE_INITIATOR,\n    CLOSE: MessageTypes.CLOSE_INITIATOR,\n    RESET: MessageTypes.RESET_INITIATOR\n});\nconst ReceiverMessageTypes = Object.freeze({\n    MESSAGE: MessageTypes.MESSAGE_RECEIVER,\n    CLOSE: MessageTypes.CLOSE_RECEIVER,\n    RESET: MessageTypes.RESET_RECEIVER\n});\n//# sourceMappingURL=message-types.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/mplex/dist/src/message-types.js?");

/***/ }),

/***/ "./node_modules/@libp2p/mplex/dist/src/mplex.js":
/*!******************************************************!*\
  !*** ./node_modules/@libp2p/mplex/dist/src/mplex.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MplexStreamMuxer: () => (/* binding */ MplexStreamMuxer)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_utils_close_source__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/utils/close-source */ \"./node_modules/@libp2p/utils/dist/src/close-source.js\");\n/* harmony import */ var _libp2p_utils_rate_limiter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/utils/rate-limiter */ \"./node_modules/@libp2p/utils/dist/src/rate-limiter.js\");\n/* harmony import */ var it_pipe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-pipe */ \"./node_modules/it-pipe/dist/src/index.js\");\n/* harmony import */ var it_pushable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-pushable */ \"./node_modules/it-pushable/dist/src/index.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays */ \"./node_modules/uint8arrays/dist/src/index.js\");\n/* harmony import */ var _decode_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./decode.js */ \"./node_modules/@libp2p/mplex/dist/src/decode.js\");\n/* harmony import */ var _encode_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./encode.js */ \"./node_modules/@libp2p/mplex/dist/src/encode.js\");\n/* harmony import */ var _message_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./message-types.js */ \"./node_modules/@libp2p/mplex/dist/src/message-types.js\");\n/* harmony import */ var _stream_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stream.js */ \"./node_modules/@libp2p/mplex/dist/src/stream.js\");\n\n\n\n\n\n\n\n\n\n\nconst MAX_STREAMS_INBOUND_STREAMS_PER_CONNECTION = 1024;\nconst MAX_STREAMS_OUTBOUND_STREAMS_PER_CONNECTION = 1024;\nconst MAX_STREAM_BUFFER_SIZE = 1024 * 1024 * 4; // 4MB\nconst DISCONNECT_THRESHOLD = 5;\nconst CLOSE_TIMEOUT = 500;\nfunction printMessage(msg) {\n    const output = {\n        ...msg,\n        type: `${_message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypeNames[msg.type]} (${msg.type})`\n    };\n    if (msg.type === _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.NEW_STREAM) {\n        output.data = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_2__.toString)(msg.data instanceof Uint8Array ? msg.data : msg.data.subarray());\n    }\n    if (msg.type === _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.MESSAGE_INITIATOR || msg.type === _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.MESSAGE_RECEIVER) {\n        output.data = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_2__.toString)(msg.data instanceof Uint8Array ? msg.data : msg.data.subarray(), 'base16');\n    }\n    return output;\n}\nclass MplexStreamMuxer {\n    protocol = '/mplex/6.7.0';\n    sink;\n    source;\n    log;\n    _streamId;\n    _streams;\n    _init;\n    _source;\n    closeController;\n    rateLimiter;\n    closeTimeout;\n    logger;\n    constructor(components, init) {\n        init = init ?? {};\n        this.log = components.logger.forComponent('libp2p:mplex');\n        this.logger = components.logger;\n        this._streamId = 0;\n        this._streams = {\n            /**\n             * Stream to ids map\n             */\n            initiators: new Map(),\n            /**\n             * Stream to ids map\n             */\n            receivers: new Map()\n        };\n        this._init = init;\n        this.closeTimeout = init.closeTimeout ?? CLOSE_TIMEOUT;\n        /**\n         * An iterable sink\n         */\n        this.sink = this._createSink();\n        /**\n         * An iterable source\n         */\n        this._source = (0,it_pushable__WEBPACK_IMPORTED_MODULE_1__.pushable)({\n            objectMode: true,\n            onEnd: () => {\n                // the source has ended, we can't write any more messages to gracefully\n                // close streams so all we can do is destroy them\n                for (const stream of this._streams.initiators.values()) {\n                    stream.destroy();\n                }\n                for (const stream of this._streams.receivers.values()) {\n                    stream.destroy();\n                }\n            }\n        });\n        this.source = (0,it_pipe__WEBPACK_IMPORTED_MODULE_0__.pipe)(this._source, source => (0,_encode_js__WEBPACK_IMPORTED_MODULE_4__.encode)(source));\n        /**\n         * Close controller\n         */\n        this.closeController = new AbortController();\n        this.rateLimiter = new _libp2p_utils_rate_limiter__WEBPACK_IMPORTED_MODULE_5__.RateLimiter({\n            points: init.disconnectThreshold ?? DISCONNECT_THRESHOLD,\n            duration: 1\n        });\n    }\n    /**\n     * Returns a Map of streams and their ids\n     */\n    get streams() {\n        // Inbound and Outbound streams may have the same ids, so we need to make those unique\n        const streams = [];\n        for (const stream of this._streams.initiators.values()) {\n            streams.push(stream);\n        }\n        for (const stream of this._streams.receivers.values()) {\n            streams.push(stream);\n        }\n        return streams;\n    }\n    /**\n     * Initiate a new stream with the given name. If no name is\n     * provided, the id of the stream will be used.\n     */\n    newStream(name) {\n        if (this.closeController.signal.aborted) {\n            throw new Error('Muxer already closed');\n        }\n        const id = this._streamId++;\n        name = name == null ? id.toString() : name.toString();\n        const registry = this._streams.initiators;\n        return this._newStream({ id, name, type: 'initiator', registry });\n    }\n    /**\n     * Close or abort all tracked streams and stop the muxer\n     */\n    async close(options) {\n        if (this.closeController.signal.aborted) {\n            return;\n        }\n        const signal = options?.signal ?? AbortSignal.timeout(this.closeTimeout);\n        try {\n            // try to gracefully close all streams\n            await Promise.all(this.streams.map(async (s) => s.close({\n                signal\n            })));\n            this._source.end();\n            // try to gracefully close the muxer\n            await this._source.onEmpty({\n                signal\n            });\n            this.closeController.abort();\n        }\n        catch (err) {\n            this.abort(err);\n        }\n    }\n    abort(err) {\n        if (this.closeController.signal.aborted) {\n            return;\n        }\n        this.streams.forEach(s => { s.abort(err); });\n        this.closeController.abort(err);\n    }\n    /**\n     * Called whenever an inbound stream is created\n     */\n    _newReceiverStream(options) {\n        const { id, name } = options;\n        const registry = this._streams.receivers;\n        return this._newStream({ id, name, type: 'receiver', registry });\n    }\n    _newStream(options) {\n        const { id, name, type, registry } = options;\n        this.log('new %s stream %s', type, id);\n        if (type === 'initiator' && this._streams.initiators.size === (this._init.maxOutboundStreams ?? MAX_STREAMS_OUTBOUND_STREAMS_PER_CONNECTION)) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__.CodeError('Too many outbound streams open', 'ERR_TOO_MANY_OUTBOUND_STREAMS');\n        }\n        if (registry.has(id)) {\n            throw new Error(`${type} stream ${id} already exists!`);\n        }\n        const send = async (msg) => {\n            if (this.log.enabled) {\n                this.log.trace('%s stream %s send', type, id, printMessage(msg));\n            }\n            this._source.push(msg);\n        };\n        const onEnd = () => {\n            this.log('%s stream with id %s and protocol %s ended', type, id, stream.protocol);\n            registry.delete(id);\n            if (this._init.onStreamEnd != null) {\n                this._init.onStreamEnd(stream);\n            }\n        };\n        const stream = (0,_stream_js__WEBPACK_IMPORTED_MODULE_7__.createStream)({ id, name, send, type, onEnd, maxMsgSize: this._init.maxMsgSize, logger: this.logger });\n        registry.set(id, stream);\n        return stream;\n    }\n    /**\n     * Creates a sink with an abortable source. Incoming messages will\n     * also have their size restricted. All messages will be varint decoded.\n     */\n    _createSink() {\n        const sink = async (source) => {\n            const abortListener = () => {\n                (0,_libp2p_utils_close_source__WEBPACK_IMPORTED_MODULE_8__.closeSource)(source, this.log);\n            };\n            this.closeController.signal.addEventListener('abort', abortListener);\n            try {\n                const decoder = new _decode_js__WEBPACK_IMPORTED_MODULE_9__.Decoder(this._init.maxMsgSize, this._init.maxUnprocessedMessageQueueSize);\n                for await (const chunk of source) {\n                    for (const msg of decoder.write(chunk)) {\n                        await this._handleIncoming(msg);\n                    }\n                }\n                this._source.end();\n            }\n            catch (err) {\n                this.log('error in sink', err);\n                this._source.end(err); // End the source with an error\n            }\n            finally {\n                this.closeController.signal.removeEventListener('abort', abortListener);\n            }\n        };\n        return sink;\n    }\n    async _handleIncoming(message) {\n        const { id, type } = message;\n        if (this.log.enabled) {\n            this.log.trace('incoming message', printMessage(message));\n        }\n        // Create a new stream?\n        if (message.type === _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.NEW_STREAM) {\n            if (this._streams.receivers.size === (this._init.maxInboundStreams ?? MAX_STREAMS_INBOUND_STREAMS_PER_CONNECTION)) {\n                this.log('too many inbound streams open');\n                // not going to allow this stream, send the reset message manually\n                // instead of setting it up just to tear it down\n                this._source.push({\n                    id,\n                    type: _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.RESET_RECEIVER\n                });\n                // if we've hit our stream limit, and the remote keeps trying to open\n                // more new streams, if they are doing this very quickly maybe they\n                // are attacking us and we should close the connection\n                try {\n                    await this.rateLimiter.consume('new-stream', 1);\n                }\n                catch {\n                    this.log('rate limit hit when opening too many new streams over the inbound stream limit - closing remote connection');\n                    // since there's no backpressure in mplex, the only thing we can really do to protect ourselves is close the connection\n                    this.abort(new Error('Too many open streams'));\n                    return;\n                }\n                return;\n            }\n            const stream = this._newReceiverStream({ id, name: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_2__.toString)(message.data instanceof Uint8Array ? message.data : message.data.subarray()) });\n            if (this._init.onIncomingStream != null) {\n                this._init.onIncomingStream(stream);\n            }\n            return;\n        }\n        const list = (type & 1) === 1 ? this._streams.initiators : this._streams.receivers;\n        const stream = list.get(id);\n        if (stream == null) {\n            this.log('missing stream %s for message type %s', id, _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypeNames[type]);\n            // if the remote keeps sending us messages for streams that have been\n            // closed or were never opened they may be attacking us so if they do\n            // this very quickly all we can do is close the connection\n            try {\n                await this.rateLimiter.consume('missing-stream', 1);\n            }\n            catch {\n                this.log('rate limit hit when receiving messages for streams that do not exist - closing remote connection');\n                // since there's no backpressure in mplex, the only thing we can really do to protect ourselves is close the connection\n                this.abort(new Error('Too many messages for missing streams'));\n                return;\n            }\n            return;\n        }\n        const maxBufferSize = this._init.maxStreamBufferSize ?? MAX_STREAM_BUFFER_SIZE;\n        try {\n            switch (type) {\n                case _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.MESSAGE_INITIATOR:\n                case _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.MESSAGE_RECEIVER:\n                    if (stream.sourceReadableLength() > maxBufferSize) {\n                        // Stream buffer has got too large, reset the stream\n                        this._source.push({\n                            id: message.id,\n                            type: type === _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.MESSAGE_INITIATOR ? _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.RESET_RECEIVER : _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.RESET_INITIATOR\n                        });\n                        // Inform the stream consumer they are not fast enough\n                        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__.CodeError('Input buffer full - increase Mplex maxBufferSize to accommodate slow consumers', 'ERR_STREAM_INPUT_BUFFER_FULL');\n                    }\n                    // We got data from the remote, push it into our local stream\n                    stream.sourcePush(message.data);\n                    break;\n                case _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.CLOSE_INITIATOR:\n                case _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.CLOSE_RECEIVER:\n                    // The remote has stopped writing, so we can stop reading\n                    stream.remoteCloseWrite();\n                    break;\n                case _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.RESET_INITIATOR:\n                case _message_types_js__WEBPACK_IMPORTED_MODULE_3__.MessageTypes.RESET_RECEIVER:\n                    // The remote has errored, stop reading and writing to the stream immediately\n                    stream.reset();\n                    break;\n                default:\n                    this.log('unknown message type %s', type);\n            }\n        }\n        catch (err) {\n            this.log.error('error while processing message', err);\n            stream.abort(err);\n        }\n    }\n}\n//# sourceMappingURL=mplex.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/mplex/dist/src/mplex.js?");

/***/ }),

/***/ "./node_modules/@libp2p/mplex/dist/src/stream.js":
/*!*******************************************************!*\
  !*** ./node_modules/@libp2p/mplex/dist/src/stream.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MplexStream: () => (/* binding */ MplexStream),\n/* harmony export */   createStream: () => (/* binding */ createStream)\n/* harmony export */ });\n/* harmony import */ var _libp2p_utils_abstract_stream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/utils/abstract-stream */ \"./node_modules/@libp2p/utils/dist/src/abstract-stream.js\");\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var _decode_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./decode.js */ \"./node_modules/@libp2p/mplex/dist/src/decode.js\");\n/* harmony import */ var _message_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./message-types.js */ \"./node_modules/@libp2p/mplex/dist/src/message-types.js\");\n\n\n\n\n\nclass MplexStream extends _libp2p_utils_abstract_stream__WEBPACK_IMPORTED_MODULE_2__.AbstractStream {\n    name;\n    streamId;\n    send;\n    types;\n    maxDataSize;\n    constructor(init) {\n        super(init);\n        this.types = init.direction === 'outbound' ? _message_types_js__WEBPACK_IMPORTED_MODULE_3__.InitiatorMessageTypes : _message_types_js__WEBPACK_IMPORTED_MODULE_3__.ReceiverMessageTypes;\n        this.send = init.send;\n        this.name = init.name;\n        this.streamId = init.streamId;\n        this.maxDataSize = init.maxDataSize;\n    }\n    async sendNewStream() {\n        await this.send({ id: this.streamId, type: _message_types_js__WEBPACK_IMPORTED_MODULE_3__.InitiatorMessageTypes.NEW_STREAM, data: new uint8arraylist__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayList((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(this.name)) });\n    }\n    async sendData(data) {\n        data = data.sublist();\n        while (data.byteLength > 0) {\n            const toSend = Math.min(data.byteLength, this.maxDataSize);\n            await this.send({\n                id: this.streamId,\n                type: this.types.MESSAGE,\n                data: data.sublist(0, toSend)\n            });\n            data.consume(toSend);\n        }\n    }\n    async sendReset() {\n        await this.send({ id: this.streamId, type: this.types.RESET });\n    }\n    async sendCloseWrite() {\n        await this.send({ id: this.streamId, type: this.types.CLOSE });\n    }\n    async sendCloseRead() {\n        // mplex does not support close read, only close write\n    }\n}\nfunction createStream(options) {\n    const { id, name, send, onEnd, type = 'initiator', maxMsgSize = _decode_js__WEBPACK_IMPORTED_MODULE_4__.MAX_MSG_SIZE } = options;\n    return new MplexStream({\n        id: type === 'initiator' ? (`i${id}`) : `r${id}`,\n        streamId: id,\n        name: `${name == null ? id : name}`,\n        direction: type === 'initiator' ? 'outbound' : 'inbound',\n        maxDataSize: maxMsgSize,\n        onEnd,\n        send,\n        log: options.logger.forComponent(`libp2p:mplex:stream:${type}:${id}`)\n    });\n}\n//# sourceMappingURL=stream.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/mplex/dist/src/stream.js?");

/***/ }),

/***/ "./node_modules/@libp2p/multistream-select/dist/src/constants.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@libp2p/multistream-select/dist/src/constants.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_PROTOCOL_LENGTH: () => (/* binding */ MAX_PROTOCOL_LENGTH),\n/* harmony export */   PROTOCOL_ID: () => (/* binding */ PROTOCOL_ID)\n/* harmony export */ });\nconst PROTOCOL_ID = '/multistream/1.0.0';\n// Conforming to go-libp2p\n// See https://github.com/multiformats/go-multistream/blob/master/multistream.go#L297\nconst MAX_PROTOCOL_LENGTH = 1024;\n//# sourceMappingURL=constants.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/multistream-select/dist/src/constants.js?");

/***/ }),

/***/ "./node_modules/@libp2p/multistream-select/dist/src/handle.js":
/*!********************************************************************!*\
  !*** ./node_modules/@libp2p/multistream-select/dist/src/handle.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handle: () => (/* binding */ handle)\n/* harmony export */ });\n/* harmony import */ var it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-length-prefixed */ \"./node_modules/it-length-prefixed/dist/src/index.js\");\n/* harmony import */ var it_length_prefixed_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-length-prefixed-stream */ \"./node_modules/it-length-prefixed-stream/dist/src/index.js\");\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@libp2p/multistream-select/dist/src/constants.js\");\n/* harmony import */ var _multistream_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./multistream.js */ \"./node_modules/@libp2p/multistream-select/dist/src/multistream.js\");\n\n\n\n\n\n\n/**\n * Handle multistream protocol selections for the given list of protocols.\n *\n * Note that after a protocol is handled `listener` can no longer be used.\n *\n * @param stream - A duplex iterable stream to listen on\n * @param protocols - A list of protocols (or single protocol) that this listener is able to speak.\n * @param options - an options object containing an AbortSignal and an optional boolean `writeBytes` - if this is true, `Uint8Array`s will be written into `duplex`, otherwise `Uint8ArrayList`s will\n * @returns A stream for the selected protocol and the protocol that was selected from the list of protocols provided to `select`\n * @example\n *\n * ```TypeScript\n * import { pipe } from 'it-pipe'\n * import * as mss from '@libp2p/multistream-select'\n * import { Mplex } from '@libp2p/mplex'\n *\n * const muxer = new Mplex({\n *   async onStream (muxedStream) {\n *   // mss.handle(handledProtocols)\n *   // Returns selected stream and protocol\n *   const { stream, protocol } = await mss.handle(muxedStream, [\n *     '/ipfs-dht/1.0.0',\n *     '/ipfs-bitswap/1.0.0'\n *   ])\n *\n *   // Typically here we'd call the handler function that was registered in\n *   // libp2p for the given protocol:\n *   // e.g. handlers[protocol].handler(stream)\n *   //\n *   // If protocol was /ipfs-dht/1.0.0 it might do something like this:\n *   // try {\n *   //   await pipe(\n *   //     dhtStream,\n *   //     source => (async function * () {\n *   //       for await (const chunk of source)\n *   //         // Incoming DHT data -> process and yield to respond\n *   //     })(),\n *   //     dhtStream\n *   //   )\n *   // } catch (err) {\n *   //   // Error in stream\n *   // }\n *   }\n * })\n * ```\n */\nasync function handle(stream, protocols, options) {\n    protocols = Array.isArray(protocols) ? protocols : [protocols];\n    options.log.trace('handle: available protocols %s', protocols);\n    const lp = (0,it_length_prefixed_stream__WEBPACK_IMPORTED_MODULE_1__.lpStream)(stream, {\n        ...options,\n        maxDataLength: _constants_js__WEBPACK_IMPORTED_MODULE_4__.MAX_PROTOCOL_LENGTH,\n        maxLengthLength: 2 // 2 bytes is enough to length-prefix MAX_PROTOCOL_LENGTH\n    });\n    while (true) {\n        options.log.trace('handle: reading incoming string');\n        const protocol = await _multistream_js__WEBPACK_IMPORTED_MODULE_5__.readString(lp, options);\n        options.log.trace('handle: read \"%s\"', protocol);\n        if (protocol === _constants_js__WEBPACK_IMPORTED_MODULE_4__.PROTOCOL_ID) {\n            options.log.trace('handle: respond with \"%s\" for \"%s\"', _constants_js__WEBPACK_IMPORTED_MODULE_4__.PROTOCOL_ID, protocol);\n            await _multistream_js__WEBPACK_IMPORTED_MODULE_5__.write(lp, (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(`${_constants_js__WEBPACK_IMPORTED_MODULE_4__.PROTOCOL_ID}\\n`), options);\n            options.log.trace('handle: responded with \"%s\" for \"%s\"', _constants_js__WEBPACK_IMPORTED_MODULE_4__.PROTOCOL_ID, protocol);\n            continue;\n        }\n        if (protocols.includes(protocol)) {\n            options.log.trace('handle: respond with \"%s\" for \"%s\"', protocol, protocol);\n            await _multistream_js__WEBPACK_IMPORTED_MODULE_5__.write(lp, (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(`${protocol}\\n`), options);\n            options.log.trace('handle: responded with \"%s\" for \"%s\"', protocol, protocol);\n            return { stream: lp.unwrap(), protocol };\n        }\n        if (protocol === 'ls') {\n            // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\\n\n            const protos = new uint8arraylist__WEBPACK_IMPORTED_MODULE_2__.Uint8ArrayList(...protocols.map(p => it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__.encode.single((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(`${p}\\n`))), (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)('\\n'));\n            options.log.trace('handle: respond with \"%s\" for %s', protocols, protocol);\n            await _multistream_js__WEBPACK_IMPORTED_MODULE_5__.write(lp, protos, options);\n            options.log.trace('handle: responded with \"%s\" for %s', protocols, protocol);\n            continue;\n        }\n        options.log('handle: respond with \"na\" for \"%s\"', protocol);\n        await _multistream_js__WEBPACK_IMPORTED_MODULE_5__.write(lp, (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)('na\\n'), options);\n        options.log('handle: responded with \"na\" for \"%s\"', protocol);\n    }\n}\n//# sourceMappingURL=handle.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/multistream-select/dist/src/handle.js?");

/***/ }),

/***/ "./node_modules/@libp2p/multistream-select/dist/src/multistream.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@libp2p/multistream-select/dist/src/multistream.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   read: () => (/* binding */ read),\n/* harmony export */   readString: () => (/* binding */ readString),\n/* harmony export */   write: () => (/* binding */ write),\n/* harmony export */   writeAll: () => (/* binding */ writeAll)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n\n\n\n\nconst NewLine = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)('\\n');\n/**\n * `write` encodes and writes a single buffer\n */\nasync function write(writer, buffer, options) {\n    await writer.write(buffer, options);\n}\n/**\n * `writeAll` behaves like `write`, except it encodes an array of items as a single write\n */\nasync function writeAll(writer, buffers, options) {\n    await writer.writeV(buffers, options);\n}\n/**\n * Read a length-prefixed buffer from the passed stream, stripping the final newline character\n */\nasync function read(reader, options) {\n    const buf = await reader.read(options);\n    if (buf.byteLength === 0 || buf.get(buf.byteLength - 1) !== NewLine[0]) {\n        options.log.error('Invalid mss message - missing newline', buf);\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('missing newline', 'ERR_INVALID_MULTISTREAM_SELECT_MESSAGE');\n    }\n    return buf.sublist(0, -1); // Remove newline\n}\n/**\n * Read a length-prefixed string from the passed stream, stripping the final newline character\n */\nasync function readString(reader, options) {\n    const buf = await read(reader, options);\n    return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(buf.subarray());\n}\n//# sourceMappingURL=multistream.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/multistream-select/dist/src/multistream.js?");

/***/ }),

/***/ "./node_modules/@libp2p/multistream-select/dist/src/select.js":
/*!********************************************************************!*\
  !*** ./node_modules/@libp2p/multistream-select/dist/src/select.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   select: () => (/* binding */ select)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var it_length_prefixed_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-length-prefixed-stream */ \"./node_modules/it-length-prefixed-stream/dist/src/index.js\");\n/* harmony import */ var p_defer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! p-defer */ \"./node_modules/p-defer/index.js\");\n/* harmony import */ var race_signal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! race-signal */ \"./node_modules/race-signal/dist/src/index.js\");\n/* harmony import */ var uint8_varint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8-varint */ \"./node_modules/uint8-varint/dist/src/index.js\");\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index.js */ \"./node_modules/@libp2p/multistream-select/dist/src/constants.js\");\n/* harmony import */ var _multistream_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./multistream.js */ \"./node_modules/@libp2p/multistream-select/dist/src/multistream.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * Negotiate a protocol to use from a list of protocols.\n *\n * @param stream - A duplex iterable stream to dial on\n * @param protocols - A list of protocols (or single protocol) to negotiate with. Protocols are attempted in order until a match is made.\n * @param options - An options object containing an AbortSignal and an optional boolean `writeBytes` - if this is true, `Uint8Array`s will be written into `duplex`, otherwise `Uint8ArrayList`s will\n * @returns A stream for the selected protocol and the protocol that was selected from the list of protocols provided to `select`.\n * @example\n *\n * ```TypeScript\n * import { pipe } from 'it-pipe'\n * import * as mss from '@libp2p/multistream-select'\n * import { Mplex } from '@libp2p/mplex'\n *\n * const muxer = new Mplex()\n * const muxedStream = muxer.newStream()\n *\n * // mss.select(protocol(s))\n * // Select from one of the passed protocols (in priority order)\n * // Returns selected stream and protocol\n * const { stream: dhtStream, protocol } = await mss.select(muxedStream, [\n *   // This might just be different versions of DHT, but could be different impls\n *   '/ipfs-dht/2.0.0', // Most of the time this will probably just be one item.\n *   '/ipfs-dht/1.0.0'\n * ])\n *\n * // Typically this stream will be passed back to the caller of libp2p.dialProtocol\n * //\n * // ...it might then do something like this:\n * // try {\n * //   await pipe(\n * //     [uint8ArrayFromString('Some DHT data')]\n * //     dhtStream,\n * //     async source => {\n * //       for await (const chunk of source)\n * //         // DHT response data\n * //     }\n * //   )\n * // } catch (err) {\n * //   // Error in stream\n * // }\n * ```\n */\nasync function select(stream, protocols, options) {\n    protocols = Array.isArray(protocols) ? [...protocols] : [protocols];\n    if (protocols.length === 1 && options.negotiateFully === false) {\n        return optimisticSelect(stream, protocols[0], options);\n    }\n    const lp = (0,it_length_prefixed_stream__WEBPACK_IMPORTED_MODULE_0__.lpStream)(stream, {\n        ...options,\n        maxDataLength: _constants_js__WEBPACK_IMPORTED_MODULE_5__.MAX_PROTOCOL_LENGTH\n    });\n    const protocol = protocols.shift();\n    if (protocol == null) {\n        throw new Error('At least one protocol must be specified');\n    }\n    options.log.trace('select: write [\"%s\", \"%s\"]', _constants_js__WEBPACK_IMPORTED_MODULE_5__.PROTOCOL_ID, protocol);\n    const p1 = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_4__.fromString)(`${_constants_js__WEBPACK_IMPORTED_MODULE_5__.PROTOCOL_ID}\\n`);\n    const p2 = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_4__.fromString)(`${protocol}\\n`);\n    await _multistream_js__WEBPACK_IMPORTED_MODULE_6__.writeAll(lp, [p1, p2], options);\n    options.log.trace('select: reading multistream-select header');\n    let response = await _multistream_js__WEBPACK_IMPORTED_MODULE_6__.readString(lp, options);\n    options.log.trace('select: read \"%s\"', response);\n    // Read the protocol response if we got the protocolId in return\n    if (response === _constants_js__WEBPACK_IMPORTED_MODULE_5__.PROTOCOL_ID) {\n        options.log.trace('select: reading protocol response');\n        response = await _multistream_js__WEBPACK_IMPORTED_MODULE_6__.readString(lp, options);\n        options.log.trace('select: read \"%s\"', response);\n    }\n    // We're done\n    if (response === protocol) {\n        return { stream: lp.unwrap(), protocol };\n    }\n    // We haven't gotten a valid ack, try the other protocols\n    for (const protocol of protocols) {\n        options.log.trace('select: write \"%s\"', protocol);\n        await _multistream_js__WEBPACK_IMPORTED_MODULE_6__.write(lp, (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_4__.fromString)(`${protocol}\\n`), options);\n        options.log.trace('select: reading protocol response');\n        const response = await _multistream_js__WEBPACK_IMPORTED_MODULE_6__.readString(lp, options);\n        options.log.trace('select: read \"%s\" for \"%s\"', response, protocol);\n        if (response === protocol) {\n            return { stream: lp.unwrap(), protocol };\n        }\n    }\n    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('protocol selection failed', 'ERR_UNSUPPORTED_PROTOCOL');\n}\n/**\n * Optimistically negotiates a protocol.\n *\n * It *does not* block writes waiting for the other end to respond. Instead, it\n * simply assumes the negotiation went successfully and starts writing data.\n *\n * Use when it is known that the receiver supports the desired protocol.\n */\nfunction optimisticSelect(stream, protocol, options) {\n    const originalSink = stream.sink.bind(stream);\n    const originalSource = stream.source;\n    let negotiated = false;\n    let negotiating = false;\n    const doneNegotiating = (0,p_defer__WEBPACK_IMPORTED_MODULE_8__[\"default\"])();\n    let sentProtocol = false;\n    let sendingProtocol = false;\n    const doneSendingProtocol = (0,p_defer__WEBPACK_IMPORTED_MODULE_8__[\"default\"])();\n    let readProtocol = false;\n    let readingProtocol = false;\n    const doneReadingProtocol = (0,p_defer__WEBPACK_IMPORTED_MODULE_8__[\"default\"])();\n    const lp = (0,it_length_prefixed_stream__WEBPACK_IMPORTED_MODULE_0__.lpStream)({\n        sink: originalSink,\n        source: originalSource\n    }, {\n        ...options,\n        maxDataLength: _constants_js__WEBPACK_IMPORTED_MODULE_5__.MAX_PROTOCOL_LENGTH\n    });\n    stream.sink = async (source) => {\n        const { sink } = lp.unwrap();\n        await sink(async function* () {\n            let sentData = false;\n            for await (const buf of source) {\n                // started reading before the source yielded, wait for protocol send\n                if (sendingProtocol) {\n                    await doneSendingProtocol.promise;\n                }\n                // writing before reading, send the protocol and the first chunk of data\n                if (!sentProtocol) {\n                    sendingProtocol = true;\n                    options.log.trace('optimistic: write [\"%s\", \"%s\", data(%d)] in sink', _constants_js__WEBPACK_IMPORTED_MODULE_5__.PROTOCOL_ID, protocol, buf.byteLength);\n                    const protocolString = `${protocol}\\n`;\n                    // send protocols in first chunk of data written to transport\n                    yield new uint8arraylist__WEBPACK_IMPORTED_MODULE_3__.Uint8ArrayList(Uint8Array.from([19]), // length of PROTOCOL_ID plus newline\n                    (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_4__.fromString)(`${_constants_js__WEBPACK_IMPORTED_MODULE_5__.PROTOCOL_ID}\\n`), uint8_varint__WEBPACK_IMPORTED_MODULE_2__.encode(protocolString.length), (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_4__.fromString)(protocolString), buf).subarray();\n                    options.log.trace('optimistic: wrote [\"%s\", \"%s\", data(%d)] in sink', _constants_js__WEBPACK_IMPORTED_MODULE_5__.PROTOCOL_ID, protocol, buf.byteLength);\n                    sentProtocol = true;\n                    sendingProtocol = false;\n                    doneSendingProtocol.resolve();\n                    // read the negotiation response but don't block more sending\n                    negotiate()\n                        .catch(err => {\n                        options.log.error('could not finish optimistic protocol negotiation of %s', protocol, err);\n                    });\n                }\n                else {\n                    yield buf;\n                }\n                sentData = true;\n            }\n            // special case - the source passed to the sink has ended but we didn't\n            // negotiated the protocol yet so do it now\n            if (!sentData) {\n                await negotiate();\n            }\n        }());\n    };\n    async function negotiate() {\n        if (negotiating) {\n            options.log.trace('optimistic: already negotiating %s stream', protocol);\n            await doneNegotiating.promise;\n            return;\n        }\n        negotiating = true;\n        try {\n            // we haven't sent the protocol yet, send it now\n            if (!sentProtocol) {\n                options.log.trace('optimistic: doing send protocol for %s stream', protocol);\n                await doSendProtocol();\n            }\n            // if we haven't read the protocol response yet, do it now\n            if (!readProtocol) {\n                options.log.trace('optimistic: doing read protocol for %s stream', protocol);\n                await doReadProtocol();\n            }\n        }\n        finally {\n            negotiating = false;\n            negotiated = true;\n            doneNegotiating.resolve();\n        }\n    }\n    async function doSendProtocol() {\n        if (sendingProtocol) {\n            await doneSendingProtocol.promise;\n            return;\n        }\n        sendingProtocol = true;\n        try {\n            options.log.trace('optimistic: write [\"%s\", \"%s\", data] in source', _constants_js__WEBPACK_IMPORTED_MODULE_5__.PROTOCOL_ID, protocol);\n            await lp.writeV([\n                (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_4__.fromString)(`${_constants_js__WEBPACK_IMPORTED_MODULE_5__.PROTOCOL_ID}\\n`),\n                (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_4__.fromString)(`${protocol}\\n`)\n            ]);\n            options.log.trace('optimistic: wrote [\"%s\", \"%s\", data] in source', _constants_js__WEBPACK_IMPORTED_MODULE_5__.PROTOCOL_ID, protocol);\n        }\n        finally {\n            sentProtocol = true;\n            sendingProtocol = false;\n            doneSendingProtocol.resolve();\n        }\n    }\n    async function doReadProtocol() {\n        if (readingProtocol) {\n            await doneReadingProtocol.promise;\n            return;\n        }\n        readingProtocol = true;\n        try {\n            options.log.trace('optimistic: reading multistream select header');\n            let response = await _multistream_js__WEBPACK_IMPORTED_MODULE_6__.readString(lp, options);\n            options.log.trace('optimistic: read multistream select header \"%s\"', response);\n            if (response === _constants_js__WEBPACK_IMPORTED_MODULE_5__.PROTOCOL_ID) {\n                response = await _multistream_js__WEBPACK_IMPORTED_MODULE_6__.readString(lp, options);\n            }\n            options.log.trace('optimistic: read protocol \"%s\", expecting \"%s\"', response, protocol);\n            if (response !== protocol) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('protocol selection failed', 'ERR_UNSUPPORTED_PROTOCOL');\n            }\n        }\n        finally {\n            readProtocol = true;\n            readingProtocol = false;\n            doneReadingProtocol.resolve();\n        }\n    }\n    stream.source = (async function* () {\n        // make sure we've done protocol negotiation before we read stream data\n        await negotiate();\n        options.log.trace('optimistic: reading data from \"%s\" stream', protocol);\n        yield* lp.unwrap().source;\n    })();\n    if (stream.closeRead != null) {\n        const originalCloseRead = stream.closeRead.bind(stream);\n        stream.closeRead = async (opts) => {\n            // we need to read & write to negotiate the protocol so ensure we've done\n            // this before closing the readable end of the stream\n            if (!negotiated) {\n                await negotiate().catch(err => {\n                    options.log.error('could not negotiate protocol before close read', err);\n                });\n            }\n            // protocol has been negotiated, ok to close the readable end\n            await originalCloseRead(opts);\n        };\n    }\n    if (stream.closeWrite != null) {\n        const originalCloseWrite = stream.closeWrite.bind(stream);\n        stream.closeWrite = async (opts) => {\n            // we need to read & write to negotiate the protocol so ensure we've done\n            // this before closing the writable end of the stream\n            if (!negotiated) {\n                await negotiate().catch(err => {\n                    options.log.error('could not negotiate protocol before close write', err);\n                });\n            }\n            // protocol has been negotiated, ok to close the writable end\n            await originalCloseWrite(opts);\n        };\n    }\n    if (stream.close != null) {\n        const originalClose = stream.close.bind(stream);\n        stream.close = async (opts) => {\n            // if we are in the process of negotiation, let it finish before closing\n            // because we may have unsent early data\n            const tasks = [];\n            if (sendingProtocol) {\n                tasks.push(doneSendingProtocol.promise);\n            }\n            if (readingProtocol) {\n                tasks.push(doneReadingProtocol.promise);\n            }\n            if (tasks.length > 0) {\n                // let the in-flight protocol negotiation finish gracefully\n                await (0,race_signal__WEBPACK_IMPORTED_MODULE_1__.raceSignal)(Promise.all(tasks), opts?.signal);\n            }\n            else {\n                // no protocol negotiation attempt has occurred so don't start one\n                negotiated = true;\n                negotiating = false;\n                doneNegotiating.resolve();\n            }\n            // protocol has been negotiated, ok to close the writable end\n            await originalClose(opts);\n        };\n    }\n    return {\n        stream,\n        protocol\n    };\n}\n//# sourceMappingURL=select.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/multistream-select/dist/src/select.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-collections/dist/src/map.js":
/*!***************************************************************!*\
  !*** ./node_modules/@libp2p/peer-collections/dist/src/map.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PeerMap: () => (/* binding */ PeerMap),\n/* harmony export */   peerMap: () => (/* binding */ peerMap)\n/* harmony export */ });\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@libp2p/peer-collections/dist/src/util.js\");\n\n\n/**\n * We can't use PeerIds as map keys because map keys are\n * compared using same-value-zero equality, so this is just\n * a map that stringifies the PeerIds before storing them.\n *\n * PeerIds cache stringified versions of themselves so this\n * should be a cheap operation.\n *\n * @example\n *\n * ```TypeScript\n * import { peerMap } from '@libp2p/peer-collections'\n *\n * const map = peerMap<string>()\n * map.set(peerId, 'value')\n * ```\n */\nclass PeerMap {\n    map;\n    constructor(map) {\n        this.map = new Map();\n        if (map != null) {\n            for (const [key, value] of map.entries()) {\n                this.map.set(key.toString(), value);\n            }\n        }\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    clear() {\n        this.map.clear();\n    }\n    delete(peer) {\n        return this.map.delete(peer.toString());\n    }\n    entries() {\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.mapIterable)(this.map.entries(), (val) => {\n            return [(0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_1__.peerIdFromString)(val[0]), val[1]];\n        });\n    }\n    forEach(fn) {\n        this.map.forEach((value, key) => {\n            fn(value, (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_1__.peerIdFromString)(key), this);\n        });\n    }\n    get(peer) {\n        return this.map.get(peer.toString());\n    }\n    has(peer) {\n        return this.map.has(peer.toString());\n    }\n    set(peer, value) {\n        this.map.set(peer.toString(), value);\n    }\n    keys() {\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.mapIterable)(this.map.keys(), (val) => {\n            return (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_1__.peerIdFromString)(val);\n        });\n    }\n    values() {\n        return this.map.values();\n    }\n    get size() {\n        return this.map.size;\n    }\n}\nfunction peerMap() {\n    return new PeerMap();\n}\n//# sourceMappingURL=map.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-collections/dist/src/map.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-collections/dist/src/set.js":
/*!***************************************************************!*\
  !*** ./node_modules/@libp2p/peer-collections/dist/src/set.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PeerSet: () => (/* binding */ PeerSet),\n/* harmony export */   peerSet: () => (/* binding */ peerSet)\n/* harmony export */ });\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@libp2p/peer-collections/dist/src/util.js\");\n\n\n/**\n * We can't use PeerIds as set entries because set entries are\n * compared using same-value-zero equality, so this is just\n * a map that stringifies the PeerIds before storing them.\n *\n * PeerIds cache stringified versions of themselves so this\n * should be a cheap operation.\n *\n * @example\n *\n * ```TypeScript\n * import { peerSet } from '@libp2p/peer-collections'\n *\n * const set = peerSet()\n * set.add(peerId)\n * ```\n */\nclass PeerSet {\n    set;\n    constructor(set) {\n        this.set = new Set();\n        if (set != null) {\n            for (const key of set) {\n                this.set.add(key.toString());\n            }\n        }\n    }\n    get size() {\n        return this.set.size;\n    }\n    [Symbol.iterator]() {\n        return this.values();\n    }\n    add(peer) {\n        this.set.add(peer.toString());\n    }\n    clear() {\n        this.set.clear();\n    }\n    delete(peer) {\n        this.set.delete(peer.toString());\n    }\n    entries() {\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.mapIterable)(this.set.entries(), (val) => {\n            const peerId = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_1__.peerIdFromString)(val[0]);\n            return [peerId, peerId];\n        });\n    }\n    forEach(predicate) {\n        this.set.forEach((str) => {\n            const id = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_1__.peerIdFromString)(str);\n            predicate(id, id, this);\n        });\n    }\n    has(peer) {\n        return this.set.has(peer.toString());\n    }\n    values() {\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.mapIterable)(this.set.values(), (val) => {\n            return (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_1__.peerIdFromString)(val);\n        });\n    }\n    intersection(other) {\n        const output = new PeerSet();\n        for (const peerId of other) {\n            if (this.has(peerId)) {\n                output.add(peerId);\n            }\n        }\n        return output;\n    }\n    difference(other) {\n        const output = new PeerSet();\n        for (const peerId of this) {\n            if (!other.has(peerId)) {\n                output.add(peerId);\n            }\n        }\n        return output;\n    }\n    union(other) {\n        const output = new PeerSet();\n        for (const peerId of other) {\n            output.add(peerId);\n        }\n        for (const peerId of this) {\n            output.add(peerId);\n        }\n        return output;\n    }\n}\nfunction peerSet() {\n    return new PeerSet();\n}\n//# sourceMappingURL=set.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-collections/dist/src/set.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-collections/dist/src/util.js":
/*!****************************************************************!*\
  !*** ./node_modules/@libp2p/peer-collections/dist/src/util.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mapIterable: () => (/* binding */ mapIterable)\n/* harmony export */ });\n/**\n * Calls the passed map function on every entry of the passed iterable iterator\n */\nfunction mapIterable(iter, map) {\n    const iterator = {\n        [Symbol.iterator]: () => {\n            return iterator;\n        },\n        next: () => {\n            const next = iter.next();\n            const val = next.value;\n            if (next.done === true || val == null) {\n                const result = {\n                    done: true,\n                    value: undefined\n                };\n                return result;\n            }\n            return {\n                done: false,\n                value: map(val)\n            };\n        }\n    };\n    return iterator;\n}\n//# sourceMappingURL=util.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-collections/dist/src/util.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-id-factory/dist/src/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@libp2p/peer-id-factory/dist/src/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEd25519PeerId: () => (/* binding */ createEd25519PeerId),\n/* harmony export */   createFromJSON: () => (/* binding */ createFromJSON),\n/* harmony export */   createFromPrivKey: () => (/* binding */ createFromPrivKey),\n/* harmony export */   createFromProtobuf: () => (/* binding */ createFromProtobuf),\n/* harmony export */   createFromPubKey: () => (/* binding */ createFromPubKey),\n/* harmony export */   createRSAPeerId: () => (/* binding */ createRSAPeerId),\n/* harmony export */   createSecp256k1PeerId: () => (/* binding */ createSecp256k1PeerId),\n/* harmony export */   exportToProtobuf: () => (/* binding */ exportToProtobuf)\n/* harmony export */ });\n/* harmony import */ var _libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/crypto/keys */ \"./node_modules/@libp2p/crypto/dist/src/keys/index.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var _proto_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./proto.js */ \"./node_modules/@libp2p/peer-id-factory/dist/src/proto.js\");\n/**\n * @packageDocumentation\n *\n * Generate, import, and export PeerIDs.\n *\n * A Peer ID is the SHA-256 [multihash](https://github.com/multiformats/multihash) of a public key.\n *\n * The public key is a base64 encoded string of a protobuf containing an RSA DER buffer. This uses a node buffer to pass the base64 encoded public key protobuf to the multihash for ID generation.\n *\n * @example\n *\n * ```TypeScript\n * import { createEd25519PeerId } from '@libp2p/peer-id-factory'\n *\n * const peerId = await createEd25519PeerId()\n * console.log(peerId.toString())\n * ```\n *\n * ```bash\n * 12D3KooWRm8J3iL796zPFi2EtGGtUJn58AG67gcqzMFHZnnsTzqD\n * ```\n */\n\n\n\n\nconst createEd25519PeerId = async () => {\n    const key = await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_1__.generateKeyPair)('Ed25519');\n    const id = await createFromPrivKey(key);\n    if (id.type === 'Ed25519') {\n        return id;\n    }\n    throw new Error(`Generated unexpected PeerId type \"${id.type}\"`);\n};\nconst createSecp256k1PeerId = async () => {\n    const key = await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_1__.generateKeyPair)('secp256k1');\n    const id = await createFromPrivKey(key);\n    if (id.type === 'secp256k1') {\n        return id;\n    }\n    throw new Error(`Generated unexpected PeerId type \"${id.type}\"`);\n};\nconst createRSAPeerId = async (opts) => {\n    const key = await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_1__.generateKeyPair)('RSA', opts?.bits ?? 2048);\n    const id = await createFromPrivKey(key);\n    if (id.type === 'RSA') {\n        return id;\n    }\n    throw new Error(`Generated unexpected PeerId type \"${id.type}\"`);\n};\nasync function createFromPubKey(publicKey) {\n    return (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_2__.peerIdFromKeys)((0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_1__.marshalPublicKey)(publicKey));\n}\nasync function createFromPrivKey(privateKey) {\n    return (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_2__.peerIdFromKeys)((0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_1__.marshalPublicKey)(privateKey.public), (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_1__.marshalPrivateKey)(privateKey));\n}\nfunction exportToProtobuf(peerId, excludePrivateKey) {\n    return _proto_js__WEBPACK_IMPORTED_MODULE_3__.PeerIdProto.encode({\n        id: peerId.multihash.bytes,\n        pubKey: peerId.publicKey,\n        privKey: excludePrivateKey === true || peerId.privateKey == null ? undefined : peerId.privateKey\n    });\n}\nasync function createFromProtobuf(buf) {\n    const { id, privKey, pubKey } = _proto_js__WEBPACK_IMPORTED_MODULE_3__.PeerIdProto.decode(buf);\n    return createFromParts(id ?? new Uint8Array(0), privKey, pubKey);\n}\nasync function createFromJSON(obj) {\n    return createFromParts((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_0__.fromString)(obj.id, 'base58btc'), obj.privKey != null ? (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_0__.fromString)(obj.privKey, 'base64pad') : undefined, obj.pubKey != null ? (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_0__.fromString)(obj.pubKey, 'base64pad') : undefined);\n}\nasync function createFromParts(multihash, privKey, pubKey) {\n    if (privKey != null) {\n        const key = await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_1__.unmarshalPrivateKey)(privKey);\n        return createFromPrivKey(key);\n    }\n    else if (pubKey != null) {\n        const key = (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_1__.unmarshalPublicKey)(pubKey);\n        return createFromPubKey(key);\n    }\n    return (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_2__.peerIdFromBytes)(multihash);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-id-factory/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-id-factory/dist/src/proto.js":
/*!****************************************************************!*\
  !*** ./node_modules/@libp2p/peer-id-factory/dist/src/proto.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PeerIdProto: () => (/* binding */ PeerIdProto)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nvar PeerIdProto;\n(function (PeerIdProto) {\n    let _codec;\n    PeerIdProto.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.id != null) {\n                    w.uint32(10);\n                    w.bytes(obj.id);\n                }\n                if (obj.pubKey != null) {\n                    w.uint32(18);\n                    w.bytes(obj.pubKey);\n                }\n                if (obj.privKey != null) {\n                    w.uint32(26);\n                    w.bytes(obj.privKey);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.id = reader.bytes();\n                            break;\n                        case 2:\n                            obj.pubKey = reader.bytes();\n                            break;\n                        case 3:\n                            obj.privKey = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    PeerIdProto.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, PeerIdProto.codec());\n    };\n    PeerIdProto.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, PeerIdProto.codec());\n    };\n})(PeerIdProto || (PeerIdProto = {}));\n//# sourceMappingURL=proto.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-id-factory/dist/src/proto.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-id/dist/src/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@libp2p/peer-id/dist/src/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPeerId: () => (/* binding */ createPeerId),\n/* harmony export */   peerIdFromBytes: () => (/* binding */ peerIdFromBytes),\n/* harmony export */   peerIdFromCID: () => (/* binding */ peerIdFromCID),\n/* harmony export */   peerIdFromKeys: () => (/* binding */ peerIdFromKeys),\n/* harmony export */   peerIdFromPeerId: () => (/* binding */ peerIdFromPeerId),\n/* harmony export */   peerIdFromString: () => (/* binding */ peerIdFromString)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/peer-id/index.js\");\n/* harmony import */ var multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/bases/base58 */ \"./node_modules/multiformats/dist/src/bases/base58.js\");\n/* harmony import */ var multiformats_basics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/basics */ \"./node_modules/multiformats/dist/src/basics.js\");\n/* harmony import */ var multiformats_cid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! multiformats/cid */ \"./node_modules/multiformats/dist/src/cid.js\");\n/* harmony import */ var multiformats_hashes_digest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! multiformats/hashes/digest */ \"./node_modules/multiformats/dist/src/hashes/digest.js\");\n/* harmony import */ var multiformats_hashes_identity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! multiformats/hashes/identity */ \"./node_modules/multiformats/dist/src/hashes/identity.js\");\n/* harmony import */ var multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! multiformats/hashes/sha2 */ \"./node_modules/multiformats/dist/src/hashes/sha2-browser.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/**\n * @packageDocumentation\n *\n * An implementation of a peer id\n *\n * @example\n *\n * ```TypeScript\n * import { peerIdFromString } from '@libp2p/peer-id'\n * const peer = peerIdFromString('k51qzi5uqu5dkwkqm42v9j9kqcam2jiuvloi16g72i4i4amoo2m8u3ol3mqu6s')\n *\n * console.log(peer.toCID()) // CID(bafzaa...)\n * console.log(peer.toString()) // \"12D3K...\"\n * ```\n */\n\n\n\n\n\n\n\n\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst baseDecoder = Object\n    .values(multiformats_basics__WEBPACK_IMPORTED_MODULE_1__.bases)\n    .map(codec => codec.decoder)\n    // @ts-expect-error https://github.com/multiformats/js-multiformats/issues/141\n    .reduce((acc, curr) => acc.or(curr), multiformats_basics__WEBPACK_IMPORTED_MODULE_1__.bases.identity.decoder);\n// these values are from https://github.com/multiformats/multicodec/blob/master/table.csv\nconst LIBP2P_KEY_CODE = 0x72;\nconst MARSHALLED_ED225519_PUBLIC_KEY_LENGTH = 36;\nconst MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH = 37;\nclass PeerIdImpl {\n    type;\n    multihash;\n    privateKey;\n    publicKey;\n    string;\n    constructor(init) {\n        this.type = init.type;\n        this.multihash = init.multihash;\n        this.privateKey = init.privateKey;\n        // mark string cache as non-enumerable\n        Object.defineProperty(this, 'string', {\n            enumerable: false,\n            writable: true\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return `PeerId(${this.toString()})`;\n    }\n    [_libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.peerIdSymbol] = true;\n    toString() {\n        if (this.string == null) {\n            this.string = multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc.encode(this.multihash.bytes).slice(1);\n        }\n        return this.string;\n    }\n    // return self-describing String representation\n    // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209\n    toCID() {\n        return multiformats_cid__WEBPACK_IMPORTED_MODULE_2__.CID.createV1(LIBP2P_KEY_CODE, this.multihash);\n    }\n    toBytes() {\n        return this.multihash.bytes;\n    }\n    /**\n     * Returns Multiaddr as a JSON string\n     */\n    toJSON() {\n        return this.toString();\n    }\n    /**\n     * Checks the equality of `this` peer against a given PeerId\n     */\n    equals(id) {\n        if (id == null) {\n            return false;\n        }\n        if (id instanceof Uint8Array) {\n            return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_6__.equals)(this.multihash.bytes, id);\n        }\n        else if (typeof id === 'string') {\n            return peerIdFromString(id).equals(this);\n        }\n        else if (id?.multihash?.bytes != null) {\n            return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_6__.equals)(this.multihash.bytes, id.multihash.bytes);\n        }\n        else {\n            throw new Error('not valid Id');\n        }\n    }\n    /**\n     * Returns PeerId as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```TypeScript\n     * import { peerIdFromString } from '@libp2p/peer-id'\n     *\n     * console.info(peerIdFromString('QmFoo'))\n     * // 'PeerId(QmFoo)'\n     * ```\n     */\n    [inspect]() {\n        return `PeerId(${this.toString()})`;\n    }\n}\nclass RSAPeerIdImpl extends PeerIdImpl {\n    type = 'RSA';\n    publicKey;\n    constructor(init) {\n        super({ ...init, type: 'RSA' });\n        this.publicKey = init.publicKey;\n    }\n}\nclass Ed25519PeerIdImpl extends PeerIdImpl {\n    type = 'Ed25519';\n    publicKey;\n    constructor(init) {\n        super({ ...init, type: 'Ed25519' });\n        this.publicKey = init.multihash.digest;\n    }\n}\nclass Secp256k1PeerIdImpl extends PeerIdImpl {\n    type = 'secp256k1';\n    publicKey;\n    constructor(init) {\n        super({ ...init, type: 'secp256k1' });\n        this.publicKey = init.multihash.digest;\n    }\n}\nfunction createPeerId(init) {\n    if (init.type === 'RSA') {\n        return new RSAPeerIdImpl(init);\n    }\n    if (init.type === 'Ed25519') {\n        return new Ed25519PeerIdImpl(init);\n    }\n    if (init.type === 'secp256k1') {\n        return new Secp256k1PeerIdImpl(init);\n    }\n    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.CodeError('Type must be \"RSA\", \"Ed25519\" or \"secp256k1\"', 'ERR_INVALID_PARAMETERS');\n}\nfunction peerIdFromPeerId(other) {\n    if (other.type === 'RSA') {\n        return new RSAPeerIdImpl(other);\n    }\n    if (other.type === 'Ed25519') {\n        return new Ed25519PeerIdImpl(other);\n    }\n    if (other.type === 'secp256k1') {\n        return new Secp256k1PeerIdImpl(other);\n    }\n    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.CodeError('Not a PeerId', 'ERR_INVALID_PARAMETERS');\n}\nfunction peerIdFromString(str, decoder) {\n    decoder = decoder ?? baseDecoder;\n    if (str.charAt(0) === '1' || str.charAt(0) === 'Q') {\n        // identity hash ed25519/secp256k1 key or sha2-256 hash of\n        // rsa public key - base58btc encoded either way\n        const multihash = multiformats_hashes_digest__WEBPACK_IMPORTED_MODULE_3__.decode(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc.decode(`z${str}`));\n        if (str.startsWith('12D')) {\n            return new Ed25519PeerIdImpl({ multihash });\n        }\n        else if (str.startsWith('16U')) {\n            return new Secp256k1PeerIdImpl({ multihash });\n        }\n        else {\n            return new RSAPeerIdImpl({ multihash });\n        }\n    }\n    return peerIdFromBytes(baseDecoder.decode(str));\n}\nfunction peerIdFromBytes(buf) {\n    try {\n        const multihash = multiformats_hashes_digest__WEBPACK_IMPORTED_MODULE_3__.decode(buf);\n        if (multihash.code === multiformats_hashes_identity__WEBPACK_IMPORTED_MODULE_4__.identity.code) {\n            if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n                return new Ed25519PeerIdImpl({ multihash });\n            }\n            else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n                return new Secp256k1PeerIdImpl({ multihash });\n            }\n        }\n        if (multihash.code === multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_5__.sha256.code) {\n            return new RSAPeerIdImpl({ multihash });\n        }\n    }\n    catch {\n        return peerIdFromCID(multiformats_cid__WEBPACK_IMPORTED_MODULE_2__.CID.decode(buf));\n    }\n    throw new Error('Supplied PeerID CID is invalid');\n}\nfunction peerIdFromCID(cid) {\n    if (cid == null || cid.multihash == null || cid.version == null || (cid.version === 1 && cid.code !== LIBP2P_KEY_CODE)) {\n        throw new Error('Supplied PeerID CID is invalid');\n    }\n    const multihash = cid.multihash;\n    if (multihash.code === multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_5__.sha256.code) {\n        return new RSAPeerIdImpl({ multihash: cid.multihash });\n    }\n    else if (multihash.code === multiformats_hashes_identity__WEBPACK_IMPORTED_MODULE_4__.identity.code) {\n        if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n            return new Ed25519PeerIdImpl({ multihash: cid.multihash });\n        }\n        else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n            return new Secp256k1PeerIdImpl({ multihash: cid.multihash });\n        }\n    }\n    throw new Error('Supplied PeerID CID is invalid');\n}\n/**\n * @param publicKey - A marshalled public key\n * @param privateKey - A marshalled private key\n */\nasync function peerIdFromKeys(publicKey, privateKey) {\n    if (publicKey.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n        return new Ed25519PeerIdImpl({ multihash: multiformats_hashes_digest__WEBPACK_IMPORTED_MODULE_3__.create(multiformats_hashes_identity__WEBPACK_IMPORTED_MODULE_4__.identity.code, publicKey), privateKey });\n    }\n    if (publicKey.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n        return new Secp256k1PeerIdImpl({ multihash: multiformats_hashes_digest__WEBPACK_IMPORTED_MODULE_3__.create(multiformats_hashes_identity__WEBPACK_IMPORTED_MODULE_4__.identity.code, publicKey), privateKey });\n    }\n    return new RSAPeerIdImpl({ multihash: await multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_5__.sha256.digest(publicKey), publicKey, privateKey });\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-id/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-record/dist/src/envelope/envelope.js":
/*!************************************************************************!*\
  !*** ./node_modules/@libp2p/peer-record/dist/src/envelope/envelope.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Envelope: () => (/* binding */ Envelope)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nvar Envelope;\n(function (Envelope) {\n    let _codec;\n    Envelope.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.publicKey != null && obj.publicKey.byteLength > 0)) {\n                    w.uint32(10);\n                    w.bytes(obj.publicKey);\n                }\n                if ((obj.payloadType != null && obj.payloadType.byteLength > 0)) {\n                    w.uint32(18);\n                    w.bytes(obj.payloadType);\n                }\n                if ((obj.payload != null && obj.payload.byteLength > 0)) {\n                    w.uint32(26);\n                    w.bytes(obj.payload);\n                }\n                if ((obj.signature != null && obj.signature.byteLength > 0)) {\n                    w.uint32(42);\n                    w.bytes(obj.signature);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    publicKey: new Uint8Array(0),\n                    payloadType: new Uint8Array(0),\n                    payload: new Uint8Array(0),\n                    signature: new Uint8Array(0)\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.publicKey = reader.bytes();\n                            break;\n                        case 2:\n                            obj.payloadType = reader.bytes();\n                            break;\n                        case 3:\n                            obj.payload = reader.bytes();\n                            break;\n                        case 5:\n                            obj.signature = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Envelope.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Envelope.codec());\n    };\n    Envelope.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Envelope.codec());\n    };\n})(Envelope || (Envelope = {}));\n//# sourceMappingURL=envelope.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-record/dist/src/envelope/envelope.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-record/dist/src/envelope/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@libp2p/peer-record/dist/src/envelope/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RecordEnvelope: () => (/* binding */ RecordEnvelope)\n/* harmony export */ });\n/* harmony import */ var _libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/crypto/keys */ \"./node_modules/@libp2p/crypto/dist/src/keys/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var uint8_varint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8-varint */ \"./node_modules/uint8-varint/dist/src/index.js\");\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../errors.js */ \"./node_modules/@libp2p/peer-record/dist/src/errors.js\");\n/* harmony import */ var _envelope_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./envelope.js */ \"./node_modules/@libp2p/peer-record/dist/src/envelope/envelope.js\");\n\n\n\n\n\n\n\n\n\nclass RecordEnvelope {\n    /**\n     * Unmarshal a serialized Envelope protobuf message\n     */\n    static createFromProtobuf = async (data) => {\n        const envelopeData = _envelope_js__WEBPACK_IMPORTED_MODULE_4__.Envelope.decode(data);\n        const peerId = await (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_5__.peerIdFromKeys)(envelopeData.publicKey);\n        return new RecordEnvelope({\n            peerId,\n            payloadType: envelopeData.payloadType,\n            payload: envelopeData.payload,\n            signature: envelopeData.signature\n        });\n    };\n    /**\n     * Seal marshals the given Record, places the marshaled bytes inside an Envelope\n     * and signs it with the given peerId's private key\n     */\n    static seal = async (record, peerId) => {\n        if (peerId.privateKey == null) {\n            throw new Error('Missing private key');\n        }\n        const domain = record.domain;\n        const payloadType = record.codec;\n        const payload = record.marshal();\n        const signData = formatSignaturePayload(domain, payloadType, payload);\n        const key = await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_6__.unmarshalPrivateKey)(peerId.privateKey);\n        const signature = await key.sign(signData.subarray());\n        return new RecordEnvelope({\n            peerId,\n            payloadType,\n            payload,\n            signature\n        });\n    };\n    /**\n     * Open and certify a given marshalled envelope.\n     * Data is unmarshalled and the signature validated for the given domain.\n     */\n    static openAndCertify = async (data, domain) => {\n        const envelope = await RecordEnvelope.createFromProtobuf(data);\n        const valid = await envelope.validate(domain);\n        if (!valid) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('envelope signature is not valid for the given domain', _errors_js__WEBPACK_IMPORTED_MODULE_8__.codes.ERR_SIGNATURE_NOT_VALID);\n        }\n        return envelope;\n    };\n    peerId;\n    payloadType;\n    payload;\n    signature;\n    marshaled;\n    /**\n     * The Envelope is responsible for keeping an arbitrary signed record\n     * by a libp2p peer.\n     */\n    constructor(init) {\n        const { peerId, payloadType, payload, signature } = init;\n        this.peerId = peerId;\n        this.payloadType = payloadType;\n        this.payload = payload;\n        this.signature = signature;\n    }\n    /**\n     * Marshal the envelope content\n     */\n    marshal() {\n        if (this.peerId.publicKey == null) {\n            throw new Error('Missing public key');\n        }\n        if (this.marshaled == null) {\n            this.marshaled = _envelope_js__WEBPACK_IMPORTED_MODULE_4__.Envelope.encode({\n                publicKey: this.peerId.publicKey,\n                payloadType: this.payloadType,\n                payload: this.payload.subarray(),\n                signature: this.signature\n            });\n        }\n        return this.marshaled;\n    }\n    /**\n     * Verifies if the other Envelope is identical to this one\n     */\n    equals(other) {\n        return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_2__.equals)(this.marshal(), other.marshal());\n    }\n    /**\n     * Validate envelope data signature for the given domain\n     */\n    async validate(domain) {\n        const signData = formatSignaturePayload(domain, this.payloadType, this.payload);\n        if (this.peerId.publicKey == null) {\n            throw new Error('Missing public key');\n        }\n        const key = (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_6__.unmarshalPublicKey)(this.peerId.publicKey);\n        return key.verify(signData.subarray(), this.signature);\n    }\n}\n/**\n * Helper function that prepares a Uint8Array to sign or verify a signature\n */\nconst formatSignaturePayload = (domain, payloadType, payload) => {\n    // When signing, a peer will prepare a Uint8Array by concatenating the following:\n    // - The length of the domain separation string string in bytes\n    // - The domain separation string, encoded as UTF-8\n    // - The length of the payload_type field in bytes\n    // - The value of the payload_type field\n    // - The length of the payload field in bytes\n    // - The value of the payload field\n    const domainUint8Array = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(domain);\n    const domainLength = uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encode(domainUint8Array.byteLength);\n    const payloadTypeLength = uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encode(payloadType.length);\n    const payloadLength = uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encode(payload.length);\n    return new uint8arraylist__WEBPACK_IMPORTED_MODULE_1__.Uint8ArrayList(domainLength, domainUint8Array, payloadTypeLength, payloadType, payloadLength, payload);\n};\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-record/dist/src/envelope/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-record/dist/src/errors.js":
/*!*************************************************************!*\
  !*** ./node_modules/@libp2p/peer-record/dist/src/errors.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codes: () => (/* binding */ codes)\n/* harmony export */ });\nconst codes = {\n    ERR_SIGNATURE_NOT_VALID: 'ERR_SIGNATURE_NOT_VALID'\n};\n//# sourceMappingURL=errors.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-record/dist/src/errors.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-record/dist/src/peer-record/consts.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@libp2p/peer-record/dist/src/peer-record/consts.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ENVELOPE_DOMAIN_PEER_RECORD: () => (/* binding */ ENVELOPE_DOMAIN_PEER_RECORD),\n/* harmony export */   ENVELOPE_PAYLOAD_TYPE_PEER_RECORD: () => (/* binding */ ENVELOPE_PAYLOAD_TYPE_PEER_RECORD)\n/* harmony export */ });\n// The domain string used for peer records contained in a Envelope.\nconst ENVELOPE_DOMAIN_PEER_RECORD = 'libp2p-peer-record';\n// The type hint used to identify peer records in a Envelope.\n// Defined in https://github.com/multiformats/multicodec/blob/master/table.csv\n// with name \"libp2p-peer-record\"\nconst ENVELOPE_PAYLOAD_TYPE_PEER_RECORD = Uint8Array.from([3, 1]);\n//# sourceMappingURL=consts.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-record/dist/src/peer-record/consts.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-record/dist/src/peer-record/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@libp2p/peer-record/dist/src/peer-record/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PeerRecord: () => (/* binding */ PeerRecord)\n/* harmony export */ });\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _libp2p_utils_array_equals__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/utils/array-equals */ \"./node_modules/@libp2p/utils/dist/src/array-equals.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _consts_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./consts.js */ \"./node_modules/@libp2p/peer-record/dist/src/peer-record/consts.js\");\n/* harmony import */ var _peer_record_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./peer-record.js */ \"./node_modules/@libp2p/peer-record/dist/src/peer-record/peer-record.js\");\n\n\n\n\n\n/**\n * The PeerRecord is used for distributing peer routing records across the network.\n * It contains the peer's reachable listen addresses.\n */\nclass PeerRecord {\n    /**\n     * Unmarshal Peer Record Protobuf\n     */\n    static createFromProtobuf = (buf) => {\n        const peerRecord = _peer_record_js__WEBPACK_IMPORTED_MODULE_1__.PeerRecord.decode(buf);\n        const peerId = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_2__.peerIdFromBytes)(peerRecord.peerId);\n        const multiaddrs = (peerRecord.addresses ?? []).map((a) => (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(a.multiaddr));\n        const seqNumber = peerRecord.seq;\n        return new PeerRecord({ peerId, multiaddrs, seqNumber });\n    };\n    static DOMAIN = _consts_js__WEBPACK_IMPORTED_MODULE_3__.ENVELOPE_DOMAIN_PEER_RECORD;\n    static CODEC = _consts_js__WEBPACK_IMPORTED_MODULE_3__.ENVELOPE_PAYLOAD_TYPE_PEER_RECORD;\n    peerId;\n    multiaddrs;\n    seqNumber;\n    domain = PeerRecord.DOMAIN;\n    codec = PeerRecord.CODEC;\n    marshaled;\n    constructor(init) {\n        const { peerId, multiaddrs, seqNumber } = init;\n        this.peerId = peerId;\n        this.multiaddrs = multiaddrs ?? [];\n        this.seqNumber = seqNumber ?? BigInt(Date.now());\n    }\n    /**\n     * Marshal a record to be used in an envelope\n     */\n    marshal() {\n        if (this.marshaled == null) {\n            this.marshaled = _peer_record_js__WEBPACK_IMPORTED_MODULE_1__.PeerRecord.encode({\n                peerId: this.peerId.toBytes(),\n                seq: BigInt(this.seqNumber),\n                addresses: this.multiaddrs.map((m) => ({\n                    multiaddr: m.bytes\n                }))\n            });\n        }\n        return this.marshaled;\n    }\n    /**\n     * Returns true if `this` record equals the `other`\n     */\n    equals(other) {\n        if (!(other instanceof PeerRecord)) {\n            return false;\n        }\n        // Validate PeerId\n        if (!this.peerId.equals(other.peerId)) {\n            return false;\n        }\n        // Validate seqNumber\n        if (this.seqNumber !== other.seqNumber) {\n            return false;\n        }\n        // Validate multiaddrs\n        if (!(0,_libp2p_utils_array_equals__WEBPACK_IMPORTED_MODULE_4__.arrayEquals)(this.multiaddrs, other.multiaddrs)) {\n            return false;\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-record/dist/src/peer-record/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-record/dist/src/peer-record/peer-record.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@libp2p/peer-record/dist/src/peer-record/peer-record.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PeerRecord: () => (/* binding */ PeerRecord)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nvar PeerRecord;\n(function (PeerRecord) {\n    let AddressInfo;\n    (function (AddressInfo) {\n        let _codec;\n        AddressInfo.codec = () => {\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if ((obj.multiaddr != null && obj.multiaddr.byteLength > 0)) {\n                        w.uint32(10);\n                        w.bytes(obj.multiaddr);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {\n                        multiaddr: new Uint8Array(0)\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.multiaddr = reader.bytes();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        AddressInfo.encode = (obj) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, AddressInfo.codec());\n        };\n        AddressInfo.decode = (buf) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, AddressInfo.codec());\n        };\n    })(AddressInfo = PeerRecord.AddressInfo || (PeerRecord.AddressInfo = {}));\n    let _codec;\n    PeerRecord.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.peerId != null && obj.peerId.byteLength > 0)) {\n                    w.uint32(10);\n                    w.bytes(obj.peerId);\n                }\n                if ((obj.seq != null && obj.seq !== 0n)) {\n                    w.uint32(16);\n                    w.uint64(obj.seq);\n                }\n                if (obj.addresses != null) {\n                    for (const value of obj.addresses) {\n                        w.uint32(26);\n                        PeerRecord.AddressInfo.codec().encode(value, w);\n                    }\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    peerId: new Uint8Array(0),\n                    seq: 0n,\n                    addresses: []\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.peerId = reader.bytes();\n                            break;\n                        case 2:\n                            obj.seq = reader.uint64();\n                            break;\n                        case 3:\n                            obj.addresses.push(PeerRecord.AddressInfo.codec().decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    PeerRecord.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, PeerRecord.codec());\n    };\n    PeerRecord.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, PeerRecord.codec());\n    };\n})(PeerRecord || (PeerRecord = {}));\n//# sourceMappingURL=peer-record.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-record/dist/src/peer-record/peer-record.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-store/dist/src/errors.js":
/*!************************************************************!*\
  !*** ./node_modules/@libp2p/peer-store/dist/src/errors.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codes: () => (/* binding */ codes)\n/* harmony export */ });\nconst codes = {\n    ERR_INVALID_PARAMETERS: 'ERR_INVALID_PARAMETERS'\n};\n//# sourceMappingURL=errors.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-store/dist/src/errors.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-store/dist/src/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@libp2p/peer-store/dist/src/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PersistentPeerStore: () => (/* binding */ PersistentPeerStore)\n/* harmony export */ });\n/* harmony import */ var _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/peer-record */ \"./node_modules/@libp2p/peer-record/dist/src/envelope/index.js\");\n/* harmony import */ var _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/peer-record */ \"./node_modules/@libp2p/peer-record/dist/src/peer-record/index.js\");\n/* harmony import */ var it_all__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-all */ \"./node_modules/it-all/dist/src/index.js\");\n/* harmony import */ var _store_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./store.js */ \"./node_modules/@libp2p/peer-store/dist/src/store.js\");\n/**\n * @packageDocumentation\n *\n * The peer store is where libp2p stores data about the peers it has encountered on the network.\n */\n\n\n\n/**\n * An implementation of PeerStore that stores data in a Datastore\n */\nclass PersistentPeerStore {\n    store;\n    events;\n    peerId;\n    log;\n    constructor(components, init = {}) {\n        this.log = components.logger.forComponent('libp2p:peer-store');\n        this.events = components.events;\n        this.peerId = components.peerId;\n        this.store = new _store_js__WEBPACK_IMPORTED_MODULE_1__.PersistentStore(components, init);\n    }\n    async forEach(fn, query) {\n        this.log.trace('forEach await read lock');\n        const release = await this.store.lock.readLock();\n        this.log.trace('forEach got read lock');\n        try {\n            for await (const peer of this.store.all(query)) {\n                fn(peer);\n            }\n        }\n        finally {\n            this.log.trace('forEach release read lock');\n            release();\n        }\n    }\n    async all(query) {\n        this.log.trace('all await read lock');\n        const release = await this.store.lock.readLock();\n        this.log.trace('all got read lock');\n        try {\n            return await (0,it_all__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.store.all(query));\n        }\n        finally {\n            this.log.trace('all release read lock');\n            release();\n        }\n    }\n    async delete(peerId) {\n        this.log.trace('delete await write lock');\n        const release = await this.store.lock.writeLock();\n        this.log.trace('delete got write lock');\n        try {\n            await this.store.delete(peerId);\n        }\n        finally {\n            this.log.trace('delete release write lock');\n            release();\n        }\n    }\n    async has(peerId) {\n        this.log.trace('has await read lock');\n        const release = await this.store.lock.readLock();\n        this.log.trace('has got read lock');\n        try {\n            return await this.store.has(peerId);\n        }\n        finally {\n            this.log.trace('has release read lock');\n            release();\n        }\n    }\n    async get(peerId) {\n        this.log.trace('get await read lock');\n        const release = await this.store.lock.readLock();\n        this.log.trace('get got read lock');\n        try {\n            return await this.store.load(peerId);\n        }\n        finally {\n            this.log.trace('get release read lock');\n            release();\n        }\n    }\n    async save(id, data) {\n        this.log.trace('save await write lock');\n        const release = await this.store.lock.writeLock();\n        this.log.trace('save got write lock');\n        try {\n            const result = await this.store.save(id, data);\n            this.#emitIfUpdated(id, result);\n            return result.peer;\n        }\n        finally {\n            this.log.trace('save release write lock');\n            release();\n        }\n    }\n    async patch(id, data) {\n        this.log.trace('patch await write lock');\n        const release = await this.store.lock.writeLock();\n        this.log.trace('patch got write lock');\n        try {\n            const result = await this.store.patch(id, data);\n            this.#emitIfUpdated(id, result);\n            return result.peer;\n        }\n        finally {\n            this.log.trace('patch release write lock');\n            release();\n        }\n    }\n    async merge(id, data) {\n        this.log.trace('merge await write lock');\n        const release = await this.store.lock.writeLock();\n        this.log.trace('merge got write lock');\n        try {\n            const result = await this.store.merge(id, data);\n            this.#emitIfUpdated(id, result);\n            return result.peer;\n        }\n        finally {\n            this.log.trace('merge release write lock');\n            release();\n        }\n    }\n    async consumePeerRecord(buf, expectedPeer) {\n        const envelope = await _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_2__.RecordEnvelope.openAndCertify(buf, _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_3__.PeerRecord.DOMAIN);\n        if (expectedPeer?.equals(envelope.peerId) === false) {\n            this.log('envelope peer id was not the expected peer id - expected: %p received: %p', expectedPeer, envelope.peerId);\n            return false;\n        }\n        const peerRecord = _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_3__.PeerRecord.createFromProtobuf(envelope.payload);\n        let peer;\n        try {\n            peer = await this.get(envelope.peerId);\n        }\n        catch (err) {\n            if (err.code !== 'ERR_NOT_FOUND') {\n                throw err;\n            }\n        }\n        // ensure seq is greater than, or equal to, the last received\n        if (peer?.peerRecordEnvelope != null) {\n            const storedEnvelope = await _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_2__.RecordEnvelope.createFromProtobuf(peer.peerRecordEnvelope);\n            const storedRecord = _libp2p_peer_record__WEBPACK_IMPORTED_MODULE_3__.PeerRecord.createFromProtobuf(storedEnvelope.payload);\n            if (storedRecord.seqNumber >= peerRecord.seqNumber) {\n                this.log('sequence number was lower or equal to existing sequence number - stored: %d received: %d', storedRecord.seqNumber, peerRecord.seqNumber);\n                return false;\n            }\n        }\n        await this.patch(peerRecord.peerId, {\n            peerRecordEnvelope: buf,\n            addresses: peerRecord.multiaddrs.map(multiaddr => ({\n                isCertified: true,\n                multiaddr\n            }))\n        });\n        return true;\n    }\n    #emitIfUpdated(id, result) {\n        if (!result.updated) {\n            return;\n        }\n        if (this.peerId.equals(id)) {\n            this.events.safeDispatchEvent('self:peer:update', { detail: result });\n        }\n        else {\n            this.events.safeDispatchEvent('peer:update', { detail: result });\n        }\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-store/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-store/dist/src/pb/peer.js":
/*!*************************************************************!*\
  !*** ./node_modules/@libp2p/peer-store/dist/src/pb/peer.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Address: () => (/* binding */ Address),\n/* harmony export */   Peer: () => (/* binding */ Peer),\n/* harmony export */   Tag: () => (/* binding */ Tag)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nvar Peer;\n(function (Peer) {\n    let Peer$metadataEntry;\n    (function (Peer$metadataEntry) {\n        let _codec;\n        Peer$metadataEntry.codec = () => {\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if ((obj.key != null && obj.key !== '')) {\n                        w.uint32(10);\n                        w.string(obj.key);\n                    }\n                    if ((obj.value != null && obj.value.byteLength > 0)) {\n                        w.uint32(18);\n                        w.bytes(obj.value);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {\n                        key: '',\n                        value: new Uint8Array(0)\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.key = reader.string();\n                                break;\n                            case 2:\n                                obj.value = reader.bytes();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        Peer$metadataEntry.encode = (obj) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Peer$metadataEntry.codec());\n        };\n        Peer$metadataEntry.decode = (buf) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Peer$metadataEntry.codec());\n        };\n    })(Peer$metadataEntry = Peer.Peer$metadataEntry || (Peer.Peer$metadataEntry = {}));\n    let Peer$tagsEntry;\n    (function (Peer$tagsEntry) {\n        let _codec;\n        Peer$tagsEntry.codec = () => {\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if ((obj.key != null && obj.key !== '')) {\n                        w.uint32(10);\n                        w.string(obj.key);\n                    }\n                    if (obj.value != null) {\n                        w.uint32(18);\n                        Tag.codec().encode(obj.value, w);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {\n                        key: ''\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.key = reader.string();\n                                break;\n                            case 2:\n                                obj.value = Tag.codec().decode(reader, reader.uint32());\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        Peer$tagsEntry.encode = (obj) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Peer$tagsEntry.codec());\n        };\n        Peer$tagsEntry.decode = (buf) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Peer$tagsEntry.codec());\n        };\n    })(Peer$tagsEntry = Peer.Peer$tagsEntry || (Peer.Peer$tagsEntry = {}));\n    let _codec;\n    Peer.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.addresses != null) {\n                    for (const value of obj.addresses) {\n                        w.uint32(10);\n                        Address.codec().encode(value, w);\n                    }\n                }\n                if (obj.protocols != null) {\n                    for (const value of obj.protocols) {\n                        w.uint32(18);\n                        w.string(value);\n                    }\n                }\n                if (obj.publicKey != null) {\n                    w.uint32(34);\n                    w.bytes(obj.publicKey);\n                }\n                if (obj.peerRecordEnvelope != null) {\n                    w.uint32(42);\n                    w.bytes(obj.peerRecordEnvelope);\n                }\n                if (obj.metadata != null && obj.metadata.size !== 0) {\n                    for (const [key, value] of obj.metadata.entries()) {\n                        w.uint32(50);\n                        Peer.Peer$metadataEntry.codec().encode({ key, value }, w);\n                    }\n                }\n                if (obj.tags != null && obj.tags.size !== 0) {\n                    for (const [key, value] of obj.tags.entries()) {\n                        w.uint32(58);\n                        Peer.Peer$tagsEntry.codec().encode({ key, value }, w);\n                    }\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    addresses: [],\n                    protocols: [],\n                    metadata: new Map(),\n                    tags: new Map()\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.addresses.push(Address.codec().decode(reader, reader.uint32()));\n                            break;\n                        case 2:\n                            obj.protocols.push(reader.string());\n                            break;\n                        case 4:\n                            obj.publicKey = reader.bytes();\n                            break;\n                        case 5:\n                            obj.peerRecordEnvelope = reader.bytes();\n                            break;\n                        case 6: {\n                            const entry = Peer.Peer$metadataEntry.codec().decode(reader, reader.uint32());\n                            obj.metadata.set(entry.key, entry.value);\n                            break;\n                        }\n                        case 7: {\n                            const entry = Peer.Peer$tagsEntry.codec().decode(reader, reader.uint32());\n                            obj.tags.set(entry.key, entry.value);\n                            break;\n                        }\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Peer.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Peer.codec());\n    };\n    Peer.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Peer.codec());\n    };\n})(Peer || (Peer = {}));\nvar Address;\n(function (Address) {\n    let _codec;\n    Address.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.multiaddr != null && obj.multiaddr.byteLength > 0)) {\n                    w.uint32(10);\n                    w.bytes(obj.multiaddr);\n                }\n                if (obj.isCertified != null) {\n                    w.uint32(16);\n                    w.bool(obj.isCertified);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    multiaddr: new Uint8Array(0)\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.multiaddr = reader.bytes();\n                            break;\n                        case 2:\n                            obj.isCertified = reader.bool();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Address.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Address.codec());\n    };\n    Address.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Address.codec());\n    };\n})(Address || (Address = {}));\nvar Tag;\n(function (Tag) {\n    let _codec;\n    Tag.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.value != null && obj.value !== 0)) {\n                    w.uint32(8);\n                    w.uint32(obj.value);\n                }\n                if (obj.expiry != null) {\n                    w.uint32(16);\n                    w.uint64(obj.expiry);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    value: 0\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.value = reader.uint32();\n                            break;\n                        case 2:\n                            obj.expiry = reader.uint64();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Tag.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Tag.codec());\n    };\n    Tag.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Tag.codec());\n    };\n})(Tag || (Tag = {}));\n//# sourceMappingURL=peer.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-store/dist/src/pb/peer.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-store/dist/src/store.js":
/*!***********************************************************!*\
  !*** ./node_modules/@libp2p/peer-store/dist/src/store.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PersistentStore: () => (/* binding */ PersistentStore)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @libp2p/peer-collections */ \"./node_modules/@libp2p/peer-collections/dist/src/map.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var mortice__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mortice */ \"./node_modules/mortice/dist/src/index.js\");\n/* harmony import */ var multiformats_bases_base32__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/bases/base32 */ \"./node_modules/multiformats/dist/src/bases/base32.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/@libp2p/peer-store/dist/src/errors.js\");\n/* harmony import */ var _pb_peer_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./pb/peer.js */ \"./node_modules/@libp2p/peer-store/dist/src/pb/peer.js\");\n/* harmony import */ var _utils_bytes_to_peer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/bytes-to-peer.js */ \"./node_modules/@libp2p/peer-store/dist/src/utils/bytes-to-peer.js\");\n/* harmony import */ var _utils_peer_id_to_datastore_key_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/peer-id-to-datastore-key.js */ \"./node_modules/@libp2p/peer-store/dist/src/utils/peer-id-to-datastore-key.js\");\n/* harmony import */ var _utils_to_peer_pb_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/to-peer-pb.js */ \"./node_modules/@libp2p/peer-store/dist/src/utils/to-peer-pb.js\");\n\n\n\n\n\n\n\n\n\n\n\nfunction decodePeer(key, value, cache) {\n    // /peers/${peer-id-as-libp2p-key-cid-string-in-base-32}\n    const base32Str = key.toString().split('/')[2];\n    const buf = multiformats_bases_base32__WEBPACK_IMPORTED_MODULE_1__.base32.decode(base32Str);\n    const peerId = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_3__.peerIdFromBytes)(buf);\n    const cached = cache.get(peerId);\n    if (cached != null) {\n        return cached;\n    }\n    const peer = (0,_utils_bytes_to_peer_js__WEBPACK_IMPORTED_MODULE_4__.bytesToPeer)(peerId, value);\n    cache.set(peerId, peer);\n    return peer;\n}\nfunction mapQuery(query, cache) {\n    if (query == null) {\n        return {};\n    }\n    return {\n        prefix: _utils_peer_id_to_datastore_key_js__WEBPACK_IMPORTED_MODULE_5__.NAMESPACE_COMMON,\n        filters: (query.filters ?? []).map(fn => ({ key, value }) => {\n            return fn(decodePeer(key, value, cache));\n        }),\n        orders: (query.orders ?? []).map(fn => (a, b) => {\n            return fn(decodePeer(a.key, a.value, cache), decodePeer(b.key, b.value, cache));\n        })\n    };\n}\nclass PersistentStore {\n    peerId;\n    datastore;\n    lock;\n    addressFilter;\n    constructor(components, init = {}) {\n        this.peerId = components.peerId;\n        this.datastore = components.datastore;\n        this.addressFilter = init.addressFilter;\n        this.lock = (0,mortice__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            name: 'peer-store',\n            singleProcess: true\n        });\n    }\n    async has(peerId) {\n        return this.datastore.has((0,_utils_peer_id_to_datastore_key_js__WEBPACK_IMPORTED_MODULE_5__.peerIdToDatastoreKey)(peerId));\n    }\n    async delete(peerId) {\n        if (this.peerId.equals(peerId)) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__.CodeError('Cannot delete self peer', _errors_js__WEBPACK_IMPORTED_MODULE_7__.codes.ERR_INVALID_PARAMETERS);\n        }\n        await this.datastore.delete((0,_utils_peer_id_to_datastore_key_js__WEBPACK_IMPORTED_MODULE_5__.peerIdToDatastoreKey)(peerId));\n    }\n    async load(peerId) {\n        const buf = await this.datastore.get((0,_utils_peer_id_to_datastore_key_js__WEBPACK_IMPORTED_MODULE_5__.peerIdToDatastoreKey)(peerId));\n        return (0,_utils_bytes_to_peer_js__WEBPACK_IMPORTED_MODULE_4__.bytesToPeer)(peerId, buf);\n    }\n    async save(peerId, data) {\n        const { existingBuf, existingPeer } = await this.#findExistingPeer(peerId);\n        const peerPb = await (0,_utils_to_peer_pb_js__WEBPACK_IMPORTED_MODULE_8__.toPeerPB)(peerId, data, 'patch', {\n            addressFilter: this.addressFilter\n        });\n        return this.#saveIfDifferent(peerId, peerPb, existingBuf, existingPeer);\n    }\n    async patch(peerId, data) {\n        const { existingBuf, existingPeer } = await this.#findExistingPeer(peerId);\n        const peerPb = await (0,_utils_to_peer_pb_js__WEBPACK_IMPORTED_MODULE_8__.toPeerPB)(peerId, data, 'patch', {\n            addressFilter: this.addressFilter,\n            existingPeer\n        });\n        return this.#saveIfDifferent(peerId, peerPb, existingBuf, existingPeer);\n    }\n    async merge(peerId, data) {\n        const { existingBuf, existingPeer } = await this.#findExistingPeer(peerId);\n        const peerPb = await (0,_utils_to_peer_pb_js__WEBPACK_IMPORTED_MODULE_8__.toPeerPB)(peerId, data, 'merge', {\n            addressFilter: this.addressFilter,\n            existingPeer\n        });\n        return this.#saveIfDifferent(peerId, peerPb, existingBuf, existingPeer);\n    }\n    async *all(query) {\n        const peerCache = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_9__.PeerMap();\n        for await (const { key, value } of this.datastore.query(mapQuery(query ?? {}, peerCache))) {\n            const peer = decodePeer(key, value, peerCache);\n            if (peer.id.equals(this.peerId)) {\n                // Skip self peer if present\n                continue;\n            }\n            yield peer;\n        }\n    }\n    async #findExistingPeer(peerId) {\n        try {\n            const existingBuf = await this.datastore.get((0,_utils_peer_id_to_datastore_key_js__WEBPACK_IMPORTED_MODULE_5__.peerIdToDatastoreKey)(peerId));\n            const existingPeer = (0,_utils_bytes_to_peer_js__WEBPACK_IMPORTED_MODULE_4__.bytesToPeer)(peerId, existingBuf);\n            return {\n                existingBuf,\n                existingPeer\n            };\n        }\n        catch (err) {\n            if (err.code !== 'ERR_NOT_FOUND') {\n                throw err;\n            }\n        }\n        return {};\n    }\n    async #saveIfDifferent(peerId, peer, existingBuf, existingPeer) {\n        const buf = _pb_peer_js__WEBPACK_IMPORTED_MODULE_10__.Peer.encode(peer);\n        if (existingBuf != null && (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_2__.equals)(buf, existingBuf)) {\n            return {\n                peer: (0,_utils_bytes_to_peer_js__WEBPACK_IMPORTED_MODULE_4__.bytesToPeer)(peerId, buf),\n                previous: existingPeer,\n                updated: false\n            };\n        }\n        await this.datastore.put((0,_utils_peer_id_to_datastore_key_js__WEBPACK_IMPORTED_MODULE_5__.peerIdToDatastoreKey)(peerId), buf);\n        return {\n            peer: (0,_utils_bytes_to_peer_js__WEBPACK_IMPORTED_MODULE_4__.bytesToPeer)(peerId, buf),\n            previous: existingPeer,\n            updated: true\n        };\n    }\n}\n//# sourceMappingURL=store.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-store/dist/src/store.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-store/dist/src/utils/bytes-to-peer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@libp2p/peer-store/dist/src/utils/bytes-to-peer.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bytesToPeer: () => (/* binding */ bytesToPeer)\n/* harmony export */ });\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _pb_peer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pb/peer.js */ \"./node_modules/@libp2p/peer-store/dist/src/pb/peer.js\");\n\n\n\nfunction bytesToPeer(peerId, buf) {\n    const peer = _pb_peer_js__WEBPACK_IMPORTED_MODULE_1__.Peer.decode(buf);\n    if (peer.publicKey != null && peerId.publicKey == null) {\n        peerId = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_2__.peerIdFromPeerId)({\n            ...peerId,\n            publicKey: peerId.publicKey\n        });\n    }\n    const tags = new Map();\n    // remove any expired tags\n    const now = BigInt(Date.now());\n    for (const [key, tag] of peer.tags.entries()) {\n        if (tag.expiry != null && tag.expiry < now) {\n            continue;\n        }\n        tags.set(key, tag);\n    }\n    return {\n        ...peer,\n        id: peerId,\n        addresses: peer.addresses.map(({ multiaddr: ma, isCertified }) => {\n            return {\n                multiaddr: (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(ma),\n                isCertified: isCertified ?? false\n            };\n        }),\n        metadata: peer.metadata,\n        peerRecordEnvelope: peer.peerRecordEnvelope ?? undefined,\n        tags\n    };\n}\n//# sourceMappingURL=bytes-to-peer.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-store/dist/src/utils/bytes-to-peer.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-store/dist/src/utils/dedupe-addresses.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@libp2p/peer-store/dist/src/utils/dedupe-addresses.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dedupeFilterAndSortAddresses: () => (/* binding */ dedupeFilterAndSortAddresses)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors.js */ \"./node_modules/@libp2p/peer-store/dist/src/errors.js\");\n\n\n\nasync function dedupeFilterAndSortAddresses(peerId, filter, addresses) {\n    const addressMap = new Map();\n    for (const addr of addresses) {\n        if (addr == null) {\n            continue;\n        }\n        if (addr.multiaddr instanceof Uint8Array) {\n            addr.multiaddr = (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(addr.multiaddr);\n        }\n        if (!(0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.isMultiaddr)(addr.multiaddr)) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Multiaddr was invalid', _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_INVALID_PARAMETERS);\n        }\n        if (!(await filter(peerId, addr.multiaddr))) {\n            continue;\n        }\n        const isCertified = addr.isCertified ?? false;\n        const maStr = addr.multiaddr.toString();\n        const existingAddr = addressMap.get(maStr);\n        if (existingAddr != null) {\n            addr.isCertified = existingAddr.isCertified || isCertified;\n        }\n        else {\n            addressMap.set(maStr, {\n                multiaddr: addr.multiaddr,\n                isCertified\n            });\n        }\n    }\n    return [...addressMap.values()]\n        .sort((a, b) => {\n        return a.multiaddr.toString().localeCompare(b.multiaddr.toString());\n    })\n        .map(({ isCertified, multiaddr }) => ({\n        isCertified,\n        multiaddr: multiaddr.bytes\n    }));\n}\n//# sourceMappingURL=dedupe-addresses.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-store/dist/src/utils/dedupe-addresses.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-store/dist/src/utils/peer-id-to-datastore-key.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@libp2p/peer-store/dist/src/utils/peer-id-to-datastore-key.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NAMESPACE_COMMON: () => (/* binding */ NAMESPACE_COMMON),\n/* harmony export */   peerIdToDatastoreKey: () => (/* binding */ peerIdToDatastoreKey)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/peer-id/index.js\");\n/* harmony import */ var interface_datastore_key__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! interface-datastore/key */ \"./node_modules/interface-datastore/dist/src/key.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors.js */ \"./node_modules/@libp2p/peer-store/dist/src/errors.js\");\n\n\n\n\nconst NAMESPACE_COMMON = '/peers/';\nfunction peerIdToDatastoreKey(peerId) {\n    if (!(0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.isPeerId)(peerId) || peerId.type == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('Invalid PeerId', _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_INVALID_PARAMETERS);\n    }\n    const b32key = peerId.toCID().toString();\n    return new interface_datastore_key__WEBPACK_IMPORTED_MODULE_0__.Key(`${NAMESPACE_COMMON}${b32key}`);\n}\n//# sourceMappingURL=peer-id-to-datastore-key.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-store/dist/src/utils/peer-id-to-datastore-key.js?");

/***/ }),

/***/ "./node_modules/@libp2p/peer-store/dist/src/utils/to-peer-pb.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@libp2p/peer-store/dist/src/utils/to-peer-pb.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toPeerPB: () => (/* binding */ toPeerPB)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors.js */ \"./node_modules/@libp2p/peer-store/dist/src/errors.js\");\n/* harmony import */ var _dedupe_addresses_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dedupe-addresses.js */ \"./node_modules/@libp2p/peer-store/dist/src/utils/dedupe-addresses.js\");\n\n\n\n\nasync function toPeerPB(peerId, data, strategy, options) {\n    if (data == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Invalid PeerData', _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_INVALID_PARAMETERS);\n    }\n    if (data.publicKey != null && peerId.publicKey != null && !(0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_0__.equals)(data.publicKey, peerId.publicKey)) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('publicKey bytes do not match peer id publicKey bytes', _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_INVALID_PARAMETERS);\n    }\n    const existingPeer = options.existingPeer;\n    if (existingPeer != null && !peerId.equals(existingPeer.id)) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('peer id did not match existing peer id', _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_INVALID_PARAMETERS);\n    }\n    let addresses = existingPeer?.addresses ?? [];\n    let protocols = new Set(existingPeer?.protocols ?? []);\n    let metadata = existingPeer?.metadata ?? new Map();\n    let tags = existingPeer?.tags ?? new Map();\n    let peerRecordEnvelope = existingPeer?.peerRecordEnvelope;\n    // when patching, we replace the original fields with passed values\n    if (strategy === 'patch') {\n        if (data.multiaddrs != null || data.addresses != null) {\n            addresses = [];\n            if (data.multiaddrs != null) {\n                addresses.push(...data.multiaddrs.map(multiaddr => ({\n                    isCertified: false,\n                    multiaddr\n                })));\n            }\n            if (data.addresses != null) {\n                addresses.push(...data.addresses);\n            }\n        }\n        if (data.protocols != null) {\n            protocols = new Set(data.protocols);\n        }\n        if (data.metadata != null) {\n            const metadataEntries = data.metadata instanceof Map ? [...data.metadata.entries()] : Object.entries(data.metadata);\n            metadata = createSortedMap(metadataEntries, {\n                validate: validateMetadata\n            });\n        }\n        if (data.tags != null) {\n            const tagsEntries = data.tags instanceof Map ? [...data.tags.entries()] : Object.entries(data.tags);\n            tags = createSortedMap(tagsEntries, {\n                validate: validateTag,\n                map: mapTag\n            });\n        }\n        if (data.peerRecordEnvelope != null) {\n            peerRecordEnvelope = data.peerRecordEnvelope;\n        }\n    }\n    // when merging, we join the original fields with passed values\n    if (strategy === 'merge') {\n        if (data.multiaddrs != null) {\n            addresses.push(...data.multiaddrs.map(multiaddr => ({\n                isCertified: false,\n                multiaddr\n            })));\n        }\n        if (data.addresses != null) {\n            addresses.push(...data.addresses);\n        }\n        if (data.protocols != null) {\n            protocols = new Set([...protocols, ...data.protocols]);\n        }\n        if (data.metadata != null) {\n            const metadataEntries = data.metadata instanceof Map ? [...data.metadata.entries()] : Object.entries(data.metadata);\n            for (const [key, value] of metadataEntries) {\n                if (value == null) {\n                    metadata.delete(key);\n                }\n                else {\n                    metadata.set(key, value);\n                }\n            }\n            metadata = createSortedMap([...metadata.entries()], {\n                validate: validateMetadata\n            });\n        }\n        if (data.tags != null) {\n            const tagsEntries = data.tags instanceof Map ? [...data.tags.entries()] : Object.entries(data.tags);\n            const mergedTags = new Map(tags);\n            for (const [key, value] of tagsEntries) {\n                if (value == null) {\n                    mergedTags.delete(key);\n                }\n                else {\n                    mergedTags.set(key, value);\n                }\n            }\n            tags = createSortedMap([...mergedTags.entries()], {\n                validate: validateTag,\n                map: mapTag\n            });\n        }\n        if (data.peerRecordEnvelope != null) {\n            peerRecordEnvelope = data.peerRecordEnvelope;\n        }\n    }\n    const output = {\n        addresses: await (0,_dedupe_addresses_js__WEBPACK_IMPORTED_MODULE_3__.dedupeFilterAndSortAddresses)(peerId, options.addressFilter ?? (async () => true), addresses),\n        protocols: [...protocols.values()].sort((a, b) => {\n            return a.localeCompare(b);\n        }),\n        metadata,\n        tags,\n        publicKey: existingPeer?.id.publicKey ?? data.publicKey ?? peerId.publicKey,\n        peerRecordEnvelope\n    };\n    // Ed25519 and secp256k1 have their public key embedded in them so no need to duplicate it\n    if (peerId.type !== 'RSA') {\n        delete output.publicKey;\n    }\n    return output;\n}\n/**\n * In JS maps are ordered by insertion order so create a new map with the\n * keys inserted in alphabetical order.\n */\nfunction createSortedMap(entries, options) {\n    const output = new Map();\n    for (const [key, value] of entries) {\n        if (value == null) {\n            continue;\n        }\n        options.validate(key, value);\n    }\n    for (const [key, value] of entries.sort(([a], [b]) => {\n        return a.localeCompare(b);\n    })) {\n        if (value != null) {\n            output.set(key, options.map?.(key, value) ?? value);\n        }\n    }\n    return output;\n}\nfunction validateMetadata(key, value) {\n    if (typeof key !== 'string') {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Metadata key must be a string', _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_INVALID_PARAMETERS);\n    }\n    if (!(value instanceof Uint8Array)) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Metadata value must be a Uint8Array', _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_INVALID_PARAMETERS);\n    }\n}\nfunction validateTag(key, tag) {\n    if (typeof key !== 'string') {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Tag name must be a string', _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_INVALID_PARAMETERS);\n    }\n    if (tag.value != null) {\n        if (parseInt(`${tag.value}`, 10) !== tag.value) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Tag value must be an integer', _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_INVALID_PARAMETERS);\n        }\n        if (tag.value < 0 || tag.value > 100) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Tag value must be between 0-100', _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_INVALID_PARAMETERS);\n        }\n    }\n    if (tag.ttl != null) {\n        if (parseInt(`${tag.ttl}`, 10) !== tag.ttl) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Tag ttl must be an integer', _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_INVALID_PARAMETERS);\n        }\n        if (tag.ttl < 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Tag ttl must be between greater than 0', _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_INVALID_PARAMETERS);\n        }\n    }\n}\nfunction mapTag(key, tag) {\n    let expiry;\n    if (tag.expiry != null) {\n        expiry = tag.expiry;\n    }\n    if (tag.ttl != null) {\n        expiry = BigInt(Date.now() + Number(tag.ttl));\n    }\n    return {\n        value: tag.value ?? 0,\n        expiry\n    };\n}\n//# sourceMappingURL=to-peer-pb.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/peer-store/dist/src/utils/to-peer-pb.js?");

/***/ }),

/***/ "./node_modules/@libp2p/ping/dist/src/constants.js":
/*!*********************************************************!*\
  !*** ./node_modules/@libp2p/ping/dist/src/constants.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERR_WRONG_PING_ACK: () => (/* binding */ ERR_WRONG_PING_ACK),\n/* harmony export */   MAX_INBOUND_STREAMS: () => (/* binding */ MAX_INBOUND_STREAMS),\n/* harmony export */   MAX_OUTBOUND_STREAMS: () => (/* binding */ MAX_OUTBOUND_STREAMS),\n/* harmony export */   PING_LENGTH: () => (/* binding */ PING_LENGTH),\n/* harmony export */   PING_PROTOCOL: () => (/* binding */ PING_PROTOCOL),\n/* harmony export */   PROTOCOL_NAME: () => (/* binding */ PROTOCOL_NAME),\n/* harmony export */   PROTOCOL_PREFIX: () => (/* binding */ PROTOCOL_PREFIX),\n/* harmony export */   PROTOCOL_VERSION: () => (/* binding */ PROTOCOL_VERSION),\n/* harmony export */   TIMEOUT: () => (/* binding */ TIMEOUT)\n/* harmony export */ });\nconst PING_PROTOCOL = '/ipfs/ping/1.0.0';\nconst PING_LENGTH = 32;\nconst PROTOCOL_VERSION = '1.0.0';\nconst PROTOCOL_NAME = 'ping';\nconst PROTOCOL_PREFIX = 'ipfs';\nconst TIMEOUT = 10000;\n// See https://github.com/libp2p/specs/blob/d4b5fb0152a6bb86cfd9ea/ping/ping.md?plain=1#L38-L43\n// The dialing peer MUST NOT keep more than one outbound stream for the ping protocol per peer.\n// The listening peer SHOULD accept at most two streams per peer since cross-stream behavior is\n// non-linear and stream writes occur asynchronously. The listening peer may perceive the\n// dialing peer closing and opening the wrong streams (for instance, closing stream B and\n// opening stream A even though the dialing peer is opening stream B and closing stream A).\nconst MAX_INBOUND_STREAMS = 2;\nconst MAX_OUTBOUND_STREAMS = 1;\nconst ERR_WRONG_PING_ACK = 'ERR_WRONG_PING_ACK';\n//# sourceMappingURL=constants.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/ping/dist/src/constants.js?");

/***/ }),

/***/ "./node_modules/@libp2p/ping/dist/src/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@libp2p/ping/dist/src/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PING_PROTOCOL: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_1__.PING_PROTOCOL),\n/* harmony export */   ping: () => (/* binding */ ping)\n/* harmony export */ });\n/* harmony import */ var _ping_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ping.js */ \"./node_modules/@libp2p/ping/dist/src/ping.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@libp2p/ping/dist/src/constants.js\");\n/**\n * @packageDocumentation\n *\n * The ping service implements the [libp2p ping spec](https://github.com/libp2p/specs/blob/master/ping/ping.md) allowing you to make a latency measurement to a remote peer.\n *\n * @example\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n * import { ping } from '@libp2p/ping'\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const node = await createLibp2p({\n *   services: {\n *     ping: ping()\n *   }\n * })\n *\n * const rtt = await node.services.ping.ping(multiaddr('/ip4/...'))\n *\n * console.info(rtt)\n * ```\n */\n\nfunction ping(init = {}) {\n    return (components) => new _ping_js__WEBPACK_IMPORTED_MODULE_0__.PingService(components, init);\n}\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/ping/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/ping/dist/src/ping.js":
/*!****************************************************!*\
  !*** ./node_modules/@libp2p/ping/dist/src/ping.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PingService: () => (/* binding */ PingService)\n/* harmony export */ });\n/* harmony import */ var _libp2p_crypto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/crypto */ \"./node_modules/@libp2p/crypto/dist/src/random-bytes.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var it_first__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-first */ \"./node_modules/it-first/dist/src/index.js\");\n/* harmony import */ var it_pipe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-pipe */ \"./node_modules/it-pipe/dist/src/index.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@libp2p/ping/dist/src/constants.js\");\n\n\n\n\n\n\nclass PingService {\n    protocol;\n    components;\n    started;\n    timeout;\n    maxInboundStreams;\n    maxOutboundStreams;\n    runOnTransientConnection;\n    log;\n    constructor(components, init = {}) {\n        this.components = components;\n        this.log = components.logger.forComponent('libp2p:ping');\n        this.started = false;\n        this.protocol = `/${init.protocolPrefix ?? _constants_js__WEBPACK_IMPORTED_MODULE_3__.PROTOCOL_PREFIX}/${_constants_js__WEBPACK_IMPORTED_MODULE_3__.PROTOCOL_NAME}/${_constants_js__WEBPACK_IMPORTED_MODULE_3__.PROTOCOL_VERSION}`;\n        this.timeout = init.timeout ?? _constants_js__WEBPACK_IMPORTED_MODULE_3__.TIMEOUT;\n        this.maxInboundStreams = init.maxInboundStreams ?? _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAX_INBOUND_STREAMS;\n        this.maxOutboundStreams = init.maxOutboundStreams ?? _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAX_OUTBOUND_STREAMS;\n        this.runOnTransientConnection = init.runOnTransientConnection ?? true;\n        this.handleMessage = this.handleMessage.bind(this);\n    }\n    async start() {\n        await this.components.registrar.handle(this.protocol, this.handleMessage, {\n            maxInboundStreams: this.maxInboundStreams,\n            maxOutboundStreams: this.maxOutboundStreams,\n            runOnTransientConnection: this.runOnTransientConnection\n        });\n        this.started = true;\n    }\n    async stop() {\n        await this.components.registrar.unhandle(this.protocol);\n        this.started = false;\n    }\n    isStarted() {\n        return this.started;\n    }\n    /**\n     * A handler to register with Libp2p to process ping messages\n     */\n    handleMessage(data) {\n        this.log('incoming ping from %p', data.connection.remotePeer);\n        const { stream } = data;\n        const start = Date.now();\n        void (0,it_pipe__WEBPACK_IMPORTED_MODULE_1__.pipe)(stream, stream)\n            .catch(err => {\n            this.log.error('incoming ping from %p failed with error', data.connection.remotePeer, err);\n        })\n            .finally(() => {\n            const ms = Date.now() - start;\n            this.log('incoming ping from %p complete in %dms', data.connection.remotePeer, ms);\n        });\n    }\n    /**\n     * Ping a given peer and wait for its response, getting the operation latency.\n     */\n    async ping(peer, options = {}) {\n        this.log('pinging %p', peer);\n        const start = Date.now();\n        const data = (0,_libp2p_crypto__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(_constants_js__WEBPACK_IMPORTED_MODULE_3__.PING_LENGTH);\n        const connection = await this.components.connectionManager.openConnection(peer, options);\n        let stream;\n        let onAbort = () => { };\n        if (options.signal == null) {\n            const signal = AbortSignal.timeout(this.timeout);\n            options = {\n                ...options,\n                signal\n            };\n        }\n        try {\n            stream = await connection.newStream(this.protocol, {\n                ...options,\n                runOnTransientConnection: this.runOnTransientConnection\n            });\n            onAbort = () => {\n                stream?.abort(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.CodeError('ping timeout', _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.ERR_TIMEOUT));\n            };\n            // make stream abortable\n            options.signal?.addEventListener('abort', onAbort, { once: true });\n            const result = await (0,it_pipe__WEBPACK_IMPORTED_MODULE_1__.pipe)([data], stream, async (source) => (0,it_first__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(source));\n            const ms = Date.now() - start;\n            if (result == null) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.CodeError(`Did not receive a ping ack after ${ms}ms`, _constants_js__WEBPACK_IMPORTED_MODULE_3__.ERR_WRONG_PING_ACK);\n            }\n            if (!(0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_2__.equals)(data, result.subarray())) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.CodeError(`Received wrong ping ack after ${ms}ms`, _constants_js__WEBPACK_IMPORTED_MODULE_3__.ERR_WRONG_PING_ACK);\n            }\n            this.log('ping %p complete in %dms', connection.remotePeer, ms);\n            return ms;\n        }\n        catch (err) {\n            this.log.error('error while pinging %p', connection.remotePeer, err);\n            stream?.abort(err);\n            throw err;\n        }\n        finally {\n            options.signal?.removeEventListener('abort', onAbort);\n            if (stream != null) {\n                await stream.close();\n            }\n        }\n    }\n}\n//# sourceMappingURL=ping.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/ping/dist/src/ping.js?");

/***/ }),

/***/ "./node_modules/@libp2p/record/dist/src/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@libp2p/record/dist/src/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Libp2pRecord: () => (/* binding */ Libp2pRecord)\n/* harmony export */ });\n/* harmony import */ var _record_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./record.js */ \"./node_modules/@libp2p/record/dist/src/record.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@libp2p/record/dist/src/utils.js\");\n/**\n * @packageDocumentation\n *\n * This is an implementation of the [routing record format](https://github.com/libp2p/specs/blob/b9efe152c29f93f7a87931c14d78ae11e7924d5a/kad-dht/README.md?plain=1#L408-L425) used by libp2p to store data in the datastore passed to the libp2p constructor.\n *\n * @example Deserialization\n *\n * ```TypeScript\n * import { Libp2pRecord } from '@libp2p/record'\n *\n * const buf = Uint8Array.from([0, 1, 2, 3])\n * const record = Libp2pRecord.deserialize(buf)\n * ```\n *\n * @example Serialization\n *\n * ```TypeScript\n * import { Libp2pRecord } from '@libp2p/record'\n *\n * const key = Uint8Array.from([0, 1, 2, 3])\n * const value = Uint8Array.from([0, 1, 2, 3])\n * const timeReceived = new Date()\n *\n * const record = new Libp2pRecord(key, value, timeReceived)\n * const buf = record.serialize()\n * ```\n */\n\n\nclass Libp2pRecord {\n    key;\n    value;\n    timeReceived;\n    constructor(key, value, timeReceived) {\n        if (!(key instanceof Uint8Array)) {\n            throw new Error('key must be a Uint8Array');\n        }\n        if (!(value instanceof Uint8Array)) {\n            throw new Error('value must be a Uint8Array');\n        }\n        this.key = key;\n        this.value = value;\n        this.timeReceived = timeReceived;\n    }\n    serialize() {\n        return _record_js__WEBPACK_IMPORTED_MODULE_0__.Record.encode(this.prepareSerialize());\n    }\n    /**\n     * Return the object format ready to be given to the protobuf library.\n     */\n    prepareSerialize() {\n        return {\n            key: this.key,\n            value: this.value,\n            timeReceived: _utils_js__WEBPACK_IMPORTED_MODULE_1__.toRFC3339(this.timeReceived)\n        };\n    }\n    /**\n     * Decode a protobuf encoded record\n     */\n    static deserialize(raw) {\n        const rec = _record_js__WEBPACK_IMPORTED_MODULE_0__.Record.decode(raw);\n        return new Libp2pRecord(rec.key, rec.value, new Date(rec.timeReceived));\n    }\n    /**\n     * Create a record from the raw object returned from the protobuf library\n     */\n    static fromDeserialized(obj) {\n        const recvtime = _utils_js__WEBPACK_IMPORTED_MODULE_1__.parseRFC3339(obj.timeReceived);\n        if (obj.key == null) {\n            throw new Error('key missing from deserialized object');\n        }\n        if (obj.value == null) {\n            throw new Error('value missing from deserialized object');\n        }\n        const rec = new Libp2pRecord(obj.key, obj.value, recvtime);\n        return rec;\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/record/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/record/dist/src/record.js":
/*!********************************************************!*\
  !*** ./node_modules/@libp2p/record/dist/src/record.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Record: () => (/* binding */ Record)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/alloc */ \"./node_modules/uint8arrays/dist/src/alloc.js\");\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n\nvar Record;\n(function (Record) {\n    let _codec;\n    Record.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if ((obj.key != null && obj.key.byteLength > 0)) {\n                    w.uint32(10);\n                    w.bytes(obj.key);\n                }\n                if ((obj.value != null && obj.value.byteLength > 0)) {\n                    w.uint32(18);\n                    w.bytes(obj.value);\n                }\n                if ((obj.timeReceived != null && obj.timeReceived !== '')) {\n                    w.uint32(42);\n                    w.string(obj.timeReceived);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length, opts = {}) => {\n                const obj = {\n                    key: (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__.alloc)(0),\n                    value: (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_1__.alloc)(0),\n                    timeReceived: ''\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1: {\n                            obj.key = reader.bytes();\n                            break;\n                        }\n                        case 2: {\n                            obj.value = reader.bytes();\n                            break;\n                        }\n                        case 5: {\n                            obj.timeReceived = reader.string();\n                            break;\n                        }\n                        default: {\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Record.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Record.codec());\n    };\n    Record.decode = (buf, opts) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Record.codec(), opts);\n    };\n})(Record || (Record = {}));\n//# sourceMappingURL=record.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/record/dist/src/record.js?");

/***/ }),

/***/ "./node_modules/@libp2p/record/dist/src/utils.js":
/*!*******************************************************!*\
  !*** ./node_modules/@libp2p/record/dist/src/utils.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseRFC3339: () => (/* binding */ parseRFC3339),\n/* harmony export */   toRFC3339: () => (/* binding */ toRFC3339)\n/* harmony export */ });\n/**\n * Convert a JavaScript date into an `RFC3339Nano` formatted\n * string\n */\nfunction toRFC3339(time) {\n    const year = time.getUTCFullYear();\n    const month = String(time.getUTCMonth() + 1).padStart(2, '0');\n    const day = String(time.getUTCDate()).padStart(2, '0');\n    const hour = String(time.getUTCHours()).padStart(2, '0');\n    const minute = String(time.getUTCMinutes()).padStart(2, '0');\n    const seconds = String(time.getUTCSeconds()).padStart(2, '0');\n    const milliseconds = time.getUTCMilliseconds();\n    const nanoseconds = String(milliseconds * 1000 * 1000).padStart(9, '0');\n    return `${year}-${month}-${day}T${hour}:${minute}:${seconds}.${nanoseconds}Z`;\n}\n/**\n * Parses a date string formatted as `RFC3339Nano` into a\n * JavaScript Date object\n */\nfunction parseRFC3339(time) {\n    const rfc3339Matcher = new RegExp(\n    // 2006-01-02T\n    '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T' +\n        // 15:04:05\n        '(\\\\d{2}):(\\\\d{2}):(\\\\d{2})' +\n        // .999999999Z\n        '\\\\.(\\\\d+)Z');\n    const m = String(time).trim().match(rfc3339Matcher);\n    if (m == null) {\n        throw new Error('Invalid format');\n    }\n    const year = parseInt(m[1], 10);\n    const month = parseInt(m[2], 10) - 1;\n    const date = parseInt(m[3], 10);\n    const hour = parseInt(m[4], 10);\n    const minute = parseInt(m[5], 10);\n    const second = parseInt(m[6], 10);\n    const millisecond = parseInt(m[7].slice(0, -6), 10);\n    return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond));\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/record/dist/src/utils.js?");

/***/ }),

/***/ "./node_modules/@libp2p/utils/dist/src/abstract-stream.js":
/*!****************************************************************!*\
  !*** ./node_modules/@libp2p/utils/dist/src/abstract-stream.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractStream: () => (/* binding */ AbstractStream)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var it_pushable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-pushable */ \"./node_modules/it-pushable/dist/src/index.js\");\n/* harmony import */ var p_defer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! p-defer */ \"./node_modules/p-defer/index.js\");\n/* harmony import */ var race_signal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! race-signal */ \"./node_modules/race-signal/dist/src/index.js\");\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var _close_source_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./close-source.js */ \"./node_modules/@libp2p/utils/dist/src/close-source.js\");\n\n\n\n\n\n\n\nconst ERR_STREAM_RESET = 'ERR_STREAM_RESET';\nconst ERR_SINK_INVALID_STATE = 'ERR_SINK_INVALID_STATE';\nconst DEFAULT_SEND_CLOSE_WRITE_TIMEOUT = 5000;\nfunction isPromise(thing) {\n    if (thing == null) {\n        return false;\n    }\n    return typeof thing.then === 'function' &&\n        typeof thing.catch === 'function' &&\n        typeof thing.finally === 'function';\n}\nclass AbstractStream {\n    id;\n    direction;\n    timeline;\n    protocol;\n    metadata;\n    source;\n    status;\n    readStatus;\n    writeStatus;\n    log;\n    sinkController;\n    sinkEnd;\n    closed;\n    endErr;\n    streamSource;\n    onEnd;\n    onCloseRead;\n    onCloseWrite;\n    onReset;\n    onAbort;\n    sendCloseWriteTimeout;\n    sendingData;\n    constructor(init) {\n        this.sinkController = new AbortController();\n        this.sinkEnd = (0,p_defer__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n        this.closed = (0,p_defer__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n        this.log = init.log;\n        // stream status\n        this.status = 'open';\n        this.readStatus = 'ready';\n        this.writeStatus = 'ready';\n        this.id = init.id;\n        this.metadata = init.metadata ?? {};\n        this.direction = init.direction;\n        this.timeline = {\n            open: Date.now()\n        };\n        this.sendCloseWriteTimeout = init.sendCloseWriteTimeout ?? DEFAULT_SEND_CLOSE_WRITE_TIMEOUT;\n        this.onEnd = init.onEnd;\n        this.onCloseRead = init?.onCloseRead;\n        this.onCloseWrite = init?.onCloseWrite;\n        this.onReset = init?.onReset;\n        this.onAbort = init?.onAbort;\n        this.source = this.streamSource = (0,it_pushable__WEBPACK_IMPORTED_MODULE_0__.pushable)({\n            onEnd: (err) => {\n                if (err != null) {\n                    this.log.trace('source ended with error', err);\n                }\n                else {\n                    this.log.trace('source ended');\n                }\n                this.onSourceEnd(err);\n            }\n        });\n        // necessary because the libp2p upgrader wraps the sink function\n        this.sink = this.sink.bind(this);\n    }\n    async sink(source) {\n        if (this.writeStatus !== 'ready') {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError(`writable end state is \"${this.writeStatus}\" not \"ready\"`, ERR_SINK_INVALID_STATE);\n        }\n        try {\n            this.writeStatus = 'writing';\n            const options = {\n                signal: this.sinkController.signal\n            };\n            if (this.direction === 'outbound') { // If initiator, open a new stream\n                const res = this.sendNewStream(options);\n                if (isPromise(res)) {\n                    await res;\n                }\n            }\n            const abortListener = () => {\n                (0,_close_source_js__WEBPACK_IMPORTED_MODULE_5__.closeSource)(source, this.log);\n            };\n            try {\n                this.sinkController.signal.addEventListener('abort', abortListener);\n                this.log.trace('sink reading from source');\n                for await (let data of source) {\n                    data = data instanceof Uint8Array ? new uint8arraylist__WEBPACK_IMPORTED_MODULE_2__.Uint8ArrayList(data) : data;\n                    const res = this.sendData(data, options);\n                    if (isPromise(res)) {\n                        this.sendingData = (0,p_defer__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n                        await res;\n                        this.sendingData.resolve();\n                        this.sendingData = undefined;\n                    }\n                }\n            }\n            finally {\n                this.sinkController.signal.removeEventListener('abort', abortListener);\n            }\n            this.log.trace('sink finished reading from source, write status is \"%s\"', this.writeStatus);\n            if (this.writeStatus === 'writing') {\n                this.writeStatus = 'closing';\n                this.log.trace('send close write to remote');\n                await this.sendCloseWrite({\n                    signal: AbortSignal.timeout(this.sendCloseWriteTimeout)\n                });\n                this.writeStatus = 'closed';\n            }\n            this.onSinkEnd();\n        }\n        catch (err) {\n            this.log.trace('sink ended with error, calling abort with error', err);\n            this.abort(err);\n            throw err;\n        }\n        finally {\n            this.log.trace('resolve sink end');\n            this.sinkEnd.resolve();\n        }\n    }\n    onSourceEnd(err) {\n        if (this.timeline.closeRead != null) {\n            return;\n        }\n        this.timeline.closeRead = Date.now();\n        this.readStatus = 'closed';\n        if (err != null && this.endErr == null) {\n            this.endErr = err;\n        }\n        this.onCloseRead?.();\n        if (this.timeline.closeWrite != null) {\n            this.log.trace('source and sink ended');\n            this.timeline.close = Date.now();\n            if (this.status !== 'aborted' && this.status !== 'reset') {\n                this.status = 'closed';\n            }\n            if (this.onEnd != null) {\n                this.onEnd(this.endErr);\n            }\n            this.closed.resolve();\n        }\n        else {\n            this.log.trace('source ended, waiting for sink to end');\n        }\n    }\n    onSinkEnd(err) {\n        if (this.timeline.closeWrite != null) {\n            return;\n        }\n        this.timeline.closeWrite = Date.now();\n        this.writeStatus = 'closed';\n        if (err != null && this.endErr == null) {\n            this.endErr = err;\n        }\n        this.onCloseWrite?.();\n        if (this.timeline.closeRead != null) {\n            this.log.trace('sink and source ended');\n            this.timeline.close = Date.now();\n            if (this.status !== 'aborted' && this.status !== 'reset') {\n                this.status = 'closed';\n            }\n            if (this.onEnd != null) {\n                this.onEnd(this.endErr);\n            }\n            this.closed.resolve();\n        }\n        else {\n            this.log.trace('sink ended, waiting for source to end');\n        }\n    }\n    // Close for both Reading and Writing\n    async close(options) {\n        this.log.trace('closing gracefully');\n        this.status = 'closing';\n        // wait for read and write ends to close\n        await (0,race_signal__WEBPACK_IMPORTED_MODULE_1__.raceSignal)(Promise.all([\n            this.closeWrite(options),\n            this.closeRead(options),\n            this.closed.promise\n        ]), options?.signal);\n        this.status = 'closed';\n        this.log.trace('closed gracefully');\n    }\n    async closeRead(options = {}) {\n        if (this.readStatus === 'closing' || this.readStatus === 'closed') {\n            return;\n        }\n        this.log.trace('closing readable end of stream with starting read status \"%s\"', this.readStatus);\n        const readStatus = this.readStatus;\n        this.readStatus = 'closing';\n        if (this.status !== 'reset' && this.status !== 'aborted' && this.timeline.closeRead == null) {\n            this.log.trace('send close read to remote');\n            await this.sendCloseRead(options);\n        }\n        if (readStatus === 'ready') {\n            this.log.trace('ending internal source queue with %d queued bytes', this.streamSource.readableLength);\n            this.streamSource.end();\n        }\n        this.log.trace('closed readable end of stream');\n    }\n    async closeWrite(options = {}) {\n        if (this.writeStatus === 'closing' || this.writeStatus === 'closed') {\n            return;\n        }\n        this.log.trace('closing writable end of stream with starting write status \"%s\"', this.writeStatus);\n        if (this.writeStatus === 'ready') {\n            this.log.trace('sink was never sunk, sink an empty array');\n            await (0,race_signal__WEBPACK_IMPORTED_MODULE_1__.raceSignal)(this.sink([]), options.signal);\n        }\n        if (this.writeStatus === 'writing') {\n            // try to let sending outgoing data succeed\n            if (this.sendingData != null) {\n                await (0,race_signal__WEBPACK_IMPORTED_MODULE_1__.raceSignal)(this.sendingData.promise, options.signal);\n            }\n            // stop reading from the source passed to `.sink`\n            this.log.trace('aborting source passed to .sink');\n            this.sinkController.abort();\n            await (0,race_signal__WEBPACK_IMPORTED_MODULE_1__.raceSignal)(this.sinkEnd.promise, options.signal);\n        }\n        this.writeStatus = 'closed';\n        this.log.trace('closed writable end of stream');\n    }\n    /**\n     * Close immediately for reading and writing and send a reset message (local\n     * error)\n     */\n    abort(err) {\n        if (this.status === 'closed' || this.status === 'aborted' || this.status === 'reset') {\n            return;\n        }\n        this.log('abort with error', err);\n        // try to send a reset message\n        this.log('try to send reset to remote');\n        const res = this.sendReset();\n        if (isPromise(res)) {\n            res.catch((err) => {\n                this.log.error('error sending reset message', err);\n            });\n        }\n        this.status = 'aborted';\n        this.timeline.abort = Date.now();\n        this._closeSinkAndSource(err);\n        this.onAbort?.(err);\n    }\n    /**\n     * Receive a reset message - close immediately for reading and writing (remote\n     * error)\n     */\n    reset() {\n        if (this.status === 'closed' || this.status === 'aborted' || this.status === 'reset') {\n            return;\n        }\n        const err = new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError('stream reset', ERR_STREAM_RESET);\n        this.status = 'reset';\n        this.timeline.reset = Date.now();\n        this._closeSinkAndSource(err);\n        this.onReset?.();\n    }\n    _closeSinkAndSource(err) {\n        this._closeSink(err);\n        this._closeSource(err);\n    }\n    _closeSink(err) {\n        // if the sink function is running, cause it to end\n        if (this.writeStatus === 'writing') {\n            this.log.trace('end sink source');\n            this.sinkController.abort();\n        }\n        this.onSinkEnd(err);\n    }\n    _closeSource(err) {\n        // if the source is not ending, end it\n        if (this.readStatus !== 'closing' && this.readStatus !== 'closed') {\n            this.log.trace('ending source with %d bytes to be read by consumer', this.streamSource.readableLength);\n            this.readStatus = 'closing';\n            this.streamSource.end(err);\n        }\n    }\n    /**\n     * The remote closed for writing so we should expect to receive no more\n     * messages\n     */\n    remoteCloseWrite() {\n        if (this.readStatus === 'closing' || this.readStatus === 'closed') {\n            this.log('received remote close write but local source is already closed');\n            return;\n        }\n        this.log.trace('remote close write');\n        this._closeSource();\n    }\n    /**\n     * The remote closed for reading so we should not send any more\n     * messages\n     */\n    remoteCloseRead() {\n        if (this.writeStatus === 'closing' || this.writeStatus === 'closed') {\n            this.log('received remote close read but local sink is already closed');\n            return;\n        }\n        this.log.trace('remote close read');\n        this._closeSink();\n    }\n    /**\n     * The underlying muxer has closed, no more messages can be sent or will\n     * be received, close immediately to free up resources\n     */\n    destroy() {\n        if (this.status === 'closed' || this.status === 'aborted' || this.status === 'reset') {\n            this.log('received destroy but we are already closed');\n            return;\n        }\n        this.log.trace('stream destroyed');\n        this._closeSinkAndSource();\n    }\n    /**\n     * When an extending class reads data from it's implementation-specific source,\n     * call this method to allow the stream consumer to read the data.\n     */\n    sourcePush(data) {\n        this.streamSource.push(data);\n    }\n    /**\n     * Returns the amount of unread data - can be used to prevent large amounts of\n     * data building up when the stream consumer is too slow.\n     */\n    sourceReadableLength() {\n        return this.streamSource.readableLength;\n    }\n}\n//# sourceMappingURL=abstract-stream.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/utils/dist/src/abstract-stream.js?");

/***/ }),

/***/ "./node_modules/@libp2p/utils/dist/src/address-sort.js":
/*!*************************************************************!*\
  !*** ./node_modules/@libp2p/utils/dist/src/address-sort.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   certifiedAddressesFirst: () => (/* binding */ certifiedAddressesFirst),\n/* harmony export */   circuitRelayAddressesLast: () => (/* binding */ circuitRelayAddressesLast),\n/* harmony export */   defaultAddressSort: () => (/* binding */ defaultAddressSort),\n/* harmony export */   publicAddressesFirst: () => (/* binding */ publicAddressesFirst)\n/* harmony export */ });\n/* harmony import */ var _multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr-matcher */ \"./node_modules/@multiformats/multiaddr-matcher/dist/src/index.js\");\n/* harmony import */ var _multiaddr_is_private_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./multiaddr/is-private.js */ \"./node_modules/@libp2p/utils/dist/src/multiaddr/is-private.js\");\n/**\n * @packageDocumentation\n *\n * Provides strategies to sort a list of multiaddrs.\n *\n * @example\n *\n * ```typescript\n * import { publicAddressesFirst } from '@libp2p/utils/address-sort'\n * import { multiaddr } from '@multformats/multiaddr'\n *\n *\n * const addresses = [\n *   multiaddr('/ip4/127.0.0.1/tcp/9000'),\n *   multiaddr('/ip4/82.41.53.1/tcp/9000')\n * ].sort(publicAddressesFirst)\n *\n * console.info(addresses)\n * // ['/ip4/82.41.53.1/tcp/9000', '/ip4/127.0.0.1/tcp/9000']\n * ```\n */\n\n\n/**\n * Compare function for array.sort() that moves public addresses to the start\n * of the array.\n */\nfunction publicAddressesFirst(a, b) {\n    const isAPrivate = (0,_multiaddr_is_private_js__WEBPACK_IMPORTED_MODULE_1__.isPrivate)(a.multiaddr);\n    const isBPrivate = (0,_multiaddr_is_private_js__WEBPACK_IMPORTED_MODULE_1__.isPrivate)(b.multiaddr);\n    if (isAPrivate && !isBPrivate) {\n        return 1;\n    }\n    else if (!isAPrivate && isBPrivate) {\n        return -1;\n    }\n    return 0;\n}\n/**\n * Compare function for array.sort() that moves certified addresses to the start\n * of the array.\n */\nfunction certifiedAddressesFirst(a, b) {\n    if (a.isCertified && !b.isCertified) {\n        return -1;\n    }\n    else if (!a.isCertified && b.isCertified) {\n        return 1;\n    }\n    return 0;\n}\n/**\n * Compare function for array.sort() that moves circuit relay addresses to the\n * start of the array.\n */\nfunction circuitRelayAddressesLast(a, b) {\n    const isACircuit = _multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_0__.Circuit.exactMatch(a.multiaddr);\n    const isBCircuit = _multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_0__.Circuit.exactMatch(b.multiaddr);\n    if (isACircuit && !isBCircuit) {\n        return 1;\n    }\n    else if (!isACircuit && isBCircuit) {\n        return -1;\n    }\n    return 0;\n}\nfunction defaultAddressSort(a, b) {\n    const publicResult = publicAddressesFirst(a, b);\n    if (publicResult !== 0) {\n        return publicResult;\n    }\n    const relayResult = circuitRelayAddressesLast(a, b);\n    if (relayResult !== 0) {\n        return relayResult;\n    }\n    const certifiedResult = certifiedAddressesFirst(a, b);\n    return certifiedResult;\n}\n//# sourceMappingURL=address-sort.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/utils/dist/src/address-sort.js?");

/***/ }),

/***/ "./node_modules/@libp2p/utils/dist/src/array-equals.js":
/*!*************************************************************!*\
  !*** ./node_modules/@libp2p/utils/dist/src/array-equals.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayEquals: () => (/* binding */ arrayEquals)\n/* harmony export */ });\n/**\n * @packageDocumentation\n *\n * Provides strategies ensure arrays are equivalent.\n *\n * @example\n *\n * ```typescript\n * import { arrayEquals } from '@libp2p/utils/array-equals'\n * import { multiaddr } from '@multformats/multiaddr'\n *\n * const ma1 = multiaddr('/ip4/127.0.0.1/tcp/9000'),\n * const ma2 = multiaddr('/ip4/82.41.53.1/tcp/9000')\n *\n * console.info(arrayEquals([ma1], [ma1])) // true\n * console.info(arrayEquals([ma1], [ma2])) // false\n * ```\n */\n/**\n * Verify if two arrays of non primitive types with the \"equals\" function are equal.\n * Compatible with multiaddr, peer-id and others.\n */\nfunction arrayEquals(a, b) {\n    const sort = (a, b) => a.toString().localeCompare(b.toString());\n    if (a.length !== b.length) {\n        return false;\n    }\n    b.sort(sort);\n    return a.sort(sort).every((item, index) => b[index].equals(item));\n}\n//# sourceMappingURL=array-equals.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/utils/dist/src/array-equals.js?");

/***/ }),

/***/ "./node_modules/@libp2p/utils/dist/src/close-source.js":
/*!*************************************************************!*\
  !*** ./node_modules/@libp2p/utils/dist/src/close-source.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeSource: () => (/* binding */ closeSource)\n/* harmony export */ });\n/* harmony import */ var get_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! get-iterator */ \"./node_modules/get-iterator/dist/src/index.js\");\n/* harmony import */ var _is_promise_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is-promise.js */ \"./node_modules/@libp2p/utils/dist/src/is-promise.js\");\n\n\nfunction closeSource(source, log) {\n    const res = (0,get_iterator__WEBPACK_IMPORTED_MODULE_0__.getIterator)(source).return?.();\n    if ((0,_is_promise_js__WEBPACK_IMPORTED_MODULE_1__.isPromise)(res)) {\n        res.catch(err => {\n            log.error('could not cause iterator to return', err);\n        });\n    }\n}\n//# sourceMappingURL=close-source.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/utils/dist/src/close-source.js?");

/***/ }),

/***/ "./node_modules/@libp2p/utils/dist/src/is-promise.js":
/*!***********************************************************!*\
  !*** ./node_modules/@libp2p/utils/dist/src/is-promise.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPromise: () => (/* binding */ isPromise)\n/* harmony export */ });\nfunction isPromise(thing) {\n    if (thing == null) {\n        return false;\n    }\n    return typeof thing.then === 'function' &&\n        typeof thing.catch === 'function' &&\n        typeof thing.finally === 'function';\n}\n//# sourceMappingURL=is-promise.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/utils/dist/src/is-promise.js?");

/***/ }),

/***/ "./node_modules/@libp2p/utils/dist/src/multiaddr/is-private.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@libp2p/utils/dist/src/multiaddr/is-private.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPrivate: () => (/* binding */ isPrivate)\n/* harmony export */ });\n/* harmony import */ var _private_ip_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../private-ip.js */ \"./node_modules/@libp2p/utils/dist/src/private-ip.js\");\n\n/**\n * Check if a given multiaddr has a private address.\n */\nfunction isPrivate(ma) {\n    try {\n        const { address } = ma.nodeAddress();\n        return Boolean((0,_private_ip_js__WEBPACK_IMPORTED_MODULE_0__.isPrivateIp)(address));\n    }\n    catch {\n        return true;\n    }\n}\n//# sourceMappingURL=is-private.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/utils/dist/src/multiaddr/is-private.js?");

/***/ }),

/***/ "./node_modules/@libp2p/utils/dist/src/peer-queue.js":
/*!***********************************************************!*\
  !*** ./node_modules/@libp2p/utils/dist/src/peer-queue.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PeerQueue: () => (/* binding */ PeerQueue)\n/* harmony export */ });\n/* harmony import */ var _queue_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queue/index.js */ \"./node_modules/@libp2p/utils/dist/src/queue/index.js\");\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n\n/**\n * Extends Queue to add support for querying queued jobs by peer id\n */\nclass PeerQueue extends _queue_index_js__WEBPACK_IMPORTED_MODULE_0__.Queue {\n    has(peerId) {\n        return this.find(peerId) != null;\n    }\n    find(peerId) {\n        return this.queue.find(job => {\n            return peerId.equals(job.options.peerId);\n        });\n    }\n}\n//# sourceMappingURL=peer-queue.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/utils/dist/src/peer-queue.js?");

/***/ }),

/***/ "./node_modules/@libp2p/utils/dist/src/private-ip.js":
/*!***********************************************************!*\
  !*** ./node_modules/@libp2p/utils/dist/src/private-ip.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPrivateIp: () => (/* binding */ isPrivateIp)\n/* harmony export */ });\n/* harmony import */ var _chainsafe_is_ip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chainsafe/is-ip */ \"./node_modules/@chainsafe/is-ip/lib/is-ip.js\");\n/* harmony import */ var netmask__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! netmask */ \"./node_modules/netmask/lib/netmask.js\");\n\n\nconst PRIVATE_IP_RANGES = [\n    '0.0.0.0/8',\n    '10.0.0.0/8',\n    '100.64.0.0/10',\n    '127.0.0.0/8',\n    '169.254.0.0/16',\n    '172.16.0.0/12',\n    '192.0.0.0/24',\n    '192.0.0.0/29',\n    '192.0.0.8/32',\n    '192.0.0.9/32',\n    '192.0.0.10/32',\n    '192.0.0.170/32',\n    '192.0.0.171/32',\n    '192.0.2.0/24',\n    '192.31.196.0/24',\n    '192.52.193.0/24',\n    '192.88.99.0/24',\n    '192.168.0.0/16',\n    '192.175.48.0/24',\n    '198.18.0.0/15',\n    '198.51.100.0/24',\n    '203.0.113.0/24',\n    '240.0.0.0/4',\n    '255.255.255.255/32'\n];\nconst NETMASK_RANGES = PRIVATE_IP_RANGES.map(ipRange => new netmask__WEBPACK_IMPORTED_MODULE_1__.Netmask(ipRange));\nfunction ipv4Check(ipAddr) {\n    for (const r of NETMASK_RANGES) {\n        if (r.contains(ipAddr))\n            return true;\n    }\n    return false;\n}\nfunction ipv6Check(ipAddr) {\n    return /^::$/.test(ipAddr) ||\n        /^::1$/.test(ipAddr) ||\n        /^::f{4}:([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ipAddr) ||\n        /^::f{4}:0.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ipAddr) ||\n        /^64:ff9b::([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ipAddr) ||\n        /^100::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ipAddr) ||\n        /^2001::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ipAddr) ||\n        /^2001:2[0-9a-fA-F]:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ipAddr) ||\n        /^2001:db8:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ipAddr) ||\n        /^2002:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ipAddr) ||\n        /^f[c-d]([0-9a-fA-F]{2,2}):/i.test(ipAddr) ||\n        /^fe[8-9a-bA-B][0-9a-fA-F]:/i.test(ipAddr) ||\n        /^ff([0-9a-fA-F]{2,2}):/i.test(ipAddr);\n}\nfunction isPrivateIp(ip) {\n    if ((0,_chainsafe_is_ip__WEBPACK_IMPORTED_MODULE_0__.isIPv4)(ip))\n        return ipv4Check(ip);\n    else if ((0,_chainsafe_is_ip__WEBPACK_IMPORTED_MODULE_0__.isIPv6)(ip))\n        return ipv6Check(ip);\n    else\n        return undefined;\n}\n//# sourceMappingURL=private-ip.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/utils/dist/src/private-ip.js?");

/***/ }),

/***/ "./node_modules/@libp2p/utils/dist/src/queue/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@libp2p/utils/dist/src/queue/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Queue: () => (/* binding */ Queue)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/event-target.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var it_pushable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-pushable */ \"./node_modules/it-pushable/dist/src/index.js\");\n/* harmony import */ var race_event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! race-event */ \"./node_modules/race-event/dist/src/index.js\");\n/* harmony import */ var _job_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./job.js */ \"./node_modules/@libp2p/utils/dist/src/queue/job.js\");\n\n\n\n\n// Port of lower_bound from https://en.cppreference.com/w/cpp/algorithm/lower_bound\n// Used to compute insertion index to keep queue sorted after insertion\nfunction lowerBound(array, value, comparator) {\n    let first = 0;\n    let count = array.length;\n    while (count > 0) {\n        const step = Math.trunc(count / 2);\n        let it = first + step;\n        if (comparator(array[it], value) <= 0) {\n            first = ++it;\n            count -= step + 1;\n        }\n        else {\n            count = step;\n        }\n    }\n    return first;\n}\n/**\n * Heavily influence by `p-queue` with the following differences:\n *\n * 1. Items remain at the head of the queue while they are running so `queue.size` includes `queue.pending` items - this is so interested parties can join the results of a queue item while it is running\n * 2. The options for a job are stored separately to the job in order for them to be modified while they are still in the queue\n */\nclass Queue extends _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.TypedEventEmitter {\n    concurrency;\n    queue;\n    pending;\n    constructor(init = {}) {\n        super();\n        this.concurrency = init.concurrency ?? Number.POSITIVE_INFINITY;\n        this.pending = 0;\n        if (init.metricName != null) {\n            init.metrics?.registerMetricGroup(init.metricName, {\n                calculate: () => {\n                    return {\n                        size: this.queue.length,\n                        running: this.pending,\n                        queued: this.queue.length - this.pending\n                    };\n                }\n            });\n        }\n        this.queue = [];\n    }\n    tryToStartAnother() {\n        if (this.size === 0) {\n            // do this in the microtask queue so all job recipients receive the\n            // result before the \"empty\" event fires\n            queueMicrotask(() => {\n                this.safeDispatchEvent('empty');\n            });\n            if (this.running === 0) {\n                // do this in the microtask queue so all job recipients receive the\n                // result before the \"idle\" event fires\n                queueMicrotask(() => {\n                    this.safeDispatchEvent('idle');\n                });\n            }\n            return false;\n        }\n        if (this.pending < this.concurrency) {\n            let job;\n            for (const j of this.queue) {\n                if (j.status === 'queued') {\n                    job = j;\n                    break;\n                }\n            }\n            if (job == null) {\n                return false;\n            }\n            this.safeDispatchEvent('active');\n            this.pending++;\n            job.run()\n                .finally(() => {\n                // remove the job from the queue\n                for (let i = 0; i < this.queue.length; i++) {\n                    if (this.queue[i] === job) {\n                        this.queue.splice(i, 1);\n                        break;\n                    }\n                }\n                this.pending--;\n                this.tryToStartAnother();\n                this.safeDispatchEvent('next');\n            });\n            return true;\n        }\n        return false;\n    }\n    enqueue(job) {\n        if (this.queue[this.size - 1]?.priority >= job.priority) {\n            this.queue.push(job);\n            return;\n        }\n        const index = lowerBound(this.queue, job, (a, b) => b.priority - a.priority);\n        this.queue.splice(index, 0, job);\n    }\n    /**\n     * Adds a sync or async task to the queue. Always returns a promise.\n     */\n    async add(fn, options) {\n        options?.signal?.throwIfAborted();\n        const job = new _job_js__WEBPACK_IMPORTED_MODULE_3__.Job(fn, options, options?.priority);\n        const p = job.join(options)\n            .then(result => {\n            this.safeDispatchEvent('completed', { detail: result });\n            return result;\n        })\n            .catch(err => {\n            this.safeDispatchEvent('error', { detail: err });\n            throw err;\n        });\n        this.enqueue(job);\n        this.safeDispatchEvent('add');\n        this.tryToStartAnother();\n        return p;\n    }\n    /**\n     * Clear the queue\n     */\n    clear() {\n        this.queue.splice(0, this.queue.length);\n    }\n    /**\n     * Abort all jobs in the queue and clear it\n     */\n    abort() {\n        this.queue.forEach(job => {\n            job.abort(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.AbortError());\n        });\n        this.clear();\n    }\n    /**\n     * Can be called multiple times. Useful if you for example add additional items at a later time.\n     *\n     * @returns A promise that settles when the queue becomes empty.\n     */\n    async onEmpty(options) {\n        // Instantly resolve if the queue is empty\n        if (this.size === 0) {\n            return;\n        }\n        await (0,race_event__WEBPACK_IMPORTED_MODULE_1__.raceEvent)(this, 'empty', options?.signal);\n    }\n    /**\n     * @returns A promise that settles when the queue size is less than the given\n     * limit: `queue.size < limit`.\n     *\n     * If you want to avoid having the queue grow beyond a certain size you can\n     * `await queue.onSizeLessThan()` before adding a new item.\n     *\n     * Note that this only limits the number of items waiting to start. There\n     * could still be up to `concurrency` jobs already running that this call does\n     * not include in its calculation.\n     */\n    async onSizeLessThan(limit, options) {\n        // Instantly resolve if the queue is empty.\n        if (this.size < limit) {\n            return;\n        }\n        await (0,race_event__WEBPACK_IMPORTED_MODULE_1__.raceEvent)(this, 'next', options?.signal, {\n            filter: () => this.size < limit\n        });\n    }\n    /**\n     * The difference with `.onEmpty` is that `.onIdle` guarantees that all work\n     * from the queue has finished. `.onEmpty` merely signals that the queue is\n     * empty, but it could mean that some promises haven't completed yet.\n     *\n     * @returns A promise that settles when the queue becomes empty, and all\n     * promises have completed; `queue.size === 0 && queue.pending === 0`.\n     */\n    async onIdle(options) {\n        // Instantly resolve if none pending and if nothing else is queued\n        if (this.pending === 0 && this.size === 0) {\n            return;\n        }\n        await (0,race_event__WEBPACK_IMPORTED_MODULE_1__.raceEvent)(this, 'idle', options?.signal);\n    }\n    /**\n     * Size of the queue including running items\n     */\n    get size() {\n        return this.queue.length;\n    }\n    /**\n     * The number of queued items waiting to run.\n     */\n    get queued() {\n        return this.queue.length - this.pending;\n    }\n    /**\n     * The number of items currently running.\n     */\n    get running() {\n        return this.pending;\n    }\n    /**\n     * Returns an async generator that makes it easy to iterate over the results\n     * of jobs added to the queue.\n     *\n     * The generator will end when the queue becomes idle, that is there are no\n     * jobs running and no jobs that have yet to run.\n     *\n     * If you need to keep the queue open indefinitely, consider using it-pushable\n     * instead.\n     */\n    async *toGenerator(options) {\n        options?.signal?.throwIfAborted();\n        const stream = (0,it_pushable__WEBPACK_IMPORTED_MODULE_0__.pushable)({\n            objectMode: true\n        });\n        const cleanup = (err) => {\n            if (err != null) {\n                this.abort();\n            }\n            else {\n                this.clear();\n            }\n            stream.end(err);\n        };\n        const onQueueJobComplete = (evt) => {\n            if (evt.detail != null) {\n                stream.push(evt.detail);\n            }\n        };\n        const onQueueError = (evt) => {\n            cleanup(evt.detail);\n        };\n        const onQueueIdle = () => {\n            cleanup();\n        };\n        // clear the queue and throw if the query is aborted\n        const onSignalAbort = () => {\n            cleanup(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError('Queue aborted', 'ERR_QUEUE_ABORTED'));\n        };\n        // add listeners\n        this.addEventListener('completed', onQueueJobComplete);\n        this.addEventListener('error', onQueueError);\n        this.addEventListener('idle', onQueueIdle);\n        options?.signal?.addEventListener('abort', onSignalAbort);\n        try {\n            yield* stream;\n        }\n        finally {\n            // remove listeners\n            this.removeEventListener('completed', onQueueJobComplete);\n            this.removeEventListener('error', onQueueError);\n            this.removeEventListener('idle', onQueueIdle);\n            options?.signal?.removeEventListener('abort', onSignalAbort);\n            // empty the queue for when the user has broken out of a loop early\n            cleanup();\n        }\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/utils/dist/src/queue/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/utils/dist/src/queue/job.js":
/*!**********************************************************!*\
  !*** ./node_modules/@libp2p/utils/dist/src/queue/job.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Job: () => (/* binding */ Job)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/events.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var race_signal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! race-signal */ \"./node_modules/race-signal/dist/src/index.js\");\n/* harmony import */ var _recipient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./recipient.js */ \"./node_modules/@libp2p/utils/dist/src/queue/recipient.js\");\n\n\n\n/**\n * Returns a random string\n */\nfunction randomId() {\n    return `${(parseInt(String(Math.random() * 1e9), 10)).toString()}${Date.now()}`;\n}\nclass Job {\n    id;\n    fn;\n    options;\n    priority;\n    recipients;\n    status;\n    timeline;\n    controller;\n    constructor(fn, options, priority = 0) {\n        this.id = randomId();\n        this.status = 'queued';\n        this.fn = fn;\n        this.priority = priority;\n        this.options = options;\n        this.recipients = [];\n        this.timeline = {\n            created: Date.now()\n        };\n        this.controller = new AbortController();\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.setMaxListeners)(Infinity, this.controller.signal);\n        this.onAbort = this.onAbort.bind(this);\n    }\n    abort(err) {\n        this.controller.abort(err);\n    }\n    onAbort() {\n        const allAborted = this.recipients.reduce((acc, curr) => {\n            return acc && (curr.signal?.aborted === true);\n        }, true);\n        // if all recipients have aborted the job, actually abort the job\n        if (allAborted) {\n            this.controller.abort(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.AbortError());\n        }\n    }\n    async join(options = {}) {\n        const recipient = new _recipient_js__WEBPACK_IMPORTED_MODULE_3__.JobRecipient((new Error('where')).stack, options.signal);\n        this.recipients.push(recipient);\n        options.signal?.addEventListener('abort', this.onAbort);\n        return recipient.deferred.promise;\n    }\n    async run() {\n        this.status = 'running';\n        this.timeline.started = Date.now();\n        try {\n            this.controller.signal.throwIfAborted();\n            const result = await (0,race_signal__WEBPACK_IMPORTED_MODULE_0__.raceSignal)(this.fn({\n                ...(this.options ?? {}),\n                signal: this.controller.signal\n            }), this.controller.signal);\n            this.recipients.forEach(recipient => {\n                recipient.deferred.resolve(result);\n            });\n            this.status = 'complete';\n        }\n        catch (err) {\n            this.recipients.forEach(recipient => {\n                recipient.deferred.reject(err);\n            });\n            this.status = 'errored';\n        }\n        finally {\n            this.timeline.finished = Date.now();\n            this.cleanup();\n        }\n    }\n    cleanup() {\n        this.recipients.forEach(recipient => {\n            recipient.signal?.removeEventListener('abort', this.onAbort);\n        });\n    }\n}\n//# sourceMappingURL=job.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/utils/dist/src/queue/job.js?");

/***/ }),

/***/ "./node_modules/@libp2p/utils/dist/src/queue/recipient.js":
/*!****************************************************************!*\
  !*** ./node_modules/@libp2p/utils/dist/src/queue/recipient.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JobRecipient: () => (/* binding */ JobRecipient)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var p_defer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-defer */ \"./node_modules/p-defer/index.js\");\n\n\nclass JobRecipient {\n    deferred;\n    signal;\n    where;\n    constructor(where, signal) {\n        this.signal = signal;\n        this.deferred = (0,p_defer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        this.where = where;\n        this.onAbort = this.onAbort.bind(this);\n        this.signal?.addEventListener('abort', this.onAbort);\n    }\n    onAbort() {\n        this.deferred.reject(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.AbortError());\n    }\n    cleanup() {\n        this.signal?.removeEventListener('abort', this.onAbort);\n    }\n}\n//# sourceMappingURL=recipient.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/utils/dist/src/queue/recipient.js?");

/***/ }),

/***/ "./node_modules/@libp2p/utils/dist/src/rate-limiter.js":
/*!*************************************************************!*\
  !*** ./node_modules/@libp2p/utils/dist/src/rate-limiter.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RateLimiter: () => (/* binding */ RateLimiter)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var delay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! delay */ \"./node_modules/delay/index.js\");\n\n\nclass RateLimiter {\n    memoryStorage;\n    points;\n    duration;\n    blockDuration;\n    execEvenly;\n    execEvenlyMinDelayMs;\n    keyPrefix;\n    constructor(opts = {}) {\n        this.points = opts.points ?? 4;\n        this.duration = opts.duration ?? 1;\n        this.blockDuration = opts.blockDuration ?? 0;\n        this.execEvenly = opts.execEvenly ?? false;\n        this.execEvenlyMinDelayMs = opts.execEvenlyMinDelayMs ?? (this.duration * 1000 / this.points);\n        this.keyPrefix = opts.keyPrefix ?? 'rlflx';\n        this.memoryStorage = new MemoryStorage();\n    }\n    async consume(key, pointsToConsume = 1, options = {}) {\n        const rlKey = this.getKey(key);\n        const secDuration = this._getKeySecDuration(options);\n        let res = this.memoryStorage.incrby(rlKey, pointsToConsume, secDuration);\n        res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n        if (res.consumedPoints > this.points) {\n            // Block only first time when consumed more than points\n            if (this.blockDuration > 0 && res.consumedPoints <= (this.points + pointsToConsume)) {\n                // Block key\n                res = this.memoryStorage.set(rlKey, res.consumedPoints, this.blockDuration);\n            }\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Rate limit exceeded', 'ERR_RATE_LIMIT_EXCEEDED', res);\n        }\n        else if (this.execEvenly && res.msBeforeNext > 0 && !res.isFirstInDuration) {\n            // Execute evenly\n            let delayMs = Math.ceil(res.msBeforeNext / (res.remainingPoints + 2));\n            if (delayMs < this.execEvenlyMinDelayMs) {\n                delayMs = res.consumedPoints * this.execEvenlyMinDelayMs;\n            }\n            await (0,delay__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(delayMs);\n        }\n        return res;\n    }\n    penalty(key, points = 1, options = {}) {\n        const rlKey = this.getKey(key);\n        const secDuration = this._getKeySecDuration(options);\n        const res = this.memoryStorage.incrby(rlKey, points, secDuration);\n        res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n        return res;\n    }\n    reward(key, points = 1, options = {}) {\n        const rlKey = this.getKey(key);\n        const secDuration = this._getKeySecDuration(options);\n        const res = this.memoryStorage.incrby(rlKey, -points, secDuration);\n        res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n        return res;\n    }\n    /**\n     * Block any key for secDuration seconds\n     *\n     * @param key\n     * @param secDuration\n     */\n    block(key, secDuration) {\n        const msDuration = secDuration * 1000;\n        const initPoints = this.points + 1;\n        this.memoryStorage.set(this.getKey(key), initPoints, secDuration);\n        return {\n            remainingPoints: 0,\n            msBeforeNext: msDuration === 0 ? -1 : msDuration,\n            consumedPoints: initPoints,\n            isFirstInDuration: false\n        };\n    }\n    set(key, points, secDuration = 0) {\n        const msDuration = (secDuration >= 0 ? secDuration : this.duration) * 1000;\n        this.memoryStorage.set(this.getKey(key), points, secDuration);\n        return {\n            remainingPoints: 0,\n            msBeforeNext: msDuration === 0 ? -1 : msDuration,\n            consumedPoints: points,\n            isFirstInDuration: false\n        };\n    }\n    get(key) {\n        const res = this.memoryStorage.get(this.getKey(key));\n        if (res != null) {\n            res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n        }\n        return res;\n    }\n    delete(key) {\n        this.memoryStorage.delete(this.getKey(key));\n    }\n    _getKeySecDuration(options) {\n        if (options?.customDuration != null && options.customDuration >= 0) {\n            return options.customDuration;\n        }\n        return this.duration;\n    }\n    getKey(key) {\n        return this.keyPrefix.length > 0 ? `${this.keyPrefix}:${key}` : key;\n    }\n    parseKey(rlKey) {\n        return rlKey.substring(this.keyPrefix.length);\n    }\n}\nclass MemoryStorage {\n    storage;\n    constructor() {\n        this.storage = new Map();\n    }\n    incrby(key, value, durationSec) {\n        const existing = this.storage.get(key);\n        if (existing != null) {\n            const msBeforeExpires = existing.expiresAt != null\n                ? existing.expiresAt.getTime() - new Date().getTime()\n                : -1;\n            if (existing.expiresAt == null || msBeforeExpires > 0) {\n                // Change value\n                existing.value += value;\n                return {\n                    remainingPoints: 0,\n                    msBeforeNext: msBeforeExpires,\n                    consumedPoints: existing.value,\n                    isFirstInDuration: false\n                };\n            }\n            return this.set(key, value, durationSec);\n        }\n        return this.set(key, value, durationSec);\n    }\n    set(key, value, durationSec) {\n        const durationMs = durationSec * 1000;\n        const existing = this.storage.get(key);\n        if (existing != null) {\n            clearTimeout(existing.timeoutId);\n        }\n        const record = {\n            value,\n            expiresAt: durationMs > 0 ? new Date(Date.now() + durationMs) : undefined\n        };\n        this.storage.set(key, record);\n        if (durationMs > 0) {\n            record.timeoutId = setTimeout(() => {\n                this.storage.delete(key);\n            }, durationMs);\n            if (record.timeoutId.unref != null) {\n                record.timeoutId.unref();\n            }\n        }\n        return {\n            remainingPoints: 0,\n            msBeforeNext: durationMs === 0 ? -1 : durationMs,\n            consumedPoints: record.value,\n            isFirstInDuration: true\n        };\n    }\n    get(key) {\n        const existing = this.storage.get(key);\n        if (existing != null) {\n            const msBeforeExpires = existing.expiresAt != null\n                ? existing.expiresAt.getTime() - new Date().getTime()\n                : -1;\n            return {\n                remainingPoints: 0,\n                msBeforeNext: msBeforeExpires,\n                consumedPoints: existing.value,\n                isFirstInDuration: false\n            };\n        }\n    }\n    delete(key) {\n        const record = this.storage.get(key);\n        if (record != null) {\n            if (record.timeoutId != null) {\n                clearTimeout(record.timeoutId);\n            }\n            this.storage.delete(key);\n            return true;\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=rate-limiter.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/utils/dist/src/rate-limiter.js?");

/***/ }),

/***/ "./node_modules/@libp2p/utils/dist/src/stream-to-ma-conn.js":
/*!******************************************************************!*\
  !*** ./node_modules/@libp2p/utils/dist/src/stream-to-ma-conn.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   streamToMaConnection: () => (/* binding */ streamToMaConnection)\n/* harmony export */ });\n/**\n * Convert a duplex iterable into a MultiaddrConnection.\n * https://github.com/libp2p/interface-transport#multiaddrconnection\n */\nfunction streamToMaConnection(props) {\n    const { stream, remoteAddr, logger } = props;\n    const log = logger.forComponent('libp2p:stream:converter');\n    let closedRead = false;\n    let closedWrite = false;\n    // piggyback on `stream.close` invocations to close maconn\n    const streamClose = stream.close.bind(stream);\n    stream.close = async (options) => {\n        await streamClose(options);\n        close(true);\n    };\n    // piggyback on `stream.abort` invocations to close maconn\n    const streamAbort = stream.abort.bind(stream);\n    stream.abort = (err) => {\n        streamAbort(err);\n        close(true);\n    };\n    // piggyback on `stream.sink` invocations to close maconn\n    const streamSink = stream.sink.bind(stream);\n    stream.sink = async (source) => {\n        try {\n            await streamSink(source);\n        }\n        catch (err) {\n            // If aborted we can safely ignore\n            if (err.type !== 'aborted') {\n                // If the source errored the socket will already have been destroyed by\n                // toIterable.duplex(). If the socket errored it will already be\n                // destroyed. There's nothing to do here except log the error & return.\n                log.error('%s error in sink', remoteAddr, err);\n            }\n        }\n        finally {\n            closedWrite = true;\n            close();\n        }\n    };\n    const maConn = {\n        log,\n        sink: stream.sink,\n        source: (async function* () {\n            try {\n                for await (const list of stream.source) {\n                    if (list instanceof Uint8Array) {\n                        yield list;\n                    }\n                    else {\n                        yield* list;\n                    }\n                }\n            }\n            finally {\n                closedRead = true;\n                close();\n            }\n        }()),\n        remoteAddr,\n        timeline: { open: Date.now(), close: undefined },\n        close: stream.close,\n        abort: stream.abort\n    };\n    function close(force) {\n        if (force === true) {\n            closedRead = true;\n            closedWrite = true;\n        }\n        if (closedRead && closedWrite && maConn.timeline.close == null) {\n            maConn.timeline.close = Date.now();\n        }\n    }\n    return maConn;\n}\n//# sourceMappingURL=stream-to-ma-conn.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/utils/dist/src/stream-to-ma-conn.js?");

/***/ }),

/***/ "./node_modules/@libp2p/utils/dist/src/tracked-map.js":
/*!************************************************************!*\
  !*** ./node_modules/@libp2p/utils/dist/src/tracked-map.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   trackedMap: () => (/* binding */ trackedMap)\n/* harmony export */ });\nclass TrackedMap extends Map {\n    metric;\n    constructor(init) {\n        super();\n        const { name, metrics } = init;\n        this.metric = metrics.registerMetric(name);\n        this.updateComponentMetric();\n    }\n    set(key, value) {\n        super.set(key, value);\n        this.updateComponentMetric();\n        return this;\n    }\n    delete(key) {\n        const deleted = super.delete(key);\n        this.updateComponentMetric();\n        return deleted;\n    }\n    clear() {\n        super.clear();\n        this.updateComponentMetric();\n    }\n    updateComponentMetric() {\n        this.metric.update(this.size);\n    }\n}\nfunction trackedMap(config) {\n    const { name, metrics } = config;\n    let map;\n    if (metrics != null) {\n        map = new TrackedMap({ name, metrics });\n    }\n    else {\n        map = new Map();\n    }\n    return map;\n}\n//# sourceMappingURL=tracked-map.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/utils/dist/src/tracked-map.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/error.js":
/*!*******************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/error.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConnectionClosedError: () => (/* binding */ ConnectionClosedError),\n/* harmony export */   DataChannelError: () => (/* binding */ DataChannelError),\n/* harmony export */   InappropriateMultiaddrError: () => (/* binding */ InappropriateMultiaddrError),\n/* harmony export */   InvalidArgumentError: () => (/* binding */ InvalidArgumentError),\n/* harmony export */   InvalidFingerprintError: () => (/* binding */ InvalidFingerprintError),\n/* harmony export */   OperationAbortedError: () => (/* binding */ OperationAbortedError),\n/* harmony export */   OverStreamLimitError: () => (/* binding */ OverStreamLimitError),\n/* harmony export */   UnimplementedError: () => (/* binding */ UnimplementedError),\n/* harmony export */   UnsupportedHashAlgorithmError: () => (/* binding */ UnsupportedHashAlgorithmError),\n/* harmony export */   WebRTCTransportError: () => (/* binding */ WebRTCTransportError),\n/* harmony export */   codes: () => (/* binding */ codes),\n/* harmony export */   connectionClosedError: () => (/* binding */ connectionClosedError),\n/* harmony export */   dataChannelError: () => (/* binding */ dataChannelError),\n/* harmony export */   inappropriateMultiaddr: () => (/* binding */ inappropriateMultiaddr),\n/* harmony export */   invalidArgument: () => (/* binding */ invalidArgument),\n/* harmony export */   invalidFingerprint: () => (/* binding */ invalidFingerprint),\n/* harmony export */   operationAborted: () => (/* binding */ operationAborted),\n/* harmony export */   overStreamLimit: () => (/* binding */ overStreamLimit),\n/* harmony export */   unimplemented: () => (/* binding */ unimplemented),\n/* harmony export */   unsupportedHashAlgorithm: () => (/* binding */ unsupportedHashAlgorithm)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n\nvar codes;\n(function (codes) {\n    codes[\"ERR_ALREADY_ABORTED\"] = \"ERR_ALREADY_ABORTED\";\n    codes[\"ERR_DATA_CHANNEL\"] = \"ERR_DATA_CHANNEL\";\n    codes[\"ERR_CONNECTION_CLOSED\"] = \"ERR_CONNECTION_CLOSED\";\n    codes[\"ERR_HASH_NOT_SUPPORTED\"] = \"ERR_HASH_NOT_SUPPORTED\";\n    codes[\"ERR_INVALID_MULTIADDR\"] = \"ERR_INVALID_MULTIADDR\";\n    codes[\"ERR_INVALID_FINGERPRINT\"] = \"ERR_INVALID_FINGERPRINT\";\n    codes[\"ERR_INVALID_PARAMETERS\"] = \"ERR_INVALID_PARAMETERS\";\n    codes[\"ERR_NOT_IMPLEMENTED\"] = \"ERR_NOT_IMPLEMENTED\";\n    codes[\"ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS\"] = \"ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS\";\n    codes[\"ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS\"] = \"ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS\";\n})(codes || (codes = {}));\nclass WebRTCTransportError extends _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.CodeError {\n    constructor(msg, code) {\n        super(`WebRTC transport error: ${msg}`, code ?? '');\n        this.name = 'WebRTCTransportError';\n    }\n}\nclass ConnectionClosedError extends WebRTCTransportError {\n    constructor(state, msg) {\n        super(`peerconnection moved to state: ${state}: ${msg}`, codes.ERR_CONNECTION_CLOSED);\n        this.name = 'WebRTC/ConnectionClosed';\n    }\n}\nfunction connectionClosedError(state, msg) {\n    return new ConnectionClosedError(state, msg);\n}\nclass DataChannelError extends WebRTCTransportError {\n    constructor(streamLabel, msg) {\n        super(`[stream: ${streamLabel}] data channel error: ${msg}`, codes.ERR_DATA_CHANNEL);\n        this.name = 'WebRTC/DataChannelError';\n    }\n}\nfunction dataChannelError(streamLabel, msg) {\n    return new DataChannelError(streamLabel, msg);\n}\nclass InappropriateMultiaddrError extends WebRTCTransportError {\n    constructor(msg) {\n        super(`There was a problem with the Multiaddr which was passed in: ${msg}`, codes.ERR_INVALID_MULTIADDR);\n        this.name = 'WebRTC/InappropriateMultiaddrError';\n    }\n}\nfunction inappropriateMultiaddr(msg) {\n    return new InappropriateMultiaddrError(msg);\n}\nclass InvalidArgumentError extends WebRTCTransportError {\n    constructor(msg) {\n        super(`There was a problem with a provided argument: ${msg}`, codes.ERR_INVALID_PARAMETERS);\n        this.name = 'WebRTC/InvalidArgumentError';\n    }\n}\nfunction invalidArgument(msg) {\n    return new InvalidArgumentError(msg);\n}\nclass InvalidFingerprintError extends WebRTCTransportError {\n    constructor(fingerprint, source) {\n        super(`Invalid fingerprint \"${fingerprint}\" within ${source}`, codes.ERR_INVALID_FINGERPRINT);\n        this.name = 'WebRTC/InvalidFingerprintError';\n    }\n}\nfunction invalidFingerprint(fingerprint, source) {\n    return new InvalidFingerprintError(fingerprint, source);\n}\nclass OperationAbortedError extends WebRTCTransportError {\n    constructor(context, abortReason) {\n        super(`Signalled to abort because (${abortReason}}) ${context}`, codes.ERR_ALREADY_ABORTED);\n        this.name = 'WebRTC/OperationAbortedError';\n    }\n}\nfunction operationAborted(context, reason) {\n    return new OperationAbortedError(context, reason);\n}\nclass OverStreamLimitError extends WebRTCTransportError {\n    constructor(msg) {\n        const code = msg.startsWith('inbound') ? codes.ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS : codes.ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS;\n        super(msg, code);\n        this.name = 'WebRTC/OverStreamLimitError';\n    }\n}\nfunction overStreamLimit(dir, proto) {\n    return new OverStreamLimitError(`${dir} stream limit reached for protocol - ${proto}`);\n}\nclass UnimplementedError extends WebRTCTransportError {\n    constructor(methodName) {\n        super(`A method (${methodName}) was called though it has been intentionally left unimplemented.`, codes.ERR_NOT_IMPLEMENTED);\n        this.name = 'WebRTC/UnimplementedError';\n    }\n}\nfunction unimplemented(methodName) {\n    return new UnimplementedError(methodName);\n}\nclass UnsupportedHashAlgorithmError extends WebRTCTransportError {\n    constructor(algo) {\n        super(`unsupported hash algorithm: ${algo}`, codes.ERR_HASH_NOT_SUPPORTED);\n        this.name = 'WebRTC/UnsupportedHashAlgorithmError';\n    }\n}\nfunction unsupportedHashAlgorithm(algorithm) {\n    return new UnsupportedHashAlgorithmError(algorithm);\n}\n//# sourceMappingURL=error.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/error.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   webRTC: () => (/* binding */ webRTC),\n/* harmony export */   webRTCDirect: () => (/* binding */ webRTCDirect)\n/* harmony export */ });\n/* harmony import */ var _private_to_private_transport_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./private-to-private/transport.js */ \"./node_modules/@libp2p/webrtc/dist/src/private-to-private/transport.js\");\n/* harmony import */ var _private_to_public_transport_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./private-to-public/transport.js */ \"./node_modules/@libp2p/webrtc/dist/src/private-to-public/transport.js\");\n/**\n * @packageDocumentation\n *\n * A [libp2p transport](https://docs.libp2p.io/concepts/transports/overview/) based on [WebRTC datachannels](https://webrtc.org/).\n *\n * [WebRTC](https://www.w3.org/TR/webrtc/) is a specification that allows real-time communication between nodes - it's commonly used in browser video conferencing applications but it also provides a reliable data transport mechanism called [data channels](https://www.w3.org/TR/webrtc/#peer-to-peer-data-api) which libp2p uses to facilitate [protocol streams](https://docs.libp2p.io/concepts/multiplex/overview/) between peers.\n *\n * There are two transports exposed by this module, [webRTC](https://github.com/libp2p/specs/blob/master/webrtc/webrtc.md) and [webRTCDirect](https://github.com/libp2p/specs/blob/master/webrtc/webrtc-direct.md).\n *\n * ## WebRTC vs WebRTC Direct\n *\n * The connection establishment phase of WebRTC involves a handshake using [SDP](https://en.wikipedia.org/wiki/Session_Description_Protocol) during which two peers will exchange information such as open ports, network addresses and required capabilities.\n *\n * A third party is usually necessary to carry out this handshake, forwarding messages between the two peers until they can make a direct connection between themselves.\n *\n * The WebRTC transport uses libp2p [Circuit Relay](https://docs.libp2p.io/concepts/nat/circuit-relay/)s to forward SDP messages. Once a direct connection is formed the relay plays no further part in the exchange.\n *\n * WebRTC Direct uses a technique known as [SDP munging](https://webrtchacks.com/not-a-guide-to-sdp-munging/) to skip the handshake step, instead encoding enough information in the connection request that the responder can derive what would have been in the handshake messages and so requires no third parties to establish a connection.\n *\n * A WebRTC Direct multiaddr also includes a certhash of the target peer - this is used to allow opening a connection to the remote, which would otherwise be denied due to use of a self-signed certificate.\n *\n * In both cases, once the connection is established a [Noise handshake](https://noiseprotocol.org/noise.html) is carried out to ensure that the remote peer has the private key that corresponds to the public key that makes up their PeerId, giving you both encryption and authentication.\n *\n * ## Support\n *\n * WebRTC is supported in both Node.js and browsers.\n *\n * At the time of writing, WebRTC Direct is dial-only in browsers and not supported in Node.js at all.\n *\n * Support in Node.js is possible but PRs will need to be opened to [libdatachannel](https://github.com/paullouisageneau/libdatachannel) and the appropriate APIs exposed in [node-datachannel](https://github.com/murat-dogan/node-datachannel).\n *\n * For both WebRTC and WebRTC Direct, support is arriving soon in go-libp2p but they are unsupported in rust-libp2p.\n *\n * See the WebRTC section of https://connectivity.libp2p.io for more information.\n *\n * @example WebRTC\n *\n * WebRTC requires use of a relay to connect two nodes. The listener first discovers a relay server and makes a reservation, then the dialer can connect via the relayed address.\n *\n * ```TypeScript\n * import { noise } from '@chainsafe/libp2p-noise'\n * import { yamux } from '@chainsafe/libp2p-yamux'\n * import { echo } from '@libp2p/echo'\n * import { circuitRelayTransport, circuitRelayServer } from '@libp2p/circuit-relay-v2'\n * import { identify } from '@libp2p/identify'\n * import { webRTC } from '@libp2p/webrtc'\n * import { webSockets } from '@libp2p/websockets'\n * import * as filters from '@libp2p/websockets/filters'\n * import { WebRTC } from '@multiformats/multiaddr-matcher'\n * import delay from 'delay'\n * import { pipe } from 'it-pipe'\n * import { createLibp2p } from 'libp2p'\n * import type { Multiaddr } from '@multiformats/multiaddr'\n *\n * // the relay server listens on a transport dialable by the listener and the\n * // dialer, and has a relay service configured\n * const relay = await createLibp2p({\n *   addresses: {\n *   listen: ['/ip4/127.0.0.1/tcp/0/ws']\n *   },\n *   transports: [\n *     webSockets({filter: filters.all})\n *   ],\n *   connectionEncryption: [noise()],\n *   streamMuxers: [yamux()],\n *   services: {\n *     identify: identify(),\n *     relay: circuitRelayServer()\n *   }\n * })\n *\n * // the listener has a WebSocket transport to dial the relay, a Circuit Relay\n * // transport to make a reservation, and a WebRTC transport to accept incoming\n * // WebRTC connections\n * const listener = await createLibp2p({\n *   addresses: {\n *   listen: ['/webrtc']\n *   },\n *   transports: [\n *     webSockets({filter: filters.all}),\n *     webRTC(),\n *     circuitRelayTransport({\n *       discoverRelays: 1\n *     })\n *   ],\n *   connectionEncryption: [noise()],\n *   streamMuxers: [yamux()],\n *   services: {\n *     identify: identify(),\n *     echo: echo()\n *   }\n * })\n *\n * // the listener dials the relay (or discovers a public relay via some other\n * // method)\n * await listener.dial(relay.getMultiaddrs(), {\n *   signal: AbortSignal.timeout(5000)\n * })\n *\n * let webRTCMultiaddr: Multiaddr | undefined\n *\n * // wait for the listener to make a reservation on the relay\n * while (true) {\n *   webRTCMultiaddr = listener.getMultiaddrs().find(ma => WebRTC.matches(ma))\n *\n *   if (webRTCMultiaddr != null) {\n *     break\n *   }\n *\n *   // try again later\n *   await delay(1000)\n * }\n *\n * // the dialer has Circuit Relay, WebSocket and WebRTC transports to dial\n * // the listener via the relay, complete the SDP handshake and establish a\n * // direct WebRTC connection\n * const dialer = await createLibp2p({\n *   transports: [\n *     webSockets({filter: filters.all}),\n *     webRTC(),\n *     circuitRelayTransport()\n *   ],\n *   connectionEncryption: [noise()],\n *   streamMuxers: [yamux()],\n *   services: {\n *     identify: identify(),\n *     echo: echo()\n *   }\n * })\n *\n * // dial the listener and open an echo protocol stream\n * const stream = await dialer.dialProtocol(webRTCMultiaddr, dialer.services.echo.protocol, {\n *   signal: AbortSignal.timeout(5000)\n * })\n *\n * // we can now stop the relay\n * await relay.stop()\n *\n * // send/receive some data from the remote peer via a direct connection\n * await pipe(\n *   [new TextEncoder().encode('hello world')],\n *   stream,\n *   async source => {\n *     for await (const buf of source) {\n *       console.info(new TextDecoder().decode(buf.subarray()))\n *     }\n *   }\n * )\n * ```\n *\n * @example WebRTC Direct\n *\n * At the time of writing WebRTC Direct is dial-only in browsers and unsupported in Node.js.\n *\n * The only implementation that supports a WebRTC Direct listener is go-libp2p and it's not yet enabled by default.\n *\n * ```TypeScript\n * import { createLibp2p } from 'libp2p'\n * import { noise } from '@chainsafe/libp2p-noise'\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { pipe } from 'it-pipe'\n * import { fromString, toString } from 'uint8arrays'\n * import { webRTCDirect } from '@libp2p/webrtc'\n *\n * const node = await createLibp2p({\n *   transports: [\n *     webRTCDirect()\n *   ],\n *   connectionEncryption: [\n *     noise()\n *   ]\n * })\n *\n * await node.start()\n *\n * // this multiaddr corresponds to a remote node running a WebRTC Direct listener\n * const ma = multiaddr('/ip4/0.0.0.0/udp/56093/webrtc-direct/certhash/uEiByaEfNSLBexWBNFZy_QB1vAKEj7JAXDizRs4_SnTflsQ')\n * const stream = await node.dialProtocol(ma, '/my-protocol/1.0.0', {\n *   signal: AbortSignal.timeout(10_000)\n * })\n *\n * await pipe(\n *   [fromString(`Hello js-libp2p-webrtc\\n`)],\n *   stream,\n *   async function (source) {\n *     for await (const buf of source) {\n *       console.info(toString(buf.subarray()))\n *     }\n *   }\n * )\n * ```\n */\n\n\n/**\n * @param {WebRTCTransportDirectInit} init - WebRTC direct transport configuration\n * @param init.dataChannel - DataChannel configurations\n * @param {number} init.dataChannel.maxMessageSize - Max message size that can be sent through the DataChannel. Larger messages will be chunked into smaller messages below this size (default 16kb)\n * @param {number} init.dataChannel.maxBufferedAmount - Max buffered amount a DataChannel can have (default 16mb)\n * @param {number} init.dataChannel.bufferedAmountLowEventTimeout - If max buffered amount is reached, this is the max time that is waited before the buffer is cleared (default 30 seconds)\n * @returns\n */\nfunction webRTCDirect(init) {\n    return (components) => new _private_to_public_transport_js__WEBPACK_IMPORTED_MODULE_0__.WebRTCDirectTransport(components, init);\n}\n/**\n * @param {WebRTCTransportInit} init - WebRTC transport configuration\n * @param {RTCConfiguration} init.rtcConfiguration - RTCConfiguration\n * @param init.dataChannel - DataChannel configurations\n * @param {number} init.dataChannel.maxMessageSize - Max message size that can be sent through the DataChannel. Larger messages will be chunked into smaller messages below this size (default 16kb)\n * @param {number} init.dataChannel.maxBufferedAmount - Max buffered amount a DataChannel can have (default 16mb)\n * @param {number} init.dataChannel.bufferedAmountLowEventTimeout - If max buffered amount is reached, this is the max time that is waited before the buffer is cleared (default 30 seconds)\n * @returns\n */\nfunction webRTC(init) {\n    return (components) => new _private_to_private_transport_js__WEBPACK_IMPORTED_MODULE_1__.WebRTCTransport(components, init);\n}\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/maconn.js":
/*!********************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/maconn.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebRTCMultiaddrConnection: () => (/* binding */ WebRTCMultiaddrConnection)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@libp2p/webrtc/dist/src/util.js\");\n\nclass WebRTCMultiaddrConnection {\n    log;\n    /**\n     * WebRTC Peer Connection\n     */\n    peerConnection;\n    /**\n     * The multiaddr address used to communicate with the remote peer\n     */\n    remoteAddr;\n    /**\n     * Holds the lifecycle times of the connection\n     */\n    timeline;\n    /**\n     * Optional metrics counter group for this connection\n     */\n    metrics;\n    /**\n     * The stream source, a no-op as the transport natively supports multiplexing\n     */\n    source = (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.nopSource)();\n    /**\n     * The stream destination, a no-op as the transport natively supports multiplexing\n     */\n    sink = _util_js__WEBPACK_IMPORTED_MODULE_0__.nopSink;\n    constructor(components, init) {\n        this.log = components.logger.forComponent('libp2p:webrtc:maconn');\n        this.remoteAddr = init.remoteAddr;\n        this.timeline = init.timeline;\n        this.peerConnection = init.peerConnection;\n        const initialState = this.peerConnection.connectionState;\n        this.peerConnection.onconnectionstatechange = () => {\n            this.log.trace('peer connection state change', this.peerConnection.connectionState, 'initial state', initialState);\n            if (this.peerConnection.connectionState === 'disconnected' || this.peerConnection.connectionState === 'failed' || this.peerConnection.connectionState === 'closed') {\n                // nothing else to do but close the connection\n                this.timeline.close = Date.now();\n            }\n        };\n    }\n    async close(options) {\n        this.log.trace('closing connection');\n        this.peerConnection.close();\n        this.timeline.close = Date.now();\n        this.metrics?.increment({ close: true });\n    }\n    abort(err) {\n        this.log.error('closing connection due to error', err);\n        this.peerConnection.close();\n        this.timeline.close = Date.now();\n        this.metrics?.increment({ abort: true });\n    }\n}\n//# sourceMappingURL=maconn.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/maconn.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/muxer.js":
/*!*******************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/muxer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataChannelMuxer: () => (/* binding */ DataChannelMuxer),\n/* harmony export */   DataChannelMuxerFactory: () => (/* binding */ DataChannelMuxerFactory)\n/* harmony export */ });\n/* harmony import */ var _stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.js */ \"./node_modules/@libp2p/webrtc/dist/src/stream.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@libp2p/webrtc/dist/src/util.js\");\n\n\nconst PROTOCOL = '/webrtc';\nclass DataChannelMuxerFactory {\n    protocol;\n    /**\n     * WebRTC Peer Connection\n     */\n    peerConnection;\n    bufferedStreams = [];\n    metrics;\n    dataChannelOptions;\n    components;\n    log;\n    constructor(components, init) {\n        this.components = components;\n        this.peerConnection = init.peerConnection;\n        this.metrics = init.metrics;\n        this.protocol = init.protocol ?? PROTOCOL;\n        this.dataChannelOptions = init.dataChannelOptions ?? {};\n        this.log = components.logger.forComponent('libp2p:webrtc:datachannelmuxerfactory');\n        // store any datachannels opened before upgrade has been completed\n        this.peerConnection.ondatachannel = ({ channel }) => {\n            this.log.trace('incoming early datachannel with channel id %d and label \"%s\"', channel.id);\n            // 'init' channel is only used during connection establishment\n            if (channel.label === 'init') {\n                this.log.trace('closing early init channel');\n                channel.close();\n                return;\n            }\n            // @ts-expect-error fields are set below\n            const bufferedStream = {};\n            const stream = (0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.createStream)({\n                channel,\n                direction: 'inbound',\n                onEnd: (err) => {\n                    bufferedStream.onEnd(err);\n                },\n                logger: components.logger,\n                ...this.dataChannelOptions\n            });\n            bufferedStream.stream = stream;\n            bufferedStream.channel = channel;\n            bufferedStream.onEnd = () => {\n                this.bufferedStreams = this.bufferedStreams.filter(s => s.stream.id !== stream.id);\n            };\n            this.bufferedStreams.push(bufferedStream);\n        };\n    }\n    createStreamMuxer(init) {\n        return new DataChannelMuxer(this.components, {\n            ...init,\n            peerConnection: this.peerConnection,\n            dataChannelOptions: this.dataChannelOptions,\n            metrics: this.metrics,\n            streams: this.bufferedStreams,\n            protocol: this.protocol\n        });\n    }\n}\n/**\n * A libp2p data channel stream muxer\n */\nclass DataChannelMuxer {\n    init;\n    /**\n     * Array of streams in the data channel\n     */\n    streams;\n    protocol;\n    log;\n    peerConnection;\n    dataChannelOptions;\n    metrics;\n    logger;\n    constructor(components, init) {\n        this.init = init;\n        this.log = components.logger.forComponent('libp2p:webrtc:muxer');\n        this.logger = components.logger;\n        this.streams = init.streams.map(s => s.stream);\n        this.peerConnection = init.peerConnection;\n        this.protocol = init.protocol ?? PROTOCOL;\n        this.metrics = init.metrics;\n        this.dataChannelOptions = init.dataChannelOptions ?? {};\n        /**\n         * Fired when a data channel has been added to the connection has been\n         * added by the remote peer.\n         *\n         * {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/datachannel_event}\n         */\n        this.peerConnection.ondatachannel = ({ channel }) => {\n            this.log.trace('incoming datachannel with channel id %d', channel.id);\n            // 'init' channel is only used during connection establishment\n            if (channel.label === 'init') {\n                this.log.trace('closing init channel');\n                channel.close();\n                return;\n            }\n            const stream = (0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.createStream)({\n                channel,\n                direction: 'inbound',\n                onEnd: () => {\n                    this.log('incoming channel %s ended with state %s', channel.id, channel.readyState);\n                    this.#onStreamEnd(stream, channel);\n                },\n                logger: this.logger,\n                ...this.dataChannelOptions\n            });\n            this.streams.push(stream);\n            this.metrics?.increment({ incoming_stream: true });\n            init?.onIncomingStream?.(stream);\n        };\n        // the DataChannelMuxer constructor is called during set up of the\n        // connection by the upgrader.\n        //\n        // If we invoke `init.onIncomingStream` immediately, the connection object\n        // will not be set up yet so add a tiny delay before letting the\n        // connection know about early streams\n        if (this.init.streams.length > 0) {\n            queueMicrotask(() => {\n                this.init.streams.forEach(bufferedStream => {\n                    bufferedStream.onEnd = () => {\n                        this.log('incoming early channel %s ended with state %s', bufferedStream.channel.id, bufferedStream.channel.readyState);\n                        this.#onStreamEnd(bufferedStream.stream, bufferedStream.channel);\n                    };\n                    this.metrics?.increment({ incoming_stream: true });\n                    this.init?.onIncomingStream?.(bufferedStream.stream);\n                });\n            });\n        }\n    }\n    #onStreamEnd(stream, channel) {\n        this.log.trace('stream %s %s %s onEnd', stream.direction, stream.id, stream.protocol);\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.drainAndClose)(channel, `${stream.direction} ${stream.id} ${stream.protocol}`, this.dataChannelOptions.drainTimeout, {\n            log: this.log\n        });\n        this.streams = this.streams.filter(s => s.id !== stream.id);\n        this.metrics?.increment({ stream_end: true });\n        this.init?.onStreamEnd?.(stream);\n    }\n    /**\n     * Gracefully close all tracked streams and stop the muxer\n     */\n    async close(options) {\n        try {\n            await Promise.all(this.streams.map(async (stream) => stream.close(options)));\n        }\n        catch (err) {\n            this.abort(err);\n        }\n    }\n    /**\n     * Abort all tracked streams and stop the muxer\n     */\n    abort(err) {\n        for (const stream of this.streams) {\n            stream.abort(err);\n        }\n    }\n    /**\n     * The stream source, a no-op as the transport natively supports multiplexing\n     */\n    source = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.nopSource)();\n    /**\n     * The stream destination, a no-op as the transport natively supports multiplexing\n     */\n    sink = _util_js__WEBPACK_IMPORTED_MODULE_1__.nopSink;\n    newStream() {\n        // The spec says the label SHOULD be an empty string: https://github.com/libp2p/specs/blob/master/webrtc/README.md#rtcdatachannel-label\n        const channel = this.peerConnection.createDataChannel('');\n        this.log.trace('opened outgoing datachannel with channel id %s', channel.id);\n        const stream = (0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.createStream)({\n            channel,\n            direction: 'outbound',\n            onEnd: () => {\n                this.log('outgoing channel %s ended with state %s', channel.id, channel.readyState);\n                this.#onStreamEnd(stream, channel);\n            },\n            logger: this.logger,\n            ...this.dataChannelOptions\n        });\n        this.streams.push(stream);\n        this.metrics?.increment({ outgoing_stream: true });\n        return stream;\n    }\n}\n//# sourceMappingURL=muxer.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/muxer.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/pb/message.js":
/*!************************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/pb/message.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Message: () => (/* binding */ Message)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nvar Message;\n(function (Message) {\n    let Flag;\n    (function (Flag) {\n        Flag[\"FIN\"] = \"FIN\";\n        Flag[\"STOP_SENDING\"] = \"STOP_SENDING\";\n        Flag[\"RESET\"] = \"RESET\";\n        Flag[\"FIN_ACK\"] = \"FIN_ACK\";\n    })(Flag = Message.Flag || (Message.Flag = {}));\n    let __FlagValues;\n    (function (__FlagValues) {\n        __FlagValues[__FlagValues[\"FIN\"] = 0] = \"FIN\";\n        __FlagValues[__FlagValues[\"STOP_SENDING\"] = 1] = \"STOP_SENDING\";\n        __FlagValues[__FlagValues[\"RESET\"] = 2] = \"RESET\";\n        __FlagValues[__FlagValues[\"FIN_ACK\"] = 3] = \"FIN_ACK\";\n    })(__FlagValues || (__FlagValues = {}));\n    (function (Flag) {\n        Flag.codec = () => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.enumeration)(__FlagValues);\n        };\n    })(Flag = Message.Flag || (Message.Flag = {}));\n    let _codec;\n    Message.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.flag != null) {\n                    w.uint32(8);\n                    Message.Flag.codec().encode(obj.flag, w);\n                }\n                if (obj.message != null) {\n                    w.uint32(18);\n                    w.bytes(obj.message);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.flag = Message.Flag.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.message = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Message.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Message.codec());\n    };\n    Message.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Message.codec());\n    };\n})(Message || (Message = {}));\n//# sourceMappingURL=message.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/pb/message.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/private-to-private/initiate-connection.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/private-to-private/initiate-connection.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initiateConnection: () => (/* binding */ initiateConnection)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var it_protobuf_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-protobuf-stream */ \"./node_modules/it-protobuf-stream/dist/src/index.js\");\n/* harmony import */ var _webrtc_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../webrtc/index.js */ \"./node_modules/@libp2p/webrtc/dist/src/webrtc/index.browser.js\");\n/* harmony import */ var _pb_message_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pb/message.js */ \"./node_modules/@libp2p/webrtc/dist/src/private-to-private/pb/message.js\");\n/* harmony import */ var _transport_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transport.js */ \"./node_modules/@libp2p/webrtc/dist/src/private-to-private/transport.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@libp2p/webrtc/dist/src/private-to-private/util.js\");\n\n\n\n\n\n\n\nasync function initiateConnection({ peerConnection, signal, metrics, multiaddr: ma, connectionManager, transportManager, log }) {\n    const { baseAddr } = (0,_transport_js__WEBPACK_IMPORTED_MODULE_1__.splitAddr)(ma);\n    metrics?.dialerEvents.increment({ open: true });\n    log.trace('dialing base address: %a', baseAddr);\n    const relayPeer = baseAddr.getPeerId();\n    if (relayPeer == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('Relay peer was missing', 'ERR_INVALID_ADDRESS');\n    }\n    const connections = connectionManager.getConnections((0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_3__.peerIdFromString)(relayPeer));\n    let connection;\n    let shouldCloseConnection = false;\n    if (connections.length === 0) {\n        // use the transport manager to open a connection. Initiating a WebRTC\n        // connection takes place in the context of a dial - if we use the\n        // connection manager instead we can end up joining our own dial context\n        connection = await transportManager.dial(baseAddr, {\n            signal\n        });\n        // this connection is unmanaged by the connection manager so we should\n        // close it when we are done\n        shouldCloseConnection = true;\n    }\n    else {\n        connection = connections[0];\n    }\n    try {\n        const stream = await connection.newStream(_transport_js__WEBPACK_IMPORTED_MODULE_1__.SIGNALING_PROTO_ID, {\n            signal,\n            runOnTransientConnection: true\n        });\n        const messageStream = (0,it_protobuf_stream__WEBPACK_IMPORTED_MODULE_0__.pbStream)(stream).pb(_pb_message_js__WEBPACK_IMPORTED_MODULE_4__.Message);\n        try {\n            // we create the channel so that the RTCPeerConnection has a component for\n            // which to collect candidates. The label is not relevant to connection\n            // initiation but can be useful for debugging\n            const channel = peerConnection.createDataChannel('init');\n            // setup callback to write ICE candidates to the remote peer\n            peerConnection.onicecandidate = ({ candidate }) => {\n                // a null candidate means end-of-candidates, an empty string candidate\n                // means end-of-candidates for this generation, otherwise this should\n                // be a valid candidate object\n                // see - https://www.w3.org/TR/webrtc/#rtcpeerconnectioniceevent\n                const data = JSON.stringify(candidate?.toJSON() ?? null);\n                log.trace('initiator sending ICE candidate %s', data);\n                void messageStream.write({\n                    type: _pb_message_js__WEBPACK_IMPORTED_MODULE_4__.Message.Type.ICE_CANDIDATE,\n                    data\n                }, {\n                    signal\n                })\n                    .catch(err => {\n                    log.error('error sending ICE candidate', err);\n                });\n            };\n            peerConnection.onicecandidateerror = (event) => {\n                log.error('initiator ICE candidate error', event);\n            };\n            // create an offer\n            const offerSdp = await peerConnection.createOffer().catch(err => {\n                log.error('could not execute createOffer', err);\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('Failed to set createOffer', 'ERR_SDP_HANDSHAKE_FAILED');\n            });\n            log.trace('initiator send SDP offer %s', offerSdp.sdp);\n            // write the offer to the stream\n            await messageStream.write({ type: _pb_message_js__WEBPACK_IMPORTED_MODULE_4__.Message.Type.SDP_OFFER, data: offerSdp.sdp }, {\n                signal\n            });\n            // set offer as local description\n            await peerConnection.setLocalDescription(offerSdp).catch(err => {\n                log.error('could not execute setLocalDescription', err);\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('Failed to set localDescription', 'ERR_SDP_HANDSHAKE_FAILED');\n            });\n            // read answer\n            const answerMessage = await messageStream.read({\n                signal\n            });\n            if (answerMessage.type !== _pb_message_js__WEBPACK_IMPORTED_MODULE_4__.Message.Type.SDP_ANSWER) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('Remote should send an SDP answer', 'ERR_SDP_HANDSHAKE_FAILED');\n            }\n            log.trace('initiator receive SDP answer %s', answerMessage.data);\n            const answerSdp = new _webrtc_index_js__WEBPACK_IMPORTED_MODULE_5__.RTCSessionDescription({ type: 'answer', sdp: answerMessage.data });\n            await peerConnection.setRemoteDescription(answerSdp).catch(err => {\n                log.error('could not execute setRemoteDescription', err);\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('Failed to set remoteDescription', 'ERR_SDP_HANDSHAKE_FAILED');\n            });\n            log.trace('initiator read candidates until connected');\n            await (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.readCandidatesUntilConnected)(peerConnection, messageStream, {\n                direction: 'initiator',\n                signal,\n                log\n            });\n            log.trace('initiator connected, closing init channel');\n            channel.close();\n            log.trace('initiator closing signalling stream');\n            await messageStream.unwrap().unwrap().close({\n                signal\n            });\n            log.trace('initiator connected to remote address %s', ma);\n            return {\n                remoteAddress: ma\n            };\n        }\n        catch (err) {\n            peerConnection.close();\n            stream.abort(err);\n            throw err;\n        }\n        finally {\n            peerConnection.onicecandidate = null;\n            peerConnection.onicecandidateerror = null;\n        }\n    }\n    finally {\n        // if we had to open a connection to perform the SDP handshake\n        // close it because it's not tracked by the connection manager\n        if (shouldCloseConnection) {\n            try {\n                await connection.close({\n                    signal\n                });\n            }\n            catch (err) {\n                connection.abort(err);\n            }\n        }\n    }\n}\n//# sourceMappingURL=initiate-connection.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/private-to-private/initiate-connection.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/private-to-private/listener.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/private-to-private/listener.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebRTCPeerListener: () => (/* binding */ WebRTCPeerListener)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/event-target.js\");\n/* harmony import */ var _multiformats_mafmt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/mafmt */ \"./node_modules/@multiformats/mafmt/dist/src/index.js\");\n\n\nclass WebRTCPeerListener extends _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.TypedEventEmitter {\n    peerId;\n    transportManager;\n    shutdownController;\n    constructor(components, init) {\n        super();\n        this.peerId = components.peerId;\n        this.transportManager = components.transportManager;\n        this.shutdownController = init.shutdownController;\n    }\n    async listen() {\n        this.safeDispatchEvent('listening', {});\n    }\n    getAddrs() {\n        return this.transportManager\n            .getListeners()\n            .filter(l => l !== this)\n            .map(l => l.getAddrs()\n            .filter(ma => _multiformats_mafmt__WEBPACK_IMPORTED_MODULE_0__.Circuit.matches(ma))\n            .map(ma => {\n            return ma.encapsulate(`/webrtc/p2p/${this.peerId}`);\n        }))\n            .flat();\n    }\n    async close() {\n        this.shutdownController.abort();\n        this.safeDispatchEvent('close', {});\n    }\n}\n//# sourceMappingURL=listener.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/private-to-private/listener.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/private-to-private/pb/message.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/private-to-private/pb/message.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Message: () => (/* binding */ Message)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nvar Message;\n(function (Message) {\n    let Type;\n    (function (Type) {\n        Type[\"SDP_OFFER\"] = \"SDP_OFFER\";\n        Type[\"SDP_ANSWER\"] = \"SDP_ANSWER\";\n        Type[\"ICE_CANDIDATE\"] = \"ICE_CANDIDATE\";\n    })(Type = Message.Type || (Message.Type = {}));\n    let __TypeValues;\n    (function (__TypeValues) {\n        __TypeValues[__TypeValues[\"SDP_OFFER\"] = 0] = \"SDP_OFFER\";\n        __TypeValues[__TypeValues[\"SDP_ANSWER\"] = 1] = \"SDP_ANSWER\";\n        __TypeValues[__TypeValues[\"ICE_CANDIDATE\"] = 2] = \"ICE_CANDIDATE\";\n    })(__TypeValues || (__TypeValues = {}));\n    (function (Type) {\n        Type.codec = () => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.enumeration)(__TypeValues);\n        };\n    })(Type = Message.Type || (Message.Type = {}));\n    let _codec;\n    Message.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.type != null) {\n                    w.uint32(8);\n                    Message.Type.codec().encode(obj.type, w);\n                }\n                if (obj.data != null) {\n                    w.uint32(18);\n                    w.string(obj.data);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.type = Message.Type.codec().decode(reader);\n                            break;\n                        case 2:\n                            obj.data = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Message.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Message.codec());\n    };\n    Message.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Message.codec());\n    };\n})(Message || (Message = {}));\n//# sourceMappingURL=message.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/private-to-private/pb/message.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/private-to-private/signaling-stream-handler.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/private-to-private/signaling-stream-handler.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleIncomingStream: () => (/* binding */ handleIncomingStream)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var it_protobuf_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-protobuf-stream */ \"./node_modules/it-protobuf-stream/dist/src/index.js\");\n/* harmony import */ var _webrtc_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../webrtc/index.js */ \"./node_modules/@libp2p/webrtc/dist/src/webrtc/index.browser.js\");\n/* harmony import */ var _pb_message_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pb/message.js */ \"./node_modules/@libp2p/webrtc/dist/src/private-to-private/pb/message.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@libp2p/webrtc/dist/src/private-to-private/util.js\");\n\n\n\n\n\n\nasync function handleIncomingStream({ peerConnection, stream, signal, connection, log }) {\n    log.trace('new inbound signaling stream');\n    const messageStream = (0,it_protobuf_stream__WEBPACK_IMPORTED_MODULE_1__.pbStream)(stream).pb(_pb_message_js__WEBPACK_IMPORTED_MODULE_2__.Message);\n    try {\n        // candidate callbacks\n        peerConnection.onicecandidate = ({ candidate }) => {\n            // a null candidate means end-of-candidates, an empty string candidate\n            // means end-of-candidates for this generation, otherwise this should\n            // be a valid candidate object\n            // see - https://www.w3.org/TR/webrtc/#rtcpeerconnectioniceevent\n            const data = JSON.stringify(candidate?.toJSON() ?? null);\n            log.trace('recipient sending ICE candidate %s', data);\n            messageStream.write({\n                type: _pb_message_js__WEBPACK_IMPORTED_MODULE_2__.Message.Type.ICE_CANDIDATE,\n                data\n            }, {\n                signal\n            })\n                .catch(err => {\n                log.error('error sending ICE candidate', err);\n            });\n        };\n        // read an SDP offer\n        const pbOffer = await messageStream.read({\n            signal\n        });\n        if (pbOffer.type !== _pb_message_js__WEBPACK_IMPORTED_MODULE_2__.Message.Type.SDP_OFFER) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(`expected message type SDP_OFFER, received: ${pbOffer.type ?? 'undefined'} `, 'ERR_SDP_HANDSHAKE_FAILED');\n        }\n        log.trace('recipient receive SDP offer %s', pbOffer.data);\n        const offer = new _webrtc_index_js__WEBPACK_IMPORTED_MODULE_4__.RTCSessionDescription({\n            type: 'offer',\n            sdp: pbOffer.data\n        });\n        await peerConnection.setRemoteDescription(offer).catch(err => {\n            log.error('could not execute setRemoteDescription', err);\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Failed to set remoteDescription', 'ERR_SDP_HANDSHAKE_FAILED');\n        });\n        // create and write an SDP answer\n        const answer = await peerConnection.createAnswer().catch(err => {\n            log.error('could not execute createAnswer', err);\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Failed to create answer', 'ERR_SDP_HANDSHAKE_FAILED');\n        });\n        log.trace('recipient send SDP answer %s', answer.sdp);\n        // write the answer to the remote\n        await messageStream.write({ type: _pb_message_js__WEBPACK_IMPORTED_MODULE_2__.Message.Type.SDP_ANSWER, data: answer.sdp }, {\n            signal\n        });\n        await peerConnection.setLocalDescription(answer).catch(err => {\n            log.error('could not execute setLocalDescription', err);\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Failed to set localDescription', 'ERR_SDP_HANDSHAKE_FAILED');\n        });\n        log.trace('recipient read candidates until connected');\n        // wait until candidates are connected\n        await (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.readCandidatesUntilConnected)(peerConnection, messageStream, {\n            direction: 'recipient',\n            signal,\n            log\n        });\n    }\n    catch (err) {\n        if (peerConnection.connectionState !== 'connected') {\n            log.error('error while handling signaling stream from peer %a', connection.remoteAddr, err);\n            peerConnection.close();\n            throw err;\n        }\n        else {\n            log('error while handling signaling stream from peer %a, ignoring as the RTCPeerConnection is already connected', connection.remoteAddr, err);\n        }\n    }\n    const remoteAddress = (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(`/webrtc/p2p/${connection.remoteAddr.getPeerId()}`);\n    log.trace('recipient connected to remote address %s', remoteAddress);\n    return { remoteAddress };\n}\n//# sourceMappingURL=signaling-stream-handler.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/private-to-private/signaling-stream-handler.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/private-to-private/transport.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/private-to-private/transport.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SIGNALING_PROTO_ID: () => (/* binding */ SIGNALING_PROTO_ID),\n/* harmony export */   WebRTCTransport: () => (/* binding */ WebRTCTransport),\n/* harmony export */   splitAddr: () => (/* binding */ splitAddr)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/events.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/transport/index.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @multiformats/multiaddr-matcher */ \"./node_modules/@multiformats/multiaddr-matcher/dist/src/index.js\");\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../error.js */ \"./node_modules/@libp2p/webrtc/dist/src/error.js\");\n/* harmony import */ var _maconn_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../maconn.js */ \"./node_modules/@libp2p/webrtc/dist/src/maconn.js\");\n/* harmony import */ var _muxer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../muxer.js */ \"./node_modules/@libp2p/webrtc/dist/src/muxer.js\");\n/* harmony import */ var _webrtc_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../webrtc/index.js */ \"./node_modules/@libp2p/webrtc/dist/src/webrtc/index.browser.js\");\n/* harmony import */ var _initiate_connection_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./initiate-connection.js */ \"./node_modules/@libp2p/webrtc/dist/src/private-to-private/initiate-connection.js\");\n/* harmony import */ var _listener_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./listener.js */ \"./node_modules/@libp2p/webrtc/dist/src/private-to-private/listener.js\");\n/* harmony import */ var _signaling_stream_handler_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./signaling-stream-handler.js */ \"./node_modules/@libp2p/webrtc/dist/src/private-to-private/signaling-stream-handler.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst WEBRTC_TRANSPORT = '/webrtc';\nconst CIRCUIT_RELAY_TRANSPORT = '/p2p-circuit';\nconst SIGNALING_PROTO_ID = '/webrtc-signaling/0.0.1';\nconst INBOUND_CONNECTION_TIMEOUT = 30 * 1000;\nclass WebRTCTransport {\n    components;\n    init;\n    log;\n    _started = false;\n    metrics;\n    shutdownController;\n    constructor(components, init = {}) {\n        this.components = components;\n        this.init = init;\n        this.log = components.logger.forComponent('libp2p:webrtc');\n        this.shutdownController = new AbortController();\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.setMaxListeners)(Infinity, this.shutdownController.signal);\n        if (components.metrics != null) {\n            this.metrics = {\n                dialerEvents: components.metrics.registerCounterGroup('libp2p_webrtc_dialer_events_total', {\n                    label: 'event',\n                    help: 'Total count of WebRTC dialer events by type'\n                }),\n                listenerEvents: components.metrics.registerCounterGroup('libp2p_webrtc_listener_events_total', {\n                    label: 'event',\n                    help: 'Total count of WebRTC listener events by type'\n                })\n            };\n        }\n    }\n    isStarted() {\n        return this._started;\n    }\n    async start() {\n        await this.components.registrar.handle(SIGNALING_PROTO_ID, (data) => {\n            this._onProtocol(data).catch(err => { this.log.error('failed to handle incoming connect from %p', data.connection.remotePeer, err); });\n        }, {\n            runOnTransientConnection: true\n        });\n        this._started = true;\n    }\n    async stop() {\n        await this.components.registrar.unhandle(SIGNALING_PROTO_ID);\n        (0,_webrtc_index_js__WEBPACK_IMPORTED_MODULE_3__.cleanup)();\n        this._started = false;\n    }\n    createListener(options) {\n        return new _listener_js__WEBPACK_IMPORTED_MODULE_4__.WebRTCPeerListener(this.components, {\n            shutdownController: this.shutdownController\n        });\n    }\n    [Symbol.toStringTag] = '@libp2p/webrtc';\n    [_libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.transportSymbol] = true;\n    filter(multiaddrs) {\n        return multiaddrs.filter(_multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_1__.WebRTC.exactMatch);\n    }\n    /*\n     * dial connects to a remote via the circuit relay or any other protocol\n     * and proceeds to upgrade to a webrtc connection.\n     * multiaddr of the form: <multiaddr>/webrtc/p2p/<destination-peer>\n     * For a circuit relay, this will be of the form\n     * <relay address>/p2p/<relay-peer>/p2p-circuit/webrtc/p2p/<destination-peer>\n    */\n    async dial(ma, options) {\n        this.log.trace('dialing address: %a', ma);\n        const peerConnection = new _webrtc_index_js__WEBPACK_IMPORTED_MODULE_3__.RTCPeerConnection(this.init.rtcConfiguration);\n        const muxerFactory = new _muxer_js__WEBPACK_IMPORTED_MODULE_6__.DataChannelMuxerFactory(this.components, {\n            peerConnection,\n            dataChannelOptions: this.init.dataChannel\n        });\n        const { remoteAddress } = await (0,_initiate_connection_js__WEBPACK_IMPORTED_MODULE_7__.initiateConnection)({\n            peerConnection,\n            multiaddr: ma,\n            dataChannelOptions: this.init.dataChannel,\n            signal: options.signal,\n            connectionManager: this.components.connectionManager,\n            transportManager: this.components.transportManager,\n            log: this.log\n        });\n        const webRTCConn = new _maconn_js__WEBPACK_IMPORTED_MODULE_8__.WebRTCMultiaddrConnection(this.components, {\n            peerConnection,\n            timeline: { open: Date.now() },\n            remoteAddr: remoteAddress,\n            metrics: this.metrics?.dialerEvents\n        });\n        const connection = await options.upgrader.upgradeOutbound(webRTCConn, {\n            skipProtection: true,\n            skipEncryption: true,\n            muxerFactory\n        });\n        // close the connection on shut down\n        this._closeOnShutdown(peerConnection, webRTCConn);\n        return connection;\n    }\n    async _onProtocol({ connection, stream }) {\n        const signal = AbortSignal.timeout(this.init.inboundConnectionTimeout ?? INBOUND_CONNECTION_TIMEOUT);\n        const peerConnection = new _webrtc_index_js__WEBPACK_IMPORTED_MODULE_3__.RTCPeerConnection(this.init.rtcConfiguration);\n        const muxerFactory = new _muxer_js__WEBPACK_IMPORTED_MODULE_6__.DataChannelMuxerFactory(this.components, {\n            peerConnection,\n            dataChannelOptions: this.init.dataChannel\n        });\n        try {\n            const { remoteAddress } = await (0,_signaling_stream_handler_js__WEBPACK_IMPORTED_MODULE_9__.handleIncomingStream)({\n                peerConnection,\n                connection,\n                stream,\n                signal,\n                log: this.log\n            });\n            const webRTCConn = new _maconn_js__WEBPACK_IMPORTED_MODULE_8__.WebRTCMultiaddrConnection(this.components, {\n                peerConnection,\n                timeline: { open: (new Date()).getTime() },\n                remoteAddr: remoteAddress,\n                metrics: this.metrics?.listenerEvents\n            });\n            // close the connection on shut down\n            this._closeOnShutdown(peerConnection, webRTCConn);\n            await this.components.upgrader.upgradeInbound(webRTCConn, {\n                skipEncryption: true,\n                skipProtection: true,\n                muxerFactory\n            });\n            // close the stream if SDP messages have been exchanged successfully\n            await stream.close({\n                signal\n            });\n        }\n        catch (err) {\n            stream.abort(err);\n            throw err;\n        }\n    }\n    _closeOnShutdown(pc, webRTCConn) {\n        // close the connection on shut down\n        const shutDownListener = () => {\n            webRTCConn.close()\n                .catch(err => {\n                this.log.error('could not close WebRTCMultiaddrConnection', err);\n            });\n        };\n        this.shutdownController.signal.addEventListener('abort', shutDownListener);\n        pc.addEventListener('close', () => {\n            this.shutdownController.signal.removeEventListener('abort', shutDownListener);\n        });\n    }\n}\nfunction splitAddr(ma) {\n    const addrs = ma.toString().split(WEBRTC_TRANSPORT + '/');\n    if (addrs.length !== 2) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('webrtc protocol was not present in multiaddr', _error_js__WEBPACK_IMPORTED_MODULE_11__.codes.ERR_INVALID_MULTIADDR);\n    }\n    if (!addrs[0].includes(CIRCUIT_RELAY_TRANSPORT)) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('p2p-circuit protocol was not present in multiaddr', _error_js__WEBPACK_IMPORTED_MODULE_11__.codes.ERR_INVALID_MULTIADDR);\n    }\n    // look for remote peerId\n    let remoteAddr = (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(addrs[0]);\n    const destination = (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)('/' + addrs[1]);\n    const destinationIdString = destination.getPeerId();\n    if (destinationIdString == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('destination peer id was missing', _error_js__WEBPACK_IMPORTED_MODULE_11__.codes.ERR_INVALID_MULTIADDR);\n    }\n    const lastProtoInRemote = remoteAddr.protos().pop();\n    if (lastProtoInRemote === undefined) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_10__.CodeError('invalid multiaddr', _error_js__WEBPACK_IMPORTED_MODULE_11__.codes.ERR_INVALID_MULTIADDR);\n    }\n    if (lastProtoInRemote.name !== 'p2p') {\n        remoteAddr = remoteAddr.encapsulate(`/p2p/${destinationIdString}`);\n    }\n    return { baseAddr: remoteAddr, peerId: (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_12__.peerIdFromString)(destinationIdString) };\n}\n//# sourceMappingURL=transport.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/private-to-private/transport.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/private-to-private/util.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/private-to-private/util.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   readCandidatesUntilConnected: () => (/* binding */ readCandidatesUntilConnected)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var p_defer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-defer */ \"./node_modules/p-defer/index.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util.js */ \"./node_modules/@libp2p/webrtc/dist/src/util.js\");\n/* harmony import */ var _webrtc_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../webrtc/index.js */ \"./node_modules/@libp2p/webrtc/dist/src/webrtc/index.browser.js\");\n/* harmony import */ var _pb_message_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pb/message.js */ \"./node_modules/@libp2p/webrtc/dist/src/private-to-private/pb/message.js\");\n\n\n\n\n\nconst readCandidatesUntilConnected = async (pc, stream, options) => {\n    try {\n        const connectedPromise = (0,p_defer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        resolveOnConnected(pc, connectedPromise);\n        // read candidates until we are connected or we reach the end of the stream\n        while (true) {\n            // if we connect, stop trying to read from the stream\n            const message = await Promise.race([\n                connectedPromise.promise,\n                stream.read({\n                    signal: options.signal\n                })\n            ]);\n            // stream ended or we became connected\n            if (message == null) {\n                break;\n            }\n            if (message.type !== _pb_message_js__WEBPACK_IMPORTED_MODULE_1__.Message.Type.ICE_CANDIDATE) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('ICE candidate message expected', 'ERR_NOT_ICE_CANDIDATE');\n            }\n            const candidateInit = JSON.parse(message.data ?? 'null');\n            // an empty string means this generation of candidates is complete, a null\n            // candidate means candidate gathering has finished\n            // see - https://www.w3.org/TR/webrtc/#rtcpeerconnectioniceevent\n            if (candidateInit === '' || candidateInit === null) {\n                options.log.trace('end-of-candidates received');\n                continue;\n            }\n            const candidate = new _webrtc_index_js__WEBPACK_IMPORTED_MODULE_3__.RTCIceCandidate(candidateInit);\n            options.log.trace('%s received new ICE candidate', options.direction, candidate);\n            try {\n                await pc.addIceCandidate(candidate);\n            }\n            catch (err) {\n                options.log.error('%s bad candidate received', options.direction, candidateInit, err);\n            }\n        }\n    }\n    catch (err) {\n        options.log.error('%s error parsing ICE candidate', options.direction, err);\n        if (options.signal?.aborted === true) {\n            throw err;\n        }\n    }\n};\nfunction getConnectionState(pc) {\n    return _util_js__WEBPACK_IMPORTED_MODULE_4__.isFirefox ? pc.iceConnectionState : pc.connectionState;\n}\nfunction resolveOnConnected(pc, promise) {\n    pc[_util_js__WEBPACK_IMPORTED_MODULE_4__.isFirefox ? 'oniceconnectionstatechange' : 'onconnectionstatechange'] = (_) => {\n        switch (getConnectionState(pc)) {\n            case 'connected':\n                promise.resolve();\n                break;\n            case 'failed':\n            case 'disconnected':\n            case 'closed':\n                promise.reject(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('RTCPeerConnection was closed', 'ERR_CONNECTION_CLOSED_BEFORE_CONNECTED'));\n                break;\n            default:\n                break;\n        }\n    };\n}\n//# sourceMappingURL=util.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/private-to-private/util.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/private-to-public/sdp.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/private-to-public/sdp.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   certhash: () => (/* binding */ certhash),\n/* harmony export */   decodeCerthash: () => (/* binding */ decodeCerthash),\n/* harmony export */   fromMultiAddr: () => (/* binding */ fromMultiAddr),\n/* harmony export */   getFingerprintFromSdp: () => (/* binding */ getFingerprintFromSdp),\n/* harmony export */   getLocalFingerprint: () => (/* binding */ getLocalFingerprint),\n/* harmony export */   ma2Fingerprint: () => (/* binding */ ma2Fingerprint),\n/* harmony export */   mbdecoder: () => (/* binding */ mbdecoder),\n/* harmony export */   munge: () => (/* binding */ munge),\n/* harmony export */   toSupportedHashFunction: () => (/* binding */ toSupportedHashFunction)\n/* harmony export */ });\n/* harmony import */ var multiformats_basics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/basics */ \"./node_modules/multiformats/dist/src/basics.js\");\n/* harmony import */ var multihashes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multihashes */ \"./node_modules/multihashes/src/index.js\");\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error.js */ \"./node_modules/@libp2p/webrtc/dist/src/error.js\");\n/* harmony import */ var _transport_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transport.js */ \"./node_modules/@libp2p/webrtc/dist/src/private-to-public/transport.js\");\n\n\n\n\n/**\n * Get base2 | identity decoders\n */\n// @ts-expect-error - Not easy to combine these types.\nconst mbdecoder = Object.values(multiformats_basics__WEBPACK_IMPORTED_MODULE_0__.bases).map(b => b.decoder).reduce((d, b) => d.or(b));\nfunction getLocalFingerprint(pc, options) {\n    // try to fetch fingerprint from local certificate\n    const localCert = pc.getConfiguration().certificates?.at(0);\n    if (localCert == null || localCert.getFingerprints == null) {\n        options.log.trace('fetching fingerprint from local SDP');\n        const localDescription = pc.localDescription;\n        if (localDescription == null) {\n            return undefined;\n        }\n        return getFingerprintFromSdp(localDescription.sdp);\n    }\n    options.log.trace('fetching fingerprint from local certificate');\n    if (localCert.getFingerprints().length === 0) {\n        return undefined;\n    }\n    const fingerprint = localCert.getFingerprints()[0].value;\n    if (fingerprint == null) {\n        throw (0,_error_js__WEBPACK_IMPORTED_MODULE_2__.invalidFingerprint)('', 'no fingerprint on local certificate');\n    }\n    return fingerprint;\n}\nconst fingerprintRegex = /^a=fingerprint:(?:\\w+-[0-9]+)\\s(?<fingerprint>(:?[0-9a-fA-F]{2})+)$/m;\nfunction getFingerprintFromSdp(sdp) {\n    const searchResult = sdp.match(fingerprintRegex);\n    return searchResult?.groups?.fingerprint;\n}\n/**\n * Get base2 | identity decoders\n */\nfunction ipv(ma) {\n    for (const proto of ma.protoNames()) {\n        if (proto.startsWith('ip')) {\n            return proto.toUpperCase();\n        }\n    }\n    return 'IP6';\n}\n// Extract the certhash from a multiaddr\nfunction certhash(ma) {\n    const tups = ma.stringTuples();\n    const certhash = tups.filter((tup) => tup[0] === _transport_js__WEBPACK_IMPORTED_MODULE_3__.CERTHASH_CODE).map((tup) => tup[1])[0];\n    if (certhash === undefined || certhash === '') {\n        throw (0,_error_js__WEBPACK_IMPORTED_MODULE_2__.inappropriateMultiaddr)(`Couldn't find a certhash component of multiaddr: ${ma.toString()}`);\n    }\n    return certhash;\n}\n/**\n * Convert a certhash into a multihash\n */\nfunction decodeCerthash(certhash) {\n    const mbdecoded = mbdecoder.decode(certhash);\n    return multihashes__WEBPACK_IMPORTED_MODULE_1__.decode(mbdecoded);\n}\n/**\n * Extract the fingerprint from a multiaddr\n */\nfunction ma2Fingerprint(ma) {\n    const mhdecoded = decodeCerthash(certhash(ma));\n    const prefix = toSupportedHashFunction(mhdecoded.name);\n    const fingerprint = mhdecoded.digest.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n    const sdp = fingerprint.match(/.{1,2}/g);\n    if (sdp == null) {\n        throw (0,_error_js__WEBPACK_IMPORTED_MODULE_2__.invalidFingerprint)(fingerprint, ma.toString());\n    }\n    return [`${prefix.toUpperCase()} ${sdp.join(':').toUpperCase()}`, fingerprint];\n}\n/**\n * Normalize the hash name from a given multihash has name\n */\nfunction toSupportedHashFunction(name) {\n    switch (name) {\n        case 'sha1':\n            return 'sha-1';\n        case 'sha2-256':\n            return 'sha-256';\n        case 'sha2-512':\n            return 'sha-512';\n        default:\n            throw (0,_error_js__WEBPACK_IMPORTED_MODULE_2__.unsupportedHashAlgorithm)(name);\n    }\n}\n/**\n * Convert a multiaddr into a SDP\n */\nfunction ma2sdp(ma, ufrag) {\n    const { host, port } = ma.toOptions();\n    const ipVersion = ipv(ma);\n    const [CERTFP] = ma2Fingerprint(ma);\n    return `v=0\no=- 0 0 IN ${ipVersion} ${host}\ns=-\nc=IN ${ipVersion} ${host}\nt=0 0\na=ice-lite\nm=application ${port} UDP/DTLS/SCTP webrtc-datachannel\na=mid:0\na=setup:passive\na=ice-ufrag:${ufrag}\na=ice-pwd:${ufrag}\na=fingerprint:${CERTFP}\na=sctp-port:5000\na=max-message-size:16384\na=candidate:1467250027 1 UDP 1467250027 ${host} ${port} typ host\\r\\n`;\n}\n/**\n * Create an answer SDP from a multiaddr\n */\nfunction fromMultiAddr(ma, ufrag) {\n    return {\n        type: 'answer',\n        sdp: ma2sdp(ma, ufrag)\n    };\n}\n/**\n * Replace (munge) the ufrag and password values in a SDP\n */\nfunction munge(desc, ufrag) {\n    if (desc.sdp === undefined) {\n        throw (0,_error_js__WEBPACK_IMPORTED_MODULE_2__.invalidArgument)(\"Can't munge a missing SDP\");\n    }\n    desc.sdp = desc.sdp\n        .replace(/\\na=ice-ufrag:[^\\n]*\\n/, '\\na=ice-ufrag:' + ufrag + '\\n')\n        .replace(/\\na=ice-pwd:[^\\n]*\\n/, '\\na=ice-pwd:' + ufrag + '\\n');\n    return desc;\n}\n//# sourceMappingURL=sdp.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/private-to-public/sdp.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/private-to-public/transport.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/private-to-public/transport.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CERTHASH_CODE: () => (/* binding */ CERTHASH_CODE),\n/* harmony export */   WEBRTC_CODE: () => (/* binding */ WEBRTC_CODE),\n/* harmony export */   WebRTCDirectTransport: () => (/* binding */ WebRTCDirectTransport)\n/* harmony export */ });\n/* harmony import */ var _chainsafe_libp2p_noise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chainsafe/libp2p-noise */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/transport/index.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @multiformats/multiaddr-matcher */ \"./node_modules/@multiformats/multiaddr-matcher/dist/src/index.js\");\n/* harmony import */ var multihashes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! multihashes */ \"./node_modules/multihashes/src/index.js\");\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uint8arrays/concat */ \"./node_modules/uint8arrays/dist/src/concat.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error.js */ \"./node_modules/@libp2p/webrtc/dist/src/error.js\");\n/* harmony import */ var _maconn_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../maconn.js */ \"./node_modules/@libp2p/webrtc/dist/src/maconn.js\");\n/* harmony import */ var _muxer_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../muxer.js */ \"./node_modules/@libp2p/webrtc/dist/src/muxer.js\");\n/* harmony import */ var _stream_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../stream.js */ \"./node_modules/@libp2p/webrtc/dist/src/stream.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../util.js */ \"./node_modules/@libp2p/webrtc/dist/src/util.js\");\n/* harmony import */ var _webrtc_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../webrtc/index.js */ \"./node_modules/@libp2p/webrtc/dist/src/webrtc/index.browser.js\");\n/* harmony import */ var _sdp_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./sdp.js */ \"./node_modules/@libp2p/webrtc/dist/src/private-to-public/sdp.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@libp2p/webrtc/dist/src/private-to-public/util.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The time to wait, in milliseconds, for the data channel handshake to complete\n */\nconst HANDSHAKE_TIMEOUT_MS = 10_000;\n/**\n * Created by converting the hexadecimal protocol code to an integer.\n *\n * {@link https://github.com/multiformats/multiaddr/blob/master/protocols.csv}\n */\nconst WEBRTC_CODE = (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_1__.protocols)('webrtc-direct').code;\n/**\n * Created by converting the hexadecimal protocol code to an integer.\n *\n * {@link https://github.com/multiformats/multiaddr/blob/master/protocols.csv}\n */\nconst CERTHASH_CODE = (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_1__.protocols)('certhash').code;\nclass WebRTCDirectTransport {\n    log;\n    metrics;\n    components;\n    init;\n    constructor(components, init = {}) {\n        this.log = components.logger.forComponent('libp2p:webrtc-direct');\n        this.components = components;\n        this.init = init;\n        if (components.metrics != null) {\n            this.metrics = {\n                dialerEvents: components.metrics.registerCounterGroup('libp2p_webrtc-direct_dialer_events_total', {\n                    label: 'event',\n                    help: 'Total count of WebRTC-direct dial events by type'\n                })\n            };\n        }\n    }\n    /**\n     * Dial a given multiaddr\n     */\n    async dial(ma, options) {\n        const rawConn = await this._connect(ma, options);\n        this.log('dialing address: %a', ma);\n        return rawConn;\n    }\n    /**\n     * Create transport listeners no supported by browsers\n     */\n    createListener(options) {\n        throw (0,_error_js__WEBPACK_IMPORTED_MODULE_6__.unimplemented)('WebRTCTransport.createListener');\n    }\n    /**\n     * Takes a list of `Multiaddr`s and returns only valid addresses for the transport\n     */\n    filter(multiaddrs) {\n        return multiaddrs.filter(_multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_2__.WebRTCDirect.exactMatch);\n    }\n    /**\n     * Implement toString() for WebRTCTransport\n     */\n    [Symbol.toStringTag] = '@libp2p/webrtc-direct';\n    /**\n     * Symbol.for('@libp2p/transport')\n     */\n    [_libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.transportSymbol] = true;\n    /**\n     * Connect to a peer using a multiaddr\n     */\n    async _connect(ma, options) {\n        const controller = new AbortController();\n        const signal = controller.signal;\n        const remotePeerString = ma.getPeerId();\n        if (remotePeerString === null) {\n            throw (0,_error_js__WEBPACK_IMPORTED_MODULE_6__.inappropriateMultiaddr)(\"we need to have the remote's PeerId\");\n        }\n        const theirPeerId = _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_8__.peerIdFromString(remotePeerString);\n        const remoteCerthash = _sdp_js__WEBPACK_IMPORTED_MODULE_9__.decodeCerthash(_sdp_js__WEBPACK_IMPORTED_MODULE_9__.certhash(ma));\n        // ECDSA is preferred over RSA here. From our testing we find that P-256 elliptic\n        // curve is supported by Pion, webrtc-rs, as well as Chromium (P-228 and P-384\n        // was not supported in Chromium). We use the same hash function as found in the\n        // multiaddr if it is supported.\n        const certificate = await _webrtc_index_js__WEBPACK_IMPORTED_MODULE_10__.RTCPeerConnection.generateCertificate({\n            name: 'ECDSA',\n            namedCurve: 'P-256',\n            hash: _sdp_js__WEBPACK_IMPORTED_MODULE_9__.toSupportedHashFunction(remoteCerthash.name)\n        });\n        const peerConnection = new _webrtc_index_js__WEBPACK_IMPORTED_MODULE_10__.RTCPeerConnection({ certificates: [certificate] });\n        try {\n            // create data channel for running the noise handshake. Once the data channel is opened,\n            // the remote will initiate the noise handshake. This is used to confirm the identity of\n            // the peer.\n            const dataChannelOpenPromise = new Promise((resolve, reject) => {\n                const handshakeDataChannel = peerConnection.createDataChannel('', { negotiated: true, id: 0 });\n                const handshakeTimeout = setTimeout(() => {\n                    const error = `Data channel was never opened: state: ${handshakeDataChannel.readyState}`;\n                    this.log.error(error);\n                    this.metrics?.dialerEvents.increment({ open_error: true });\n                    reject((0,_error_js__WEBPACK_IMPORTED_MODULE_6__.dataChannelError)('data', error));\n                }, HANDSHAKE_TIMEOUT_MS);\n                handshakeDataChannel.onopen = (_) => {\n                    clearTimeout(handshakeTimeout);\n                    resolve(handshakeDataChannel);\n                };\n                // ref: https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/error_event\n                handshakeDataChannel.onerror = (event) => {\n                    clearTimeout(handshakeTimeout);\n                    const errorTarget = event.target?.toString() ?? 'not specified';\n                    const error = `Error opening a data channel for handshaking: ${errorTarget}`;\n                    this.log.error(error);\n                    // NOTE: We use unknown error here but this could potentially be considered a reset by some standards.\n                    this.metrics?.dialerEvents.increment({ unknown_error: true });\n                    reject((0,_error_js__WEBPACK_IMPORTED_MODULE_6__.dataChannelError)('data', error));\n                };\n            });\n            const ufrag = 'libp2p+webrtc+v1/' + (0,_util_js__WEBPACK_IMPORTED_MODULE_11__.genUfrag)(32);\n            // Create offer and munge sdp with ufrag == pwd. This allows the remote to\n            // respond to STUN messages without performing an actual SDP exchange.\n            // This is because it can infer the passwd field by reading the USERNAME\n            // attribute of the STUN message.\n            const offerSdp = await peerConnection.createOffer();\n            const mungedOfferSdp = _sdp_js__WEBPACK_IMPORTED_MODULE_9__.munge(offerSdp, ufrag);\n            await peerConnection.setLocalDescription(mungedOfferSdp);\n            // construct answer sdp from multiaddr and ufrag\n            const answerSdp = _sdp_js__WEBPACK_IMPORTED_MODULE_9__.fromMultiAddr(ma, ufrag);\n            await peerConnection.setRemoteDescription(answerSdp);\n            // wait for peerconnection.onopen to fire, or for the datachannel to open\n            const handshakeDataChannel = await dataChannelOpenPromise;\n            const myPeerId = this.components.peerId;\n            // Do noise handshake.\n            // Set the Noise Prologue to libp2p-webrtc-noise:<FINGERPRINTS> before starting the actual Noise handshake.\n            // <FINGERPRINTS> is the concatenation of the of the two TLS fingerprints of A and B in their multihash byte representation, sorted in ascending order.\n            const fingerprintsPrologue = this.generateNoisePrologue(peerConnection, remoteCerthash.code, ma);\n            // Since we use the default crypto interface and do not use a static key or early data,\n            // we pass in undefined for these parameters.\n            const connectionEncrypter = (0,_chainsafe_libp2p_noise__WEBPACK_IMPORTED_MODULE_0__.noise)({ prologueBytes: fingerprintsPrologue })(this.components);\n            const wrappedChannel = (0,_stream_js__WEBPACK_IMPORTED_MODULE_12__.createStream)({\n                channel: handshakeDataChannel,\n                direction: 'inbound',\n                logger: this.components.logger,\n                ...(this.init.dataChannel ?? {})\n            });\n            const wrappedDuplex = {\n                ...wrappedChannel,\n                sink: wrappedChannel.sink.bind(wrappedChannel),\n                source: (async function* () {\n                    for await (const list of wrappedChannel.source) {\n                        for (const buf of list) {\n                            yield buf;\n                        }\n                    }\n                }())\n            };\n            // Creating the connection before completion of the noise\n            // handshake ensures that the stream opening callback is set up\n            const maConn = new _maconn_js__WEBPACK_IMPORTED_MODULE_13__.WebRTCMultiaddrConnection(this.components, {\n                peerConnection,\n                remoteAddr: ma,\n                timeline: {\n                    open: Date.now()\n                },\n                metrics: this.metrics?.dialerEvents\n            });\n            const eventListeningName = _util_js__WEBPACK_IMPORTED_MODULE_14__.isFirefox ? 'iceconnectionstatechange' : 'connectionstatechange';\n            peerConnection.addEventListener(eventListeningName, () => {\n                switch (peerConnection.connectionState) {\n                    case 'failed':\n                    case 'disconnected':\n                    case 'closed':\n                        maConn.close().catch((err) => {\n                            this.log.error('error closing connection', err);\n                        }).finally(() => {\n                            // Remove the event listener once the connection is closed\n                            controller.abort();\n                        });\n                        break;\n                    default:\n                        break;\n                }\n            }, { signal });\n            // Track opened peer connection\n            this.metrics?.dialerEvents.increment({ peer_connection: true });\n            const muxerFactory = new _muxer_js__WEBPACK_IMPORTED_MODULE_15__.DataChannelMuxerFactory(this.components, {\n                peerConnection,\n                metrics: this.metrics?.dialerEvents,\n                dataChannelOptions: this.init.dataChannel\n            });\n            // For outbound connections, the remote is expected to start the noise handshake.\n            // Therefore, we need to secure an inbound noise connection from the remote.\n            await connectionEncrypter.secureInbound(myPeerId, wrappedDuplex, theirPeerId);\n            return await options.upgrader.upgradeOutbound(maConn, { skipProtection: true, skipEncryption: true, muxerFactory });\n        }\n        catch (err) {\n            peerConnection.close();\n            throw err;\n        }\n    }\n    /**\n     * Generate a noise prologue from the peer connection's certificate.\n     * noise prologue = bytes('libp2p-webrtc-noise:') + noise-responder fingerprint + noise-initiator fingerprint\n     */\n    generateNoisePrologue(pc, hashCode, ma) {\n        if (pc.getConfiguration().certificates?.length === 0) {\n            throw (0,_error_js__WEBPACK_IMPORTED_MODULE_6__.invalidArgument)('no local certificate');\n        }\n        const localFingerprint = _sdp_js__WEBPACK_IMPORTED_MODULE_9__.getLocalFingerprint(pc, {\n            log: this.log\n        });\n        if (localFingerprint == null) {\n            throw (0,_error_js__WEBPACK_IMPORTED_MODULE_6__.invalidArgument)('no local fingerprint found');\n        }\n        const localFpString = localFingerprint.trim().toLowerCase().replaceAll(':', '');\n        const localFpArray = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_5__.fromString)(localFpString, 'hex');\n        const local = multihashes__WEBPACK_IMPORTED_MODULE_3__.encode(localFpArray, hashCode);\n        const remote = _sdp_js__WEBPACK_IMPORTED_MODULE_9__.mbdecoder.decode(_sdp_js__WEBPACK_IMPORTED_MODULE_9__.certhash(ma));\n        const prefix = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_5__.fromString)('libp2p-webrtc-noise:');\n        return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_4__.concat)([prefix, local, remote]);\n    }\n}\n//# sourceMappingURL=transport.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/private-to-public/transport.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/private-to-public/util.js":
/*!************************************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/private-to-public/util.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   genUfrag: () => (/* binding */ genUfrag)\n/* harmony export */ });\nconst charset = Array.from('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/');\nconst genUfrag = (len) => [...Array(len)].map(() => charset.at(Math.floor(Math.random() * charset.length))).join('');\n//# sourceMappingURL=util.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/private-to-public/util.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/stream.js":
/*!********************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/stream.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUFFERED_AMOUNT_LOW_TIMEOUT: () => (/* binding */ BUFFERED_AMOUNT_LOW_TIMEOUT),\n/* harmony export */   FIN_ACK_TIMEOUT: () => (/* binding */ FIN_ACK_TIMEOUT),\n/* harmony export */   MAX_BUFFERED_AMOUNT: () => (/* binding */ MAX_BUFFERED_AMOUNT),\n/* harmony export */   MAX_MESSAGE_SIZE: () => (/* binding */ MAX_MESSAGE_SIZE),\n/* harmony export */   OPEN_TIMEOUT: () => (/* binding */ OPEN_TIMEOUT),\n/* harmony export */   PROTOBUF_OVERHEAD: () => (/* binding */ PROTOBUF_OVERHEAD),\n/* harmony export */   VARINT_LENGTH: () => (/* binding */ VARINT_LENGTH),\n/* harmony export */   WebRTCStream: () => (/* binding */ WebRTCStream),\n/* harmony export */   createStream: () => (/* binding */ createStream)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_utils_abstract_stream__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/utils/abstract-stream */ \"./node_modules/@libp2p/utils/dist/src/abstract-stream.js\");\n/* harmony import */ var it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-length-prefixed */ \"./node_modules/it-length-prefixed/dist/src/index.js\");\n/* harmony import */ var it_pushable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-pushable */ \"./node_modules/it-pushable/dist/src/index.js\");\n/* harmony import */ var p_defer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! p-defer */ \"./node_modules/p-defer/index.js\");\n/* harmony import */ var p_event__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! p-event */ \"./node_modules/p-event/index.js\");\n/* harmony import */ var p_timeout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! p-timeout */ \"./node_modules/p-timeout/index.js\");\n/* harmony import */ var race_signal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! race-signal */ \"./node_modules/race-signal/dist/src/index.js\");\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var _pb_message_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./pb/message.js */ \"./node_modules/@libp2p/webrtc/dist/src/pb/message.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * How much can be buffered to the DataChannel at once\n */\nconst MAX_BUFFERED_AMOUNT = 16 * 1024 * 1024;\n/**\n * How long time we wait for the 'bufferedamountlow' event to be emitted\n */\nconst BUFFERED_AMOUNT_LOW_TIMEOUT = 30 * 1000;\n/**\n * protobuf field definition overhead\n */\nconst PROTOBUF_OVERHEAD = 5;\n/**\n * Length of varint, in bytes\n */\nconst VARINT_LENGTH = 2;\n/**\n * Max message size that can be sent to the DataChannel\n */\nconst MAX_MESSAGE_SIZE = 16 * 1024;\n/**\n * When closing streams we send a FIN then wait for the remote to\n * reply with a FIN_ACK. If that does not happen within this timeout\n * we close the stream anyway.\n */\nconst FIN_ACK_TIMEOUT = 5000;\n/**\n * When sending data messages, if the channel is not in the \"open\" state, wait\n * this long for the \"open\" event to fire.\n */\nconst OPEN_TIMEOUT = 5000;\nclass WebRTCStream extends _libp2p_utils_abstract_stream__WEBPACK_IMPORTED_MODULE_5__.AbstractStream {\n    /**\n     * The data channel used to send and receive data\n     */\n    channel;\n    /**\n     * push data from the underlying datachannel to the length prefix decoder\n     * and then the protobuf decoder.\n     */\n    incomingData;\n    maxBufferedAmount;\n    bufferedAmountLowEventTimeout;\n    /**\n     * The maximum size of a message in bytes\n     */\n    maxMessageSize;\n    /**\n     * When this promise is resolved, the remote has sent us a FIN flag\n     */\n    receiveFinAck;\n    finAckTimeout;\n    openTimeout;\n    constructor(init) {\n        // override onEnd to send/receive FIN_ACK before closing the stream\n        const originalOnEnd = init.onEnd;\n        init.onEnd = (err) => {\n            this.log.trace('readable and writeable ends closed', this.status);\n            void Promise.resolve(async () => {\n                if (this.timeline.abort != null || this.timeline.reset !== null) {\n                    return;\n                }\n                // wait for FIN_ACK if we haven't received it already\n                try {\n                    await (0,p_timeout__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this.receiveFinAck.promise, {\n                        milliseconds: this.finAckTimeout\n                    });\n                }\n                catch (err) {\n                    this.log.error('error receiving FIN_ACK', err);\n                }\n            })\n                .then(() => {\n                // stop processing incoming messages\n                this.incomingData.end();\n                // final cleanup\n                originalOnEnd?.(err);\n            })\n                .catch(err => {\n                this.log.error('error ending stream', err);\n            });\n        };\n        super(init);\n        this.channel = init.channel;\n        this.channel.binaryType = 'arraybuffer';\n        this.incomingData = (0,it_pushable__WEBPACK_IMPORTED_MODULE_1__.pushable)();\n        this.bufferedAmountLowEventTimeout = init.bufferedAmountLowEventTimeout ?? BUFFERED_AMOUNT_LOW_TIMEOUT;\n        this.maxBufferedAmount = init.maxBufferedAmount ?? MAX_BUFFERED_AMOUNT;\n        this.maxMessageSize = (init.maxMessageSize ?? MAX_MESSAGE_SIZE) - PROTOBUF_OVERHEAD - VARINT_LENGTH;\n        this.receiveFinAck = (0,p_defer__WEBPACK_IMPORTED_MODULE_6__[\"default\"])();\n        this.finAckTimeout = init.closeTimeout ?? FIN_ACK_TIMEOUT;\n        this.openTimeout = init.openTimeout ?? OPEN_TIMEOUT;\n        // set up initial state\n        switch (this.channel.readyState) {\n            case 'open':\n                this.timeline.open = new Date().getTime();\n                break;\n            case 'closed':\n            case 'closing':\n                if (this.timeline.close === undefined || this.timeline.close === 0) {\n                    this.timeline.close = Date.now();\n                }\n                break;\n            case 'connecting':\n                // noop\n                break;\n            default:\n                this.log.error('unknown datachannel state %s', this.channel.readyState);\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError('Unknown datachannel state', 'ERR_INVALID_STATE');\n        }\n        // handle RTCDataChannel events\n        this.channel.onopen = (_evt) => {\n            this.timeline.open = new Date().getTime();\n        };\n        this.channel.onclose = (_evt) => {\n            // if the channel has closed we'll never receive a FIN_ACK so resolve the\n            // promise so we don't try to wait later\n            this.receiveFinAck.resolve();\n            void this.close().catch(err => {\n                this.log.error('error closing stream after channel closed', err);\n            });\n        };\n        this.channel.onerror = (evt) => {\n            const err = evt.error;\n            this.abort(err);\n        };\n        this.channel.onmessage = async (event) => {\n            const { data } = event;\n            if (data === null || data.byteLength === 0) {\n                return;\n            }\n            this.incomingData.push(new Uint8Array(data, 0, data.byteLength));\n        };\n        const self = this;\n        // pipe framed protobuf messages through a length prefixed decoder, and\n        // surface data from the `Message.message` field through a source.\n        Promise.resolve().then(async () => {\n            for await (const buf of it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__.decode(this.incomingData)) {\n                const message = self.processIncomingProtobuf(buf);\n                if (message != null) {\n                    self.sourcePush(new uint8arraylist__WEBPACK_IMPORTED_MODULE_4__.Uint8ArrayList(message));\n                }\n            }\n        })\n            .catch(err => {\n            this.log.error('error processing incoming data channel messages', err);\n        });\n    }\n    sendNewStream() {\n        // opening new streams is handled by WebRTC so this is a noop\n    }\n    async _sendMessage(data, checkBuffer = true) {\n        if (checkBuffer && this.channel.bufferedAmount > this.maxBufferedAmount) {\n            try {\n                this.log('channel buffer is %d, wait for \"bufferedamountlow\" event', this.channel.bufferedAmount);\n                await (0,p_event__WEBPACK_IMPORTED_MODULE_8__.pEvent)(this.channel, 'bufferedamountlow', { timeout: this.bufferedAmountLowEventTimeout });\n            }\n            catch (err) {\n                if (err instanceof p_timeout__WEBPACK_IMPORTED_MODULE_2__.TimeoutError) {\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Timed out waiting for DataChannel buffer to clear after ${this.bufferedAmountLowEventTimeout}ms`, 'ERR_BUFFER_CLEAR_TIMEOUT');\n                }\n                throw err;\n            }\n        }\n        if (this.channel.readyState === 'closed' || this.channel.readyState === 'closing') {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`Invalid datachannel state - ${this.channel.readyState}`, 'ERR_INVALID_STATE');\n        }\n        if (this.channel.readyState !== 'open') {\n            this.log('channel state is \"%s\" and not \"open\", waiting for \"open\" event before sending data', this.channel.readyState);\n            await (0,p_event__WEBPACK_IMPORTED_MODULE_8__.pEvent)(this.channel, 'open', { timeout: this.openTimeout });\n            this.log('channel state is now \"%s\", sending data', this.channel.readyState);\n        }\n        // send message without copying data\n        this.channel.send(data.subarray());\n    }\n    async sendData(data) {\n        // sending messages is an async operation so use a copy of the list as it\n        // may be changed beneath us\n        data = data.sublist();\n        while (data.byteLength > 0) {\n            const toSend = Math.min(data.byteLength, this.maxMessageSize);\n            const buf = data.subarray(0, toSend);\n            const msgbuf = _pb_message_js__WEBPACK_IMPORTED_MODULE_9__.Message.encode({ message: buf });\n            const sendbuf = it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__.encode.single(msgbuf);\n            await this._sendMessage(sendbuf);\n            data.consume(toSend);\n        }\n    }\n    async sendReset() {\n        await this._sendFlag(_pb_message_js__WEBPACK_IMPORTED_MODULE_9__.Message.Flag.RESET);\n    }\n    async sendCloseWrite(options) {\n        const sent = await this._sendFlag(_pb_message_js__WEBPACK_IMPORTED_MODULE_9__.Message.Flag.FIN);\n        if (sent) {\n            this.log.trace('awaiting FIN_ACK');\n            try {\n                await (0,race_signal__WEBPACK_IMPORTED_MODULE_3__.raceSignal)(this.receiveFinAck.promise, options?.signal, {\n                    errorMessage: 'sending close-write was aborted before FIN_ACK was received',\n                    errorCode: 'ERR_FIN_ACK_NOT_RECEIVED'\n                });\n            }\n            catch (err) {\n                this.log.error('failed to await FIN_ACK', err);\n            }\n        }\n        else {\n            this.log.trace('sending FIN failed, not awaiting FIN_ACK');\n        }\n        // if we've attempted to receive a FIN_ACK, do not try again\n        this.receiveFinAck.resolve();\n    }\n    async sendCloseRead() {\n        await this._sendFlag(_pb_message_js__WEBPACK_IMPORTED_MODULE_9__.Message.Flag.STOP_SENDING);\n    }\n    /**\n     * Handle incoming\n     */\n    processIncomingProtobuf(buffer) {\n        const message = _pb_message_js__WEBPACK_IMPORTED_MODULE_9__.Message.decode(buffer);\n        if (message.flag !== undefined) {\n            this.log.trace('incoming flag %s, write status \"%s\", read status \"%s\"', message.flag, this.writeStatus, this.readStatus);\n            if (message.flag === _pb_message_js__WEBPACK_IMPORTED_MODULE_9__.Message.Flag.FIN) {\n                // We should expect no more data from the remote, stop reading\n                this.remoteCloseWrite();\n                this.log.trace('sending FIN_ACK');\n                void this._sendFlag(_pb_message_js__WEBPACK_IMPORTED_MODULE_9__.Message.Flag.FIN_ACK)\n                    .catch(err => {\n                    this.log.error('error sending FIN_ACK immediately', err);\n                });\n            }\n            if (message.flag === _pb_message_js__WEBPACK_IMPORTED_MODULE_9__.Message.Flag.RESET) {\n                // Stop reading and writing to the stream immediately\n                this.reset();\n            }\n            if (message.flag === _pb_message_js__WEBPACK_IMPORTED_MODULE_9__.Message.Flag.STOP_SENDING) {\n                // The remote has stopped reading\n                this.remoteCloseRead();\n            }\n            if (message.flag === _pb_message_js__WEBPACK_IMPORTED_MODULE_9__.Message.Flag.FIN_ACK) {\n                this.log.trace('received FIN_ACK');\n                this.receiveFinAck.resolve();\n            }\n        }\n        // ignore data messages if we've closed the readable end already\n        if (this.readStatus === 'ready') {\n            return message.message;\n        }\n    }\n    async _sendFlag(flag) {\n        if (this.channel.readyState !== 'open') {\n            // flags can be sent while we or the remote are closing the datachannel so\n            // if the channel isn't open, don't try to send it but return false to let\n            // the caller know and act if they need to\n            this.log.trace('not sending flag %s because channel is \"%s\" and not \"open\"', this.channel.readyState, flag.toString());\n            return false;\n        }\n        this.log.trace('sending flag %s', flag.toString());\n        const msgbuf = _pb_message_js__WEBPACK_IMPORTED_MODULE_9__.Message.encode({ flag });\n        const prefixedBuf = it_length_prefixed__WEBPACK_IMPORTED_MODULE_0__.encode.single(msgbuf);\n        try {\n            await this._sendMessage(prefixedBuf, false);\n            return true;\n        }\n        catch (err) {\n            this.log.error('could not send flag %s', flag.toString(), err);\n        }\n        return false;\n    }\n}\nfunction createStream(options) {\n    const { channel, direction } = options;\n    return new WebRTCStream({\n        id: direction === 'inbound' ? (`i${channel.id}`) : `r${channel.id}`,\n        log: options.logger.forComponent(`libp2p:webrtc:stream:${direction}:${channel.id}`),\n        ...options\n    });\n}\n//# sourceMappingURL=stream.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/stream.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/util.js":
/*!******************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/util.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DATA_CHANNEL_DRAIN_TIMEOUT: () => (/* binding */ DATA_CHANNEL_DRAIN_TIMEOUT),\n/* harmony export */   drainAndClose: () => (/* binding */ drainAndClose),\n/* harmony export */   isFirefox: () => (/* binding */ isFirefox),\n/* harmony export */   nopSink: () => (/* binding */ nopSink),\n/* harmony export */   nopSource: () => (/* binding */ nopSource)\n/* harmony export */ });\n/* harmony import */ var detect_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! detect-browser */ \"./node_modules/detect-browser/es/index.js\");\n/* harmony import */ var p_defer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! p-defer */ \"./node_modules/p-defer/index.js\");\n/* harmony import */ var p_timeout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-timeout */ \"./node_modules/p-timeout/index.js\");\n\n\n\nconst browser = (0,detect_browser__WEBPACK_IMPORTED_MODULE_1__.detect)();\nconst isFirefox = ((browser != null) && browser.name === 'firefox');\nconst nopSource = async function* nop() { };\nconst nopSink = async (_) => { };\nconst DATA_CHANNEL_DRAIN_TIMEOUT = 30 * 1000;\nfunction drainAndClose(channel, direction, drainTimeout = DATA_CHANNEL_DRAIN_TIMEOUT, options) {\n    if (channel.readyState !== 'open') {\n        return;\n    }\n    void Promise.resolve()\n        .then(async () => {\n        // wait for bufferedAmount to become zero\n        if (channel.bufferedAmount > 0) {\n            options.log('%s drain channel with %d buffered bytes', direction, channel.bufferedAmount);\n            const deferred = (0,p_defer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n            let drained = false;\n            channel.bufferedAmountLowThreshold = 0;\n            const closeListener = () => {\n                if (!drained) {\n                    options.log('%s drain channel closed before drain', direction);\n                    deferred.resolve();\n                }\n            };\n            channel.addEventListener('close', closeListener, {\n                once: true\n            });\n            channel.addEventListener('bufferedamountlow', () => {\n                drained = true;\n                channel.removeEventListener('close', closeListener);\n                deferred.resolve();\n            });\n            await (0,p_timeout__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(deferred.promise, {\n                milliseconds: drainTimeout\n            });\n        }\n    })\n        .then(async () => {\n        // only close if the channel is still open\n        if (channel.readyState === 'open') {\n            channel.close();\n        }\n    })\n        .catch(err => {\n        options.log.error('error closing outbound stream', err);\n    });\n}\n//# sourceMappingURL=util.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/util.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webrtc/dist/src/webrtc/index.browser.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@libp2p/webrtc/dist/src/webrtc/index.browser.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RTCIceCandidate: () => (/* binding */ RTCIceCandidate),\n/* harmony export */   RTCPeerConnection: () => (/* binding */ RTCPeerConnection),\n/* harmony export */   RTCSessionDescription: () => (/* binding */ RTCSessionDescription),\n/* harmony export */   cleanup: () => (/* binding */ cleanup)\n/* harmony export */ });\nconst RTCPeerConnection = globalThis.RTCPeerConnection;\nconst RTCSessionDescription = globalThis.RTCSessionDescription;\nconst RTCIceCandidate = globalThis.RTCIceCandidate;\nfunction cleanup() { }\n//# sourceMappingURL=index.browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webrtc/dist/src/webrtc/index.browser.js?");

/***/ }),

/***/ "./node_modules/@libp2p/websockets/dist/src/constants.js":
/*!***************************************************************!*\
  !*** ./node_modules/@libp2p/websockets/dist/src/constants.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CLOSE_TIMEOUT: () => (/* binding */ CLOSE_TIMEOUT),\n/* harmony export */   CODE_CIRCUIT: () => (/* binding */ CODE_CIRCUIT),\n/* harmony export */   CODE_P2P: () => (/* binding */ CODE_P2P),\n/* harmony export */   CODE_TCP: () => (/* binding */ CODE_TCP),\n/* harmony export */   CODE_WS: () => (/* binding */ CODE_WS),\n/* harmony export */   CODE_WSS: () => (/* binding */ CODE_WSS)\n/* harmony export */ });\n// p2p multi-address code\nconst CODE_P2P = 421;\nconst CODE_CIRCUIT = 290;\nconst CODE_TCP = 6;\nconst CODE_WS = 477;\nconst CODE_WSS = 478;\n// Time to wait for a connection to close gracefully before destroying it manually\nconst CLOSE_TIMEOUT = 500;\n//# sourceMappingURL=constants.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/websockets/dist/src/constants.js?");

/***/ }),

/***/ "./node_modules/@libp2p/websockets/dist/src/filters.js":
/*!*************************************************************!*\
  !*** ./node_modules/@libp2p/websockets/dist/src/filters.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   all: () => (/* binding */ all),\n/* harmony export */   dnsWsOrWss: () => (/* binding */ dnsWsOrWss),\n/* harmony export */   dnsWss: () => (/* binding */ dnsWss),\n/* harmony export */   wss: () => (/* binding */ wss)\n/* harmony export */ });\n/* harmony import */ var _multiformats_mafmt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/mafmt */ \"./node_modules/@multiformats/mafmt/dist/src/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@libp2p/websockets/dist/src/constants.js\");\n\n\nfunction all(multiaddrs) {\n    return multiaddrs.filter((ma) => {\n        if (ma.protoCodes().includes(_constants_js__WEBPACK_IMPORTED_MODULE_1__.CODE_CIRCUIT)) {\n            return false;\n        }\n        const testMa = ma.decapsulateCode(_constants_js__WEBPACK_IMPORTED_MODULE_1__.CODE_P2P);\n        return _multiformats_mafmt__WEBPACK_IMPORTED_MODULE_0__.WebSockets.matches(testMa) ||\n            _multiformats_mafmt__WEBPACK_IMPORTED_MODULE_0__.WebSocketsSecure.matches(testMa);\n    });\n}\nfunction wss(multiaddrs) {\n    return multiaddrs.filter((ma) => {\n        if (ma.protoCodes().includes(_constants_js__WEBPACK_IMPORTED_MODULE_1__.CODE_CIRCUIT)) {\n            return false;\n        }\n        const testMa = ma.decapsulateCode(_constants_js__WEBPACK_IMPORTED_MODULE_1__.CODE_P2P);\n        return _multiformats_mafmt__WEBPACK_IMPORTED_MODULE_0__.WebSocketsSecure.matches(testMa);\n    });\n}\nfunction dnsWss(multiaddrs) {\n    return multiaddrs.filter((ma) => {\n        if (ma.protoCodes().includes(_constants_js__WEBPACK_IMPORTED_MODULE_1__.CODE_CIRCUIT)) {\n            return false;\n        }\n        const testMa = ma.decapsulateCode(_constants_js__WEBPACK_IMPORTED_MODULE_1__.CODE_P2P);\n        return _multiformats_mafmt__WEBPACK_IMPORTED_MODULE_0__.WebSocketsSecure.matches(testMa) &&\n            _multiformats_mafmt__WEBPACK_IMPORTED_MODULE_0__.DNS.matches(testMa.decapsulateCode(_constants_js__WEBPACK_IMPORTED_MODULE_1__.CODE_TCP).decapsulateCode(_constants_js__WEBPACK_IMPORTED_MODULE_1__.CODE_WSS));\n    });\n}\nfunction dnsWsOrWss(multiaddrs) {\n    return multiaddrs.filter((ma) => {\n        if (ma.protoCodes().includes(_constants_js__WEBPACK_IMPORTED_MODULE_1__.CODE_CIRCUIT)) {\n            return false;\n        }\n        const testMa = ma.decapsulateCode(_constants_js__WEBPACK_IMPORTED_MODULE_1__.CODE_P2P);\n        // WS\n        if (_multiformats_mafmt__WEBPACK_IMPORTED_MODULE_0__.WebSockets.matches(testMa)) {\n            return _multiformats_mafmt__WEBPACK_IMPORTED_MODULE_0__.DNS.matches(testMa.decapsulateCode(_constants_js__WEBPACK_IMPORTED_MODULE_1__.CODE_TCP).decapsulateCode(_constants_js__WEBPACK_IMPORTED_MODULE_1__.CODE_WS));\n        }\n        // WSS\n        return _multiformats_mafmt__WEBPACK_IMPORTED_MODULE_0__.WebSocketsSecure.matches(testMa) &&\n            _multiformats_mafmt__WEBPACK_IMPORTED_MODULE_0__.DNS.matches(testMa.decapsulateCode(_constants_js__WEBPACK_IMPORTED_MODULE_1__.CODE_TCP).decapsulateCode(_constants_js__WEBPACK_IMPORTED_MODULE_1__.CODE_WSS));\n    });\n}\n//# sourceMappingURL=filters.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/websockets/dist/src/filters.js?");

/***/ }),

/***/ "./node_modules/@libp2p/websockets/dist/src/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@libp2p/websockets/dist/src/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   webSockets: () => (/* binding */ webSockets)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/transport/index.js\");\n/* harmony import */ var _multiformats_multiaddr_to_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr-to-uri */ \"./node_modules/@multiformats/multiaddr-to-uri/dist/src/index.js\");\n/* harmony import */ var it_ws_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-ws/client */ \"./node_modules/it-ws/dist/src/client.js\");\n/* harmony import */ var p_defer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! p-defer */ \"./node_modules/p-defer/index.js\");\n/* harmony import */ var wherearewe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! wherearewe */ \"./node_modules/wherearewe/src/index.js\");\n/* harmony import */ var _filters_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./filters.js */ \"./node_modules/@libp2p/websockets/dist/src/filters.js\");\n/* harmony import */ var _listener_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./listener.js */ \"./node_modules/@libp2p/websockets/dist/src/listener.browser.js\");\n/* harmony import */ var _socket_to_conn_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./socket-to-conn.js */ \"./node_modules/@libp2p/websockets/dist/src/socket-to-conn.js\");\n/**\n * @packageDocumentation\n *\n * A [libp2p transport](https://docs.libp2p.io/concepts/transports/overview/) based on [WebSockets](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API).\n *\n * @example\n *\n * ```TypeScript\n * import { createLibp2p } from 'libp2p'\n * import { webSockets } from '@libp2p/websockets'\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const node = await createLibp2p({\n *   transports: [\n *     webSockets()\n *   ]\n * //... other config\n * })\n * await node.start()\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/9090/ws')\n * await node.dial(ma)\n * ```\n *\n * ## Filters\n *\n * When run in a browser by default this module will only connect to secure web socket addresses.\n *\n * To change this you should pass a filter to the factory function.\n *\n * You can create your own address filters for this transports, or rely in the filters [provided](./src/filters.js).\n *\n * The available filters are:\n *\n * - `filters.all`\n *   - Returns all TCP and DNS based addresses, both with `ws` or `wss`.\n * - `filters.dnsWss`\n *   - Returns all DNS based addresses with `wss`.\n * - `filters.dnsWsOrWss`\n *   - Returns all DNS based addresses, both with `ws` or `wss`.\n *\n * @example Allow dialing insecure WebSockets\n *\n * ```TypeScript\n * import { createLibp2p } from 'libp2p'\n * import { webSockets } from '@libp2p/websockets'\n * import filters from '@libp2p/websockets/filters'\n *\n * const node = await createLibp2p({\n *   transports: [\n *     webSockets({\n *       // connect to all sockets, even insecure ones\n *       filter: filters.all\n *     })\n *   ]\n * })\n * ```\n */\n\n\n\n\n\n\n\n\n\nclass WebSockets {\n    log;\n    init;\n    logger;\n    constructor(components, init) {\n        this.log = components.logger.forComponent('libp2p:websockets');\n        this.logger = components.logger;\n        this.init = init;\n    }\n    [Symbol.toStringTag] = '@libp2p/websockets';\n    [_libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.transportSymbol] = true;\n    async dial(ma, options) {\n        this.log('dialing %s', ma);\n        options = options ?? {};\n        const socket = await this._connect(ma, options);\n        const maConn = (0,_socket_to_conn_js__WEBPACK_IMPORTED_MODULE_4__.socketToMaConn)(socket, ma, {\n            logger: this.logger\n        });\n        this.log('new outbound connection %s', maConn.remoteAddr);\n        const conn = await options.upgrader.upgradeOutbound(maConn);\n        this.log('outbound connection %s upgraded', maConn.remoteAddr);\n        return conn;\n    }\n    async _connect(ma, options) {\n        if (options?.signal?.aborted === true) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.AbortError();\n        }\n        const cOpts = ma.toOptions();\n        this.log('dialing %s:%s', cOpts.host, cOpts.port);\n        const errorPromise = (0,p_defer__WEBPACK_IMPORTED_MODULE_6__[\"default\"])();\n        const rawSocket = (0,it_ws_client__WEBPACK_IMPORTED_MODULE_1__.connect)((0,_multiformats_multiaddr_to_uri__WEBPACK_IMPORTED_MODULE_0__.multiaddrToUri)(ma), this.init);\n        rawSocket.socket.addEventListener('error', () => {\n            // the WebSocket.ErrorEvent type doesn't actually give us any useful\n            // information about what happened\n            // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/error_event\n            const err = new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.CodeError(`Could not connect to ${ma.toString()}`, 'ERR_CONNECTION_FAILED');\n            this.log.error('connection error:', err);\n            errorPromise.reject(err);\n        });\n        if (options.signal == null) {\n            await Promise.race([rawSocket.connected(), errorPromise.promise]);\n            this.log('connected %s', ma);\n            return rawSocket;\n        }\n        // Allow abort via signal during connect\n        let onAbort;\n        const abort = new Promise((resolve, reject) => {\n            onAbort = () => {\n                reject(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.AbortError());\n                rawSocket.close().catch(err => {\n                    this.log.error('error closing raw socket', err);\n                });\n            };\n            // Already aborted?\n            if (options?.signal?.aborted === true) {\n                onAbort();\n                return;\n            }\n            options?.signal?.addEventListener('abort', onAbort);\n        });\n        try {\n            await Promise.race([abort, errorPromise.promise, rawSocket.connected()]);\n        }\n        finally {\n            if (onAbort != null) {\n                options?.signal?.removeEventListener('abort', onAbort);\n            }\n        }\n        this.log('connected %s', ma);\n        return rawSocket;\n    }\n    /**\n     * Creates a Websockets listener. The provided `handler` function will be called\n     * anytime a new incoming Connection has been successfully upgraded via\n     * `upgrader.upgradeInbound`\n     */\n    createListener(options) {\n        return (0,_listener_js__WEBPACK_IMPORTED_MODULE_7__.createListener)({\n            logger: this.logger\n        }, {\n            ...this.init,\n            ...options\n        });\n    }\n    /**\n     * Takes a list of `Multiaddr`s and returns only valid Websockets addresses.\n     * By default, in a browser environment only DNS+WSS multiaddr is accepted,\n     * while in a Node.js environment DNS+{WS, WSS} multiaddrs are accepted.\n     */\n    filter(multiaddrs) {\n        multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n        if (this.init?.filter != null) {\n            return this.init?.filter(multiaddrs);\n        }\n        // Browser\n        if (wherearewe__WEBPACK_IMPORTED_MODULE_2__.isBrowser || wherearewe__WEBPACK_IMPORTED_MODULE_2__.isWebWorker) {\n            return _filters_js__WEBPACK_IMPORTED_MODULE_8__.wss(multiaddrs);\n        }\n        return _filters_js__WEBPACK_IMPORTED_MODULE_8__.all(multiaddrs);\n    }\n}\nfunction webSockets(init = {}) {\n    return (components) => {\n        return new WebSockets(components, init);\n    };\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/websockets/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/websockets/dist/src/listener.browser.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@libp2p/websockets/dist/src/listener.browser.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createListener: () => (/* binding */ createListener)\n/* harmony export */ });\nfunction createListener() {\n    throw new Error('WebSocket Servers can not be created in the browser!');\n}\n//# sourceMappingURL=listener.browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/websockets/dist/src/listener.browser.js?");

/***/ }),

/***/ "./node_modules/@libp2p/websockets/dist/src/socket-to-conn.js":
/*!********************************************************************!*\
  !*** ./node_modules/@libp2p/websockets/dist/src/socket-to-conn.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   socketToMaConn: () => (/* binding */ socketToMaConn)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@libp2p/websockets/dist/src/constants.js\");\n\n\n// Convert a stream into a MultiaddrConnection\n// https://github.com/libp2p/interface-transport#multiaddrconnection\nfunction socketToMaConn(stream, remoteAddr, options) {\n    const log = options.logger.forComponent('libp2p:websockets:maconn');\n    const maConn = {\n        log,\n        async sink(source) {\n            try {\n                await stream.sink((async function* () {\n                    for await (const buf of source) {\n                        if (buf instanceof Uint8Array) {\n                            yield buf;\n                        }\n                        else {\n                            yield buf.subarray();\n                        }\n                    }\n                })());\n            }\n            catch (err) {\n                if (err.type !== 'aborted') {\n                    log.error(err);\n                }\n            }\n        },\n        source: stream.source,\n        remoteAddr,\n        timeline: { open: Date.now() },\n        async close(options = {}) {\n            const start = Date.now();\n            if (options.signal == null) {\n                const signal = AbortSignal.timeout(_constants_js__WEBPACK_IMPORTED_MODULE_0__.CLOSE_TIMEOUT);\n                options = {\n                    ...options,\n                    signal\n                };\n            }\n            const listener = () => {\n                const { host, port } = maConn.remoteAddr.toOptions();\n                log('timeout closing stream to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);\n                this.abort(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Socket close timeout', 'ERR_SOCKET_CLOSE_TIMEOUT'));\n            };\n            options.signal?.addEventListener('abort', listener);\n            try {\n                await stream.close();\n            }\n            catch (err) {\n                log.error('error closing WebSocket gracefully', err);\n                this.abort(err);\n            }\n            finally {\n                options.signal?.removeEventListener('abort', listener);\n                maConn.timeline.close = Date.now();\n            }\n        },\n        abort(err) {\n            const { host, port } = maConn.remoteAddr.toOptions();\n            log('timeout closing stream to %s:%s due to error', host, port, err);\n            stream.destroy();\n            maConn.timeline.close = Date.now();\n        }\n    };\n    stream.socket.addEventListener('close', () => {\n        // In instances where `close` was not explicitly called,\n        // such as an iterable stream ending, ensure we have set the close\n        // timeline\n        if (maConn.timeline.close == null) {\n            maConn.timeline.close = Date.now();\n        }\n    }, { once: true });\n    return maConn;\n}\n//# sourceMappingURL=socket-to-conn.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/websockets/dist/src/socket-to-conn.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webtransport/dist/src/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@libp2p/webtransport/dist/src/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   webTransport: () => (/* binding */ webTransport)\n/* harmony export */ });\n/* harmony import */ var _chainsafe_libp2p_noise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chainsafe/libp2p-noise */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/transport/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @multiformats/multiaddr-matcher */ \"./node_modules/@multiformats/multiaddr-matcher/dist/src/index.js\");\n/* harmony import */ var _stream_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stream.js */ \"./node_modules/@libp2p/webtransport/dist/src/stream.js\");\n/* harmony import */ var _utils_inert_duplex_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/inert-duplex.js */ \"./node_modules/@libp2p/webtransport/dist/src/utils/inert-duplex.js\");\n/* harmony import */ var _utils_is_subset_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/is-subset.js */ \"./node_modules/@libp2p/webtransport/dist/src/utils/is-subset.js\");\n/* harmony import */ var _utils_parse_multiaddr_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/parse-multiaddr.js */ \"./node_modules/@libp2p/webtransport/dist/src/utils/parse-multiaddr.js\");\n/**\n * @packageDocumentation\n *\n * A [libp2p transport](https://docs.libp2p.io/concepts/transports/overview/) based on [WebTransport](https://www.w3.org/TR/webtransport/).\n *\n * >\n * > ⚠️ **Note**\n * >\n * > This WebTransport implementation currently only allows dialing to other nodes. It does not yet allow listening for incoming dials. This feature requires QUIC support to land in Node JS first.\n * >\n * > QUIC support in Node JS is actively being worked on. You can keep an eye on the progress by watching the [related issues on the Node JS issue tracker](https://github.com/nodejs/node/labels/quic)\n * >\n *\n * @example\n *\n * ```TypeScript\n * import { createLibp2p } from 'libp2p'\n * import { webTransport } from '@libp2p/webtransport'\n * import { noise } from '@chainsafe/libp2p-noise'\n *\n * const node = await createLibp2p({\n *   transports: [\n *     webTransport()\n *   ],\n *   connectionEncryption: [\n *     noise()\n *   ]\n * })\n * ```\n */\n\n\n\n\n\n\n\n\nclass WebTransportTransport {\n    log;\n    components;\n    config;\n    metrics;\n    constructor(components, init = {}) {\n        this.log = components.logger.forComponent('libp2p:webtransport');\n        this.components = components;\n        this.config = {\n            maxInboundStreams: init.maxInboundStreams ?? 1000\n        };\n        if (components.metrics != null) {\n            this.metrics = {\n                dialerEvents: components.metrics.registerCounterGroup('libp2p_webtransport_dialer_events_total', {\n                    label: 'event',\n                    help: 'Total count of WebTransport dialer events by type'\n                })\n            };\n        }\n    }\n    [Symbol.toStringTag] = '@libp2p/webtransport';\n    [_libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.transportSymbol] = true;\n    async dial(ma, options) {\n        options?.signal?.throwIfAborted();\n        this.log('dialing %s', ma);\n        const localPeer = this.components.peerId;\n        if (localPeer === undefined) {\n            throw new Error('Need a local peerid');\n        }\n        options = options ?? {};\n        const { url, certhashes, remotePeer } = (0,_utils_parse_multiaddr_js__WEBPACK_IMPORTED_MODULE_4__.parseMultiaddr)(ma);\n        if (remotePeer == null) {\n            throw new Error('Need a target peerid');\n        }\n        if (certhashes.length === 0) {\n            throw new Error('Expected multiaddr to contain certhashes');\n        }\n        let abortListener;\n        let maConn;\n        let cleanUpWTSession = () => { };\n        let closed = false;\n        let ready = false;\n        let authenticated = false;\n        try {\n            this.metrics?.dialerEvents.increment({ pending: true });\n            const wt = new WebTransport(`${url}/.well-known/libp2p-webtransport?type=noise`, {\n                serverCertificateHashes: certhashes.map(certhash => ({\n                    algorithm: 'sha-256',\n                    value: certhash.digest\n                }))\n            });\n            cleanUpWTSession = (metric) => {\n                if (closed) {\n                    // already closed session\n                    return;\n                }\n                try {\n                    this.metrics?.dialerEvents.increment({ [metric]: true });\n                    wt.close();\n                }\n                catch (err) {\n                    this.log.error('error closing wt session', err);\n                }\n                finally {\n                    // This is how we specify the connection is closed and shouldn't be used.\n                    if (maConn != null) {\n                        maConn.timeline.close = Date.now();\n                    }\n                    closed = true;\n                }\n            };\n            // if the dial is aborted before we are ready, close the WebTransport session\n            abortListener = () => {\n                if (ready) {\n                    cleanUpWTSession('noise_timeout');\n                }\n                else {\n                    cleanUpWTSession('ready_timeout');\n                }\n            };\n            options.signal?.addEventListener('abort', abortListener, {\n                once: true\n            });\n            await Promise.race([\n                wt.closed,\n                wt.ready\n            ]);\n            ready = true;\n            this.metrics?.dialerEvents.increment({ ready: true });\n            // this promise resolves/throws when the session is closed\n            wt.closed.catch((err) => {\n                this.log.error('error on remote wt session close', err);\n            })\n                .finally(() => {\n                cleanUpWTSession('remote_close');\n            });\n            if (!await this.authenticateWebTransport(wt, localPeer, remotePeer, certhashes)) {\n                throw new Error('Failed to authenticate webtransport');\n            }\n            this.metrics?.dialerEvents.increment({ open: true });\n            maConn = {\n                close: async () => {\n                    this.log('Closing webtransport');\n                    cleanUpWTSession('close');\n                },\n                abort: (err) => {\n                    this.log('aborting webtransport due to passed err', err);\n                    cleanUpWTSession('abort');\n                },\n                remoteAddr: ma,\n                timeline: {\n                    open: Date.now()\n                },\n                log: this.components.logger.forComponent('libp2p:webtransport:maconn'),\n                // This connection is never used directly since webtransport supports native streams.\n                ...(0,_utils_inert_duplex_js__WEBPACK_IMPORTED_MODULE_5__.inertDuplex)()\n            };\n            authenticated = true;\n            return await options.upgrader.upgradeOutbound(maConn, { skipEncryption: true, muxerFactory: this.webtransportMuxer(wt), skipProtection: true });\n        }\n        catch (err) {\n            this.log.error('caught wt session err', err);\n            if (authenticated) {\n                cleanUpWTSession('upgrade_error');\n            }\n            else if (ready) {\n                cleanUpWTSession('noise_error');\n            }\n            else {\n                cleanUpWTSession('ready_error');\n            }\n            throw err;\n        }\n        finally {\n            if (abortListener != null) {\n                options.signal?.removeEventListener('abort', abortListener);\n            }\n        }\n    }\n    async authenticateWebTransport(wt, localPeer, remotePeer, certhashes) {\n        const stream = await wt.createBidirectionalStream();\n        const writer = stream.writable.getWriter();\n        const reader = stream.readable.getReader();\n        await writer.ready;\n        const duplex = {\n            source: (async function* () {\n                while (true) {\n                    const val = await reader.read();\n                    if (val.value != null) {\n                        yield val.value;\n                    }\n                    if (val.done) {\n                        break;\n                    }\n                }\n            })(),\n            sink: async function (source) {\n                for await (const chunk of source) {\n                    if (chunk instanceof Uint8Array) {\n                        await writer.write(chunk);\n                    }\n                    else {\n                        await writer.write(chunk.subarray());\n                    }\n                }\n            }\n        };\n        const n = (0,_chainsafe_libp2p_noise__WEBPACK_IMPORTED_MODULE_0__.noise)()(this.components);\n        const { remoteExtensions } = await n.secureOutbound(localPeer, duplex, remotePeer);\n        // We're done with this authentication stream\n        writer.close().catch((err) => {\n            this.log.error(`Failed to close authentication stream writer: ${err.message}`);\n        });\n        reader.cancel().catch((err) => {\n            this.log.error(`Failed to close authentication stream reader: ${err.message}`);\n        });\n        // Verify the certhashes we used when dialing are a subset of the certhashes relayed by the remote peer\n        if (!(0,_utils_is_subset_js__WEBPACK_IMPORTED_MODULE_6__.isSubset)(remoteExtensions?.webtransportCerthashes ?? [], certhashes.map(ch => ch.bytes))) {\n            throw new Error(\"Our certhashes are not a subset of the remote's reported certhashes\");\n        }\n        return true;\n    }\n    webtransportMuxer(wt) {\n        let streamIDCounter = 0;\n        const config = this.config;\n        const self = this;\n        return {\n            protocol: 'webtransport',\n            createStreamMuxer: (init) => {\n                // !TODO handle abort signal when WebTransport supports this.\n                if (typeof init === 'function') {\n                    // The api docs say that init may be a function\n                    init = { onIncomingStream: init };\n                }\n                const activeStreams = [];\n                (async function () {\n                    //! TODO unclear how to add backpressure here?\n                    const reader = wt.incomingBidirectionalStreams.getReader();\n                    while (true) {\n                        const { done, value: wtStream } = await reader.read();\n                        if (done) {\n                            break;\n                        }\n                        if (activeStreams.length >= config.maxInboundStreams) {\n                            // We've reached our limit, close this stream.\n                            wtStream.writable.close().catch((err) => {\n                                self.log.error(`Failed to close inbound stream that crossed our maxInboundStream limit: ${err.message}`);\n                            });\n                            wtStream.readable.cancel().catch((err) => {\n                                self.log.error(`Failed to close inbound stream that crossed our maxInboundStream limit: ${err.message}`);\n                            });\n                        }\n                        else {\n                            const stream = await (0,_stream_js__WEBPACK_IMPORTED_MODULE_7__.webtransportBiDiStreamToStream)(wtStream, String(streamIDCounter++), 'inbound', activeStreams, init?.onStreamEnd, self.components.logger);\n                            activeStreams.push(stream);\n                            init?.onIncomingStream?.(stream);\n                        }\n                    }\n                })().catch(() => {\n                    this.log.error('WebTransport failed to receive incoming stream');\n                });\n                const muxer = {\n                    protocol: 'webtransport',\n                    streams: activeStreams,\n                    newStream: async (name) => {\n                        const wtStream = await wt.createBidirectionalStream();\n                        const stream = await (0,_stream_js__WEBPACK_IMPORTED_MODULE_7__.webtransportBiDiStreamToStream)(wtStream, String(streamIDCounter++), init?.direction ?? 'outbound', activeStreams, init?.onStreamEnd, self.components.logger);\n                        activeStreams.push(stream);\n                        return stream;\n                    },\n                    /**\n                     * Close or abort all tracked streams and stop the muxer\n                     */\n                    close: async (options) => {\n                        this.log('Closing webtransport muxer');\n                        await Promise.all(activeStreams.map(async (s) => s.close(options)));\n                    },\n                    abort: (err) => {\n                        this.log('Aborting webtransport muxer with err:', err);\n                        for (const stream of activeStreams) {\n                            stream.abort(err);\n                        }\n                    },\n                    // This stream muxer is webtransport native. Therefore it doesn't plug in with any other duplex.\n                    ...(0,_utils_inert_duplex_js__WEBPACK_IMPORTED_MODULE_5__.inertDuplex)()\n                };\n                return muxer;\n            }\n        };\n    }\n    createListener(options) {\n        throw new Error('Webtransport servers are not supported in Node or the browser');\n    }\n    /**\n     * Takes a list of `Multiaddr`s and returns only valid webtransport addresses.\n     */\n    filter(multiaddrs) {\n        return multiaddrs.filter(_multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_2__.WebTransport.exactMatch);\n    }\n}\nfunction webTransport(init = {}) {\n    return (components) => new WebTransportTransport(components, init);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webtransport/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webtransport/dist/src/stream.js":
/*!**************************************************************!*\
  !*** ./node_modules/@libp2p/webtransport/dist/src/stream.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   webtransportBiDiStreamToStream: () => (/* binding */ webtransportBiDiStreamToStream)\n/* harmony export */ });\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n\nasync function webtransportBiDiStreamToStream(bidiStream, streamId, direction, activeStreams, onStreamEnd, logger) {\n    const log = logger.forComponent(`libp2p:webtransport:stream:${direction}:${streamId}`);\n    const writer = bidiStream.writable.getWriter();\n    const reader = bidiStream.readable.getReader();\n    await writer.ready;\n    function cleanupStreamFromActiveStreams() {\n        const index = activeStreams.findIndex(s => s === stream);\n        if (index !== -1) {\n            activeStreams.splice(index, 1);\n            stream.timeline.close = Date.now();\n            onStreamEnd?.(stream);\n        }\n    }\n    let writerClosed = false;\n    let readerClosed = false;\n    (async function () {\n        const err = await writer.closed.catch((err) => err);\n        if (err != null) {\n            const msg = err.message;\n            if (!(msg.includes('aborted by the remote server') || msg.includes('STOP_SENDING'))) {\n                log.error(`WebTransport writer closed unexpectedly: streamId=${streamId} err=${err.message}`);\n            }\n        }\n        writerClosed = true;\n        if (writerClosed && readerClosed) {\n            cleanupStreamFromActiveStreams();\n        }\n    })().catch(() => {\n        log.error('WebTransport failed to cleanup closed stream');\n    });\n    (async function () {\n        const err = await reader.closed.catch((err) => err);\n        if (err != null) {\n            log.error(`WebTransport reader closed unexpectedly: streamId=${streamId} err=${err.message}`);\n        }\n        readerClosed = true;\n        if (writerClosed && readerClosed) {\n            cleanupStreamFromActiveStreams();\n        }\n    })().catch(() => {\n        log.error('WebTransport failed to cleanup closed stream');\n    });\n    let sinkSunk = false;\n    const stream = {\n        id: streamId,\n        status: 'open',\n        writeStatus: 'ready',\n        readStatus: 'ready',\n        abort(err) {\n            if (!writerClosed) {\n                writer.abort(err)\n                    .catch(err => {\n                    log.error('could not abort stream', err);\n                });\n                writerClosed = true;\n            }\n            readerClosed = true;\n            this.status = 'aborted';\n            this.writeStatus = 'closed';\n            this.readStatus = 'closed';\n            this.timeline.reset =\n                this.timeline.close =\n                    this.timeline.closeRead =\n                        this.timeline.closeWrite = Date.now();\n            cleanupStreamFromActiveStreams();\n        },\n        async close(options) {\n            this.status = 'closing';\n            await Promise.all([\n                stream.closeRead(options),\n                stream.closeWrite(options)\n            ]);\n            cleanupStreamFromActiveStreams();\n            this.status = 'closed';\n            this.timeline.close = Date.now();\n        },\n        async closeRead(options) {\n            if (!readerClosed) {\n                this.readStatus = 'closing';\n                try {\n                    await reader.cancel();\n                }\n                catch (err) {\n                    if (err.toString().includes('RESET_STREAM') === true) {\n                        writerClosed = true;\n                    }\n                }\n                this.timeline.closeRead = Date.now();\n                this.readStatus = 'closed';\n                readerClosed = true;\n            }\n            if (writerClosed) {\n                cleanupStreamFromActiveStreams();\n            }\n        },\n        async closeWrite(options) {\n            if (!writerClosed) {\n                writerClosed = true;\n                this.writeStatus = 'closing';\n                try {\n                    await writer.close();\n                }\n                catch (err) {\n                    if (err.toString().includes('RESET_STREAM') === true) {\n                        readerClosed = true;\n                    }\n                }\n                this.timeline.closeWrite = Date.now();\n                this.writeStatus = 'closed';\n            }\n            if (readerClosed) {\n                cleanupStreamFromActiveStreams();\n            }\n        },\n        direction,\n        timeline: { open: Date.now() },\n        metadata: {},\n        source: (async function* () {\n            while (true) {\n                const val = await reader.read();\n                if (val.done) {\n                    readerClosed = true;\n                    if (writerClosed) {\n                        cleanupStreamFromActiveStreams();\n                    }\n                    return;\n                }\n                yield new uint8arraylist__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayList(val.value);\n            }\n        })(),\n        sink: async function (source) {\n            if (sinkSunk) {\n                throw new Error('sink already called on stream');\n            }\n            sinkSunk = true;\n            try {\n                this.writeStatus = 'writing';\n                for await (const chunks of source) {\n                    if (chunks instanceof Uint8Array) {\n                        await writer.write(chunks);\n                    }\n                    else {\n                        for (const buf of chunks) {\n                            await writer.write(buf);\n                        }\n                    }\n                }\n                this.writeStatus = 'done';\n            }\n            finally {\n                this.timeline.closeWrite = Date.now();\n                this.writeStatus = 'closed';\n                await stream.closeWrite();\n            }\n        },\n        log\n    };\n    return stream;\n}\n//# sourceMappingURL=stream.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webtransport/dist/src/stream.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webtransport/dist/src/utils/inert-duplex.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@libp2p/webtransport/dist/src/utils/inert-duplex.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inertDuplex: () => (/* binding */ inertDuplex)\n/* harmony export */ });\n// Duplex that does nothing. Needed to fulfill the interface\nfunction inertDuplex() {\n    return {\n        source: {\n            [Symbol.asyncIterator]() {\n                return {\n                    async next() {\n                        // This will never resolve\n                        return new Promise(() => { });\n                    }\n                };\n            }\n        },\n        sink: async (source) => {\n            // This will never resolve\n            return new Promise(() => { });\n        }\n    };\n}\n//# sourceMappingURL=inert-duplex.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webtransport/dist/src/utils/inert-duplex.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webtransport/dist/src/utils/is-subset.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@libp2p/webtransport/dist/src/utils/is-subset.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSubset: () => (/* binding */ isSubset)\n/* harmony export */ });\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n\n/**\n * Determines if `maybeSubset` is a subset of `set`. This means that all byte\n * arrays in `maybeSubset` are present in `set`.\n */\nfunction isSubset(set, maybeSubset) {\n    const intersection = maybeSubset.filter(byteArray => {\n        return Boolean(set.find((otherByteArray) => (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_0__.equals)(byteArray, otherByteArray)));\n    });\n    return (intersection.length === maybeSubset.length);\n}\n//# sourceMappingURL=is-subset.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webtransport/dist/src/utils/is-subset.js?");

/***/ }),

/***/ "./node_modules/@libp2p/webtransport/dist/src/utils/parse-multiaddr.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@libp2p/webtransport/dist/src/utils/parse-multiaddr.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseMultiaddr: () => (/* binding */ parseMultiaddr)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @multiformats/multiaddr-matcher */ \"./node_modules/@multiformats/multiaddr-matcher/dist/src/index.js\");\n/* harmony import */ var multiformats_basics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! multiformats/basics */ \"./node_modules/multiformats/dist/src/basics.js\");\n\n\n\n\n\n// @ts-expect-error - Not easy to combine these types.\nconst multibaseDecoder = Object.values(multiformats_basics__WEBPACK_IMPORTED_MODULE_2__.bases).map(b => b.decoder).reduce((d, b) => d.or(b));\nfunction decodeCerthashStr(s) {\n    return multiformats_basics__WEBPACK_IMPORTED_MODULE_2__.digest.decode(multibaseDecoder.decode(s));\n}\nfunction parseMultiaddr(ma) {\n    if (!_multiformats_multiaddr_matcher__WEBPACK_IMPORTED_MODULE_1__.WebTransport.matches(ma)) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Invalid multiaddr, was not a WebTransport address', 'ERR_INVALID_MULTIADDR');\n    }\n    const parts = ma.stringTuples();\n    const certhashes = parts\n        .filter(([name, _]) => name === (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)('certhash').code)\n        .map(([_, value]) => decodeCerthashStr(value ?? ''));\n    // only take the first peer id in the multiaddr as it may be a relay\n    const remotePeer = parts\n        .filter(([name, _]) => name === (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)('p2p').code)\n        .map(([_, value]) => (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_4__.peerIdFromString)(value ?? ''))[0];\n    const opts = ma.toOptions();\n    let host = opts.host;\n    if (opts.family === 6 && host?.includes(':')) {\n        /**\n         * This resolves cases where `new WebTransport()` fails to construct because of an invalid URL being passed.\n         *\n         * `new URL('https://::1:4001/blah')` will throw a `TypeError: Failed to construct 'URL': Invalid URL`\n         * `new URL('https://[::1]:4001/blah')` is valid and will not.\n         *\n         * @see https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2\n         */\n        host = `[${host}]`;\n    }\n    return {\n        // All webtransport urls are https\n        url: `https://${host}:${opts.port}`,\n        certhashes,\n        remotePeer\n    };\n}\n//# sourceMappingURL=parse-multiaddr.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@libp2p/webtransport/dist/src/utils/parse-multiaddr.js?");

/***/ }),

/***/ "./node_modules/@multiformats/dns/dist/src/dns.js":
/*!********************************************************!*\
  !*** ./node_modules/@multiformats/dns/dist/src/dns.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DNS: () => (/* binding */ DNS)\n/* harmony export */ });\n/* harmony import */ var progress_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! progress-events */ \"./node_modules/progress-events/dist/src/index.js\");\n/* harmony import */ var _resolvers_default_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolvers/default.js */ \"./node_modules/@multiformats/dns/dist/src/resolvers/default.browser.js\");\n/* harmony import */ var _utils_cache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/cache.js */ \"./node_modules/@multiformats/dns/dist/src/utils/cache.js\");\n/* harmony import */ var _utils_get_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/get-types.js */ \"./node_modules/@multiformats/dns/dist/src/utils/get-types.js\");\n\n\n\n\nconst DEFAULT_ANSWER_CACHE_SIZE = 1000;\nclass DNS {\n    resolvers;\n    cache;\n    constructor(init) {\n        this.resolvers = {};\n        this.cache = (0,_utils_cache_js__WEBPACK_IMPORTED_MODULE_2__.cache)(init.cacheSize ?? DEFAULT_ANSWER_CACHE_SIZE);\n        Object.entries(init.resolvers ?? {}).forEach(([tld, resolver]) => {\n            if (!Array.isArray(resolver)) {\n                resolver = [resolver];\n            }\n            // convert `com` -> `com.`\n            if (!tld.endsWith('.')) {\n                tld = `${tld}.`;\n            }\n            this.resolvers[tld] = resolver;\n        });\n        // configure default resolver if none specified\n        if (this.resolvers['.'] == null) {\n            this.resolvers['.'] = (0,_resolvers_default_js__WEBPACK_IMPORTED_MODULE_1__.defaultResolver)();\n        }\n    }\n    /**\n     * Queries DNS resolvers for the passed record types for the passed domain.\n     *\n     * If cached records exist for all desired types they will be returned\n     * instead.\n     *\n     * Any new responses will be added to the cache for subsequent requests.\n     */\n    async query(domain, options = {}) {\n        const types = (0,_utils_get_types_js__WEBPACK_IMPORTED_MODULE_3__.getTypes)(options.types);\n        const cached = options.cached !== false ? this.cache.get(domain, types) : undefined;\n        if (cached != null) {\n            options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_0__.CustomProgressEvent('dns:cache', { detail: cached }));\n            return cached;\n        }\n        const tld = `${domain.split('.').pop()}.`;\n        const resolvers = (this.resolvers[tld] ?? this.resolvers['.']).sort(() => {\n            return (Math.random() > 0.5) ? -1 : 1;\n        });\n        const errors = [];\n        for (const resolver of resolvers) {\n            // skip further resolutions if the user aborted the signal\n            if (options.signal?.aborted === true) {\n                break;\n            }\n            try {\n                const result = await resolver(domain, {\n                    ...options,\n                    types\n                });\n                for (const answer of result.Answer) {\n                    this.cache.add(domain, answer);\n                }\n                return result;\n            }\n            catch (err) {\n                errors.push(err);\n                options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_0__.CustomProgressEvent('dns:error', { detail: err }));\n            }\n        }\n        if (errors.length === 1) {\n            throw errors[0];\n        }\n        throw new AggregateError(errors, `DNS lookup of ${domain} ${types} failed`);\n    }\n}\n//# sourceMappingURL=dns.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/dns/dist/src/dns.js?");

/***/ }),

/***/ "./node_modules/@multiformats/dns/dist/src/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@multiformats/dns/dist/src/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_RECURSIVE_DEPTH: () => (/* binding */ MAX_RECURSIVE_DEPTH),\n/* harmony export */   RecordType: () => (/* binding */ RecordType),\n/* harmony export */   dns: () => (/* binding */ dns)\n/* harmony export */ });\n/* harmony import */ var _dns_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dns.js */ \"./node_modules/@multiformats/dns/dist/src/dns.js\");\n/**\n * @packageDocumentation\n *\n * Query DNS records using `node:dns`, DNS over HTTP and/or DNSJSON over HTTP.\n *\n * A list of publicly accessible servers can be found [here](https://github.com/curl/curl/wiki/DNS-over-HTTPS#publicly-available-servers).\n *\n * @example Using the default resolver\n *\n * ```TypeScript\n * import { dns } from '@multiformats/dns'\n *\n * const resolver = dns()\n *\n * // resolve A records with a 5s timeout\n * const result = await dns.query('google.com', {\n *   signal: AbortSignal.timeout(5000)\n * })\n * ```\n *\n * @example Using per-TLD resolvers\n *\n * ```TypeScript\n * import { dns } from '@multiformats/dns'\n * import { dnsJsonOverHttps } from '@multiformats/dns/resolvers'\n *\n * const resolver = dns({\n *   resolvers: {\n *     // will only be used to resolve `.com` addresses\n *     'com.': dnsJsonOverHttps('https://cloudflare-dns.com/dns-query'),\n *\n *     // this can also be an array, resolvers will be shuffled and tried in\n *     // series\n *     'net.': [\n *       dnsJsonOverHttps('https://dns.google/resolve'),\n *       dnsJsonOverHttps('https://dns.pub/dns-query')\n *     ],\n *\n *     // will only be used to resolve all other addresses\n *     '.': dnsJsonOverHttps('https://dnsforge.de/dns-query'),\n *   }\n * })\n * ```\n *\n * @example Query for specific record types\n *\n * ```TypeScript\n * import { dns, RecordType } from '@multiformats/dns'\n *\n * const resolver = dns()\n *\n * // resolve only TXT records\n * const result = await dns.query('google.com', {\n *   types: [\n *     RecordType.TXT\n *   ]\n * })\n * ```\n *\n * ## Caching\n *\n * Individual Aanswers are cached so. If you make a request, for which all\n * record types are cached, all values will be pulled from the cache.\n *\n * If any of the record types are not cached, a new request will be resolved as\n * if none of the records were cached, and the cache will be updated to include\n * the new results.\n *\n * @example Ignoring the cache\n *\n * ```TypeScript\n * import { dns, RecordType } from '@multiformats/dns'\n *\n * const resolver = dns()\n *\n * // do not used cached results, always resolve a new query\n * const result = await dns.query('google.com', {\n *   cached: false\n * })\n * ```\n */\n\n/**\n * A subset of DNS Record Types\n *\n * @see https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4.\n */\nvar RecordType;\n(function (RecordType) {\n    RecordType[RecordType[\"A\"] = 1] = \"A\";\n    RecordType[RecordType[\"CNAME\"] = 5] = \"CNAME\";\n    RecordType[RecordType[\"TXT\"] = 16] = \"TXT\";\n    RecordType[RecordType[\"AAAA\"] = 28] = \"AAAA\";\n})(RecordType || (RecordType = {}));\n/**\n * The default maximum amount of recursion allowed during a query\n */\nconst MAX_RECURSIVE_DEPTH = 32;\nfunction dns(init = {}) {\n    return new _dns_js__WEBPACK_IMPORTED_MODULE_0__.DNS(init);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/dns/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@multiformats/dns/dist/src/resolvers/default.browser.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@multiformats/dns/dist/src/resolvers/default.browser.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultResolver: () => (/* binding */ defaultResolver)\n/* harmony export */ });\n/* harmony import */ var _dns_json_over_https_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dns-json-over-https.js */ \"./node_modules/@multiformats/dns/dist/src/resolvers/dns-json-over-https.js\");\n\nfunction defaultResolver() {\n    return [\n        (0,_dns_json_over_https_js__WEBPACK_IMPORTED_MODULE_0__.dnsJsonOverHttps)('https://cloudflare-dns.com/dns-query'),\n        (0,_dns_json_over_https_js__WEBPACK_IMPORTED_MODULE_0__.dnsJsonOverHttps)('https://dns.google/resolve')\n    ];\n}\n//# sourceMappingURL=default.browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/dns/dist/src/resolvers/default.browser.js?");

/***/ }),

/***/ "./node_modules/@multiformats/dns/dist/src/resolvers/dns-json-over-https.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@multiformats/dns/dist/src/resolvers/dns-json-over-https.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_QUERY_CONCURRENCY: () => (/* binding */ DEFAULT_QUERY_CONCURRENCY),\n/* harmony export */   dnsJsonOverHttps: () => (/* binding */ dnsJsonOverHttps)\n/* harmony export */ });\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! p-queue */ \"./node_modules/p-queue/dist/index.js\");\n/* harmony import */ var progress_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! progress-events */ \"./node_modules/progress-events/dist/src/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.js */ \"./node_modules/@multiformats/dns/dist/src/index.js\");\n/* harmony import */ var _utils_get_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/get-types.js */ \"./node_modules/@multiformats/dns/dist/src/utils/get-types.js\");\n/* harmony import */ var _utils_to_dns_response_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/to-dns-response.js */ \"./node_modules/@multiformats/dns/dist/src/utils/to-dns-response.js\");\n/* eslint-env browser */\n\n\n\n\n\n/**\n * Browsers limit concurrent connections per host (~6), we don't want to exhaust\n * the limit so this value controls how many DNS queries can be in flight at\n * once.\n */\nconst DEFAULT_QUERY_CONCURRENCY = 4;\n/**\n * Uses the RFC 8427 'application/dns-json' content-type to resolve DNS queries.\n *\n * Supports and server that uses the same schema as Google's DNS over HTTPS\n * resolver.\n *\n * This resolver needs fewer dependencies than the regular DNS-over-HTTPS\n * resolver so can result in a smaller bundle size and consequently is preferred\n * for browser use.\n *\n * @see https://developers.cloudflare.com/1.1.1.1/encryption/dns-over-https/make-api-requests/dns-json/\n * @see https://github.com/curl/curl/wiki/DNS-over-HTTPS#publicly-available-servers\n * @see https://dnsprivacy.org/public_resolvers/\n * @see https://datatracker.ietf.org/doc/html/rfc8427\n */\nfunction dnsJsonOverHttps(url, init = {}) {\n    const httpQueue = new p_queue__WEBPACK_IMPORTED_MODULE_4__[\"default\"]({\n        concurrency: init.queryConcurrency ?? DEFAULT_QUERY_CONCURRENCY\n    });\n    return async (fqdn, options = {}) => {\n        const searchParams = new URLSearchParams();\n        searchParams.set('name', fqdn);\n        (0,_utils_get_types_js__WEBPACK_IMPORTED_MODULE_2__.getTypes)(options.types).forEach(type => {\n            // We pass record type as a string to the server because cloudflare DNS bug. see https://github.com/ipfs/helia/issues/474\n            searchParams.append('type', _index_js__WEBPACK_IMPORTED_MODULE_1__.RecordType[type]);\n        });\n        options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_0__.CustomProgressEvent('dns:query', { detail: fqdn }));\n        // query DNS-JSON over HTTPS server\n        const response = await httpQueue.add(async () => {\n            const res = await fetch(`${url}?${searchParams}`, {\n                headers: {\n                    accept: 'application/dns-json'\n                },\n                signal: options?.signal\n            });\n            if (res.status !== 200) {\n                throw new Error(`Unexpected HTTP status: ${res.status} - ${res.statusText}`);\n            }\n            const response = (0,_utils_to_dns_response_js__WEBPACK_IMPORTED_MODULE_3__.toDNSResponse)(await res.json());\n            options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_0__.CustomProgressEvent('dns:response', { detail: response }));\n            return response;\n        }, {\n            signal: options.signal\n        });\n        if (response == null) {\n            throw new Error('No DNS response received');\n        }\n        return response;\n    };\n}\n//# sourceMappingURL=dns-json-over-https.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/dns/dist/src/resolvers/dns-json-over-https.js?");

/***/ }),

/***/ "./node_modules/@multiformats/dns/dist/src/utils/cache.js":
/*!****************************************************************!*\
  !*** ./node_modules/@multiformats/dns/dist/src/utils/cache.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cache: () => (/* binding */ cache)\n/* harmony export */ });\n/* harmony import */ var hashlru__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hashlru */ \"./node_modules/hashlru/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.js */ \"./node_modules/@multiformats/dns/dist/src/index.js\");\n/* harmony import */ var _to_dns_response_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./to-dns-response.js */ \"./node_modules/@multiformats/dns/dist/src/utils/to-dns-response.js\");\n\n\n\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n */\nclass CachedAnswers {\n    lru;\n    constructor(maxSize) {\n        this.lru = hashlru__WEBPACK_IMPORTED_MODULE_0__(maxSize);\n    }\n    get(fqdn, types) {\n        let foundAllAnswers = true;\n        const answers = [];\n        for (const type of types) {\n            const cached = this.getAnswers(fqdn, type);\n            if (cached.length === 0) {\n                foundAllAnswers = false;\n                break;\n            }\n            answers.push(...cached);\n        }\n        if (foundAllAnswers) {\n            return (0,_to_dns_response_js__WEBPACK_IMPORTED_MODULE_2__.toDNSResponse)({ answers });\n        }\n    }\n    getAnswers(domain, type) {\n        const key = `${domain.toLowerCase()}-${type}`;\n        const answers = this.lru.get(key);\n        if (answers != null) {\n            const cachedAnswers = answers\n                .filter((entry) => {\n                return entry.expires > Date.now();\n            })\n                .map(({ expires, value }) => ({\n                ...value,\n                TTL: Math.round((expires - Date.now()) / 1000),\n                type: _index_js__WEBPACK_IMPORTED_MODULE_1__.RecordType[value.type]\n            }));\n            if (cachedAnswers.length === 0) {\n                this.lru.remove(key);\n            }\n            // @ts-expect-error hashlru stringifies stored types which turns enums\n            // into strings, we convert back into enums above but tsc doesn't know\n            return cachedAnswers;\n        }\n        return [];\n    }\n    add(domain, answer) {\n        const key = `${domain.toLowerCase()}-${answer.type}`;\n        const answers = this.lru.get(key) ?? [];\n        answers.push({\n            expires: Date.now() + ((answer.TTL ?? _to_dns_response_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_TTL) * 1000),\n            value: answer\n        });\n        this.lru.set(key, answers);\n    }\n    remove(domain, type) {\n        const key = `${domain.toLowerCase()}-${type}`;\n        this.lru.remove(key);\n    }\n    clear() {\n        this.lru.clear();\n    }\n}\n/**\n * Avoid sending multiple queries for the same hostname by caching results\n */\nfunction cache(size) {\n    return new CachedAnswers(size);\n}\n//# sourceMappingURL=cache.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/dns/dist/src/utils/cache.js?");

/***/ }),

/***/ "./node_modules/@multiformats/dns/dist/src/utils/get-types.js":
/*!********************************************************************!*\
  !*** ./node_modules/@multiformats/dns/dist/src/utils/get-types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTypes: () => (/* binding */ getTypes)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index.js */ \"./node_modules/@multiformats/dns/dist/src/index.js\");\n\nfunction getTypes(types) {\n    const DEFAULT_TYPES = [\n        _index_js__WEBPACK_IMPORTED_MODULE_0__.RecordType.A\n    ];\n    if (types == null) {\n        return DEFAULT_TYPES;\n    }\n    if (Array.isArray(types)) {\n        if (types.length === 0) {\n            return DEFAULT_TYPES;\n        }\n        return types;\n    }\n    return [\n        types\n    ];\n}\n//# sourceMappingURL=get-types.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/dns/dist/src/utils/get-types.js?");

/***/ }),

/***/ "./node_modules/@multiformats/dns/dist/src/utils/to-dns-response.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@multiformats/dns/dist/src/utils/to-dns-response.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_TTL: () => (/* binding */ DEFAULT_TTL),\n/* harmony export */   toDNSResponse: () => (/* binding */ toDNSResponse)\n/* harmony export */ });\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.js */ \"./node_modules/@multiformats/dns/dist/src/index.js\");\n\n\n/**\n * This TTL will be used if the remote service does not return one\n */\nconst DEFAULT_TTL = 60;\nfunction toDNSResponse(obj) {\n    return {\n        Status: obj.Status ?? 0,\n        TC: obj.TC ?? obj.flag_tc ?? false,\n        RD: obj.RD ?? obj.flag_rd ?? false,\n        RA: obj.RA ?? obj.flag_ra ?? false,\n        AD: obj.AD ?? obj.flag_ad ?? false,\n        CD: obj.CD ?? obj.flag_cd ?? false,\n        Question: (obj.Question ?? obj.questions ?? []).map((question) => {\n            return {\n                name: question.name,\n                type: _index_js__WEBPACK_IMPORTED_MODULE_1__.RecordType[question.type]\n            };\n        }),\n        Answer: (obj.Answer ?? obj.answers ?? []).map((answer) => {\n            return {\n                name: answer.name,\n                type: _index_js__WEBPACK_IMPORTED_MODULE_1__.RecordType[answer.type],\n                TTL: (answer.TTL ?? answer.ttl ?? DEFAULT_TTL),\n                data: answer.data instanceof Uint8Array ? (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(answer.data) : answer.data\n            };\n        })\n    };\n}\n//# sourceMappingURL=to-dns-response.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/dns/dist/src/utils/to-dns-response.js?");

/***/ }),

/***/ "./node_modules/@multiformats/mafmt/dist/src/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@multiformats/mafmt/dist/src/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Circuit: () => (/* binding */ Circuit),\n/* harmony export */   DNS: () => (/* binding */ DNS),\n/* harmony export */   DNS4: () => (/* binding */ DNS4),\n/* harmony export */   DNS6: () => (/* binding */ DNS6),\n/* harmony export */   DNSADDR: () => (/* binding */ DNSADDR),\n/* harmony export */   HTTP: () => (/* binding */ HTTP),\n/* harmony export */   HTTPS: () => (/* binding */ HTTPS),\n/* harmony export */   IP: () => (/* binding */ IP),\n/* harmony export */   IPFS: () => (/* binding */ IPFS),\n/* harmony export */   P2P: () => (/* binding */ P2P),\n/* harmony export */   P2PWebRTCDirect: () => (/* binding */ P2PWebRTCDirect),\n/* harmony export */   P2PWebRTCStar: () => (/* binding */ P2PWebRTCStar),\n/* harmony export */   QUIC: () => (/* binding */ QUIC),\n/* harmony export */   QUICV1: () => (/* binding */ QUICV1),\n/* harmony export */   Reliable: () => (/* binding */ Reliable),\n/* harmony export */   Stardust: () => (/* binding */ Stardust),\n/* harmony export */   TCP: () => (/* binding */ TCP),\n/* harmony export */   UDP: () => (/* binding */ UDP),\n/* harmony export */   UTP: () => (/* binding */ UTP),\n/* harmony export */   WebRTC: () => (/* binding */ WebRTC),\n/* harmony export */   WebRTCDirect: () => (/* binding */ WebRTCDirect),\n/* harmony export */   WebSocketStar: () => (/* binding */ WebSocketStar),\n/* harmony export */   WebSockets: () => (/* binding */ WebSockets),\n/* harmony export */   WebSocketsSecure: () => (/* binding */ WebSocketsSecure),\n/* harmony export */   WebTransport: () => (/* binding */ WebTransport)\n/* harmony export */ });\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n\n/*\n * Valid combinations\n */\nconst DNS4 = base('dns4');\nconst DNS6 = base('dns6');\nconst DNSADDR = base('dnsaddr');\nconst DNS = or(base('dns'), DNSADDR, DNS4, DNS6);\nconst IP = or(base('ip4'), base('ip6'));\nconst TCP = or(and(IP, base('tcp')), and(DNS, base('tcp')));\nconst UDP = and(IP, base('udp'));\nconst UTP = and(UDP, base('utp'));\nconst QUIC = and(UDP, base('quic'));\nconst QUICV1 = and(UDP, base('quic-v1'));\nconst _WebSockets = or(and(TCP, base('ws')), and(DNS, base('ws')));\nconst WebSockets = or(and(_WebSockets, base('p2p')), _WebSockets);\nconst _WebSocketsSecure = or(and(TCP, base('wss')), and(DNS, base('wss')), and(TCP, base('tls'), base('ws')), and(DNS, base('tls'), base('ws')));\nconst WebSocketsSecure = or(and(_WebSocketsSecure, base('p2p')), _WebSocketsSecure);\nconst HTTP = or(and(TCP, base('http')), and(IP, base('http')), and(DNS, base('http')));\nconst HTTPS = or(and(TCP, base('https')), and(IP, base('https')), and(DNS, base('https')));\nconst _WebRTCDirect = and(UDP, base('webrtc-direct'), base('certhash'));\nconst WebRTCDirect = or(and(_WebRTCDirect, base('p2p')), _WebRTCDirect);\nconst _WebTransport = and(QUICV1, base('webtransport'), base('certhash'), base('certhash'));\nconst WebTransport = or(and(_WebTransport, base('p2p')), _WebTransport);\n/**\n * @deprecated\n */\nconst P2PWebRTCStar = or(and(WebSockets, base('p2p-webrtc-star'), base('p2p')), and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')), and(WebSockets, base('p2p-webrtc-star')), and(WebSocketsSecure, base('p2p-webrtc-star')));\nconst WebSocketStar = or(and(WebSockets, base('p2p-websocket-star'), base('p2p')), and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')), and(WebSockets, base('p2p-websocket-star')), and(WebSocketsSecure, base('p2p-websocket-star')));\n/**\n * @deprecated\n */\nconst P2PWebRTCDirect = or(and(HTTP, base('p2p-webrtc-direct'), base('p2p')), and(HTTPS, base('p2p-webrtc-direct'), base('p2p')), and(HTTP, base('p2p-webrtc-direct')), and(HTTPS, base('p2p-webrtc-direct')));\nconst Reliable = or(_WebSockets, _WebSocketsSecure, HTTP, HTTPS, P2PWebRTCStar, P2PWebRTCDirect, TCP, UTP, QUIC, DNS, WebRTCDirect, WebTransport);\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nconst Stardust = or(and(Reliable, base('p2p-stardust'), base('p2p')), and(Reliable, base('p2p-stardust')));\nconst _P2P = or(and(Reliable, base('p2p')), P2PWebRTCStar, P2PWebRTCDirect, WebRTCDirect, WebTransport, base('p2p'));\nconst _Circuit = or(and(_P2P, base('p2p-circuit'), _P2P), and(_P2P, base('p2p-circuit')), and(base('p2p-circuit'), _P2P), and(Reliable, base('p2p-circuit')), and(base('p2p-circuit'), Reliable), base('p2p-circuit'));\nconst CircuitRecursive = () => or(and(_Circuit, CircuitRecursive), _Circuit);\nconst Circuit = CircuitRecursive();\nconst P2P = or(and(Circuit, _P2P, Circuit), and(_P2P, Circuit), and(Circuit, _P2P), Circuit, _P2P);\nconst IPFS = P2P;\nconst WebRTC = or(and(Circuit, base('webrtc'), base('p2p')), and(Circuit, base('webrtc')), and(Reliable, base('webrtc'), base('p2p')), and(Reliable, base('webrtc')), base('webrtc'));\n/*\n * Validation funcs\n */\nfunction makeMatchesFunction(partialMatch) {\n    function matches(a) {\n        let ma;\n        try {\n            ma = (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(a);\n        }\n        catch (err) { // catch error\n            return false; // also if it's invalid it's probably not matching as well so return false\n        }\n        const out = partialMatch(ma.protoNames());\n        if (out === null) {\n            return false;\n        }\n        if (out === true || out === false) {\n            return out;\n        }\n        return out.length === 0;\n    }\n    return matches;\n}\nfunction and(...args) {\n    function partialMatch(a) {\n        if (a.length < args.length) {\n            return null;\n        }\n        let out = a;\n        args.some((arg) => {\n            out = typeof arg === 'function'\n                ? arg().partialMatch(a)\n                : arg.partialMatch(a);\n            if (Array.isArray(out)) {\n                a = out;\n            }\n            if (out === null) {\n                return true;\n            }\n            return false;\n        });\n        return out;\n    }\n    return {\n        toString: function () { return '{ ' + args.join(' ') + ' }'; },\n        input: args,\n        matches: makeMatchesFunction(partialMatch),\n        partialMatch\n    };\n}\nfunction or(...args) {\n    function partialMatch(a) {\n        let out = null;\n        args.some((arg) => {\n            const res = typeof arg === 'function'\n                ? arg().partialMatch(a)\n                : arg.partialMatch(a);\n            if (res != null) {\n                out = res;\n                return true;\n            }\n            return false;\n        });\n        return out;\n    }\n    const result = {\n        toString: function () { return '{ ' + args.join(' ') + ' }'; },\n        input: args,\n        matches: makeMatchesFunction(partialMatch),\n        partialMatch\n    };\n    return result;\n}\nfunction base(n) {\n    const name = n;\n    function matches(a) {\n        let ma;\n        try {\n            ma = (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(a);\n        }\n        catch (err) { // catch error\n            return false; // also if it's invalid it's probably not matching as well so return false\n        }\n        const pnames = ma.protoNames();\n        if (pnames.length === 1 && pnames[0] === name) {\n            return true;\n        }\n        return false;\n    }\n    function partialMatch(protos) {\n        if (protos.length === 0) {\n            return null;\n        }\n        if (protos[0] === name) {\n            return protos.slice(1);\n        }\n        return null;\n    }\n    return {\n        toString: function () { return name; },\n        matches,\n        partialMatch\n    };\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/mafmt/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@multiformats/multiaddr-matcher/dist/src/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@multiformats/multiaddr-matcher/dist/src/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Circuit: () => (/* binding */ Circuit),\n/* harmony export */   DNS: () => (/* binding */ DNS),\n/* harmony export */   DNS4: () => (/* binding */ DNS4),\n/* harmony export */   DNS6: () => (/* binding */ DNS6),\n/* harmony export */   DNSADDR: () => (/* binding */ DNSADDR),\n/* harmony export */   HTTP: () => (/* binding */ HTTP),\n/* harmony export */   HTTPS: () => (/* binding */ HTTPS),\n/* harmony export */   IP: () => (/* binding */ IP),\n/* harmony export */   IP4: () => (/* binding */ IP4),\n/* harmony export */   IP6: () => (/* binding */ IP6),\n/* harmony export */   IP_OR_DOMAIN: () => (/* binding */ IP_OR_DOMAIN),\n/* harmony export */   P2P: () => (/* binding */ P2P),\n/* harmony export */   QUIC: () => (/* binding */ QUIC),\n/* harmony export */   QUICV1: () => (/* binding */ QUICV1),\n/* harmony export */   TCP: () => (/* binding */ TCP),\n/* harmony export */   UDP: () => (/* binding */ UDP),\n/* harmony export */   WebRTC: () => (/* binding */ WebRTC),\n/* harmony export */   WebRTCDirect: () => (/* binding */ WebRTCDirect),\n/* harmony export */   WebSockets: () => (/* binding */ WebSockets),\n/* harmony export */   WebSocketsSecure: () => (/* binding */ WebSocketsSecure),\n/* harmony export */   WebTransport: () => (/* binding */ WebTransport)\n/* harmony export */ });\n/* harmony import */ var _chainsafe_is_ip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chainsafe/is-ip */ \"./node_modules/@chainsafe/is-ip/lib/is-ip.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! multiformats/bases/base58 */ \"./node_modules/multiformats/dist/src/bases/base58.js\");\n/* harmony import */ var multiformats_bases_base64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! multiformats/bases/base64 */ \"./node_modules/multiformats/dist/src/bases/base64.js\");\n/**\n * @packageDocumentation\n *\n * This module exports various matchers that can be used to infer the type of a\n * passed multiaddr.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org')\n *\n * DNS.matches(ma) // true - this is a multiaddr with a DNS address at the start\n * ```\n *\n * @example\n *\n * The default matching behaviour ignores any subsequent tuples in the multiaddr.\n * If you want stricter matching you can use `.exactMatch`:\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS, Circuit } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org/p2p/QmFoo/p2p-circuit/p2p/QmBar')\n *\n * DNS.exactMatch(ma) // false - this address has extra tuples after the DNS component\n * Circuit.matches(ma) // true\n * Circuit.exactMatch(ma) // true - the extra tuples are circuit relay related\n * ```\n */\n\n\n\n\n/**\n * Split a multiaddr into path components\n */\nconst toParts = (ma) => {\n    return ma.toString().split('/').slice(1);\n};\nconst func = (fn) => {\n    return {\n        match: (vals) => {\n            if (vals.length < 1) {\n                return false;\n            }\n            if (fn(vals[0])) {\n                return vals.slice(1);\n            }\n            return false;\n        },\n        pattern: 'fn'\n    };\n};\nconst literal = (str) => {\n    return {\n        match: (vals) => func((val) => val === str).match(vals),\n        pattern: str\n    };\n};\nconst string = () => {\n    return {\n        match: (vals) => func((val) => typeof val === 'string').match(vals),\n        pattern: '{string}'\n    };\n};\nconst number = () => {\n    return {\n        match: (vals) => func((val) => !isNaN(parseInt(val))).match(vals),\n        pattern: '{number}'\n    };\n};\nconst peerId = () => {\n    return {\n        match: (vals) => {\n            if (vals.length < 2) {\n                return false;\n            }\n            if (vals[0] !== 'p2p' && vals[0] !== 'ipfs') {\n                return false;\n            }\n            // Q is RSA, 1 is Ed25519 or Secp256k1\n            if (vals[1].startsWith('Q') || vals[1].startsWith('1')) {\n                try {\n                    multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_2__.base58btc.decode(`z${vals[1]}`);\n                }\n                catch (err) {\n                    return false;\n                }\n            }\n            else {\n                return false;\n            }\n            return vals.slice(2);\n        },\n        pattern: '/p2p/{peerid}'\n    };\n};\nconst certhash = () => {\n    return {\n        match: (vals) => {\n            if (vals.length < 2) {\n                return false;\n            }\n            if (vals[0] !== 'certhash') {\n                return false;\n            }\n            try {\n                multiformats_bases_base64__WEBPACK_IMPORTED_MODULE_3__.base64url.decode(vals[1]);\n            }\n            catch {\n                return false;\n            }\n            return vals.slice(2);\n        },\n        pattern: '/certhash/{certhash}'\n    };\n};\nconst optional = (matcher) => {\n    return {\n        match: (vals) => {\n            const result = matcher.match(vals);\n            if (result === false) {\n                return vals;\n            }\n            return result;\n        },\n        pattern: `optional(${matcher.pattern})`\n    };\n};\nconst or = (...matchers) => {\n    return {\n        match: (vals) => {\n            let matches;\n            for (const matcher of matchers) {\n                const result = matcher.match(vals);\n                // no match\n                if (result === false) {\n                    continue;\n                }\n                // choose greediest matcher\n                if (matches == null || result.length < matches.length) {\n                    matches = result;\n                }\n            }\n            if (matches == null) {\n                return false;\n            }\n            return matches;\n        },\n        pattern: `or(${matchers.map(m => m.pattern).join(', ')})`\n    };\n};\nconst and = (...matchers) => {\n    return {\n        match: (vals) => {\n            for (const matcher of matchers) {\n                // pass what's left of the array\n                const result = matcher.match(vals);\n                // no match\n                if (result === false) {\n                    return false;\n                }\n                vals = result;\n            }\n            return vals;\n        },\n        pattern: `and(${matchers.map(m => m.pattern).join(', ')})`\n    };\n};\nfunction fmt(...matchers) {\n    function match(ma) {\n        let parts = toParts(ma);\n        for (const matcher of matchers) {\n            const result = matcher.match(parts);\n            if (result === false) {\n                return false;\n            }\n            parts = result;\n        }\n        return parts;\n    }\n    function matches(ma) {\n        const result = match(ma);\n        return result !== false;\n    }\n    function exactMatch(ma) {\n        const result = match(ma);\n        if (result === false) {\n            return false;\n        }\n        return result.length === 0;\n    }\n    return {\n        matches,\n        exactMatch\n    };\n}\n/**\n * DNS matchers\n */\nconst _DNS4 = and(literal('dns4'), string());\nconst _DNS6 = and(literal('dns6'), string());\nconst _DNSADDR = and(literal('dnsaddr'), string());\nconst _DNS = and(literal('dns'), string());\n/**\n * Matches dns4 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS4 } from '@multiformats/multiaddr-matcher'\n *\n * DNS4.matches(multiaddr('/dns4/example.org')) // true\n * ```\n */\nconst DNS4 = fmt(_DNS4);\n/**\n * Matches dns6 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS6 } from '@multiformats/multiaddr-matcher'\n *\n * DNS6.matches(multiaddr('/dns6/example.org')) // true\n * ```\n */\nconst DNS6 = fmt(_DNS6);\n/**\n * Matches dnsaddr addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNSADDR } from '@multiformats/multiaddr-matcher'\n *\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org')) // true\n * ```\n */\nconst DNSADDR = fmt(_DNSADDR);\n/**\n * Matches any dns address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * DNS.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNS.matches(multiaddr('/dns4/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org')) // true\n * ```\n */\nconst DNS = fmt(or(_DNS, _DNSADDR, _DNS4, _DNS6));\nconst _IP4 = and(literal('ip4'), func(_chainsafe_is_ip__WEBPACK_IMPORTED_MODULE_0__.isIPv4));\nconst _IP6 = and(literal('ip6'), func(_chainsafe_is_ip__WEBPACK_IMPORTED_MODULE_0__.isIPv6));\nconst _IP = or(_IP4, _IP6);\nconst _IP_OR_DOMAIN = or(_IP, _DNS, _DNS4, _DNS6, _DNSADDR);\n/**\n * A matcher for addresses that start with IP or DNS tuples.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP_OR_DOMAIN } from '@multiformats/multiaddr-matcher'\n *\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/dns/example.com/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/p2p/QmFoo')) // false\n * ```\n */\nconst IP_OR_DOMAIN = fmt(_IP_OR_DOMAIN);\n/**\n * Matches ip4 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP4 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip4/123.123.123.123')\n *\n * IP4.matches(ma) // true\n * ```\n */\nconst IP4 = fmt(_IP4);\n/**\n * Matches ip6 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP6 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')\n *\n * IP6.matches(ma) // true\n * ```\n */\nconst IP6 = fmt(_IP6);\n/**\n * Matches ip4 or ip6 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP } from '@multiformats/multiaddr-matcher'\n *\n * IP.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP.matches(multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')) // true\n * ```\n */\nconst IP = fmt(_IP);\nconst _TCP = and(_IP_OR_DOMAIN, literal('tcp'), number());\nconst _UDP = and(_IP_OR_DOMAIN, literal('udp'), number());\nconst TCP_OR_UDP = or(_TCP, _UDP);\n/**\n * Matches TCP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { TCP } from '@multiformats/multiaddr-matcher'\n *\n * TCP.matches(multiaddr('/ip4/123.123.123.123/tcp/1234')) // true\n * ```\n */\nconst TCP = fmt(_TCP);\n/**\n * Matches UDP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { UDP } from '@multiformats/multiaddr-matcher'\n *\n * UDP.matches(multiaddr('/ip4/123.123.123.123/udp/1234')) // true\n * ```\n */\nconst UDP = fmt(_UDP);\nconst _QUIC = and(_UDP, literal('quic'));\nconst _QUICV1 = and(_UDP, literal('quic-v1'));\nconst QUIC_V0_OR_V1 = or(_QUIC, _QUICV1);\n/**\n * Matches QUIC addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUIC } from '@multiformats/multiaddr-matcher'\n *\n * QUIC.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic')) // true\n * ```\n */\nconst QUIC = fmt(_QUIC);\n/**\n * Matches QUICv1 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUICV1 } from '@multiformats/multiaddr-matcher'\n *\n * QUICV1.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1')) // true\n * ```\n */\nconst QUICV1 = fmt(_QUICV1);\nconst _WEB = or(_IP_OR_DOMAIN, _TCP, _UDP, _QUIC, _QUICV1);\nconst _WebSockets = or(and(_WEB, literal('ws'), optional(peerId())));\n/**\n * Matches WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSockets } from '@multiformats/multiaddr-matcher'\n *\n * WebSockets.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/ws')) // true\n * ```\n */\nconst WebSockets = fmt(_WebSockets);\nconst _WebSocketsSecure = or(and(_WEB, literal('wss'), optional(peerId())), and(_WEB, literal('tls'), literal('ws'), optional(peerId())));\n/**\n * Matches secure WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSocketsSecure } from '@multiformats/multiaddr-matcher'\n *\n * WebSocketsSecure.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/wss')) // true\n * ```\n */\nconst WebSocketsSecure = fmt(_WebSocketsSecure);\nconst _WebRTCDirect = and(TCP_OR_UDP, literal('webrtc-direct'), certhash(), optional(certhash()), optional(peerId()));\n/**\n * Matches WebRTC-direct addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo/webrtc-direct/certhash/u....')) // true\n * ```\n */\nconst WebRTCDirect = fmt(_WebRTCDirect);\nconst _WebTransport = and(_QUICV1, literal('webtransport'), certhash(), certhash(), optional(peerId()));\n/**\n * Matches WebTransport addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1/webtransport/certhash/u..../certhash/u..../p2p/QmFoo')) // true\n * ```\n */\nconst WebTransport = fmt(_WebTransport);\nconst _P2P = or(_WebSockets, _WebSocketsSecure, and(_TCP, optional(peerId())), and(QUIC_V0_OR_V1, optional(peerId())), and(_IP_OR_DOMAIN, optional(peerId())), _WebRTCDirect, _WebTransport, peerId());\n/**\n * Matches peer addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { P2P } from '@multiformats/multiaddr-matcher'\n *\n * P2P.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo')) // true\n * ```\n */\nconst P2P = fmt(_P2P);\nconst _Circuit = and(_P2P, literal('p2p-circuit'), peerId());\n/**\n * Matches circuit relay addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Circuit } from '@multiformats/multiaddr-matcher'\n *\n * Circuit.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/p2p/QmTarget')) // true\n * ```\n */\nconst Circuit = fmt(_Circuit);\nconst _WebRTC = or(and(_P2P, literal('p2p-circuit'), literal('webrtc'), peerId()), and(_P2P, literal('webrtc'), optional(peerId())), literal('webrtc'));\n/**\n * Matches WebRTC addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTC } from '@multiformats/multiaddr-matcher'\n *\n * WebRTC.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/webrtc/p2p/QmTarget')) // true\n * ```\n */\nconst WebRTC = fmt(_WebRTC);\nconst _HTTP = or(and(_IP_OR_DOMAIN, literal('tcp'), number(), literal('http'), optional(peerId())), and(_IP_OR_DOMAIN, literal('http'), optional(peerId())));\n/**\n * Matches HTTP addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/http')) // true\n * ```\n */\nconst HTTP = fmt(_HTTP);\nconst _HTTPS = or(and(_IP_OR_DOMAIN, literal('tcp'), or(and(literal('443'), literal('http')), and(number(), literal('https'))), optional(peerId())), and(_IP_OR_DOMAIN, literal('tls'), literal('http'), optional(peerId())), and(_IP_OR_DOMAIN, literal('https'), optional(peerId())));\n/**\n * Matches HTTPS addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/tls/http')) // true\n * ```\n */\nconst HTTPS = fmt(_HTTPS);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/multiaddr-matcher/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@multiformats/multiaddr-to-uri/dist/src/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@multiformats/multiaddr-to-uri/dist/src/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   multiaddrToUri: () => (/* binding */ multiaddrToUri)\n/* harmony export */ });\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/**\n * @packageDocumentation\n *\n * This module allows easy conversion of Multiaddrs to string URIs.\n *\n * @example Converting multiaddrs to string URIs\n *\n * ```js\n * import { multiaddrToUri } from '@multiformats/multiaddr-to-uri'\n *\n * console.log(multiaddrToUri('/dnsaddr/protocol.ai/https'))\n * // -> https://protocol.ai\n *\n * console.log(multiaddrToUri('/ip4/127.0.0.1/tcp/8080'))\n * // -> http://127.0.0.1:8080\n *\n * console.log(multiaddrToUri('/ip4/127.0.0.1/tcp/8080', { assumeHttp: false }))\n * // -> tcp://127.0.0.1:8080\n * ```\n *\n * Note:\n *\n * - When `/tcp` is the last (terminating) protocol HTTP is assumed by default (implicit `assumeHttp: true`)\n *   - this means produced URIs will start with `http://` instead of `tcp://`\n *   - passing `{ assumeHttp: false }` disables this behavior\n * - Might be lossy - e.g. a DNSv6 multiaddr\n * - Can throw if the passed multiaddr:\n *   - is not a valid multiaddr\n *   - is not supported as a URI e.g. circuit\n */\n\nconst ASSUME_HTTP_CODES = [\n    (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)('tcp').code,\n    (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)('dns').code,\n    (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)('dnsaddr').code,\n    (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)('dns4').code,\n    (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)('dns6').code\n];\nfunction extractSNI(ma) {\n    let sniProtoCode;\n    try {\n        sniProtoCode = (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)('sni').code;\n    }\n    catch (e) {\n        // No SNI protocol in multiaddr\n        return null;\n    }\n    for (const [proto, value] of ma) {\n        if (proto === sniProtoCode && value !== undefined) {\n            return value;\n        }\n    }\n    return null;\n}\nfunction hasTLS(ma) {\n    return ma.some(([proto, _]) => proto === (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)('tls').code);\n}\nfunction interpretNext(headProtoCode, headProtoVal, restMa) {\n    const interpreter = interpreters[(0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)(headProtoCode).name];\n    if (interpreter === undefined) {\n        throw new Error(`Can't interpret protocol ${(0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)(headProtoCode).name}`);\n    }\n    const restVal = interpreter(headProtoVal, restMa);\n    if (headProtoCode === (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)('ip6').code) {\n        return `[${restVal}]`;\n    }\n    return restVal;\n}\nconst interpreters = {\n    ip4: (value, restMa) => value,\n    ip6: (value, restMa) => {\n        if (restMa.length === 0) {\n            return value;\n        }\n        return `[${value}]`;\n    },\n    tcp: (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return `tcp://${interpretNext(tailProto[0], tailProto[1] ?? '', restMa)}:${value}`;\n    },\n    udp: (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return `udp://${interpretNext(tailProto[0], tailProto[1] ?? '', restMa)}:${value}`;\n    },\n    dnsaddr: (value, restMa) => value,\n    dns4: (value, restMa) => value,\n    dns6: (value, restMa) => value,\n    dns: (value, restMa) => value,\n    ipfs: (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return `${interpretNext(tailProto[0], tailProto[1] ?? '', restMa)}/ipfs/${value}`;\n    },\n    p2p: (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return `${interpretNext(tailProto[0], tailProto[1] ?? '', restMa)}/p2p/${value}`;\n    },\n    http: (value, restMa) => {\n        const maHasTLS = hasTLS(restMa);\n        const sni = extractSNI(restMa);\n        if (maHasTLS && sni !== null) {\n            return `https://${sni}`;\n        }\n        const protocol = maHasTLS ? 'https://' : 'http://';\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        let baseVal = interpretNext(tailProto[0], tailProto[1] ?? '', restMa);\n        // We are reinterpreting the base as http, so we need to remove the tcp:// if it's there\n        baseVal = baseVal.replace('tcp://', '');\n        return `${protocol}${baseVal}`;\n    },\n    tls: (value, restMa) => {\n        // Noop, the parent context knows that it's tls. We don't need to do\n        // anything here\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return interpretNext(tailProto[0], tailProto[1] ?? '', restMa);\n    },\n    sni: (value, restMa) => {\n        // Noop, the parent context uses the sni information, we don't need to do\n        // anything here\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return interpretNext(tailProto[0], tailProto[1] ?? '', restMa);\n    },\n    https: (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        let baseVal = interpretNext(tailProto[0], tailProto[1] ?? '', restMa);\n        // We are reinterpreting the base as http, so we need to remove the tcp:// if it's there\n        baseVal = baseVal.replace('tcp://', '');\n        return `https://${baseVal}`;\n    },\n    ws: (value, restMa) => {\n        const maHasTLS = hasTLS(restMa);\n        const sni = extractSNI(restMa);\n        if (maHasTLS && sni !== null) {\n            return `wss://${sni}`;\n        }\n        const protocol = maHasTLS ? 'wss://' : 'ws://';\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        let baseVal = interpretNext(tailProto[0], tailProto[1] ?? '', restMa);\n        // We are reinterpreting the base, so we need to remove the tcp:// if it's there\n        baseVal = baseVal.replace('tcp://', '');\n        return `${protocol}${baseVal}`;\n    },\n    wss: (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        let baseVal = interpretNext(tailProto[0], tailProto[1] ?? '', restMa);\n        // We are reinterpreting the base as http, so we need to remove the tcp:// if it's there\n        baseVal = baseVal.replace('tcp://', '');\n        return `wss://${baseVal}`;\n    },\n    'p2p-websocket-star': (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return `${interpretNext(tailProto[0], tailProto[1] ?? '', restMa)}/p2p-websocket-star`;\n    },\n    'p2p-webrtc-star': (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return `${interpretNext(tailProto[0], tailProto[1] ?? '', restMa)}/p2p-webrtc-star`;\n    },\n    'p2p-webrtc-direct': (value, restMa) => {\n        const tailProto = restMa.pop();\n        if (tailProto === undefined) {\n            throw new Error('Unexpected end of multiaddr');\n        }\n        return `${interpretNext(tailProto[0], tailProto[1] ?? '', restMa)}/p2p-webrtc-direct`;\n    }\n};\nfunction multiaddrToUri(input, opts) {\n    const ma = (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(input);\n    const parts = ma.stringTuples();\n    const head = parts.pop();\n    if (head === undefined) {\n        throw new Error('Unexpected end of multiaddr');\n    }\n    const protocol = (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.protocols)(head[0]);\n    const interpreter = interpreters[protocol.name];\n    if (interpreter == null) {\n        throw new Error(`No interpreter found for ${protocol.name}`);\n    }\n    let uri = interpreter(head[1] ?? '', parts);\n    if (opts?.assumeHttp !== false && ASSUME_HTTP_CODES.includes(head[0])) {\n        // strip any declared protocol\n        uri = uri.replace(/^.*:\\/\\//, '');\n        if (head[1] === '443') {\n            uri = `https://${uri}`;\n        }\n        else {\n            uri = `http://${uri}`;\n        }\n    }\n    if (uri.startsWith('http://') || uri.startsWith('https://')) {\n        // this will strip default ports while keeping paths intact\n        uri = new URL(uri).toString();\n        // strip trailing slash, e.g. http://127.0.0.1/ -> http://127.0.0.1\n        if (uri.endsWith('/')) {\n            uri = uri.substring(0, uri.length - 1);\n        }\n    }\n    return uri;\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/multiaddr-to-uri/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@multiformats/multiaddr/dist/src/codec.js":
/*!****************************************************************!*\
  !*** ./node_modules/@multiformats/multiaddr/dist/src/codec.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParseError: () => (/* binding */ ParseError),\n/* harmony export */   bytesToMultiaddrParts: () => (/* binding */ bytesToMultiaddrParts),\n/* harmony export */   bytesToTuples: () => (/* binding */ bytesToTuples),\n/* harmony export */   cleanPath: () => (/* binding */ cleanPath),\n/* harmony export */   stringToMultiaddrParts: () => (/* binding */ stringToMultiaddrParts),\n/* harmony export */   tuplesToBytes: () => (/* binding */ tuplesToBytes)\n/* harmony export */ });\n/* harmony import */ var uint8_varint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8-varint */ \"./node_modules/uint8-varint/dist/src/index.js\");\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/concat */ \"./node_modules/uint8arrays/dist/src/concat.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _convert_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./convert.js */ \"./node_modules/@multiformats/multiaddr/dist/src/convert.js\");\n/* harmony import */ var _protocols_table_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./protocols-table.js */ \"./node_modules/@multiformats/multiaddr/dist/src/protocols-table.js\");\n\n\n\n\n\nfunction stringToMultiaddrParts(str) {\n    str = cleanPath(str);\n    const tuples = [];\n    const stringTuples = [];\n    let path = null;\n    const parts = str.split('/').slice(1);\n    if (parts.length === 1 && parts[0] === '') {\n        return {\n            bytes: new Uint8Array(),\n            string: '/',\n            tuples: [],\n            stringTuples: [],\n            path: null\n        };\n    }\n    for (let p = 0; p < parts.length; p++) {\n        const part = parts[p];\n        const proto = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_4__.getProtocol)(part);\n        if (proto.size === 0) {\n            tuples.push([proto.code]);\n            stringTuples.push([proto.code]);\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        p++; // advance addr part\n        if (p >= parts.length) {\n            throw ParseError('invalid address: ' + str);\n        }\n        // if it's a path proto, take the rest\n        if (proto.path === true) {\n            // should we need to check each path part to see if it's a proto?\n            // This would allow for other protocols to be added after a unix path,\n            // however it would have issues if the path had a protocol name in the path\n            path = cleanPath(parts.slice(p).join('/'));\n            tuples.push([proto.code, (0,_convert_js__WEBPACK_IMPORTED_MODULE_3__.convertToBytes)(proto.code, path)]);\n            stringTuples.push([proto.code, path]);\n            break;\n        }\n        const bytes = (0,_convert_js__WEBPACK_IMPORTED_MODULE_3__.convertToBytes)(proto.code, parts[p]);\n        tuples.push([proto.code, bytes]);\n        stringTuples.push([proto.code, (0,_convert_js__WEBPACK_IMPORTED_MODULE_3__.convertToString)(proto.code, bytes)]);\n    }\n    return {\n        string: stringTuplesToString(stringTuples),\n        bytes: tuplesToBytes(tuples),\n        tuples,\n        stringTuples,\n        path\n    };\n}\nfunction bytesToMultiaddrParts(bytes) {\n    const tuples = [];\n    const stringTuples = [];\n    let path = null;\n    let i = 0;\n    while (i < bytes.length) {\n        const code = uint8_varint__WEBPACK_IMPORTED_MODULE_0__.decode(bytes, i);\n        const n = uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encodingLength(code);\n        const p = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_4__.getProtocol)(code);\n        const size = sizeForAddr(p, bytes.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            stringTuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = bytes.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > bytes.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(bytes, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n        const stringAddr = (0,_convert_js__WEBPACK_IMPORTED_MODULE_3__.convertToString)(code, addr);\n        stringTuples.push([code, stringAddr]);\n        if (p.path === true) {\n            // should we need to check each path part to see if it's a proto?\n            // This would allow for other protocols to be added after a unix path,\n            // however it would have issues if the path had a protocol name in the path\n            path = stringAddr;\n            break;\n        }\n    }\n    return {\n        bytes: Uint8Array.from(bytes),\n        string: stringTuplesToString(stringTuples),\n        tuples,\n        stringTuples,\n        path\n    };\n}\n/**\n * [[str name, str addr]... ] -> string\n */\nfunction stringTuplesToString(tuples) {\n    const parts = [];\n    tuples.map((tup) => {\n        const proto = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_4__.getProtocol)(tup[0]);\n        parts.push(proto.name);\n        if (tup.length > 1 && tup[1] != null) {\n            parts.push(tup[1]);\n        }\n        return null;\n    });\n    return cleanPath(parts.join('/'));\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nfunction tuplesToBytes(tuples) {\n    return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_1__.concat)(tuples.map((tup) => {\n        const proto = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_4__.getProtocol)(tup[0]);\n        let buf = Uint8Array.from(uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encode(proto.code));\n        if (tup.length > 1 && tup[1] != null) {\n            buf = (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_1__.concat)([buf, tup[1]]); // add address buffer\n        }\n        return buf;\n    }));\n}\n/**\n * For the passed address, return the serialized size\n */\nfunction sizeForAddr(p, addr) {\n    if (p.size > 0) {\n        return p.size / 8;\n    }\n    else if (p.size === 0) {\n        return 0;\n    }\n    else {\n        const size = uint8_varint__WEBPACK_IMPORTED_MODULE_0__.decode(addr instanceof Uint8Array ? addr : Uint8Array.from(addr));\n        return size + uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encodingLength(size);\n    }\n}\nfunction bytesToTuples(buf) {\n    const tuples = [];\n    let i = 0;\n    while (i < buf.length) {\n        const code = uint8_varint__WEBPACK_IMPORTED_MODULE_0__.decode(buf, i);\n        const n = uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encodingLength(code);\n        const p = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_4__.getProtocol)(code);\n        const size = sizeForAddr(p, buf.slice(i + n));\n        if (size === 0) {\n            tuples.push([code]);\n            i += n;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        const addr = buf.slice(i + n, i + n + size);\n        i += (size + n);\n        if (i > buf.length) { // did not end _exactly_ at buffer.length\n            throw ParseError('Invalid address Uint8Array: ' + (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(buf, 'base16'));\n        }\n        // ok, tuple seems good.\n        tuples.push([code, addr]);\n    }\n    return tuples;\n}\nfunction cleanPath(str) {\n    return '/' + str.trim().split('/').filter((a) => a).join('/');\n}\nfunction ParseError(str) {\n    return new Error('Error parsing address: ' + str);\n}\n//# sourceMappingURL=codec.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/multiaddr/dist/src/codec.js?");

/***/ }),

/***/ "./node_modules/@multiformats/multiaddr/dist/src/convert.js":
/*!******************************************************************!*\
  !*** ./node_modules/@multiformats/multiaddr/dist/src/convert.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   convertToBytes: () => (/* binding */ convertToBytes),\n/* harmony export */   convertToIpNet: () => (/* binding */ convertToIpNet),\n/* harmony export */   convertToString: () => (/* binding */ convertToString)\n/* harmony export */ });\n/* harmony import */ var _chainsafe_netmask__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chainsafe/netmask */ \"./node_modules/@chainsafe/netmask/dist/src/index.js\");\n/* harmony import */ var multiformats_bases_base32__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/bases/base32 */ \"./node_modules/multiformats/dist/src/bases/base32.js\");\n/* harmony import */ var multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! multiformats/bases/base58 */ \"./node_modules/multiformats/dist/src/bases/base58.js\");\n/* harmony import */ var multiformats_basics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! multiformats/basics */ \"./node_modules/multiformats/dist/src/basics.js\");\n/* harmony import */ var multiformats_cid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! multiformats/cid */ \"./node_modules/multiformats/dist/src/cid.js\");\n/* harmony import */ var multiformats_hashes_digest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! multiformats/hashes/digest */ \"./node_modules/multiformats/dist/src/hashes/digest.js\");\n/* harmony import */ var uint8_varint__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uint8-varint */ \"./node_modules/uint8-varint/dist/src/index.js\");\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! uint8arrays/concat */ \"./node_modules/uint8arrays/dist/src/concat.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _ip_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ip.js */ \"./node_modules/@multiformats/multiaddr/dist/src/ip.js\");\n/* harmony import */ var _protocols_table_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./protocols-table.js */ \"./node_modules/@multiformats/multiaddr/dist/src/protocols-table.js\");\n/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\n\n\n\n\n\n\n\n\n\n\n\n\nconst ip4Protocol = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_11__.getProtocol)('ip4');\nconst ip6Protocol = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_11__.getProtocol)('ip6');\nconst ipcidrProtocol = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_11__.getProtocol)('ipcidr');\nfunction convert(proto, a) {\n    if (a instanceof Uint8Array) {\n        return convertToString(proto, a);\n    }\n    else {\n        return convertToBytes(proto, a);\n    }\n}\n/**\n * Convert [code,Uint8Array] to string\n */\nfunction convertToString(proto, buf) {\n    const protocol = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_11__.getProtocol)(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n        case 41: // ipv6\n            return bytes2ip(buf);\n        case 42: // ipv6zone\n            return bytes2str(buf);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return bytes2port(buf).toString();\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return bytes2str(buf);\n        case 421: // ipfs\n            return bytes2mh(buf);\n        case 444: // onion\n            return bytes2onion(buf);\n        case 445: // onion3\n            return bytes2onion(buf);\n        case 466: // certhash\n            return bytes2mb(buf);\n        default:\n            return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_9__.toString)(buf, 'base16'); // no clue. convert to hex\n    }\n}\nfunction convertToBytes(proto, str) {\n    const protocol = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_11__.getProtocol)(proto);\n    switch (protocol.code) {\n        case 4: // ipv4\n            return ip2bytes(str);\n        case 41: // ipv6\n            return ip2bytes(str);\n        case 42: // ipv6zone\n            return str2bytes(str);\n        case 6: // tcp\n        case 273: // udp\n        case 33: // dccp\n        case 132: // sctp\n            return port2bytes(parseInt(str, 10));\n        case 53: // dns\n        case 54: // dns4\n        case 55: // dns6\n        case 56: // dnsaddr\n        case 400: // unix\n        case 449: // sni\n        case 777: // memory\n            return str2bytes(str);\n        case 421: // ipfs\n            return mh2bytes(str);\n        case 444: // onion\n            return onion2bytes(str);\n        case 445: // onion3\n            return onion32bytes(str);\n        case 466: // certhash\n            return mb2bytes(str);\n        default:\n            return (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_8__.fromString)(str, 'base16'); // no clue. convert from hex\n    }\n}\nfunction convertToIpNet(multiaddr) {\n    let mask;\n    let addr;\n    multiaddr.stringTuples().forEach(([code, value]) => {\n        if (code === ip4Protocol.code || code === ip6Protocol.code) {\n            addr = value;\n        }\n        if (code === ipcidrProtocol.code) {\n            mask = value;\n        }\n    });\n    if (mask == null || addr == null) {\n        throw new Error('Invalid multiaddr');\n    }\n    return new _chainsafe_netmask__WEBPACK_IMPORTED_MODULE_0__.IpNet(addr, mask);\n}\nconst decoders = Object.values(multiformats_basics__WEBPACK_IMPORTED_MODULE_3__.bases).map((c) => c.decoder);\nconst anybaseDecoder = (function () {\n    let acc = decoders[0].or(decoders[1]);\n    decoders.slice(2).forEach((d) => (acc = acc.or(d)));\n    return acc;\n})();\nfunction ip2bytes(ipString) {\n    if (!_ip_js__WEBPACK_IMPORTED_MODULE_10__.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return _ip_js__WEBPACK_IMPORTED_MODULE_10__.toBytes(ipString);\n}\nfunction bytes2ip(ipBuff) {\n    const ipString = _ip_js__WEBPACK_IMPORTED_MODULE_10__.toString(ipBuff, 0, ipBuff.length);\n    if (ipString == null) {\n        throw new Error('ipBuff is required');\n    }\n    if (!_ip_js__WEBPACK_IMPORTED_MODULE_10__.isIP(ipString)) {\n        throw new Error('invalid ip address');\n    }\n    return ipString;\n}\nfunction port2bytes(port) {\n    const buf = new ArrayBuffer(2);\n    const view = new DataView(buf);\n    view.setUint16(0, port);\n    return new Uint8Array(buf);\n}\nfunction bytes2port(buf) {\n    const view = new DataView(buf.buffer);\n    return view.getUint16(buf.byteOffset);\n}\nfunction str2bytes(str) {\n    const buf = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_8__.fromString)(str);\n    const size = Uint8Array.from(uint8_varint__WEBPACK_IMPORTED_MODULE_6__.encode(buf.length));\n    return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_7__.concat)([size, buf], size.length + buf.length);\n}\nfunction bytes2str(buf) {\n    const size = uint8_varint__WEBPACK_IMPORTED_MODULE_6__.decode(buf);\n    buf = buf.slice(uint8_varint__WEBPACK_IMPORTED_MODULE_6__.encodingLength(size));\n    if (buf.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_9__.toString)(buf);\n}\nfunction mh2bytes(hash) {\n    let mh;\n    if (hash[0] === 'Q' || hash[0] === '1') {\n        mh = multiformats_hashes_digest__WEBPACK_IMPORTED_MODULE_5__.decode(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_2__.base58btc.decode(`z${hash}`)).bytes;\n    }\n    else {\n        mh = multiformats_cid__WEBPACK_IMPORTED_MODULE_4__.CID.parse(hash).multihash.bytes;\n    }\n    // the address is a varint prefixed multihash string representation\n    const size = Uint8Array.from(uint8_varint__WEBPACK_IMPORTED_MODULE_6__.encode(mh.length));\n    return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_7__.concat)([size, mh], size.length + mh.length);\n}\nfunction mb2bytes(mbstr) {\n    const mb = anybaseDecoder.decode(mbstr);\n    const size = Uint8Array.from(uint8_varint__WEBPACK_IMPORTED_MODULE_6__.encode(mb.length));\n    return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_7__.concat)([size, mb], size.length + mb.length);\n}\nfunction bytes2mb(buf) {\n    const size = uint8_varint__WEBPACK_IMPORTED_MODULE_6__.decode(buf);\n    const hash = buf.slice(uint8_varint__WEBPACK_IMPORTED_MODULE_6__.encodingLength(size));\n    if (hash.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return 'u' + (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_9__.toString)(hash, 'base64url');\n}\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh(buf) {\n    const size = uint8_varint__WEBPACK_IMPORTED_MODULE_6__.decode(buf);\n    const address = buf.slice(uint8_varint__WEBPACK_IMPORTED_MODULE_6__.encodingLength(size));\n    if (address.length !== size) {\n        throw new Error('inconsistent lengths');\n    }\n    return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_9__.toString)(address, 'base58btc');\n}\nfunction onion2bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 16) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = multiformats_bases_base32__WEBPACK_IMPORTED_MODULE_1__.base32.decode('b' + addr[0]);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_7__.concat)([buf, portBuf], buf.length + portBuf.length);\n}\nfunction onion32bytes(str) {\n    const addr = str.split(':');\n    if (addr.length !== 2) {\n        throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n    }\n    if (addr[0].length !== 56) {\n        throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);\n    }\n    // onion addresses do not include the multibase prefix, add it before decoding\n    const buf = multiformats_bases_base32__WEBPACK_IMPORTED_MODULE_1__.base32.decode(`b${addr[0]}`);\n    // onion port number\n    const port = parseInt(addr[1], 10);\n    if (port < 1 || port > 65536) {\n        throw new Error('Port number is not in range(1, 65536)');\n    }\n    const portBuf = port2bytes(port);\n    return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_7__.concat)([buf, portBuf], buf.length + portBuf.length);\n}\nfunction bytes2onion(buf) {\n    const addrBytes = buf.slice(0, buf.length - 2);\n    const portBytes = buf.slice(buf.length - 2);\n    const addr = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_9__.toString)(addrBytes, 'base32');\n    const port = bytes2port(portBytes);\n    return `${addr}:${port}`;\n}\n//# sourceMappingURL=convert.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/multiaddr/dist/src/convert.js?");

/***/ }),

/***/ "./node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultiaddrFilter: () => (/* binding */ MultiaddrFilter)\n/* harmony export */ });\n/* harmony import */ var _convert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../convert.js */ \"./node_modules/@multiformats/multiaddr/dist/src/convert.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.js */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n\n\n/**\n * A utility class to determine if a Multiaddr contains another\n * multiaddr.\n *\n * This can be used with ipcidr ranges to determine if a given\n * multiaddr is in a ipcidr range.\n *\n * @example\n *\n * ```js\n * import { multiaddr, MultiaddrFilter } from '@multiformats/multiaddr'\n *\n * const range = multiaddr('/ip4/192.168.10.10/ipcidr/24')\n * const filter = new MultiaddrFilter(range)\n *\n * const input = multiaddr('/ip4/192.168.10.2/udp/60')\n * console.info(filter.contains(input)) // true\n * ```\n */\nclass MultiaddrFilter {\n    multiaddr;\n    netmask;\n    constructor(input) {\n        this.multiaddr = (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.multiaddr)(input);\n        this.netmask = (0,_convert_js__WEBPACK_IMPORTED_MODULE_0__.convertToIpNet)(this.multiaddr);\n    }\n    contains(input) {\n        if (input == null)\n            return false;\n        const m = (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.multiaddr)(input);\n        let ip;\n        for (const [code, value] of m.stringTuples()) {\n            if (code === 4 || code === 41) {\n                ip = value;\n                break;\n            }\n        }\n        if (ip === undefined)\n            return false;\n        return this.netmask.contains(ip);\n    }\n}\n//# sourceMappingURL=multiaddr-filter.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.js?");

/***/ }),

/***/ "./node_modules/@multiformats/multiaddr/dist/src/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@multiformats/multiaddr/dist/src/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultiaddrFilter: () => (/* reexport safe */ _filter_multiaddr_filter_js__WEBPACK_IMPORTED_MODULE_2__.MultiaddrFilter),\n/* harmony export */   fromNodeAddress: () => (/* binding */ fromNodeAddress),\n/* harmony export */   isMultiaddr: () => (/* binding */ isMultiaddr),\n/* harmony export */   isName: () => (/* binding */ isName),\n/* harmony export */   multiaddr: () => (/* binding */ multiaddr),\n/* harmony export */   protocols: () => (/* reexport safe */ _protocols_table_js__WEBPACK_IMPORTED_MODULE_1__.getProtocol),\n/* harmony export */   resolvers: () => (/* binding */ resolvers)\n/* harmony export */ });\n/* harmony import */ var _multiaddr_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./multiaddr.js */ \"./node_modules/@multiformats/multiaddr/dist/src/multiaddr.js\");\n/* harmony import */ var _protocols_table_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./protocols-table.js */ \"./node_modules/@multiformats/multiaddr/dist/src/protocols-table.js\");\n/* harmony import */ var _filter_multiaddr_filter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./filter/multiaddr-filter.js */ \"./node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.js\");\n/**\n * @packageDocumentation\n *\n * A standard way to represent addresses that\n *\n * - support any standard network protocol\n * - are self-describing\n * - have a binary packed format\n * - have a nice string representation\n * - encapsulate well\n *\n * @example\n *\n * ```TypeScript\n * import { multiaddr } from '@multiformats/multiaddr'\n * const addr =  multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n * // Multiaddr(/ip4/127.0.0.1/udp/1234)\n *\n * const addr = multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n * // Multiaddr(/ip4/127.0.0.1/udp/1234)\n *\n * addr.bytes\n * // <Uint8Array 04 7f 00 00 01 11 04 d2>\n *\n * addr.toString()\n * // '/ip4/127.0.0.1/udp/1234'\n *\n * addr.protos()\n * // [\n * //   {code: 4, name: 'ip4', size: 32},\n * //   {code: 273, name: 'udp', size: 16}\n * // ]\n *\n * // gives you an object that is friendly with what Node.js core modules expect for addresses\n * addr.nodeAddress()\n * // {\n * //   family: 4,\n * //   port: 1234,\n * //   address: \"127.0.0.1\"\n * // }\n *\n * addr.encapsulate('/sctp/5678')\n * // Multiaddr(/ip4/127.0.0.1/udp/1234/sctp/5678)\n * ```\n *\n * ## Resolving DNSADDR addresses\n *\n * [DNSADDR](https://github.com/multiformats/multiaddr/blob/master/protocols/DNSADDR.md) is a spec that allows storing a TXT DNS record that contains a Multiaddr.\n *\n * To resolve DNSADDR addresses, call the `.resolve()` function the multiaddr, optionally passing a `DNS` resolver.\n *\n * DNSADDR addresses can resolve to multiple multiaddrs, since there is no limit to the number of TXT records that can be stored.\n *\n * @example Resolving DNSADDR Multiaddrs\n *\n * ```TypeScript\n * import { multiaddr, resolvers } from '@multiformats/multiaddr'\n * import { dnsaddr } from '@multiformats/multiaddr/resolvers'\n *\n * resolvers.set('dnsaddr', dnsaddr)\n *\n * const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io')\n *\n * // resolve with a 5s timeout\n * const resolved = await ma.resolve({\n *   signal: AbortSignal.timeout(5000)\n * })\n *\n * console.info(await ma.resolve(resolved)\n * // [Multiaddr('/ip4/147.75...'), Multiaddr('/ip4/147.75...'), Multiaddr('/ip4/147.75...')...]\n * ```\n *\n * @example Using a custom DNS resolver to resolve DNSADDR Multiaddrs\n *\n * See the docs for [@multiformats/dns](https://www.npmjs.com/package/@multiformats/dns) for a full breakdown of how to specify multiple resolvers or resolvers that can be used for specific TLDs.\n *\n * ```TypeScript\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { dns } from '@multiformats/dns'\n * import { dnsJsonOverHttps } from '@multiformats/dns/resolvers'\n *\n * const resolver = dns({\n *   '.': dnsJsonOverHttps('https://cloudflare-dns.com/dns-query')\n * })\n *\n * const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io')\n * const resolved = await ma.resolve({\n *  dns: resolver\n * })\n *\n * console.info(resolved)\n * // [Multiaddr('/ip4/147.75...'), Multiaddr('/ip4/147.75...'), Multiaddr('/ip4/147.75...')...]\n * ```\n */\n\n\n/**\n * All configured {@link Resolver}s\n */\nconst resolvers = new Map();\n\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nfunction fromNodeAddress(addr, transport) {\n    if (addr == null) {\n        throw new Error('requires node address object');\n    }\n    if (transport == null) {\n        throw new Error('requires transport protocol');\n    }\n    let ip;\n    let host = addr.address;\n    switch (addr.family) {\n        case 4:\n            ip = 'ip4';\n            break;\n        case 6:\n            ip = 'ip6';\n            if (host.includes('%')) {\n                const parts = host.split('%');\n                if (parts.length !== 2) {\n                    throw Error('Multiple ip6 zones in multiaddr');\n                }\n                host = parts[0];\n                const zone = parts[1];\n                ip = `/ip6zone/${zone}/ip6`;\n            }\n            break;\n        default:\n            throw Error('Invalid addr family, should be 4 or 6.');\n    }\n    return new _multiaddr_js__WEBPACK_IMPORTED_MODULE_0__.Multiaddr('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nfunction isName(addr) {\n    if (!isMultiaddr(addr)) {\n        return false;\n    }\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nfunction isMultiaddr(value) {\n    return Boolean(value?.[_multiaddr_js__WEBPACK_IMPORTED_MODULE_0__.symbol]);\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nfunction multiaddr(addr) {\n    return new _multiaddr_js__WEBPACK_IMPORTED_MODULE_0__.Multiaddr(addr);\n}\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/multiaddr/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/@multiformats/multiaddr/dist/src/ip.js":
/*!*************************************************************!*\
  !*** ./node_modules/@multiformats/multiaddr/dist/src/ip.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isIP: () => (/* reexport safe */ _chainsafe_is_ip__WEBPACK_IMPORTED_MODULE_0__.isIP),\n/* harmony export */   isV4: () => (/* binding */ isV4),\n/* harmony export */   isV6: () => (/* binding */ isV6),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   toString: () => (/* binding */ toString)\n/* harmony export */ });\n/* harmony import */ var _chainsafe_is_ip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chainsafe/is-ip */ \"./node_modules/@chainsafe/is-ip/lib/is-ip.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n\n\n\nconst isV4 = _chainsafe_is_ip__WEBPACK_IMPORTED_MODULE_0__.isIPv4;\nconst isV6 = _chainsafe_is_ip__WEBPACK_IMPORTED_MODULE_0__.isIPv6;\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nconst toBytes = function (ip) {\n    let offset = 0;\n    ip = ip.toString().trim();\n    if (isV4(ip)) {\n        const bytes = new Uint8Array(offset + 4);\n        ip.split(/\\./g).forEach((byte) => {\n            bytes[offset++] = parseInt(byte, 10) & 0xff;\n        });\n        return bytes;\n    }\n    if (isV6(ip)) {\n        const sections = ip.split(':', 8);\n        let i;\n        for (i = 0; i < sections.length; i++) {\n            const isv4 = isV4(sections[i]);\n            let v4Buffer;\n            if (isv4) {\n                v4Buffer = toBytes(sections[i]);\n                sections[i] = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)(v4Buffer.slice(0, 2), 'base16');\n            }\n            if (v4Buffer != null && ++i < 8) {\n                sections.splice(i, 0, (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)(v4Buffer.slice(2, 4), 'base16'));\n            }\n        }\n        if (sections[0] === '') {\n            while (sections.length < 8)\n                sections.unshift('0');\n        }\n        else if (sections[sections.length - 1] === '') {\n            while (sections.length < 8)\n                sections.push('0');\n        }\n        else if (sections.length < 8) {\n            for (i = 0; i < sections.length && sections[i] !== ''; i++)\n                ;\n            const argv = [i, 1];\n            for (i = 9 - sections.length; i > 0; i--) {\n                argv.push('0');\n            }\n            sections.splice.apply(sections, argv);\n        }\n        const bytes = new Uint8Array(offset + 16);\n        for (i = 0; i < sections.length; i++) {\n            const word = parseInt(sections[i], 16);\n            bytes[offset++] = (word >> 8) & 0xff;\n            bytes[offset++] = word & 0xff;\n        }\n        return bytes;\n    }\n    throw new Error('invalid ip address');\n};\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nconst toString = function (buf, offset = 0, length) {\n    offset = ~~offset;\n    length = length ?? (buf.length - offset);\n    const view = new DataView(buf.buffer);\n    if (length === 4) {\n        const result = [];\n        // IPv4\n        for (let i = 0; i < length; i++) {\n            result.push(buf[offset + i]);\n        }\n        return result.join('.');\n    }\n    if (length === 16) {\n        const result = [];\n        // IPv6\n        for (let i = 0; i < length; i += 2) {\n            result.push(view.getUint16(offset + i).toString(16));\n        }\n        return result.join(':')\n            .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n            .replace(/:{3,4}/, '::');\n    }\n    return '';\n};\n//# sourceMappingURL=ip.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/multiaddr/dist/src/ip.js?");

/***/ }),

/***/ "./node_modules/@multiformats/multiaddr/dist/src/multiaddr.js":
/*!********************************************************************!*\
  !*** ./node_modules/@multiformats/multiaddr/dist/src/multiaddr.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Multiaddr: () => (/* binding */ Multiaddr),\n/* harmony export */   symbol: () => (/* binding */ symbol)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/bases/base58 */ \"./node_modules/multiformats/dist/src/bases/base58.js\");\n/* harmony import */ var multiformats_cid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/cid */ \"./node_modules/multiformats/dist/src/cid.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _codec_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./codec.js */ \"./node_modules/@multiformats/multiaddr/dist/src/codec.js\");\n/* harmony import */ var _protocols_table_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./protocols-table.js */ \"./node_modules/@multiformats/multiaddr/dist/src/protocols-table.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./index.js */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\n\n\n\n\n\n\n\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\nconst DNS_CODES = [\n    (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_5__.getProtocol)('dns').code,\n    (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_5__.getProtocol)('dns4').code,\n    (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_5__.getProtocol)('dns6').code,\n    (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_5__.getProtocol)('dnsaddr').code\n];\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nclass Multiaddr {\n    bytes;\n    #string;\n    #tuples;\n    #stringTuples;\n    #path;\n    [symbol] = true;\n    constructor(addr) {\n        // default\n        if (addr == null) {\n            addr = '';\n        }\n        let parts;\n        if (addr instanceof Uint8Array) {\n            parts = (0,_codec_js__WEBPACK_IMPORTED_MODULE_4__.bytesToMultiaddrParts)(addr);\n        }\n        else if (typeof addr === 'string') {\n            if (addr.length > 0 && addr.charAt(0) !== '/') {\n                throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n            }\n            parts = (0,_codec_js__WEBPACK_IMPORTED_MODULE_4__.stringToMultiaddrParts)(addr);\n        }\n        else if ((0,_index_js__WEBPACK_IMPORTED_MODULE_6__.isMultiaddr)(addr)) { // Multiaddr\n            parts = (0,_codec_js__WEBPACK_IMPORTED_MODULE_4__.bytesToMultiaddrParts)(addr.bytes);\n        }\n        else {\n            throw new Error('addr must be a string, Buffer, or another Multiaddr');\n        }\n        this.bytes = parts.bytes;\n        this.#string = parts.string;\n        this.#tuples = parts.tuples;\n        this.#stringTuples = parts.stringTuples;\n        this.#path = parts.path;\n    }\n    toString() {\n        return this.#string;\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toOptions() {\n        let family;\n        let transport;\n        let host;\n        let port;\n        let zone = '';\n        const tcp = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_5__.getProtocol)('tcp');\n        const udp = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_5__.getProtocol)('udp');\n        const ip4 = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_5__.getProtocol)('ip4');\n        const ip6 = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_5__.getProtocol)('ip6');\n        const dns6 = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_5__.getProtocol)('dns6');\n        const ip6zone = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_5__.getProtocol)('ip6zone');\n        for (const [code, value] of this.stringTuples()) {\n            if (code === ip6zone.code) {\n                zone = `%${value ?? ''}`;\n            }\n            // default to https when protocol & port are omitted from DNS addrs\n            if (DNS_CODES.includes(code)) {\n                transport = tcp.name;\n                port = 443;\n                host = `${value ?? ''}${zone}`;\n                family = code === dns6.code ? 6 : 4;\n            }\n            if (code === tcp.code || code === udp.code) {\n                transport = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_5__.getProtocol)(code).name;\n                port = parseInt(value ?? '');\n            }\n            if (code === ip4.code || code === ip6.code) {\n                transport = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_5__.getProtocol)(code).name;\n                host = `${value ?? ''}${zone}`;\n                family = code === ip6.code ? 6 : 4;\n            }\n        }\n        if (family == null || transport == null || host == null || port == null) {\n            throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n        }\n        const opts = {\n            family,\n            host,\n            transport,\n            port\n        };\n        return opts;\n    }\n    protos() {\n        return this.#tuples.map(([code]) => Object.assign({}, (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_5__.getProtocol)(code)));\n    }\n    protoCodes() {\n        return this.#tuples.map(([code]) => code);\n    }\n    protoNames() {\n        return this.#tuples.map(([code]) => (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_5__.getProtocol)(code).name);\n    }\n    tuples() {\n        return this.#tuples;\n    }\n    stringTuples() {\n        return this.#stringTuples;\n    }\n    encapsulate(addr) {\n        addr = new Multiaddr(addr);\n        return new Multiaddr(this.toString() + addr.toString());\n    }\n    decapsulate(addr) {\n        const addrString = addr.toString();\n        const s = this.toString();\n        const i = s.lastIndexOf(addrString);\n        if (i < 0) {\n            throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n        }\n        return new Multiaddr(s.slice(0, i));\n    }\n    decapsulateCode(code) {\n        const tuples = this.tuples();\n        for (let i = tuples.length - 1; i >= 0; i--) {\n            if (tuples[i][0] === code) {\n                return new Multiaddr((0,_codec_js__WEBPACK_IMPORTED_MODULE_4__.tuplesToBytes)(tuples.slice(0, i)));\n            }\n        }\n        return this;\n    }\n    getPeerId() {\n        try {\n            let tuples = [];\n            this.stringTuples().forEach(([code, name]) => {\n                if (code === _protocols_table_js__WEBPACK_IMPORTED_MODULE_5__.names.p2p.code) {\n                    tuples.push([code, name]);\n                }\n                // if this is a p2p-circuit address, return the target peer id if present\n                // not the peer id of the relay\n                if (code === _protocols_table_js__WEBPACK_IMPORTED_MODULE_5__.names['p2p-circuit'].code) {\n                    tuples = [];\n                }\n            });\n            // Get the last ipfs tuple ['p2p', 'peerid string']\n            const tuple = tuples.pop();\n            if (tuple?.[1] != null) {\n                const peerIdStr = tuple[1];\n                // peer id is base58btc encoded string but not multibase encoded so add the `z`\n                // prefix so we can validate that it is correctly encoded\n                if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n                    return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_3__.toString)(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc.decode(`z${peerIdStr}`), 'base58btc');\n                }\n                // try to parse peer id as CID\n                return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_3__.toString)(multiformats_cid__WEBPACK_IMPORTED_MODULE_1__.CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n            }\n            return null;\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    getPath() {\n        return this.#path;\n    }\n    equals(addr) {\n        return (0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_2__.equals)(this.bytes, addr.bytes);\n    }\n    async resolve(options) {\n        const resolvableProto = this.protos().find((p) => p.resolvable);\n        // Multiaddr is not resolvable?\n        if (resolvableProto == null) {\n            return [this];\n        }\n        const resolver = _index_js__WEBPACK_IMPORTED_MODULE_6__.resolvers.get(resolvableProto.name);\n        if (resolver == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_7__.CodeError(`no available resolver for ${resolvableProto.name}`, 'ERR_NO_AVAILABLE_RESOLVER');\n        }\n        const result = await resolver(this, options);\n        return result.map(str => (0,_index_js__WEBPACK_IMPORTED_MODULE_6__.multiaddr)(str));\n    }\n    nodeAddress() {\n        const options = this.toOptions();\n        if (options.transport !== 'tcp' && options.transport !== 'udp') {\n            throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n        }\n        return {\n            family: options.family,\n            address: options.host,\n            port: options.port\n        };\n    }\n    isThinWaistAddress(addr) {\n        const protos = (addr ?? this).protos();\n        if (protos.length !== 2) {\n            return false;\n        }\n        if (protos[0].code !== 4 && protos[0].code !== 41) {\n            return false;\n        }\n        if (protos[1].code !== 6 && protos[1].code !== 273) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Returns Multiaddr as a human-readable string\n     * https://nodejs.org/api/util.html#utilinspectcustom\n     *\n     * @example\n     * ```js\n     * import { multiaddr } from '@multiformats/multiaddr'\n     *\n     * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n     * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n     * ```\n     */\n    [inspect]() {\n        return `Multiaddr(${this.#string})`;\n    }\n}\n//# sourceMappingURL=multiaddr.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/multiaddr/dist/src/multiaddr.js?");

/***/ }),

/***/ "./node_modules/@multiformats/multiaddr/dist/src/protocols-table.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@multiformats/multiaddr/dist/src/protocols-table.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codes: () => (/* binding */ codes),\n/* harmony export */   createProtocol: () => (/* binding */ createProtocol),\n/* harmony export */   getProtocol: () => (/* binding */ getProtocol),\n/* harmony export */   names: () => (/* binding */ names),\n/* harmony export */   table: () => (/* binding */ table)\n/* harmony export */ });\nconst V = -1;\nconst names = {};\nconst codes = {};\nconst table = [\n    [4, 32, 'ip4'],\n    [6, 16, 'tcp'],\n    [33, 16, 'dccp'],\n    [41, 128, 'ip6'],\n    [42, V, 'ip6zone'],\n    [43, 8, 'ipcidr'],\n    [53, V, 'dns', true],\n    [54, V, 'dns4', true],\n    [55, V, 'dns6', true],\n    [56, V, 'dnsaddr', true],\n    [132, 16, 'sctp'],\n    [273, 16, 'udp'],\n    [275, 0, 'p2p-webrtc-star'],\n    [276, 0, 'p2p-webrtc-direct'],\n    [277, 0, 'p2p-stardust'],\n    [280, 0, 'webrtc-direct'],\n    [281, 0, 'webrtc'],\n    [290, 0, 'p2p-circuit'],\n    [301, 0, 'udt'],\n    [302, 0, 'utp'],\n    [400, V, 'unix', false, true],\n    // `ipfs` is added before `p2p` for legacy support.\n    // All text representations will default to `p2p`, but `ipfs` will\n    // still be supported\n    [421, V, 'ipfs'],\n    // `p2p` is the preferred name for 421, and is now the default\n    [421, V, 'p2p'],\n    [443, 0, 'https'],\n    [444, 96, 'onion'],\n    [445, 296, 'onion3'],\n    [446, V, 'garlic64'],\n    [448, 0, 'tls'],\n    [449, V, 'sni'],\n    [460, 0, 'quic'],\n    [461, 0, 'quic-v1'],\n    [465, 0, 'webtransport'],\n    [466, V, 'certhash'],\n    [477, 0, 'ws'],\n    [478, 0, 'wss'],\n    [479, 0, 'p2p-websocket-star'],\n    [480, 0, 'http'],\n    [777, V, 'memory']\n];\n// populate tables\ntable.forEach(row => {\n    const proto = createProtocol(...row);\n    codes[proto.code] = proto;\n    names[proto.name] = proto;\n});\nfunction createProtocol(code, size, name, resolvable, path) {\n    return {\n        code,\n        size,\n        name,\n        resolvable: Boolean(resolvable),\n        path: Boolean(path)\n    };\n}\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nfunction getProtocol(proto) {\n    if (typeof proto === 'number') {\n        if (codes[proto] != null) {\n            return codes[proto];\n        }\n        throw new Error(`no protocol with code: ${proto}`);\n    }\n    else if (typeof proto === 'string') {\n        if (names[proto] != null) {\n            return names[proto];\n        }\n        throw new Error(`no protocol with name: ${proto}`);\n    }\n    throw new Error(`invalid protocol id type: ${typeof proto}`);\n}\n//# sourceMappingURL=protocols-table.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/multiaddr/dist/src/protocols-table.js?");

/***/ }),

/***/ "./node_modules/@multiformats/multiaddr/dist/src/resolvers/dnsaddr.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@multiformats/multiaddr/dist/src/resolvers/dnsaddr.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dnsaddrResolver: () => (/* binding */ dnsaddrResolver)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _multiformats_dns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/dns */ \"./node_modules/@multiformats/dns/dist/src/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.js */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _protocols_table_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../protocols-table.js */ \"./node_modules/@multiformats/multiaddr/dist/src/protocols-table.js\");\n\n\n\n\nconst MAX_RECURSIVE_DEPTH = 32;\nconst { code: dnsaddrCode } = (0,_protocols_table_js__WEBPACK_IMPORTED_MODULE_2__.getProtocol)('dnsaddr');\nconst dnsaddrResolver = async function dnsaddrResolver(ma, options = {}) {\n    const recursionLimit = options.maxRecursiveDepth ?? MAX_RECURSIVE_DEPTH;\n    if (recursionLimit === 0) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Max recursive depth reached', 'ERR_MAX_RECURSIVE_DEPTH_REACHED');\n    }\n    const [, hostname] = ma.stringTuples().find(([proto]) => proto === dnsaddrCode) ?? [];\n    const resolver = options?.dns ?? (0,_multiformats_dns__WEBPACK_IMPORTED_MODULE_0__.dns)();\n    const result = await resolver.query(`_dnsaddr.${hostname}`, {\n        signal: options?.signal,\n        types: [\n            _multiformats_dns__WEBPACK_IMPORTED_MODULE_0__.RecordType.TXT\n        ]\n    });\n    const peerId = ma.getPeerId();\n    const output = [];\n    for (const answer of result.Answer) {\n        const addr = answer.data.split('=')[1];\n        if (addr == null) {\n            continue;\n        }\n        if (peerId != null && !addr.includes(peerId)) {\n            continue;\n        }\n        const ma = (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.multiaddr)(addr);\n        if (addr.startsWith('/dnsaddr')) {\n            const resolved = await ma.resolve({\n                ...options,\n                maxRecursiveDepth: recursionLimit - 1\n            });\n            output.push(...resolved.map(ma => ma.toString()));\n        }\n        else {\n            output.push(ma.toString());\n        }\n    }\n    return output;\n};\n//# sourceMappingURL=dnsaddr.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/multiaddr/dist/src/resolvers/dnsaddr.js?");

/***/ }),

/***/ "./node_modules/@multiformats/multiaddr/dist/src/resolvers/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@multiformats/multiaddr/dist/src/resolvers/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dnsaddrResolver: () => (/* reexport safe */ _dnsaddr_js__WEBPACK_IMPORTED_MODULE_0__.dnsaddrResolver)\n/* harmony export */ });\n/* harmony import */ var _dnsaddr_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dnsaddr.js */ \"./node_modules/@multiformats/multiaddr/dist/src/resolvers/dnsaddr.js\");\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@multiformats/multiaddr/dist/src/resolvers/index.js?");

/***/ }),

/***/ "./node_modules/@noble/ciphers/esm/_arx.js":
/*!*************************************************!*\
  !*** ./node_modules/@noble/ciphers/esm/_arx.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCipher: () => (/* binding */ createCipher),\n/* harmony export */   rotl: () => (/* binding */ rotl)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"./node_modules/@noble/ciphers/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@noble/ciphers/esm/utils.js\");\n// Basic utils for ARX (add-rotate-xor) salsa and chacha ciphers.\n\n\n/*\nRFC8439 requires multi-step cipher stream, where\nauthKey starts with counter: 0, actual msg with counter: 1.\n\nFor this, we need a way to re-use nonce / counter:\n\n    const counter = new Uint8Array(4);\n    chacha(..., counter, ...); // counter is now 1\n    chacha(..., counter, ...); // counter is now 2\n\nThis is complicated:\n\n- 32-bit counters are enough, no need for 64-bit: max ArrayBuffer size in JS is 4GB\n- Original papers don't allow mutating counters\n- Counter overflow is undefined [^1]\n- Idea A: allow providing (nonce | counter) instead of just nonce, re-use it\n- Caveat: Cannot be re-used through all cases:\n- * chacha has (counter | nonce)\n- * xchacha has (nonce16 | counter | nonce16)\n- Idea B: separate nonce / counter and provide separate API for counter re-use\n- Caveat: there are different counter sizes depending on an algorithm.\n- salsa & chacha also differ in structures of key & sigma:\n  salsa20:      s[0] | k(4) | s[1] | nonce(2) | ctr(2) | s[2] | k(4) | s[3]\n  chacha:       s(4) | k(8) | ctr(1) | nonce(3)\n  chacha20orig: s(4) | k(8) | ctr(2) | nonce(2)\n- Idea C: helper method such as `setSalsaState(key, nonce, sigma, data)`\n- Caveat: we can't re-use counter array\n\nxchacha [^2] uses the subkey and remaining 8 byte nonce with ChaCha20 as normal\n(prefixed by 4 NUL bytes, since [RFC8439] specifies a 12-byte nonce).\n\n[^1]: https://mailarchive.ietf.org/arch/msg/cfrg/gsOnTJzcbgG6OqD8Sc0GO5aR_tU/\n[^2]: https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha#appendix-A.2\n*/\nconst sigma16 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes)('expand 16-byte k');\nconst sigma32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.utf8ToBytes)('expand 32-byte k');\nconst sigma16_32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(sigma16);\nconst sigma32_32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(sigma32);\nfunction rotl(a, b) {\n    return (a << b) | (a >>> (32 - b));\n}\n// Is byte array aligned to 4 byte offset (u32)?\nfunction isAligned32(b) {\n    return b.byteOffset % 4 === 0;\n}\n// Salsa and Chacha block length is always 512-bit\nconst BLOCK_LEN = 64;\nconst BLOCK_LEN32 = 16;\n// new Uint32Array([2**32])   // => Uint32Array(1) [ 0 ]\n// new Uint32Array([2**32-1]) // => Uint32Array(1) [ 4294967295 ]\nconst MAX_COUNTER = 2 ** 32 - 1;\nconst U32_EMPTY = new Uint32Array();\nfunction runCipher(core, sigma, key, nonce, data, output, counter, rounds) {\n    const len = data.length;\n    const block = new Uint8Array(BLOCK_LEN);\n    const b32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(block);\n    // Make sure that buffers aligned to 4 bytes\n    const isAligned = isAligned32(data) && isAligned32(output);\n    const d32 = isAligned ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(data) : U32_EMPTY;\n    const o32 = isAligned ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(output) : U32_EMPTY;\n    for (let pos = 0; pos < len; counter++) {\n        core(sigma, key, nonce, b32, counter, rounds);\n        if (counter >= MAX_COUNTER)\n            throw new Error('arx: counter overflow');\n        const take = Math.min(BLOCK_LEN, len - pos);\n        // aligned to 4 bytes\n        if (isAligned && take === BLOCK_LEN) {\n            const pos32 = pos / 4;\n            if (pos % 4 !== 0)\n                throw new Error('arx: invalid block position');\n            for (let j = 0, posj; j < BLOCK_LEN32; j++) {\n                posj = pos32 + j;\n                o32[posj] = d32[posj] ^ b32[j];\n            }\n            pos += BLOCK_LEN;\n            continue;\n        }\n        for (let j = 0, posj; j < take; j++) {\n            posj = pos + j;\n            output[posj] = data[posj] ^ block[j];\n        }\n        pos += take;\n    }\n}\nfunction createCipher(core, opts) {\n    const { allowShortKeys, extendNonceFn, counterLength, counterRight, rounds } = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.checkOpts)({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, opts);\n    if (typeof core !== 'function')\n        throw new Error('core must be a function');\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.number)(counterLength);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.number)(rounds);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bool)(counterRight);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bool)(allowShortKeys);\n    return (key, nonce, data, output, counter = 0) => {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(key);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(nonce);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(data);\n        const len = data.length;\n        if (!output)\n            output = new Uint8Array(len);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(output);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.number)(counter);\n        if (counter < 0 || counter >= MAX_COUNTER)\n            throw new Error('arx: counter overflow');\n        if (output.length < len)\n            throw new Error(`arx: output (${output.length}) is shorter than data (${len})`);\n        const toClean = [];\n        // Key & sigma\n        // key=16 -> sigma16, k=key|key\n        // key=32 -> sigma32, k=key\n        let l = key.length, k, sigma;\n        if (l === 32) {\n            k = key.slice();\n            toClean.push(k);\n            sigma = sigma32_32;\n        }\n        else if (l === 16 && allowShortKeys) {\n            k = new Uint8Array(32);\n            k.set(key);\n            k.set(key, 16);\n            sigma = sigma16_32;\n            toClean.push(k);\n        }\n        else {\n            throw new Error(`arx: invalid 32-byte key, got length=${l}`);\n        }\n        // Nonce\n        // salsa20:      8   (8-byte counter)\n        // chacha20orig: 8   (8-byte counter)\n        // chacha20:     12  (4-byte counter)\n        // xsalsa20:     24  (16 -> hsalsa,  8 -> old nonce)\n        // xchacha20:    24  (16 -> hchacha, 8 -> old nonce)\n        // Align nonce to 4 bytes\n        if (!isAligned32(nonce)) {\n            nonce = nonce.slice();\n            toClean.push(nonce);\n        }\n        const k32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(k);\n        // hsalsa & hchacha: handle extended nonce\n        if (extendNonceFn) {\n            if (nonce.length !== 24)\n                throw new Error(`arx: extended nonce must be 24 bytes`);\n            extendNonceFn(sigma, k32, (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(nonce.subarray(0, 16)), k32);\n            nonce = nonce.subarray(16);\n        }\n        // Handle nonce counter\n        const nonceNcLen = 16 - counterLength;\n        if (nonceNcLen !== nonce.length)\n            throw new Error(`arx: nonce must be ${nonceNcLen} or 16 bytes`);\n        // Pad counter when nonce is 64 bit\n        if (nonceNcLen !== 12) {\n            const nc = new Uint8Array(12);\n            nc.set(nonce, counterRight ? 0 : 12 - nonce.length);\n            nonce = nc;\n            toClean.push(nonce);\n        }\n        const n32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(nonce);\n        runCipher(core, sigma, k32, n32, data, output, counter, rounds);\n        while (toClean.length > 0)\n            toClean.pop().fill(0);\n        return output;\n    };\n}\n//# sourceMappingURL=_arx.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/ciphers/esm/_arx.js?");

/***/ }),

/***/ "./node_modules/@noble/ciphers/esm/_assert.js":
/*!****************************************************!*\
  !*** ./node_modules/@noble/ciphers/esm/_assert.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bool: () => (/* binding */ bool),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   output: () => (/* binding */ output)\n/* harmony export */ });\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// TODO: merge with utils\nfunction isBytes(a) {\n    return (a != null &&\n        typeof a === 'object' &&\n        (a instanceof Uint8Array || a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('hash must be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\n\nconst assert = { number, bool, bytes, hash, exists, output };\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assert);\n//# sourceMappingURL=_assert.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/ciphers/esm/_assert.js?");

/***/ }),

/***/ "./node_modules/@noble/ciphers/esm/_poly1305.js":
/*!******************************************************!*\
  !*** ./node_modules/@noble/ciphers/esm/_poly1305.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   poly1305: () => (/* binding */ poly1305),\n/* harmony export */   wrapConstructorWithKey: () => (/* binding */ wrapConstructorWithKey)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"./node_modules/@noble/ciphers/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@noble/ciphers/esm/utils.js\");\n\n\n// Poly1305 is a fast and parallel secret-key message-authentication code.\n// https://cr.yp.to/mac.html, https://cr.yp.to/mac/poly1305-20050329.pdf\n// https://datatracker.ietf.org/doc/html/rfc8439\n// Based on Public Domain poly1305-donna https://github.com/floodyberry/poly1305-donna\nconst u8to16 = (a, i) => (a[i++] & 0xff) | ((a[i++] & 0xff) << 8);\nclass Poly1305 {\n    constructor(key) {\n        this.blockLen = 16;\n        this.outputLen = 16;\n        this.buffer = new Uint8Array(16);\n        this.r = new Uint16Array(10);\n        this.h = new Uint16Array(10);\n        this.pad = new Uint16Array(8);\n        this.pos = 0;\n        this.finished = false;\n        key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(key);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)(key, 32);\n        const t0 = u8to16(key, 0);\n        const t1 = u8to16(key, 2);\n        const t2 = u8to16(key, 4);\n        const t3 = u8to16(key, 6);\n        const t4 = u8to16(key, 8);\n        const t5 = u8to16(key, 10);\n        const t6 = u8to16(key, 12);\n        const t7 = u8to16(key, 14);\n        // https://github.com/floodyberry/poly1305-donna/blob/e6ad6e091d30d7f4ec2d4f978be1fcfcbce72781/poly1305-donna-16.h#L47\n        this.r[0] = t0 & 0x1fff;\n        this.r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;\n        this.r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;\n        this.r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;\n        this.r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;\n        this.r[5] = (t4 >>> 1) & 0x1ffe;\n        this.r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;\n        this.r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;\n        this.r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;\n        this.r[9] = (t7 >>> 5) & 0x007f;\n        for (let i = 0; i < 8; i++)\n            this.pad[i] = u8to16(key, 16 + 2 * i);\n    }\n    process(data, offset, isLast = false) {\n        const hibit = isLast ? 0 : 1 << 11;\n        const { h, r } = this;\n        const r0 = r[0];\n        const r1 = r[1];\n        const r2 = r[2];\n        const r3 = r[3];\n        const r4 = r[4];\n        const r5 = r[5];\n        const r6 = r[6];\n        const r7 = r[7];\n        const r8 = r[8];\n        const r9 = r[9];\n        const t0 = u8to16(data, offset + 0);\n        const t1 = u8to16(data, offset + 2);\n        const t2 = u8to16(data, offset + 4);\n        const t3 = u8to16(data, offset + 6);\n        const t4 = u8to16(data, offset + 8);\n        const t5 = u8to16(data, offset + 10);\n        const t6 = u8to16(data, offset + 12);\n        const t7 = u8to16(data, offset + 14);\n        let h0 = h[0] + (t0 & 0x1fff);\n        let h1 = h[1] + (((t0 >>> 13) | (t1 << 3)) & 0x1fff);\n        let h2 = h[2] + (((t1 >>> 10) | (t2 << 6)) & 0x1fff);\n        let h3 = h[3] + (((t2 >>> 7) | (t3 << 9)) & 0x1fff);\n        let h4 = h[4] + (((t3 >>> 4) | (t4 << 12)) & 0x1fff);\n        let h5 = h[5] + ((t4 >>> 1) & 0x1fff);\n        let h6 = h[6] + (((t4 >>> 14) | (t5 << 2)) & 0x1fff);\n        let h7 = h[7] + (((t5 >>> 11) | (t6 << 5)) & 0x1fff);\n        let h8 = h[8] + (((t6 >>> 8) | (t7 << 8)) & 0x1fff);\n        let h9 = h[9] + ((t7 >>> 5) | hibit);\n        let c = 0;\n        let d0 = c + h0 * r0 + h1 * (5 * r9) + h2 * (5 * r8) + h3 * (5 * r7) + h4 * (5 * r6);\n        c = d0 >>> 13;\n        d0 &= 0x1fff;\n        d0 += h5 * (5 * r5) + h6 * (5 * r4) + h7 * (5 * r3) + h8 * (5 * r2) + h9 * (5 * r1);\n        c += d0 >>> 13;\n        d0 &= 0x1fff;\n        let d1 = c + h0 * r1 + h1 * r0 + h2 * (5 * r9) + h3 * (5 * r8) + h4 * (5 * r7);\n        c = d1 >>> 13;\n        d1 &= 0x1fff;\n        d1 += h5 * (5 * r6) + h6 * (5 * r5) + h7 * (5 * r4) + h8 * (5 * r3) + h9 * (5 * r2);\n        c += d1 >>> 13;\n        d1 &= 0x1fff;\n        let d2 = c + h0 * r2 + h1 * r1 + h2 * r0 + h3 * (5 * r9) + h4 * (5 * r8);\n        c = d2 >>> 13;\n        d2 &= 0x1fff;\n        d2 += h5 * (5 * r7) + h6 * (5 * r6) + h7 * (5 * r5) + h8 * (5 * r4) + h9 * (5 * r3);\n        c += d2 >>> 13;\n        d2 &= 0x1fff;\n        let d3 = c + h0 * r3 + h1 * r2 + h2 * r1 + h3 * r0 + h4 * (5 * r9);\n        c = d3 >>> 13;\n        d3 &= 0x1fff;\n        d3 += h5 * (5 * r8) + h6 * (5 * r7) + h7 * (5 * r6) + h8 * (5 * r5) + h9 * (5 * r4);\n        c += d3 >>> 13;\n        d3 &= 0x1fff;\n        let d4 = c + h0 * r4 + h1 * r3 + h2 * r2 + h3 * r1 + h4 * r0;\n        c = d4 >>> 13;\n        d4 &= 0x1fff;\n        d4 += h5 * (5 * r9) + h6 * (5 * r8) + h7 * (5 * r7) + h8 * (5 * r6) + h9 * (5 * r5);\n        c += d4 >>> 13;\n        d4 &= 0x1fff;\n        let d5 = c + h0 * r5 + h1 * r4 + h2 * r3 + h3 * r2 + h4 * r1;\n        c = d5 >>> 13;\n        d5 &= 0x1fff;\n        d5 += h5 * r0 + h6 * (5 * r9) + h7 * (5 * r8) + h8 * (5 * r7) + h9 * (5 * r6);\n        c += d5 >>> 13;\n        d5 &= 0x1fff;\n        let d6 = c + h0 * r6 + h1 * r5 + h2 * r4 + h3 * r3 + h4 * r2;\n        c = d6 >>> 13;\n        d6 &= 0x1fff;\n        d6 += h5 * r1 + h6 * r0 + h7 * (5 * r9) + h8 * (5 * r8) + h9 * (5 * r7);\n        c += d6 >>> 13;\n        d6 &= 0x1fff;\n        let d7 = c + h0 * r7 + h1 * r6 + h2 * r5 + h3 * r4 + h4 * r3;\n        c = d7 >>> 13;\n        d7 &= 0x1fff;\n        d7 += h5 * r2 + h6 * r1 + h7 * r0 + h8 * (5 * r9) + h9 * (5 * r8);\n        c += d7 >>> 13;\n        d7 &= 0x1fff;\n        let d8 = c + h0 * r8 + h1 * r7 + h2 * r6 + h3 * r5 + h4 * r4;\n        c = d8 >>> 13;\n        d8 &= 0x1fff;\n        d8 += h5 * r3 + h6 * r2 + h7 * r1 + h8 * r0 + h9 * (5 * r9);\n        c += d8 >>> 13;\n        d8 &= 0x1fff;\n        let d9 = c + h0 * r9 + h1 * r8 + h2 * r7 + h3 * r6 + h4 * r5;\n        c = d9 >>> 13;\n        d9 &= 0x1fff;\n        d9 += h5 * r4 + h6 * r3 + h7 * r2 + h8 * r1 + h9 * r0;\n        c += d9 >>> 13;\n        d9 &= 0x1fff;\n        c = ((c << 2) + c) | 0;\n        c = (c + d0) | 0;\n        d0 = c & 0x1fff;\n        c = c >>> 13;\n        d1 += c;\n        h[0] = d0;\n        h[1] = d1;\n        h[2] = d2;\n        h[3] = d3;\n        h[4] = d4;\n        h[5] = d5;\n        h[6] = d6;\n        h[7] = d7;\n        h[8] = d8;\n        h[9] = d9;\n    }\n    finalize() {\n        const { h, pad } = this;\n        const g = new Uint16Array(10);\n        let c = h[1] >>> 13;\n        h[1] &= 0x1fff;\n        for (let i = 2; i < 10; i++) {\n            h[i] += c;\n            c = h[i] >>> 13;\n            h[i] &= 0x1fff;\n        }\n        h[0] += c * 5;\n        c = h[0] >>> 13;\n        h[0] &= 0x1fff;\n        h[1] += c;\n        c = h[1] >>> 13;\n        h[1] &= 0x1fff;\n        h[2] += c;\n        g[0] = h[0] + 5;\n        c = g[0] >>> 13;\n        g[0] &= 0x1fff;\n        for (let i = 1; i < 10; i++) {\n            g[i] = h[i] + c;\n            c = g[i] >>> 13;\n            g[i] &= 0x1fff;\n        }\n        g[9] -= 1 << 13;\n        let mask = (c ^ 1) - 1;\n        for (let i = 0; i < 10; i++)\n            g[i] &= mask;\n        mask = ~mask;\n        for (let i = 0; i < 10; i++)\n            h[i] = (h[i] & mask) | g[i];\n        h[0] = (h[0] | (h[1] << 13)) & 0xffff;\n        h[1] = ((h[1] >>> 3) | (h[2] << 10)) & 0xffff;\n        h[2] = ((h[2] >>> 6) | (h[3] << 7)) & 0xffff;\n        h[3] = ((h[3] >>> 9) | (h[4] << 4)) & 0xffff;\n        h[4] = ((h[4] >>> 12) | (h[5] << 1) | (h[6] << 14)) & 0xffff;\n        h[5] = ((h[6] >>> 2) | (h[7] << 11)) & 0xffff;\n        h[6] = ((h[7] >>> 5) | (h[8] << 8)) & 0xffff;\n        h[7] = ((h[8] >>> 8) | (h[9] << 5)) & 0xffff;\n        let f = h[0] + pad[0];\n        h[0] = f & 0xffff;\n        for (let i = 1; i < 8; i++) {\n            f = (((h[i] + pad[i]) | 0) + (f >>> 16)) | 0;\n            h[i] = f & 0xffff;\n        }\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.exists)(this);\n        const { buffer, blockLen } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input\n            if (take === blockLen) {\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(data, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(buffer, 0, false);\n                this.pos = 0;\n            }\n        }\n        return this;\n    }\n    destroy() {\n        this.h.fill(0);\n        this.r.fill(0);\n        this.buffer.fill(0);\n        this.pad.fill(0);\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.output)(out, this);\n        this.finished = true;\n        const { buffer, h } = this;\n        let { pos } = this;\n        if (pos) {\n            buffer[pos++] = 1;\n            // buffer.subarray(pos).fill(0);\n            for (; pos < 16; pos++)\n                buffer[pos] = 0;\n            this.process(buffer, 0, true);\n        }\n        this.finalize();\n        let opos = 0;\n        for (let i = 0; i < 8; i++) {\n            out[opos++] = h[i] >>> 0;\n            out[opos++] = h[i] >>> 8;\n        }\n        return out;\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n}\nfunction wrapConstructorWithKey(hashCons) {\n    const hashC = (msg, key) => hashCons(key).update((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(msg)).digest();\n    const tmp = hashCons(new Uint8Array(32));\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (key) => hashCons(key);\n    return hashC;\n}\nconst poly1305 = wrapConstructorWithKey((key) => new Poly1305(key));\n//# sourceMappingURL=_poly1305.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/ciphers/esm/_poly1305.js?");

/***/ }),

/***/ "./node_modules/@noble/ciphers/esm/chacha.js":
/*!***************************************************!*\
  !*** ./node_modules/@noble/ciphers/esm/chacha.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _poly1305_aead: () => (/* binding */ _poly1305_aead),\n/* harmony export */   chacha12: () => (/* binding */ chacha12),\n/* harmony export */   chacha20: () => (/* binding */ chacha20),\n/* harmony export */   chacha20orig: () => (/* binding */ chacha20orig),\n/* harmony export */   chacha20poly1305: () => (/* binding */ chacha20poly1305),\n/* harmony export */   chacha8: () => (/* binding */ chacha8),\n/* harmony export */   hchacha: () => (/* binding */ hchacha),\n/* harmony export */   xchacha20: () => (/* binding */ xchacha20),\n/* harmony export */   xchacha20poly1305: () => (/* binding */ xchacha20poly1305)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@noble/ciphers/esm/utils.js\");\n/* harmony import */ var _poly1305_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_poly1305.js */ \"./node_modules/@noble/ciphers/esm/_poly1305.js\");\n/* harmony import */ var _arx_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_arx.js */ \"./node_modules/@noble/ciphers/esm/_arx.js\");\n\n\n\n// ChaCha20 stream cipher was released in 2008. ChaCha aims to increase\n// the diffusion per round, but had slightly less cryptanalysis.\n// https://cr.yp.to/chacha.html, http://cr.yp.to/chacha/chacha-20080128.pdf\n/**\n * ChaCha core function.\n */\n// prettier-ignore\nfunction chachaCore(s, k, n, out, cnt, rounds = 20) {\n    let y00 = s[0], y01 = s[1], y02 = s[2], y03 = s[3], // \"expa\"   \"nd 3\"  \"2-by\"  \"te k\"\n    y04 = k[0], y05 = k[1], y06 = k[2], y07 = k[3], // Key      Key     Key     Key\n    y08 = k[4], y09 = k[5], y10 = k[6], y11 = k[7], // Key      Key     Key     Key\n    y12 = cnt, y13 = n[0], y14 = n[1], y15 = n[2]; // Counter  Counter\tNonce   Nonce\n    // Save state to temporary variables\n    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n    for (let r = 0; r < rounds; r += 2) {\n        x00 = (x00 + x04) | 0;\n        x12 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x12 ^ x00, 16);\n        x08 = (x08 + x12) | 0;\n        x04 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x04 ^ x08, 12);\n        x00 = (x00 + x04) | 0;\n        x12 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x12 ^ x00, 8);\n        x08 = (x08 + x12) | 0;\n        x04 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x04 ^ x08, 7);\n        x01 = (x01 + x05) | 0;\n        x13 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x13 ^ x01, 16);\n        x09 = (x09 + x13) | 0;\n        x05 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x05 ^ x09, 12);\n        x01 = (x01 + x05) | 0;\n        x13 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x13 ^ x01, 8);\n        x09 = (x09 + x13) | 0;\n        x05 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x05 ^ x09, 7);\n        x02 = (x02 + x06) | 0;\n        x14 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x14 ^ x02, 16);\n        x10 = (x10 + x14) | 0;\n        x06 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x06 ^ x10, 12);\n        x02 = (x02 + x06) | 0;\n        x14 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x14 ^ x02, 8);\n        x10 = (x10 + x14) | 0;\n        x06 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x06 ^ x10, 7);\n        x03 = (x03 + x07) | 0;\n        x15 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x15 ^ x03, 16);\n        x11 = (x11 + x15) | 0;\n        x07 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x07 ^ x11, 12);\n        x03 = (x03 + x07) | 0;\n        x15 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x15 ^ x03, 8);\n        x11 = (x11 + x15) | 0;\n        x07 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x07 ^ x11, 7);\n        x00 = (x00 + x05) | 0;\n        x15 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x15 ^ x00, 16);\n        x10 = (x10 + x15) | 0;\n        x05 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x05 ^ x10, 12);\n        x00 = (x00 + x05) | 0;\n        x15 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x15 ^ x00, 8);\n        x10 = (x10 + x15) | 0;\n        x05 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x05 ^ x10, 7);\n        x01 = (x01 + x06) | 0;\n        x12 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x12 ^ x01, 16);\n        x11 = (x11 + x12) | 0;\n        x06 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x06 ^ x11, 12);\n        x01 = (x01 + x06) | 0;\n        x12 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x12 ^ x01, 8);\n        x11 = (x11 + x12) | 0;\n        x06 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x06 ^ x11, 7);\n        x02 = (x02 + x07) | 0;\n        x13 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x13 ^ x02, 16);\n        x08 = (x08 + x13) | 0;\n        x07 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x07 ^ x08, 12);\n        x02 = (x02 + x07) | 0;\n        x13 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x13 ^ x02, 8);\n        x08 = (x08 + x13) | 0;\n        x07 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x07 ^ x08, 7);\n        x03 = (x03 + x04) | 0;\n        x14 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x14 ^ x03, 16);\n        x09 = (x09 + x14) | 0;\n        x04 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x04 ^ x09, 12);\n        x03 = (x03 + x04) | 0;\n        x14 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x14 ^ x03, 8);\n        x09 = (x09 + x14) | 0;\n        x04 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x04 ^ x09, 7);\n    }\n    // Write output\n    let oi = 0;\n    out[oi++] = (y00 + x00) | 0;\n    out[oi++] = (y01 + x01) | 0;\n    out[oi++] = (y02 + x02) | 0;\n    out[oi++] = (y03 + x03) | 0;\n    out[oi++] = (y04 + x04) | 0;\n    out[oi++] = (y05 + x05) | 0;\n    out[oi++] = (y06 + x06) | 0;\n    out[oi++] = (y07 + x07) | 0;\n    out[oi++] = (y08 + x08) | 0;\n    out[oi++] = (y09 + x09) | 0;\n    out[oi++] = (y10 + x10) | 0;\n    out[oi++] = (y11 + x11) | 0;\n    out[oi++] = (y12 + x12) | 0;\n    out[oi++] = (y13 + x13) | 0;\n    out[oi++] = (y14 + x14) | 0;\n    out[oi++] = (y15 + x15) | 0;\n}\n/**\n * hchacha helper method, used primarily in xchacha, to hash\n * key and nonce into key' and nonce'.\n * Same as chachaCore, but there doesn't seem to be a way to move the block\n * out without 25% performance hit.\n */\n// prettier-ignore\nfunction hchacha(s, k, i, o32) {\n    let x00 = s[0], x01 = s[1], x02 = s[2], x03 = s[3], x04 = k[0], x05 = k[1], x06 = k[2], x07 = k[3], x08 = k[4], x09 = k[5], x10 = k[6], x11 = k[7], x12 = i[0], x13 = i[1], x14 = i[2], x15 = i[3];\n    for (let r = 0; r < 20; r += 2) {\n        x00 = (x00 + x04) | 0;\n        x12 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x12 ^ x00, 16);\n        x08 = (x08 + x12) | 0;\n        x04 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x04 ^ x08, 12);\n        x00 = (x00 + x04) | 0;\n        x12 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x12 ^ x00, 8);\n        x08 = (x08 + x12) | 0;\n        x04 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x04 ^ x08, 7);\n        x01 = (x01 + x05) | 0;\n        x13 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x13 ^ x01, 16);\n        x09 = (x09 + x13) | 0;\n        x05 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x05 ^ x09, 12);\n        x01 = (x01 + x05) | 0;\n        x13 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x13 ^ x01, 8);\n        x09 = (x09 + x13) | 0;\n        x05 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x05 ^ x09, 7);\n        x02 = (x02 + x06) | 0;\n        x14 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x14 ^ x02, 16);\n        x10 = (x10 + x14) | 0;\n        x06 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x06 ^ x10, 12);\n        x02 = (x02 + x06) | 0;\n        x14 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x14 ^ x02, 8);\n        x10 = (x10 + x14) | 0;\n        x06 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x06 ^ x10, 7);\n        x03 = (x03 + x07) | 0;\n        x15 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x15 ^ x03, 16);\n        x11 = (x11 + x15) | 0;\n        x07 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x07 ^ x11, 12);\n        x03 = (x03 + x07) | 0;\n        x15 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x15 ^ x03, 8);\n        x11 = (x11 + x15) | 0;\n        x07 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x07 ^ x11, 7);\n        x00 = (x00 + x05) | 0;\n        x15 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x15 ^ x00, 16);\n        x10 = (x10 + x15) | 0;\n        x05 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x05 ^ x10, 12);\n        x00 = (x00 + x05) | 0;\n        x15 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x15 ^ x00, 8);\n        x10 = (x10 + x15) | 0;\n        x05 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x05 ^ x10, 7);\n        x01 = (x01 + x06) | 0;\n        x12 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x12 ^ x01, 16);\n        x11 = (x11 + x12) | 0;\n        x06 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x06 ^ x11, 12);\n        x01 = (x01 + x06) | 0;\n        x12 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x12 ^ x01, 8);\n        x11 = (x11 + x12) | 0;\n        x06 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x06 ^ x11, 7);\n        x02 = (x02 + x07) | 0;\n        x13 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x13 ^ x02, 16);\n        x08 = (x08 + x13) | 0;\n        x07 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x07 ^ x08, 12);\n        x02 = (x02 + x07) | 0;\n        x13 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x13 ^ x02, 8);\n        x08 = (x08 + x13) | 0;\n        x07 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x07 ^ x08, 7);\n        x03 = (x03 + x04) | 0;\n        x14 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x14 ^ x03, 16);\n        x09 = (x09 + x14) | 0;\n        x04 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x04 ^ x09, 12);\n        x03 = (x03 + x04) | 0;\n        x14 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x14 ^ x03, 8);\n        x09 = (x09 + x14) | 0;\n        x04 = (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.rotl)(x04 ^ x09, 7);\n    }\n    let oi = 0;\n    o32[oi++] = x00;\n    o32[oi++] = x01;\n    o32[oi++] = x02;\n    o32[oi++] = x03;\n    o32[oi++] = x12;\n    o32[oi++] = x13;\n    o32[oi++] = x14;\n    o32[oi++] = x15;\n}\n/**\n * Original, non-RFC chacha20 from DJB. 8-byte nonce, 8-byte counter.\n */\nconst chacha20orig = /* @__PURE__ */ (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.createCipher)(chachaCore, {\n    counterRight: false,\n    counterLength: 8,\n    allowShortKeys: true,\n});\n/**\n * ChaCha stream cipher. Conforms to RFC 8439 (IETF, TLS). 12-byte nonce, 4-byte counter.\n * With 12-byte nonce, it's not safe to use fill it with random (CSPRNG), due to collision chance.\n */\nconst chacha20 = /* @__PURE__ */ (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.createCipher)(chachaCore, {\n    counterRight: false,\n    counterLength: 4,\n    allowShortKeys: false,\n});\n/**\n * XChaCha eXtended-nonce ChaCha. 24-byte nonce.\n * With 24-byte nonce, it's safe to use fill it with random (CSPRNG).\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha\n */\nconst xchacha20 = /* @__PURE__ */ (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.createCipher)(chachaCore, {\n    counterRight: false,\n    counterLength: 8,\n    extendNonceFn: hchacha,\n    allowShortKeys: false,\n});\n/**\n * Reduced 8-round chacha, described in original paper.\n */\nconst chacha8 = /* @__PURE__ */ (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.createCipher)(chachaCore, {\n    counterRight: false,\n    counterLength: 4,\n    rounds: 8,\n});\n/**\n * Reduced 12-round chacha, described in original paper.\n */\nconst chacha12 = /* @__PURE__ */ (0,_arx_js__WEBPACK_IMPORTED_MODULE_2__.createCipher)(chachaCore, {\n    counterRight: false,\n    counterLength: 4,\n    rounds: 12,\n});\nconst ZEROS16 = /* @__PURE__ */ new Uint8Array(16);\n// Pad to digest size with zeros\nconst updatePadded = (h, msg) => {\n    h.update(msg);\n    const left = msg.length % 16;\n    if (left)\n        h.update(ZEROS16.subarray(left));\n};\nconst ZEROS32 = /* @__PURE__ */ new Uint8Array(32);\nfunction computeTag(fn, key, nonce, data, AAD) {\n    const authKey = fn(key, nonce, ZEROS32);\n    const h = _poly1305_js__WEBPACK_IMPORTED_MODULE_1__.poly1305.create(authKey);\n    if (AAD)\n        updatePadded(h, AAD);\n    updatePadded(h, data);\n    const num = new Uint8Array(16);\n    const view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(num);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.setBigUint64)(view, 0, BigInt(AAD ? AAD.length : 0), true);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.setBigUint64)(view, 8, BigInt(data.length), true);\n    h.update(num);\n    const res = h.digest();\n    authKey.fill(0);\n    return res;\n}\n/**\n * AEAD algorithm from RFC 8439.\n * Salsa20 and chacha (RFC 8439) use poly1305 differently.\n * We could have composed them similar to:\n * https://github.com/paulmillr/scure-base/blob/b266c73dde977b1dd7ef40ef7a23cc15aab526b3/index.ts#L250\n * But it's hard because of authKey:\n * In salsa20, authKey changes position in salsa stream.\n * In chacha, authKey can't be computed inside computeTag, it modifies the counter.\n */\nconst _poly1305_aead = (xorStream) => (key, nonce, AAD) => {\n    const tagLength = 16;\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(key, 32);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(nonce);\n    return {\n        encrypt: (plaintext, output) => {\n            const plength = plaintext.length;\n            const clength = plength + tagLength;\n            if (output) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(output, clength);\n            }\n            else {\n                output = new Uint8Array(clength);\n            }\n            xorStream(key, nonce, plaintext, output, 1);\n            const tag = computeTag(xorStream, key, nonce, output.subarray(0, -tagLength), AAD);\n            output.set(tag, plength); // append tag\n            return output;\n        },\n        decrypt: (ciphertext, output) => {\n            const clength = ciphertext.length;\n            const plength = clength - tagLength;\n            if (clength < tagLength)\n                throw new Error(`encrypted data must be at least ${tagLength} bytes`);\n            if (output) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(output, plength);\n            }\n            else {\n                output = new Uint8Array(plength);\n            }\n            const data = ciphertext.subarray(0, -tagLength);\n            const passedTag = ciphertext.subarray(-tagLength);\n            const tag = computeTag(xorStream, key, nonce, data, AAD);\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.equalBytes)(passedTag, tag))\n                throw new Error('invalid tag');\n            xorStream(key, nonce, data, output, 1);\n            return output;\n        },\n    };\n};\n/**\n * ChaCha20-Poly1305 from RFC 8439.\n * With 12-byte nonce, it's not safe to use fill it with random (CSPRNG), due to collision chance.\n */\nconst chacha20poly1305 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapCipher)({ blockSize: 64, nonceLength: 12, tagLength: 16 }, _poly1305_aead(chacha20));\n/**\n * XChaCha20-Poly1305 extended-nonce chacha.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha\n * With 24-byte nonce, it's safe to use fill it with random (CSPRNG).\n */\nconst xchacha20poly1305 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapCipher)({ blockSize: 64, nonceLength: 24, tagLength: 16 }, _poly1305_aead(xchacha20));\n//# sourceMappingURL=chacha.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/ciphers/esm/chacha.js?");

/***/ }),

/***/ "./node_modules/@noble/ciphers/esm/utils.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/ciphers/esm/utils.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),\n/* harmony export */   bytesToUtf8: () => (/* binding */ bytesToUtf8),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   ensureBytes: () => (/* binding */ ensureBytes),\n/* harmony export */   equalBytes: () => (/* binding */ equalBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),\n/* harmony export */   setBigUint64: () => (/* binding */ setBigUint64),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u16: () => (/* binding */ u16),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u64Lengths: () => (/* binding */ u64Lengths),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapCipher: () => (/* binding */ wrapCipher)\n/* harmony export */ });\n/*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) */\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nconst u16 = (arr) => new Uint16Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 2));\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// big-endian hardware is rare. Just in case someone still decides to run ciphers:\n// early-throw an error because we don't support BE yet.\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    if (!isBytes(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\nfunction bytesToUtf8(bytes) {\n    return new TextDecoder().decode(bytes);\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    else if (isBytes(data))\n        data = data.slice();\n    else\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        if (!isBytes(a))\n            throw new Error('Uint8Array expected');\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new Error('options must be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nfunction ensureBytes(b, len) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (typeof len === 'number')\n        if (b.length !== len)\n            throw new Error(`Uint8Array length ${len} expected`);\n}\n// Compares 2 u8a-s in kinda constant time\nfunction equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n// For runtime check if class implements interface\nclass Hash {\n}\nconst wrapCipher = (params, c) => {\n    Object.assign(c, params);\n    return c;\n};\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\nfunction u64Lengths(ciphertext, AAD) {\n    const num = new Uint8Array(16);\n    const view = createView(num);\n    setBigUint64(view, 0, BigInt(AAD ? AAD.length : 0), true);\n    setBigUint64(view, 8, BigInt(ciphertext.length), true);\n    return num;\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/ciphers/esm/utils.js?");

/***/ }),

/***/ "./node_modules/@noble/curves/esm/_shortw_utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/@noble/curves/esm/_shortw_utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCurve: () => (/* binding */ createCurve),\n/* harmony export */   getHash: () => (/* binding */ getHash)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/hmac */ \"./node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"./node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n// connects noble-curves to noble-hashes\nfunction getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => (0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__.hmac)(hash, key, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(...msgs)),\n        randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.randomBytes,\n    };\n}\nfunction createCurve(curveDef, defHash) {\n    const create = (hash) => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__.weierstrass)({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/curves/esm/_shortw_utils.js?");

/***/ }),

/***/ "./node_modules/@noble/curves/esm/abstract/curve.js":
/*!**********************************************************!*\
  !*** ./node_modules/@noble/curves/esm/abstract/curve.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateBasic: () => (/* binding */ validateBasic),\n/* harmony export */   wNAF: () => (/* binding */ wNAF)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modular.js */ \"./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\n\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nfunction wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nfunction validateBasic(curve) {\n    (0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.validateField)(curve.Fp);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject)(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...(0,_modular_js__WEBPACK_IMPORTED_MODULE_0__.nLength)(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/curves/esm/abstract/curve.js?");

/***/ }),

/***/ "./node_modules/@noble/curves/esm/abstract/edwards.js":
/*!************************************************************!*\
  !*** ./node_modules/@noble/curves/esm/abstract/edwards.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   twistedEdwards: () => (/* binding */ twistedEdwards)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modular.js */ \"./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./curve.js */ \"./node_modules/@noble/curves/esm/abstract/curve.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\n\n\n\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\nfunction validateOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(curve, {\n        hash: 'function',\n        a: 'bigint',\n        d: 'bigint',\n        randomBytes: 'function',\n    }, {\n        adjustScalarBytes: 'function',\n        domain: 'function',\n        uvRatio: 'function',\n        mapToCurve: 'function',\n    });\n    // Set defaults\n    return Object.freeze({ ...opts });\n}\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nfunction twistedEdwards(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER, prehash: prehash, hash: cHash, randomBytes, nByteLength, h: cofactor, } = CURVE;\n    const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n    const modP = Fp.create; // Function overrides\n    // sqrt(u/v)\n    const uvRatio = CURVE.uvRatio ||\n        ((u, v) => {\n            try {\n                return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n            }\n            catch (e) {\n                return { isValid: false, value: _0n };\n            }\n        });\n    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes); // NOOP\n    const domain = CURVE.domain ||\n        ((data, ctx, phflag) => {\n            if (ctx.length || phflag)\n                throw new Error('Contexts/pre-hash are not supported');\n            return data;\n        }); // NOOP\n    const inBig = (n) => typeof n === 'bigint' && _0n < n; // n in [1..]\n    const inRange = (n, max) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n    const in0MaskRange = (n) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n    function assertInRange(n, max) {\n        // n in [1..max-1]\n        if (inRange(n, max))\n            return n;\n        throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n    }\n    function assertGE0(n) {\n        // n in [0..CURVE_ORDER-1]\n        return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n    }\n    const pointPrecomputes = new Map();\n    function isPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ExtendedPoint expected');\n    }\n    // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n    class Point {\n        constructor(ex, ey, ez, et) {\n            this.ex = ex;\n            this.ey = ey;\n            this.ez = ez;\n            this.et = et;\n            if (!in0MaskRange(ex))\n                throw new Error('x required');\n            if (!in0MaskRange(ey))\n                throw new Error('y required');\n            if (!in0MaskRange(ez))\n                throw new Error('z required');\n            if (!in0MaskRange(et))\n                throw new Error('t required');\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(p) {\n            if (p instanceof Point)\n                throw new Error('extended point not allowed');\n            const { x, y } = p || {};\n            if (!in0MaskRange(x) || !in0MaskRange(y))\n                throw new Error('invalid affine point');\n            return new Point(x, y, _1n, modP(x * y));\n        }\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.ez));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // Not required for fromHex(), which always creates valid points.\n        // Could be useful for fromAffine().\n        assertValidity() {\n            const { a, d } = CURVE;\n            if (this.is0())\n                throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n            // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n            // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n            const { ex: X, ey: Y, ez: Z, et: T } = this;\n            const X2 = modP(X * X); // X²\n            const Y2 = modP(Y * Y); // Y²\n            const Z2 = modP(Z * Z); // Z²\n            const Z4 = modP(Z2 * Z2); // Z⁴\n            const aX2 = modP(X2 * a); // aX²\n            const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n            const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n            if (left !== right)\n                throw new Error('bad point: equation left != right (1)');\n            // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n            const XY = modP(X * Y);\n            const ZT = modP(Z * T);\n            if (XY !== ZT)\n                throw new Error('bad point: equation left != right (2)');\n        }\n        // Compare one point to another.\n        equals(other) {\n            isPoint(other);\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2 } = other;\n            const X1Z2 = modP(X1 * Z2);\n            const X2Z1 = modP(X2 * Z1);\n            const Y1Z2 = modP(Y1 * Z2);\n            const Y2Z1 = modP(Y2 * Z1);\n            return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        negate() {\n            // Flips point sign to a negative one (-x, y in affine coords)\n            return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n        }\n        // Fast algo for doubling Extended Point.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        // Cost: 4M + 4S + 1*a + 6add + 1*2.\n        double() {\n            const { a } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const A = modP(X1 * X1); // A = X12\n            const B = modP(Y1 * Y1); // B = Y12\n            const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n            const D = modP(a * A); // D = a*A\n            const x1y1 = X1 + Y1;\n            const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n            const G = D + B; // G = D+B\n            const F = G - C; // F = G-C\n            const H = D - B; // H = D-B\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        // Fast algo for adding 2 Extended Points.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n        // Cost: 9M + 1*a + 1*d + 7add.\n        add(other) {\n            isPoint(other);\n            const { a, d } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n            // Faster algo for adding 2 Extended Points when curve's a=-1.\n            // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n            // Cost: 8M + 8add + 2*2.\n            // Note: It does not check whether the `other` point is valid.\n            if (a === BigInt(-1)) {\n                const A = modP((Y1 - X1) * (Y2 + X2));\n                const B = modP((Y1 + X1) * (Y2 - X2));\n                const F = modP(B - A);\n                if (F === _0n)\n                    return this.double(); // Same point. Tests say it doesn't affect timing\n                const C = modP(Z1 * _2n * T2);\n                const D = modP(T1 * _2n * Z2);\n                const E = D + C;\n                const G = B + A;\n                const H = D - C;\n                const X3 = modP(E * F);\n                const Y3 = modP(G * H);\n                const T3 = modP(E * H);\n                const Z3 = modP(F * G);\n                return new Point(X3, Y3, Z3, T3);\n            }\n            const A = modP(X1 * X2); // A = X1*X2\n            const B = modP(Y1 * Y2); // B = Y1*Y2\n            const C = modP(T1 * d * T2); // C = T1*d*T2\n            const D = modP(Z1 * Z2); // D = Z1*Z2\n            const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n            const F = D - C; // F = D-C\n            const G = D + C; // G = D+C\n            const H = modP(B - a * A); // H = B-a*A\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n        }\n        // Constant-time multiplication.\n        multiply(scalar) {\n            const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n            return Point.normalizeZ([p, f])[0];\n        }\n        // Non-constant-time multiplication. Uses double-and-add algorithm.\n        // It's faster, but should only be used when you don't care about\n        // an exposed private key e.g. sig verification.\n        // Does NOT allow scalars higher than CURVE.n.\n        multiplyUnsafe(scalar) {\n            let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n            if (n === _0n)\n                return I;\n            if (this.equals(I) || n === _1n)\n                return this;\n            if (this.equals(G))\n                return this.wNAF(n).p;\n            return wnaf.unsafeLadder(this, n);\n        }\n        // Checks if point is of small order.\n        // If you add something to small order point, you will have \"dirty\"\n        // point with torsion component.\n        // Multiplies point by cofactor and checks if the result is 0.\n        isSmallOrder() {\n            return this.multiplyUnsafe(cofactor).is0();\n        }\n        // Multiplies point by curve order and checks if the result is 0.\n        // Returns `false` is the point is dirty.\n        isTorsionFree() {\n            return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n        }\n        // Converts Extended point to default (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        toAffine(iz) {\n            const { ex: x, ey: y, ez: z } = this;\n            const is0 = this.is0();\n            if (iz == null)\n                iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n            const ax = modP(x * iz);\n            const ay = modP(y * iz);\n            const zz = modP(z * iz);\n            if (is0)\n                return { x: _0n, y: _1n };\n            if (zz !== _1n)\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        clearCofactor() {\n            const { h: cofactor } = CURVE;\n            if (cofactor === _1n)\n                return this;\n            return this.multiplyUnsafe(cofactor);\n        }\n        // Converts hash string or Uint8Array to Point.\n        // Uses algo from RFC8032 5.1.3.\n        static fromHex(hex, zip215 = false) {\n            const { d, a } = CURVE;\n            const len = Fp.BYTES;\n            hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('pointHex', hex, len); // copy hex to a new array\n            const normed = hex.slice(); // copy again, we'll manipulate it\n            const lastByte = hex[len - 1]; // select last byte\n            normed[len - 1] = lastByte & ~0x80; // clear last bit\n            const y = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberLE(normed);\n            if (y === _0n) {\n                // y=0 is allowed\n            }\n            else {\n                // RFC8032 prohibits >= p, but ZIP215 doesn't\n                if (zip215)\n                    assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n                else\n                    assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n            }\n            // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n            // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n            const y2 = modP(y * y); // denominator is always non-0 mod p.\n            const u = modP(y2 - _1n); // u = y² - 1\n            const v = modP(d * y2 - a); // v = d y² + 1.\n            let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n            if (!isValid)\n                throw new Error('Point.fromHex: invalid y coordinate');\n            const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n            const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n            if (!zip215 && x === _0n && isLastByteOdd)\n                // if x=0 and x_0 = 1, fail\n                throw new Error('Point.fromHex: x=0 and x_0=1');\n            if (isLastByteOdd !== isXOdd)\n                x = modP(-x); // if x_0 != x mod 2, set x = p-x\n            return Point.fromAffine({ x, y });\n        }\n        static fromPrivateKey(privKey) {\n            return getExtendedPublicKey(privKey).point;\n        }\n        toRawBytes() {\n            const { x, y } = this.toAffine();\n            const bytes = _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n            bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n            return bytes; // and use the last byte to encode sign of x\n        }\n        toHex() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    const { BASE: G, ZERO: I } = Point;\n    const wnaf = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.wNAF)(Point, nByteLength * 8);\n    function modN(a) {\n        return (0,_modular_js__WEBPACK_IMPORTED_MODULE_2__.mod)(a, CURVE_ORDER);\n    }\n    // Little-endian SHA512 with modulo n\n    function modN_LE(hash) {\n        return modN(_utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberLE(hash));\n    }\n    /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n    function getExtendedPublicKey(key) {\n        const len = nByteLength;\n        key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('private key', key, len);\n        // Hash private key with curve's hash function to produce uniformingly random input\n        // Check byte lengths: ensure(64, h(ensure(32, key)))\n        const hashed = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('hashed private key', cHash(key), 2 * len);\n        const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n        const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n        const scalar = modN_LE(head); // The actual private scalar\n        const point = G.multiply(scalar); // Point on Edwards curve aka public key\n        const pointBytes = point.toRawBytes(); // Uint8Array representation\n        return { head, prefix, scalar, point, pointBytes };\n    }\n    // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n    function getPublicKey(privKey) {\n        return getExtendedPublicKey(privKey).pointBytes;\n    }\n    // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n    function hashDomainToScalar(context = new Uint8Array(), ...msgs) {\n        const msg = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(...msgs);\n        return modN_LE(cHash(domain(msg, (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('context', context), !!prehash)));\n    }\n    /** Signs message with privateKey. RFC8032 5.1.6 */\n    function sign(msg, privKey, options = {}) {\n        msg = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph etc.\n        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n        const R = G.multiply(r).toRawBytes(); // R = rG\n        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n        const s = modN(r + k * scalar); // S = (r + k * s) mod L\n        assertGE0(s); // 0 <= s < l\n        const res = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(R, _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesLE(s, Fp.BYTES));\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('result', res, nByteLength * 2); // 64-byte signature\n    }\n    const verifyOpts = VERIFY_DEFAULT;\n    function verify(sig, msg, publicKey, options = verifyOpts) {\n        const { context, zip215 } = options;\n        const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n        sig = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('signature', sig, 2 * len); // An extended group equation is checked.\n        msg = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph, etc\n        const s = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberLE(sig.slice(len, 2 * len));\n        // zip215: true is good for consensus-critical apps and allows points < 2^256\n        // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n        let A, R, SB;\n        try {\n            A = Point.fromHex(publicKey, zip215);\n            R = Point.fromHex(sig.slice(0, len), zip215);\n            SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n        }\n        catch (error) {\n            return false;\n        }\n        if (!zip215 && A.isSmallOrder())\n            return false;\n        const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n        const RkA = R.add(A.multiplyUnsafe(k));\n        // [8][S]B = [8]R + [8][k]A'\n        return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n    }\n    G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    const utils = {\n        getExtendedPublicKey,\n        // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n        randomPrivateKey: () => randomBytes(Fp.BYTES),\n        /**\n         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n         * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n         * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n         * @param windowSize 2, 4, 8, 16\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3));\n            return point;\n        },\n    };\n    return {\n        CURVE,\n        getPublicKey,\n        sign,\n        verify,\n        ExtendedPoint: Point,\n        utils,\n    };\n}\n//# sourceMappingURL=edwards.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/curves/esm/abstract/edwards.js?");

/***/ }),

/***/ "./node_modules/@noble/curves/esm/abstract/hash-to-curve.js":
/*!******************************************************************!*\
  !*** ./node_modules/@noble/curves/esm/abstract/hash-to-curve.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHasher: () => (/* binding */ createHasher),\n/* harmony export */   expand_message_xmd: () => (/* binding */ expand_message_xmd),\n/* harmony export */   expand_message_xof: () => (/* binding */ expand_message_xof),\n/* harmony export */   hash_to_field: () => (/* binding */ hash_to_field),\n/* harmony export */   isogenyMap: () => (/* binding */ isogenyMap)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modular.js */ \"./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@noble/curves/esm/abstract/utils.js\");\n\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction anum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nfunction hash_to_field(msg, count, options) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    anum(count);\n    const DST = typeof _DST === 'string' ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(_DST) : _DST;\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mod)(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nfunction isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\nfunction createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\n//# sourceMappingURL=hash-to-curve.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/curves/esm/abstract/hash-to-curve.js?");

/***/ }),

/***/ "./node_modules/@noble/curves/esm/abstract/modular.js":
/*!************************************************************!*\
  !*** ./node_modules/@noble/curves/esm/abstract/modular.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Field: () => (/* binding */ Field),\n/* harmony export */   FpDiv: () => (/* binding */ FpDiv),\n/* harmony export */   FpInvertBatch: () => (/* binding */ FpInvertBatch),\n/* harmony export */   FpIsSquare: () => (/* binding */ FpIsSquare),\n/* harmony export */   FpPow: () => (/* binding */ FpPow),\n/* harmony export */   FpSqrt: () => (/* binding */ FpSqrt),\n/* harmony export */   FpSqrtEven: () => (/* binding */ FpSqrtEven),\n/* harmony export */   FpSqrtOdd: () => (/* binding */ FpSqrtOdd),\n/* harmony export */   getFieldBytesLength: () => (/* binding */ getFieldBytesLength),\n/* harmony export */   getMinHashLength: () => (/* binding */ getMinHashLength),\n/* harmony export */   hashToPrivateScalar: () => (/* binding */ hashToPrivateScalar),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   isNegativeLE: () => (/* binding */ isNegativeLE),\n/* harmony export */   mapHashToField: () => (/* binding */ mapHashToField),\n/* harmony export */   mod: () => (/* binding */ mod),\n/* harmony export */   nLength: () => (/* binding */ nLength),\n/* harmony export */   pow: () => (/* binding */ pow),\n/* harmony export */   pow2: () => (/* binding */ pow2),\n/* harmony export */   tonelliShanks: () => (/* binding */ tonelliShanks),\n/* harmony export */   validateField: () => (/* binding */ validateField)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nfunction mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nfunction pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nfunction pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nfunction invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nfunction tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nfunction FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nconst isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nfunction validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nfunction FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nfunction FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nfunction FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nfunction Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bitMask)(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(num, BYTES) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(bytes) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nfunction FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nfunction FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nfunction hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(hash) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nfunction getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nfunction getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nfunction mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(key) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(reduced, fieldLen) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/curves/esm/abstract/modular.js?");

/***/ }),

/***/ "./node_modules/@noble/curves/esm/abstract/montgomery.js":
/*!***************************************************************!*\
  !*** ./node_modules/@noble/curves/esm/abstract/montgomery.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   montgomery: () => (/* binding */ montgomery)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modular.js */ \"./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@noble/curves/esm/abstract/utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction validateOpts(curve) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(curve, {\n        a: 'bigint',\n    }, {\n        montgomeryBits: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n        adjustScalarBytes: 'function',\n        domain: 'function',\n        powPminus2: 'function',\n        Gu: 'bigint',\n    });\n    // Set defaults\n    return Object.freeze({ ...curve });\n}\n// NOTE: not really montgomery curve, just bunch of very specific methods for X25519/X448 (RFC 7748, https://www.rfc-editor.org/rfc/rfc7748)\n// Uses only one coordinate instead of two\nfunction montgomery(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { P } = CURVE;\n    const modP = (n) => (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mod)(n, P);\n    const montgomeryBits = CURVE.montgomeryBits;\n    const montgomeryBytes = Math.ceil(montgomeryBits / 8);\n    const fieldLen = CURVE.nByteLength;\n    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes);\n    const powPminus2 = CURVE.powPminus2 || ((x) => (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.pow)(x, P - BigInt(2), P));\n    // cswap from RFC7748. But it is not from RFC7748!\n    /*\n      cswap(swap, x_2, x_3):\n           dummy = mask(swap) AND (x_2 XOR x_3)\n           x_2 = x_2 XOR dummy\n           x_3 = x_3 XOR dummy\n           Return (x_2, x_3)\n    Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n     and x_3, computed, e.g., as mask(swap) = 0 - swap.\n    */\n    function cswap(swap, x_2, x_3) {\n        const dummy = modP(swap * (x_2 - x_3));\n        x_2 = modP(x_2 - dummy);\n        x_3 = modP(x_3 + dummy);\n        return [x_2, x_3];\n    }\n    // Accepts 0 as well\n    function assertFieldElement(n) {\n        if (typeof n === 'bigint' && _0n <= n && n < P)\n            return n;\n        throw new Error('Expected valid scalar 0 < scalar < CURVE.P');\n    }\n    // x25519 from 4\n    // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519\n    const a24 = (CURVE.a - BigInt(2)) / BigInt(4);\n    /**\n     *\n     * @param pointU u coordinate (x) on Montgomery Curve 25519\n     * @param scalar by which the point would be multiplied\n     * @returns new Point on Montgomery curve\n     */\n    function montgomeryLadder(pointU, scalar) {\n        const u = assertFieldElement(pointU);\n        // Section 5: Implementations MUST accept non-canonical values and process them as\n        // if they had been reduced modulo the field prime.\n        const k = assertFieldElement(scalar);\n        const x_1 = u;\n        let x_2 = _1n;\n        let z_2 = _0n;\n        let x_3 = u;\n        let z_3 = _1n;\n        let swap = _0n;\n        let sw;\n        for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n            const k_t = (k >> t) & _1n;\n            swap ^= k_t;\n            sw = cswap(swap, x_2, x_3);\n            x_2 = sw[0];\n            x_3 = sw[1];\n            sw = cswap(swap, z_2, z_3);\n            z_2 = sw[0];\n            z_3 = sw[1];\n            swap = k_t;\n            const A = x_2 + z_2;\n            const AA = modP(A * A);\n            const B = x_2 - z_2;\n            const BB = modP(B * B);\n            const E = AA - BB;\n            const C = x_3 + z_3;\n            const D = x_3 - z_3;\n            const DA = modP(D * A);\n            const CB = modP(C * B);\n            const dacb = DA + CB;\n            const da_cb = DA - CB;\n            x_3 = modP(dacb * dacb);\n            z_3 = modP(x_1 * modP(da_cb * da_cb));\n            x_2 = modP(AA * BB);\n            z_2 = modP(E * (AA + modP(a24 * E)));\n        }\n        // (x_2, x_3) = cswap(swap, x_2, x_3)\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        // (z_2, z_3) = cswap(swap, z_2, z_3)\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        // z_2^(p - 2)\n        const z2 = powPminus2(z_2);\n        // Return x_2 * (z_2^(p - 2))\n        return modP(x_2 * z2);\n    }\n    function encodeUCoordinate(u) {\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(modP(u), montgomeryBytes);\n    }\n    function decodeUCoordinate(uEnc) {\n        // Section 5: When receiving such an array, implementations of X25519\n        // MUST mask the most significant bit in the final byte.\n        const u = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)('u coordinate', uEnc, montgomeryBytes);\n        if (fieldLen === 32)\n            u[31] &= 127; // 0b0111_1111\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(u);\n    }\n    function decodeScalar(n) {\n        const bytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)('scalar', n);\n        const len = bytes.length;\n        if (len !== montgomeryBytes && len !== fieldLen)\n            throw new Error(`Expected ${montgomeryBytes} or ${fieldLen} bytes, got ${len}`);\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(adjustScalarBytes(bytes));\n    }\n    function scalarMult(scalar, u) {\n        const pointU = decodeUCoordinate(u);\n        const _scalar = decodeScalar(scalar);\n        const pu = montgomeryLadder(pointU, _scalar);\n        // The result was not contributory\n        // https://cr.yp.to/ecdh.html#validate\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    }\n    // Computes public key from private. By doing scalar multiplication of base point.\n    const GuBytes = encodeUCoordinate(CURVE.Gu);\n    function scalarMultBase(scalar) {\n        return scalarMult(scalar, GuBytes);\n    }\n    return {\n        scalarMult,\n        scalarMultBase,\n        getSharedSecret: (privateKey, publicKey) => scalarMult(privateKey, publicKey),\n        getPublicKey: (privateKey) => scalarMultBase(privateKey),\n        utils: { randomPrivateKey: () => CURVE.randomBytes(CURVE.nByteLength) },\n        GuBytes: GuBytes,\n    };\n}\n//# sourceMappingURL=montgomery.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/curves/esm/abstract/montgomery.js?");

/***/ }),

/***/ "./node_modules/@noble/curves/esm/abstract/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@noble/curves/esm/abstract/utils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   abytes: () => (/* binding */ abytes),\n/* harmony export */   bitGet: () => (/* binding */ bitGet),\n/* harmony export */   bitLen: () => (/* binding */ bitLen),\n/* harmony export */   bitMask: () => (/* binding */ bitMask),\n/* harmony export */   bitSet: () => (/* binding */ bitSet),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),\n/* harmony export */   bytesToNumberLE: () => (/* binding */ bytesToNumberLE),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createHmacDrbg: () => (/* binding */ createHmacDrbg),\n/* harmony export */   ensureBytes: () => (/* binding */ ensureBytes),\n/* harmony export */   equalBytes: () => (/* binding */ equalBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),\n/* harmony export */   numberToBytesLE: () => (/* binding */ numberToBytesLE),\n/* harmony export */   numberToHexUnpadded: () => (/* binding */ numberToHexUnpadded),\n/* harmony export */   numberToVarBytesBE: () => (/* binding */ numberToVarBytesBE),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   validateObject: () => (/* binding */ validateObject)\n/* harmony export */ });\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nfunction numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nfunction ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nfunction equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nfunction bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nfunction bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nfunction bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nconst bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/curves/esm/abstract/utils.js?");

/***/ }),

/***/ "./node_modules/@noble/curves/esm/abstract/weierstrass.js":
/*!****************************************************************!*\
  !*** ./node_modules/@noble/curves/esm/abstract/weierstrass.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DER: () => (/* binding */ DER),\n/* harmony export */   SWUFpSqrtRatio: () => (/* binding */ SWUFpSqrtRatio),\n/* harmony export */   mapToCurveSimpleSWU: () => (/* binding */ mapToCurveSimpleSWU),\n/* harmony export */   weierstrass: () => (/* binding */ weierstrass),\n/* harmony export */   weierstrassPoints: () => (/* binding */ weierstrassPoints)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modular.js */ \"./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./curve.js */ \"./node_modules/@noble/curves/esm/abstract/curve.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\n\n\n\n\nfunction validatePointOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = _utils_js__WEBPACK_IMPORTED_MODULE_1__;\nconst DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        _utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes(data);\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nfunction weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.isBytes(key))\n                key = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_0__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nfunction weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return _modular_js__WEBPACK_IMPORTED_MODULE_2__.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToHex(_utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = _modular_js__WEBPACK_IMPORTED_MODULE_2__.getMinHashLength(CURVE.n);\n            return _modular_js__WEBPACK_IMPORTED_MODULE_2__.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = _utils_js__WEBPACK_IMPORTED_MODULE_1__.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash);\n        if (prehash)\n            msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('extraEntropy', e)); // check for being bytes\n        }\n        const seed = _utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = _utils_js__WEBPACK_IMPORTED_MODULE_1__.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('msgHash', msgHash);\n        publicKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes)('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || _utils_js__WEBPACK_IMPORTED_MODULE_1__.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nfunction SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nfunction mapToCurveSimpleSWU(Fp, opts) {\n    _modular_js__WEBPACK_IMPORTED_MODULE_2__.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/curves/esm/abstract/weierstrass.js?");

/***/ }),

/***/ "./node_modules/@noble/curves/esm/ed25519.js":
/*!***************************************************!*\
  !*** ./node_modules/@noble/curves/esm/ed25519.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ED25519_TORSION_SUBGROUP: () => (/* binding */ ED25519_TORSION_SUBGROUP),\n/* harmony export */   RistrettoPoint: () => (/* binding */ RistrettoPoint),\n/* harmony export */   ed25519: () => (/* binding */ ed25519),\n/* harmony export */   ed25519ctx: () => (/* binding */ ed25519ctx),\n/* harmony export */   ed25519ph: () => (/* binding */ ed25519ph),\n/* harmony export */   edwardsToMontgomery: () => (/* binding */ edwardsToMontgomery),\n/* harmony export */   edwardsToMontgomeryPriv: () => (/* binding */ edwardsToMontgomeryPriv),\n/* harmony export */   edwardsToMontgomeryPub: () => (/* binding */ edwardsToMontgomeryPub),\n/* harmony export */   encodeToCurve: () => (/* binding */ encodeToCurve),\n/* harmony export */   hashToCurve: () => (/* binding */ hashToCurve),\n/* harmony export */   hashToRistretto255: () => (/* binding */ hashToRistretto255),\n/* harmony export */   hash_to_ristretto255: () => (/* binding */ hash_to_ristretto255),\n/* harmony export */   x25519: () => (/* binding */ x25519)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha512 */ \"./node_modules/@noble/hashes/esm/sha512.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/utils */ \"./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_edwards_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract/edwards.js */ \"./node_modules/@noble/curves/esm/abstract/edwards.js\");\n/* harmony import */ var _abstract_montgomery_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./abstract/montgomery.js */ \"./node_modules/@noble/curves/esm/abstract/montgomery.js\");\n/* harmony import */ var _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract/modular.js */ \"./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _abstract_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./abstract/utils.js */ \"./node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abstract/hash-to-curve.js */ \"./node_modules/@noble/curves/esm/abstract/hash-to-curve.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n\n\n\n\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\nconst ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\nfunction ed25519_pow_2_252_3(x) {\n    const P = ED25519_P;\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P; // x^3, 11\n    const b4 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b2, _2n, P) * b2) % P; // x^15, 1111\n    const b5 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b4, _1n, P) * x) % P; // x^31\n    const b10 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b5, _5n, P) * b5) % P;\n    const b20 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b10, _10n, P) * b10) % P;\n    const b40 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b20, _20n, P) * b20) % P;\n    const b80 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b40, _40n, P) * b40) % P;\n    const b160 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b80, _80n, P) * b80) % P;\n    const b240 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b160, _80n, P) * b80) % P;\n    const b250 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b240, _10n, P) * b10) % P;\n    const pow_p_5_8 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b250, _2n, P) * x) % P;\n    // ^ To pow to (p+3)/8, multiply it by x.\n    return { pow_p_5_8, b2 };\n}\nfunction adjustScalarBytes(bytes) {\n    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n    // set the three least significant bits of the first byte\n    bytes[0] &= 248; // 0b1111_1000\n    // and the most significant bit of the last to zero,\n    bytes[31] &= 127; // 0b0111_1111\n    // set the second most significant bit of the last byte to 1\n    bytes[31] |= 64; // 0b0100_0000\n    return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u, v) {\n    const P = ED25519_P;\n    const v3 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(v * v * v, P); // v³\n    const v7 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(v3 * v3 * v, P); // v⁷\n    // (p+3)/8 and (p-5)/8\n    const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n    let x = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n    const vx2 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(v * x * x, P); // vx²\n    const root1 = x; // First root candidate\n    const root2 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(x * ED25519_SQRT_M1, P); // Second root candidate\n    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n    const useRoot2 = vx2 === (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2; // We return root2 anyway, for const-time\n    if ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.isNegativeLE)(x, P))\n        x = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(-x, P);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\n// Just in case\nconst ED25519_TORSION_SUBGROUP = [\n    '0100000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n    '0000000000000000000000000000000000000000000000000000000000000080',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n    'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n    '0000000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\nconst Fp = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.Field)(ED25519_P, undefined, true);\nconst ed25519Defaults = {\n    // Param: a\n    a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n    // Cofactor\n    h: BigInt(8),\n    // Base point (x, y) aka generator point\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n    hash: _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__.sha512,\n    randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio,\n};\nconst ed25519 = /* @__PURE__ */ (0,_abstract_edwards_js__WEBPACK_IMPORTED_MODULE_3__.twistedEdwards)(ed25519Defaults);\nfunction ed25519_domain(data, ctx, phflag) {\n    if (ctx.length > 255)\n        throw new Error('Context is too big');\n    return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.concatBytes)((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.utf8ToBytes)('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n}\nconst ed25519ctx = /* @__PURE__ */ (0,_abstract_edwards_js__WEBPACK_IMPORTED_MODULE_3__.twistedEdwards)({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n});\nconst ed25519ph = /* @__PURE__ */ (0,_abstract_edwards_js__WEBPACK_IMPORTED_MODULE_3__.twistedEdwards)({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n    prehash: _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__.sha512,\n});\nconst x25519 = /* @__PURE__ */ (() => (0,_abstract_montgomery_js__WEBPACK_IMPORTED_MODULE_4__.montgomery)({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x) => {\n        const P = ED25519_P;\n        // x^(p-2) aka x^(2^255-21)\n        const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n        return (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(pow_p_5_8, BigInt(3), P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.randomBytes,\n}))();\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nfunction edwardsToMontgomeryPub(edwardsPub) {\n    const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n    const _1n = BigInt(1);\n    return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nconst edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nfunction edwardsToMontgomeryPriv(edwardsPriv) {\n    const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n    return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u) {\n    let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n    let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n    let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n    let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n    let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n    let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n    gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n    gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n    gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n    let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n    tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n    tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n    tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n    tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n    let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n    y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n    let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n    tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n    tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n    let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n    let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n    let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n    let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n    y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n    let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n    let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n    tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n    tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n    let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n    let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n    tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n    tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n    let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n    let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n    let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n    let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n    y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n    return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\nconst ELL2_C1_EDWARDS = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.FpSqrtEven)(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u) {\n    const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n    // map_to_curve_elligator2_curve25519(u)\n    let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n    xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n    let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n    let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n    let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n    let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n    let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n    xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n    xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n    yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n    yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n    const inv = Fp.invertBatch([xd, yd]); // batch division\n    return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\nconst htf = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.createHasher)(ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {\n    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__.sha512,\n}))();\nconst hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nconst encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistPoint))\n        throw new Error('RistrettoPoint expected');\n}\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n// 1-d²\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n// (d-1)²\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n// Calculates 1/√(number)\nconst invertSqrt = (number) => uvRatio(_1n, number);\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes) => ed25519.CURVE.Fp.create((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_6__.bytesToNumberLE)(bytes) & MAX_255B);\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0) {\n    const { d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const r = mod(SQRT_M1 * r0 * r0); // 1\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n    let c = BigInt(-1); // 3\n    const D = mod((c - d * r) * mod(r + d)); // 4\n    let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n    let s_ = mod(s * r0); // 6\n    if (!(0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.isNegativeLE)(s_, P))\n        s_ = mod(-s_);\n    if (!Ns_D_is_sq)\n        s = s_; // 7\n    if (!Ns_D_is_sq)\n        c = r; // 8\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n    const s2 = s * s;\n    const W0 = mod((s + s) * D); // 10\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n    const W2 = mod(_1n - s2); // 12\n    const W3 = mod(_1n + s2); // 13\n    return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n    // Private property to discourage combining ExtendedPoint + RistrettoPoint\n    // Always use Ristretto encoding/decoding instead.\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static fromAffine(ap) {\n        return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n    }\n    /**\n     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n     * The hash-to-group operation applies Elligator twice and adds the results.\n     * **Note:** this is one-way map, there is no conversion from point to hash.\n     * https://ristretto.group/formulas/elligator.html\n     * @param hex 64-byte output of a hash function\n     */\n    static hashToCurve(hex) {\n        hex = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_6__.ensureBytes)('ristrettoHash', hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = calcElligatorRistrettoMap(r2);\n        return new RistPoint(R1.add(R2));\n    }\n    /**\n     * Converts ristretto-encoded string to ristretto point.\n     * https://ristretto.group/formulas/decoding.html\n     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n     */\n    static fromHex(hex) {\n        hex = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_6__.ensureBytes)('ristrettoHex', hex, 32);\n        const { a, d } = ed25519.CURVE;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n        // 3. Check that s is non-negative, or else abort\n        if (!(0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_6__.equalBytes)((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_6__.numberToBytesLE)(s, 32), hex) || (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.isNegativeLE)(s, P))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2); // 4 (a is -1)\n        const u2 = mod(_1n - a * s2); // 5\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2); // 6\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n        const Dx = mod(I * u2); // 8\n        const Dy = mod(I * Dx * v); // 9\n        let x = mod((s + s) * Dx); // 10\n        if ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.isNegativeLE)(x, P))\n            x = mod(-x); // 10\n        const y = mod(u1 * Dy); // 11\n        const t = mod(x * y); // 12\n        if (!isValid || (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.isNegativeLE)(t, P) || y === _0n)\n            throw new Error(emsg);\n        return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n    }\n    /**\n     * Encodes ristretto point to Uint8Array.\n     * https://ristretto.group/formulas/encoding.html\n     */\n    toRawBytes() {\n        let { ex: x, ey: y, ez: z, et: t } = this.ep;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const u1 = mod(mod(z + y) * mod(z - y)); // 1\n        const u2 = mod(x * y); // 2\n        // Square root always exists\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n        const D1 = mod(invsqrt * u1); // 4\n        const D2 = mod(invsqrt * u2); // 5\n        const zInv = mod(D1 * D2 * t); // 6\n        let D; // 7\n        if ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.isNegativeLE)(t * zInv, P)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2; // 8\n        }\n        if ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.isNegativeLE)(x * zInv, P))\n            y = mod(-y); // 9\n        let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n        if ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.isNegativeLE)(s, P))\n            s = mod(-s);\n        return (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_6__.numberToBytesLE)(s, 32); // 11\n    }\n    toHex() {\n        return (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_6__.bytesToHex)(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    // Compare one point to another.\n    equals(other) {\n        assertRstPoint(other);\n        const { ex: X1, ey: Y1 } = this.ep;\n        const { ex: X2, ey: Y2 } = other.ep;\n        const mod = ed25519.CURVE.Fp.create;\n        // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n        const one = mod(X1 * Y2) === mod(Y1 * X2);\n        const two = mod(Y1 * Y2) === mod(X1 * X2);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistPoint(this.ep.multiplyUnsafe(scalar));\n    }\n    double() {\n        return new RistPoint(this.ep.double());\n    }\n    negate() {\n        return new RistPoint(this.ep.negate());\n    }\n}\nconst RistrettoPoint = /* @__PURE__ */ (() => {\n    if (!RistPoint.BASE)\n        RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n    if (!RistPoint.ZERO)\n        RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n    return RistPoint;\n})();\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nconst hashToRistretto255 = (msg, options) => {\n    const d = options.DST;\n    const DST = typeof d === 'string' ? (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.utf8ToBytes)(d) : d;\n    const uniform_bytes = (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.expand_message_xmd)(msg, DST, 64, _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__.sha512);\n    const P = RistPoint.hashToCurve(uniform_bytes);\n    return P;\n};\nconst hash_to_ristretto255 = hashToRistretto255; // legacy\n//# sourceMappingURL=ed25519.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/curves/esm/ed25519.js?");

/***/ }),

/***/ "./node_modules/@noble/curves/esm/secp256k1.js":
/*!*****************************************************!*\
  !*** ./node_modules/@noble/curves/esm/secp256k1.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeToCurve: () => (/* binding */ encodeToCurve),\n/* harmony export */   hashToCurve: () => (/* binding */ hashToCurve),\n/* harmony export */   schnorr: () => (/* binding */ schnorr),\n/* harmony export */   secp256k1: () => (/* binding */ secp256k1)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/utils */ \"./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract/modular.js */ \"./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"./node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/* harmony import */ var _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract/utils.js */ \"./node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abstract/hash-to-curve.js */ \"./node_modules/@noble/curves/esm/abstract/hash-to-curve.js\");\n/* harmony import */ var _shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_shortw_utils.js */ \"./node_modules/@noble/curves/esm/_shortw_utils.js\");\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n\n\n\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b3, _3n, P) * b3) % P;\n    const b9 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b6, _3n, P) * b3) % P;\n    const b11 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b9, _2n, P) * b2) % P;\n    const b22 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b11, _11n, P) * b11) % P;\n    const b44 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b22, _22n, P) * b22) % P;\n    const b88 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b44, _44n, P) * b44) % P;\n    const b176 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b88, _88n, P) * b88) % P;\n    const b220 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b176, _44n, P) * b44) % P;\n    const b223 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b220, _3n, P) * b3) % P;\n    const t1 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b223, _23n, P) * b22) % P;\n    const t2 = ((0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(t1, _6n, P) * b2) % P;\n    const root = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.Field)(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nconst secp256k1 = (0,_shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__.createCurve)({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(k - c1 * a1 - c2 * a2, n);\n            let k2 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.numberToBytesBE)(n, 32);\nconst modP = (x) => (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(x, secp256k1P);\nconst modN = (x) => (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.randomBytes)(32)) {\n    const m = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('signature', signature, 64);\n    const m = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('message', message);\n    const pub = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)('publicKey', publicKey, 32);\n    try {\n        const P = lift_x((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nconst schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE: _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.numberToBytesBE,\n        bytesToNumberBE: _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE,\n        taggedHash,\n        mod: _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.isogenyMap)(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__.mapToCurveSimpleSWU)(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.createHasher)(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256,\n}))();\nconst hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nconst encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/curves/esm/secp256k1.js?");

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/_assert.js":
/*!***************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/_assert.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bool: () => (/* binding */ bool),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exists: () => (/* binding */ exists),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   output: () => (/* binding */ output)\n/* harmony export */ });\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\n\nconst assert = { number, bool, bytes, hash, exists, output };\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assert);\n//# sourceMappingURL=_assert.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/hashes/esm/_assert.js?");

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/_md.js":
/*!***********************************************!*\
  !*** ./node_modules/@noble/hashes/esm/_md.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chi: () => (/* binding */ Chi),\n/* harmony export */   HashMD: () => (/* binding */ HashMD),\n/* harmony export */   Maj: () => (/* binding */ Maj)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"./node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@noble/hashes/esm/utils.js\");\n\n\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nclass HashMD extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.output)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/hashes/esm/_md.js?");

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/_u64.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/_u64.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   add3H: () => (/* binding */ add3H),\n/* harmony export */   add3L: () => (/* binding */ add3L),\n/* harmony export */   add4H: () => (/* binding */ add4H),\n/* harmony export */   add4L: () => (/* binding */ add4L),\n/* harmony export */   add5H: () => (/* binding */ add5H),\n/* harmony export */   add5L: () => (/* binding */ add5L),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fromBig: () => (/* binding */ fromBig),\n/* harmony export */   rotlBH: () => (/* binding */ rotlBH),\n/* harmony export */   rotlBL: () => (/* binding */ rotlBL),\n/* harmony export */   rotlSH: () => (/* binding */ rotlSH),\n/* harmony export */   rotlSL: () => (/* binding */ rotlSL),\n/* harmony export */   rotr32H: () => (/* binding */ rotr32H),\n/* harmony export */   rotr32L: () => (/* binding */ rotr32L),\n/* harmony export */   rotrBH: () => (/* binding */ rotrBH),\n/* harmony export */   rotrBL: () => (/* binding */ rotrBL),\n/* harmony export */   rotrSH: () => (/* binding */ rotrSH),\n/* harmony export */   rotrSL: () => (/* binding */ rotrSL),\n/* harmony export */   shrSH: () => (/* binding */ shrSH),\n/* harmony export */   shrSL: () => (/* binding */ shrSL),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   toBig: () => (/* binding */ toBig)\n/* harmony export */ });\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\n\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (u64);\n//# sourceMappingURL=_u64.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/hashes/esm/_u64.js?");

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/crypto.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/crypto.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: () => (/* binding */ crypto)\n/* harmony export */ });\nconst crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/hashes/esm/crypto.js?");

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/hkdf.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/hkdf.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   expand: () => (/* binding */ expand),\n/* harmony export */   extract: () => (/* binding */ extract),\n/* harmony export */   hkdf: () => (/* binding */ hkdf)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"./node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _hmac_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hmac.js */ \"./node_modules/@noble/hashes/esm/hmac.js\");\n\n\n\n// HKDF (RFC 5869)\n// https://soatok.blog/2021/11/17/understanding-hkdf/\n/**\n * HKDF-Extract(IKM, salt) -> PRK\n * Arguments position differs from spec (IKM is first one, since it is not optional)\n * @param hash\n * @param ikm\n * @param salt\n * @returns\n */\nfunction extract(hash, ikm, salt) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.hash)(hash);\n    // NOTE: some libraries treat zero-length array as 'not provided';\n    // we don't, since we have undefined as 'not provided'\n    // https://github.com/RustCrypto/KDFs/issues/15\n    if (salt === undefined)\n        salt = new Uint8Array(hash.outputLen); // if not provided, it is set to a string of HashLen zeros\n    return (0,_hmac_js__WEBPACK_IMPORTED_MODULE_1__.hmac)(hash, (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(salt), (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(ikm));\n}\n// HKDF-Expand(PRK, info, L) -> OKM\nconst HKDF_COUNTER = /* @__PURE__ */ new Uint8Array([0]);\nconst EMPTY_BUFFER = /* @__PURE__ */ new Uint8Array();\n/**\n * HKDF-expand from the spec.\n * @param prk - a pseudorandom key of at least HashLen octets (usually, the output from the extract step)\n * @param info - optional context and application specific information (can be a zero-length string)\n * @param length - length of output keying material in octets\n */\nfunction expand(hash, prk, info, length = 32) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.hash)(hash);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.number)(length);\n    if (length > 255 * hash.outputLen)\n        throw new Error('Length should be <= 255*HashLen');\n    const blocks = Math.ceil(length / hash.outputLen);\n    if (info === undefined)\n        info = EMPTY_BUFFER;\n    // first L(ength) octets of T\n    const okm = new Uint8Array(blocks * hash.outputLen);\n    // Re-use HMAC instance between blocks\n    const HMAC = _hmac_js__WEBPACK_IMPORTED_MODULE_1__.hmac.create(hash, prk);\n    const HMACTmp = HMAC._cloneInto();\n    const T = new Uint8Array(HMAC.outputLen);\n    for (let counter = 0; counter < blocks; counter++) {\n        HKDF_COUNTER[0] = counter + 1;\n        // T(0) = empty string (zero length)\n        // T(N) = HMAC-Hash(PRK, T(N-1) | info | N)\n        HMACTmp.update(counter === 0 ? EMPTY_BUFFER : T)\n            .update(info)\n            .update(HKDF_COUNTER)\n            .digestInto(T);\n        okm.set(T, hash.outputLen * counter);\n        HMAC._cloneInto(HMACTmp);\n    }\n    HMAC.destroy();\n    HMACTmp.destroy();\n    T.fill(0);\n    HKDF_COUNTER.fill(0);\n    return okm.slice(0, length);\n}\n/**\n * HKDF (RFC 5869): extract + expand in one step.\n * @param hash - hash function that would be used (e.g. sha256)\n * @param ikm - input keying material, the initial key\n * @param salt - optional salt value (a non-secret random value)\n * @param info - optional context and application specific information\n * @param length - length of output keying material in octets\n */\nconst hkdf = (hash, ikm, salt, info, length) => expand(hash, extract(hash, ikm, salt), info, length);\n//# sourceMappingURL=hkdf.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/hashes/esm/hkdf.js?");

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/hmac.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/hmac.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HMAC: () => (/* binding */ HMAC),\n/* harmony export */   hmac: () => (/* binding */ hmac)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"./node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@noble/hashes/esm/utils.js\");\n\n\n// HMAC (RFC 2104)\nclass HMAC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.hash)(hash);\n        const key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.exists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.bytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/hashes/esm/hmac.js?");

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/pbkdf2.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/pbkdf2.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pbkdf2: () => (/* binding */ pbkdf2),\n/* harmony export */   pbkdf2Async: () => (/* binding */ pbkdf2Async)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"./node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _hmac_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hmac.js */ \"./node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.hash)(hash);\n    const opts = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);\n    const { c, dkLen, asyncTick } = opts;\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.number)(c);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.number)(dkLen);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.number)(asyncTick);\n    if (c < 1)\n        throw new Error('PBKDF2: iterations (c) should be >= 1');\n    const password = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(_password);\n    const salt = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(_salt);\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n    const DK = new Uint8Array(dkLen);\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    const PRF = _hmac_js__WEBPACK_IMPORTED_MODULE_2__.hmac.create(hash, password);\n    const PRFSalt = PRF._cloneInto().update(salt);\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW)\n        prfW.destroy();\n    u.fill(0);\n    return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nfunction pbkdf2(hash, password, salt, opts) {\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for (let ui = 1; ui < c; ui++) {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        }\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nasync function pbkdf2Async(hash, password, salt, opts) {\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.asyncLoop)(c - 1, asyncTick, () => {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        });\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n//# sourceMappingURL=pbkdf2.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/hashes/esm/pbkdf2.js?");

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/sha1.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/sha1.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha1: () => (/* binding */ sha1)\n/* harmony export */ });\n/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_md.js */ \"./node_modules/@noble/hashes/esm/_md.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@noble/hashes/esm/utils.js\");\n\n\n// SHA1 (RFC 3174) was cryptographically broken. It's still used. Don't use it for a new protocol.\n// Initial state\nconst SHA1_IV = /* @__PURE__ */ new Uint32Array([\n    0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\nclass SHA1 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {\n    constructor() {\n        super(64, 20, 8, false);\n        this.A = SHA1_IV[0] | 0;\n        this.B = SHA1_IV[1] | 0;\n        this.C = SHA1_IV[2] | 0;\n        this.D = SHA1_IV[3] | 0;\n        this.E = SHA1_IV[4] | 0;\n    }\n    get() {\n        const { A, B, C, D, E } = this;\n        return [A, B, C, D, E];\n    }\n    set(A, B, C, D, E) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA1_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 80; i++)\n            SHA1_W[i] = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotl)(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\n        // Compression function main loop, 80 rounds\n        let { A, B, C, D, E } = this;\n        for (let i = 0; i < 80; i++) {\n            let F, K;\n            if (i < 20) {\n                F = (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Chi)(B, C, D);\n                K = 0x5a827999;\n            }\n            else if (i < 40) {\n                F = B ^ C ^ D;\n                K = 0x6ed9eba1;\n            }\n            else if (i < 60) {\n                F = (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Maj)(B, C, D);\n                K = 0x8f1bbcdc;\n            }\n            else {\n                F = B ^ C ^ D;\n                K = 0xca62c1d6;\n            }\n            const T = ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotl)(A, 5) + F + E + K + SHA1_W[i]) | 0;\n            E = D;\n            D = C;\n            C = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotl)(B, 30);\n            B = A;\n            A = T;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        this.set(A, B, C, D, E);\n    }\n    roundClean() {\n        SHA1_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\nconst sha1 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA1());\n//# sourceMappingURL=sha1.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/hashes/esm/sha1.js?");

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/sha256.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/sha256.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha224: () => (/* binding */ sha224),\n/* harmony export */   sha256: () => (/* binding */ sha256)\n/* harmony export */ });\n/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_md.js */ \"./node_modules/@noble/hashes/esm/_md.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@noble/hashes/esm/utils.js\");\n\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 25);\n            const T1 = (H + sigma1 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 22);\n            const T2 = (sigma0 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Maj)(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA256());\nconst sha224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/hashes/esm/sha256.js?");

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/sha512.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/sha512.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SHA512: () => (/* binding */ SHA512),\n/* harmony export */   sha384: () => (/* binding */ sha384),\n/* harmony export */   sha512: () => (/* binding */ sha512),\n/* harmony export */   sha512_224: () => (/* binding */ sha512_224),\n/* harmony export */   sha512_256: () => (/* binding */ sha512_256)\n/* harmony export */ });\n/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_md.js */ \"./node_modules/@noble/hashes/esm/_md.js\");\n/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_u64.js */ \"./node_modules/@noble/hashes/esm/_u64.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nclass SHA512 extends _md_js__WEBPACK_IMPORTED_MODULE_1__.HashMD {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(W15h, W15l, 1) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(W15h, W15l, 8) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shrSH(W15h, W15l, 7);\n            const s0l = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(W15h, W15l, 1) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(W15h, W15l, 8) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(W2h, W2l, 19) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBH(W2h, W2l, 61) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shrSH(W2h, W2l, 6);\n            const s1l = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(W2h, W2l, 19) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBL(W2h, W2l, 61) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(Eh, El, 14) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(Eh, El, 18) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBH(Eh, El, 41);\n            const sigma1l = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(Eh, El, 14) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(Eh, El, 18) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSH(Ah, Al, 28) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBH(Ah, Al, 34) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBH(Ah, Al, 39);\n            const sigma0l = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrSL(Ah, Al, 28) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBL(Ah, Al, 34) ^ _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add3L(T1l, sigma0l, MAJl);\n            Ah = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nconst sha512 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(() => new SHA512());\nconst sha512_224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(() => new SHA512_224());\nconst sha512_256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(() => new SHA512_256());\nconst sha384 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.wrapConstructor)(() => new SHA384());\n//# sourceMappingURL=sha512.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/hashes/esm/sha512.js?");

/***/ }),

/***/ "./node_modules/@noble/hashes/esm/utils.js":
/*!*************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   byteSwap: () => (/* binding */ byteSwap),\n/* harmony export */   byteSwap32: () => (/* binding */ byteSwap32),\n/* harmony export */   byteSwapIfBE: () => (/* binding */ byteSwapIfBE),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   rotl: () => (/* binding */ rotl),\n/* harmony export */   rotr: () => (/* binding */ rotr),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),\n/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),\n/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/crypto */ \"./node_modules/@noble/hashes/esm/crypto.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"./node_modules/@noble/hashes/esm/_assert.js\");\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\n\n\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nconst byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nconst byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nfunction byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.bytes)(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues === 'function') {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/@noble/hashes/esm/utils.js?");

/***/ }),

/***/ "./node_modules/any-signal/dist/src/index.js":
/*!***************************************************!*\
  !*** ./node_modules/any-signal/dist/src/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anySignal: () => (/* binding */ anySignal)\n/* harmony export */ });\n/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n */\nfunction anySignal(signals) {\n    const controller = new globalThis.AbortController();\n    function onAbort() {\n        controller.abort();\n        for (const signal of signals) {\n            if (signal?.removeEventListener != null) {\n                signal.removeEventListener('abort', onAbort);\n            }\n        }\n    }\n    for (const signal of signals) {\n        if (signal?.aborted === true) {\n            onAbort();\n            break;\n        }\n        if (signal?.addEventListener != null) {\n            signal.addEventListener('abort', onAbort);\n        }\n    }\n    function clear() {\n        for (const signal of signals) {\n            if (signal?.removeEventListener != null) {\n                signal.removeEventListener('abort', onAbort);\n            }\n        }\n    }\n    const signal = controller.signal;\n    signal.clear = clear;\n    return signal;\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/any-signal/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/blockstore-core/dist/src/base.js":
/*!*******************************************************!*\
  !*** ./node_modules/blockstore-core/dist/src/base.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseBlockstore: () => (/* binding */ BaseBlockstore)\n/* harmony export */ });\nclass BaseBlockstore {\n    has(key, options) {\n        return Promise.reject(new Error('.has is not implemented'));\n    }\n    put(key, val, options) {\n        return Promise.reject(new Error('.put is not implemented'));\n    }\n    async *putMany(source, options) {\n        for await (const { cid, block } of source) {\n            await this.put(cid, block, options);\n            yield cid;\n        }\n    }\n    get(key, options) {\n        return Promise.reject(new Error('.get is not implemented'));\n    }\n    async *getMany(source, options) {\n        for await (const key of source) {\n            yield {\n                cid: key,\n                block: await this.get(key, options)\n            };\n        }\n    }\n    delete(key, options) {\n        return Promise.reject(new Error('.delete is not implemented'));\n    }\n    async *deleteMany(source, options) {\n        for await (const key of source) {\n            await this.delete(key, options);\n            yield key;\n        }\n    }\n    /**\n     * Extending classes should override `query` or implement this method\n     */\n    async *getAll(options) {\n        throw new Error('.getAll is not implemented');\n    }\n}\n//# sourceMappingURL=base.js.map\n\n//# sourceURL=webpack://ems/./node_modules/blockstore-core/dist/src/base.js?");

/***/ }),

/***/ "./node_modules/blockstore-core/dist/src/black-hole.js":
/*!*************************************************************!*\
  !*** ./node_modules/blockstore-core/dist/src/black-hole.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlackHoleBlockstore: () => (/* binding */ BlackHoleBlockstore)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/blockstore-core/dist/src/base.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/blockstore-core/dist/src/errors.js\");\n\n\nclass BlackHoleBlockstore extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseBlockstore {\n    put(key) {\n        return key;\n    }\n    get() {\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.notFoundError();\n    }\n    has() {\n        return false;\n    }\n    async delete() {\n    }\n    async *getAll() {\n    }\n}\n//# sourceMappingURL=black-hole.js.map\n\n//# sourceURL=webpack://ems/./node_modules/blockstore-core/dist/src/black-hole.js?");

/***/ }),

/***/ "./node_modules/blockstore-core/dist/src/errors.js":
/*!*********************************************************!*\
  !*** ./node_modules/blockstore-core/dist/src/errors.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   abortedError: () => (/* binding */ abortedError),\n/* harmony export */   closeFailedError: () => (/* binding */ closeFailedError),\n/* harmony export */   deleteFailedError: () => (/* binding */ deleteFailedError),\n/* harmony export */   getFailedError: () => (/* binding */ getFailedError),\n/* harmony export */   hasFailedError: () => (/* binding */ hasFailedError),\n/* harmony export */   notFoundError: () => (/* binding */ notFoundError),\n/* harmony export */   openFailedError: () => (/* binding */ openFailedError),\n/* harmony export */   putFailedError: () => (/* binding */ putFailedError)\n/* harmony export */ });\n/* harmony import */ var err_code__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! err-code */ \"./node_modules/err-code/index.js\");\n\nfunction openFailedError(err) {\n    err = err ?? new Error('Open failed');\n    return err_code__WEBPACK_IMPORTED_MODULE_0__(err, 'ERR_OPEN_FAILED');\n}\nfunction closeFailedError(err) {\n    err = err ?? new Error('Close failed');\n    return err_code__WEBPACK_IMPORTED_MODULE_0__(err, 'ERR_CLOSE_FAILED');\n}\nfunction putFailedError(err) {\n    err = err ?? new Error('Put failed');\n    return err_code__WEBPACK_IMPORTED_MODULE_0__(err, 'ERR_PUT_FAILED');\n}\nfunction getFailedError(err) {\n    err = err ?? new Error('Get failed');\n    return err_code__WEBPACK_IMPORTED_MODULE_0__(err, 'ERR_GET_FAILED');\n}\nfunction deleteFailedError(err) {\n    err = err ?? new Error('Delete failed');\n    return err_code__WEBPACK_IMPORTED_MODULE_0__(err, 'ERR_DELETE_FAILED');\n}\nfunction hasFailedError(err) {\n    err = err ?? new Error('Has failed');\n    return err_code__WEBPACK_IMPORTED_MODULE_0__(err, 'ERR_HAS_FAILED');\n}\nfunction notFoundError(err) {\n    err = err ?? new Error('Not Found');\n    return err_code__WEBPACK_IMPORTED_MODULE_0__(err, 'ERR_NOT_FOUND');\n}\nfunction abortedError(err) {\n    err = err ?? new Error('Aborted');\n    return err_code__WEBPACK_IMPORTED_MODULE_0__(err, 'ERR_ABORTED');\n}\n//# sourceMappingURL=errors.js.map\n\n//# sourceURL=webpack://ems/./node_modules/blockstore-core/dist/src/errors.js?");

/***/ }),

/***/ "./node_modules/blockstore-core/dist/src/identity.js":
/*!***********************************************************!*\
  !*** ./node_modules/blockstore-core/dist/src/identity.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IdentityBlockstore: () => (/* binding */ IdentityBlockstore)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/blockstore-core/dist/src/base.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ \"./node_modules/blockstore-core/dist/src/index.js\");\n\n\n// https://github.com/multiformats/multicodec/blob/d06fc6194710e8909bac64273c43f16b56ca4c34/table.csv#L2\nconst IDENTITY_CODEC = 0x00;\nclass IdentityBlockstore extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseBlockstore {\n    child;\n    constructor(child) {\n        super();\n        this.child = child;\n    }\n    put(key, block) {\n        if (key.multihash.code === IDENTITY_CODEC) {\n            return key;\n        }\n        if (this.child == null) {\n            return key;\n        }\n        return this.child.put(key, block);\n    }\n    get(key) {\n        if (key.multihash.code === IDENTITY_CODEC) {\n            return key.multihash.digest;\n        }\n        if (this.child == null) {\n            throw _index_js__WEBPACK_IMPORTED_MODULE_1__.Errors.notFoundError();\n        }\n        return this.child.get(key);\n    }\n    has(key) {\n        if (key.multihash.code === IDENTITY_CODEC) {\n            return true;\n        }\n        if (this.child == null) {\n            return false;\n        }\n        return this.child.has(key);\n    }\n    delete(key) {\n        if (key.code === IDENTITY_CODEC) {\n            return;\n        }\n        if (this.child != null) {\n            return this.child.delete(key);\n        }\n    }\n    getAll(options) {\n        if (this.child != null) {\n            return this.child.getAll(options);\n        }\n        return [];\n    }\n}\n//# sourceMappingURL=identity.js.map\n\n//# sourceURL=webpack://ems/./node_modules/blockstore-core/dist/src/identity.js?");

/***/ }),

/***/ "./node_modules/blockstore-core/dist/src/index.js":
/*!********************************************************!*\
  !*** ./node_modules/blockstore-core/dist/src/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseBlockstore: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseBlockstore),\n/* harmony export */   BlackHoleBlockstore: () => (/* reexport safe */ _black_hole_js__WEBPACK_IMPORTED_MODULE_3__.BlackHoleBlockstore),\n/* harmony export */   Errors: () => (/* binding */ Errors),\n/* harmony export */   MemoryBlockstore: () => (/* reexport safe */ _memory_js__WEBPACK_IMPORTED_MODULE_2__.MemoryBlockstore),\n/* harmony export */   TieredBlockstore: () => (/* reexport safe */ _tiered_js__WEBPACK_IMPORTED_MODULE_4__.TieredBlockstore)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/blockstore-core/dist/src/errors.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"./node_modules/blockstore-core/dist/src/base.js\");\n/* harmony import */ var _memory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./memory.js */ \"./node_modules/blockstore-core/dist/src/memory.js\");\n/* harmony import */ var _black_hole_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./black-hole.js */ \"./node_modules/blockstore-core/dist/src/black-hole.js\");\n/* harmony import */ var _tiered_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tiered.js */ \"./node_modules/blockstore-core/dist/src/tiered.js\");\n/**\n * @packageDocumentation\n *\n * Various Blockstore implementations are available.\n *\n * ## Implementations\n *\n * - Base: [`src/base`](src/base.ts)\n * - Memory: [`src/memory`](src/memory.ts)\n * - BlackHole: ['src/black-hole](src/black-hole.ts)\n * - Tiered: ['src/tiered](src/tiered.ts)\n *\n * @example BaseBlockstore\n *\n * Provides a complete implementation of the Blockstore interface.  You must implement `.get`, `.put`, etc.\n *\n * ```js\n * import { BaseBlockstore } from 'blockstore-core/base'\n *\n * class MyCustomBlockstore extends BaseBlockstore {\n *   put (key, val, options) {\n *     // store a block\n *   }\n *\n *   get (key, options) {\n *     // retrieve a block\n *   }\n *\n *   // ...etc\n * }\n * ```\n *\n * @example MemoryBlockstore\n *\n * A simple Blockstore that stores blocks in memory.\n *\n * ```js\n * import { MemoryBlockstore } from 'blockstore-core/memory'\n *\n * const store = new MemoryBlockstore()\n * ```\n *\n * @example BlackHoleBlockstore\n *\n * A Blockstore that does not store any blocks.\n *\n * ```js\n * import { BlackHoleBlockstore } from 'blockstore-core/black-hole'\n *\n * const store = new BlackHoleBlockstore()\n * ```\n *\n * @example TieredBlockstore\n *\n * A tiered blockstore wraps one or more blockstores and will query each in parallel to retrieve a block - the operation will succeed if any wrapped store has the block.\n *\n * Writes are invoked on all wrapped blockstores.\n *\n * ```js\n * import { TieredBlockstore } from 'blockstore-core/tiered'\n *\n * const store = new TieredBlockstore([\n *   store1,\n *   store2,\n *   // ...etc\n * ])\n * ```\n *\n * @example IdentityBlockstore\n *\n * An identity blockstore is one that deals exclusively in Identity CIDs - this is a special CID with the codec [0x00](https://github.com/multiformats/multicodec/blob/d06fc6194710e8909bac64273c43f16b56ca4c34/table.csv#L2) where the multihash digest is the data that makes up the block.\n *\n * ```TypeScript\n * import { IdentityBlockstore } from 'blockstore-core/identity'\n * import { CID } from 'multiformats/cid'\n *\n * const blockstore = new IdentityBlockstore()\n *\n * blockstore.has(CID.parse('QmFoo')) // false\n *\n * blockstore.has(CID.parse('bafkqac3imvwgy3zao5xxe3de')) // true\n * ```\n */\n\n\n\n\n\nconst Errors = {\n    ..._errors_js__WEBPACK_IMPORTED_MODULE_0__\n};\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/blockstore-core/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/blockstore-core/dist/src/memory.js":
/*!*********************************************************!*\
  !*** ./node_modules/blockstore-core/dist/src/memory.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MemoryBlockstore: () => (/* binding */ MemoryBlockstore)\n/* harmony export */ });\n/* harmony import */ var multiformats_bases_base32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/bases/base32 */ \"./node_modules/multiformats/dist/src/bases/base32.js\");\n/* harmony import */ var multiformats_cid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/cid */ \"./node_modules/multiformats/dist/src/cid.js\");\n/* harmony import */ var multiformats_codecs_raw__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! multiformats/codecs/raw */ \"./node_modules/multiformats/dist/src/codecs/raw.js\");\n/* harmony import */ var multiformats_hashes_digest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! multiformats/hashes/digest */ \"./node_modules/multiformats/dist/src/hashes/digest.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base.js */ \"./node_modules/blockstore-core/dist/src/base.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/blockstore-core/dist/src/errors.js\");\n\n\n\n\n\n\nclass MemoryBlockstore extends _base_js__WEBPACK_IMPORTED_MODULE_4__.BaseBlockstore {\n    data;\n    constructor() {\n        super();\n        this.data = new Map();\n    }\n    put(key, val) {\n        this.data.set(multiformats_bases_base32__WEBPACK_IMPORTED_MODULE_0__.base32.encode(key.multihash.bytes), val);\n        return key;\n    }\n    get(key) {\n        const buf = this.data.get(multiformats_bases_base32__WEBPACK_IMPORTED_MODULE_0__.base32.encode(key.multihash.bytes));\n        if (buf == null) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_5__.notFoundError();\n        }\n        return buf;\n    }\n    has(key) {\n        return this.data.has(multiformats_bases_base32__WEBPACK_IMPORTED_MODULE_0__.base32.encode(key.multihash.bytes));\n    }\n    async delete(key) {\n        this.data.delete(multiformats_bases_base32__WEBPACK_IMPORTED_MODULE_0__.base32.encode(key.multihash.bytes));\n    }\n    async *getAll() {\n        for (const [key, value] of this.data.entries()) {\n            yield {\n                cid: multiformats_cid__WEBPACK_IMPORTED_MODULE_1__.CID.createV1(multiformats_codecs_raw__WEBPACK_IMPORTED_MODULE_2__.code, multiformats_hashes_digest__WEBPACK_IMPORTED_MODULE_3__.decode(multiformats_bases_base32__WEBPACK_IMPORTED_MODULE_0__.base32.decode(key))),\n                block: value\n            };\n        }\n    }\n}\n//# sourceMappingURL=memory.js.map\n\n//# sourceURL=webpack://ems/./node_modules/blockstore-core/dist/src/memory.js?");

/***/ }),

/***/ "./node_modules/blockstore-core/dist/src/tiered.js":
/*!*********************************************************!*\
  !*** ./node_modules/blockstore-core/dist/src/tiered.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TieredBlockstore: () => (/* binding */ TieredBlockstore)\n/* harmony export */ });\n/* harmony import */ var _libp2p_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/logger */ \"./node_modules/@libp2p/logger/dist/src/index.js\");\n/* harmony import */ var it_drain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-drain */ \"./node_modules/it-drain/dist/src/index.js\");\n/* harmony import */ var it_filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-filter */ \"./node_modules/it-filter/dist/src/index.js\");\n/* harmony import */ var it_merge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! it-merge */ \"./node_modules/it-merge/dist/src/index.js\");\n/* harmony import */ var it_pushable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! it-pushable */ \"./node_modules/it-pushable/dist/src/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base.js */ \"./node_modules/blockstore-core/dist/src/base.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/blockstore-core/dist/src/errors.js\");\n\n\n\n\n\n\n\nconst log = (0,_libp2p_logger__WEBPACK_IMPORTED_MODULE_6__.logger)('blockstore:core:tiered');\n/**\n * A blockstore that can combine multiple stores. Puts and deletes\n * will write through to all blockstores. Has and get will\n * try each store sequentially. getAll will use every store but also\n * deduplicate any yielded pairs.\n */\nclass TieredBlockstore extends _base_js__WEBPACK_IMPORTED_MODULE_4__.BaseBlockstore {\n    stores;\n    constructor(stores) {\n        super();\n        this.stores = stores.slice();\n    }\n    async put(key, value, options) {\n        try {\n            await Promise.all(this.stores.map(async (store) => { await store.put(key, value, options); }));\n            return key;\n        }\n        catch (err) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_5__.putFailedError(err);\n        }\n    }\n    async get(key, options) {\n        for (const store of this.stores) {\n            try {\n                const res = await store.get(key, options);\n                if (res != null)\n                    return res;\n            }\n            catch (err) {\n                log.error(err);\n            }\n        }\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_5__.notFoundError();\n    }\n    async has(key, options) {\n        for (const s of this.stores) {\n            if (await s.has(key, options)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async delete(key, options) {\n        try {\n            await Promise.all(this.stores.map(async (store) => { await store.delete(key, options); }));\n        }\n        catch (err) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_5__.deleteFailedError(err);\n        }\n    }\n    async *putMany(source, options = {}) {\n        let error;\n        const pushables = this.stores.map(store => {\n            const source = (0,it_pushable__WEBPACK_IMPORTED_MODULE_3__.pushable)({\n                objectMode: true\n            });\n            (0,it_drain__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(store.putMany(source, options))\n                .catch(err => {\n                // store threw while putting, make sure we bubble the error up\n                error = err;\n            });\n            return source;\n        });\n        try {\n            for await (const pair of source) {\n                if (error != null) {\n                    throw error;\n                }\n                pushables.forEach(p => p.push(pair));\n                yield pair.cid;\n            }\n        }\n        finally {\n            pushables.forEach(p => p.end());\n        }\n    }\n    async *deleteMany(source, options = {}) {\n        let error;\n        const pushables = this.stores.map(store => {\n            const source = (0,it_pushable__WEBPACK_IMPORTED_MODULE_3__.pushable)({\n                objectMode: true\n            });\n            (0,it_drain__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(store.deleteMany(source, options))\n                .catch(err => {\n                // store threw while deleting, make sure we bubble the error up\n                error = err;\n            });\n            return source;\n        });\n        try {\n            for await (const key of source) {\n                if (error != null) {\n                    throw error;\n                }\n                pushables.forEach(p => p.push(key));\n                yield key;\n            }\n        }\n        finally {\n            pushables.forEach(p => p.end());\n        }\n    }\n    async *getAll(options) {\n        // deduplicate yielded pairs\n        const seen = new Set();\n        yield* (0,it_filter__WEBPACK_IMPORTED_MODULE_1__[\"default\"])((0,it_merge__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(...this.stores.map(s => s.getAll(options))), (pair) => {\n            const cidStr = pair.cid.toString();\n            if (seen.has(cidStr)) {\n                return false;\n            }\n            seen.add(cidStr);\n            return true;\n        });\n    }\n}\n//# sourceMappingURL=tiered.js.map\n\n//# sourceURL=webpack://ems/./node_modules/blockstore-core/dist/src/tiered.js?");

/***/ }),

/***/ "./node_modules/browser-readablestream-to-it/dist/src/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/browser-readablestream-to-it/dist/src/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ browserReadableStreamToIt)\n/* harmony export */ });\n/**\n * @packageDocumentation\n *\n * Allows treating a browser readable stream as an async iterator.\n *\n * @example\n *\n * ```javascript\n * import toIt from 'browser-readablestream-to-it'\n * import all from 'it-all'\n *\n * const content = [0, 1, 2, 3, 4]\n *\n * const stream = new ReadableStream({\n *   start(controller) {\n *     for (let i = 0; i < content.length; i++) {\n *       controller.enqueue(content[i])\n *     }\n *\n *     controller.close()\n *   }\n * })\n *\n * const arr = await all(toIt(stream))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n *\n * ## preventCancel\n *\n * By default a readable stream will have [.cancel](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/cancel) called on it once it has ended or\n * reading has stopped prematurely.\n *\n * To prevent this behaviour, pass `preventCancel: true` as an option:\n *\n * ```javascript\n * const arr = await all(toIt(stream, { preventCancel: true }))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n */\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nasync function* browserReadableStreamToIt(stream, options = {}) {\n    const reader = stream.getReader();\n    try {\n        while (true) {\n            const result = await reader.read();\n            if (result.done) {\n                return;\n            }\n            yield result.value;\n        }\n    }\n    finally {\n        if (options.preventCancel !== true) {\n            await reader.cancel();\n        }\n        reader.releaseLock();\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/browser-readablestream-to-it/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/datastore-core/dist/src/base.js":
/*!******************************************************!*\
  !*** ./node_modules/datastore-core/dist/src/base.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDatastore: () => (/* binding */ BaseDatastore)\n/* harmony export */ });\n/* harmony import */ var it_drain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-drain */ \"./node_modules/it-drain/dist/src/index.js\");\n/* harmony import */ var it_filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-filter */ \"./node_modules/it-filter/dist/src/index.js\");\n/* harmony import */ var it_sort__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! it-sort */ \"./node_modules/it-sort/dist/src/index.js\");\n/* harmony import */ var it_take__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! it-take */ \"./node_modules/it-take/dist/src/index.js\");\n\n\n\n\nclass BaseDatastore {\n    put(key, val, options) {\n        return Promise.reject(new Error('.put is not implemented'));\n    }\n    get(key, options) {\n        return Promise.reject(new Error('.get is not implemented'));\n    }\n    has(key, options) {\n        return Promise.reject(new Error('.has is not implemented'));\n    }\n    delete(key, options) {\n        return Promise.reject(new Error('.delete is not implemented'));\n    }\n    async *putMany(source, options = {}) {\n        for await (const { key, value } of source) {\n            await this.put(key, value, options);\n            yield key;\n        }\n    }\n    async *getMany(source, options = {}) {\n        for await (const key of source) {\n            yield {\n                key,\n                value: await this.get(key, options)\n            };\n        }\n    }\n    async *deleteMany(source, options = {}) {\n        for await (const key of source) {\n            await this.delete(key, options);\n            yield key;\n        }\n    }\n    batch() {\n        let puts = [];\n        let dels = [];\n        return {\n            put(key, value) {\n                puts.push({ key, value });\n            },\n            delete(key) {\n                dels.push(key);\n            },\n            commit: async (options) => {\n                await (0,it_drain__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.putMany(puts, options));\n                puts = [];\n                await (0,it_drain__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.deleteMany(dels, options));\n                dels = [];\n            }\n        };\n    }\n    /**\n     * Extending classes should override `query` or implement this method\n     */\n    // eslint-disable-next-line require-yield\n    async *_all(q, options) {\n        throw new Error('._all is not implemented');\n    }\n    /**\n     * Extending classes should override `queryKeys` or implement this method\n     */\n    // eslint-disable-next-line require-yield\n    async *_allKeys(q, options) {\n        throw new Error('._allKeys is not implemented');\n    }\n    query(q, options) {\n        let it = this._all(q, options);\n        if (q.prefix != null) {\n            const prefix = q.prefix;\n            it = (0,it_filter__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(it, (e) => e.key.toString().startsWith(prefix));\n        }\n        if (Array.isArray(q.filters)) {\n            it = q.filters.reduce((it, f) => (0,it_filter__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(it, f), it);\n        }\n        if (Array.isArray(q.orders)) {\n            it = q.orders.reduce((it, f) => (0,it_sort__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(it, f), it);\n        }\n        if (q.offset != null) {\n            let i = 0;\n            const offset = q.offset;\n            it = (0,it_filter__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(it, () => i++ >= offset);\n        }\n        if (q.limit != null) {\n            it = (0,it_take__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(it, q.limit);\n        }\n        return it;\n    }\n    queryKeys(q, options) {\n        let it = this._allKeys(q, options);\n        if (q.prefix != null) {\n            const prefix = q.prefix;\n            it = (0,it_filter__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(it, (key) => key.toString().startsWith(prefix));\n        }\n        if (Array.isArray(q.filters)) {\n            it = q.filters.reduce((it, f) => (0,it_filter__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(it, f), it);\n        }\n        if (Array.isArray(q.orders)) {\n            it = q.orders.reduce((it, f) => (0,it_sort__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(it, f), it);\n        }\n        if (q.offset != null) {\n            const offset = q.offset;\n            let i = 0;\n            it = (0,it_filter__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(it, () => i++ >= offset);\n        }\n        if (q.limit != null) {\n            it = (0,it_take__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(it, q.limit);\n        }\n        return it;\n    }\n}\n//# sourceMappingURL=base.js.map\n\n//# sourceURL=webpack://ems/./node_modules/datastore-core/dist/src/base.js?");

/***/ }),

/***/ "./node_modules/datastore-core/dist/src/errors.js":
/*!********************************************************!*\
  !*** ./node_modules/datastore-core/dist/src/errors.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   abortedError: () => (/* binding */ abortedError),\n/* harmony export */   dbDeleteFailedError: () => (/* binding */ dbDeleteFailedError),\n/* harmony export */   dbOpenFailedError: () => (/* binding */ dbOpenFailedError),\n/* harmony export */   dbReadFailedError: () => (/* binding */ dbReadFailedError),\n/* harmony export */   dbWriteFailedError: () => (/* binding */ dbWriteFailedError),\n/* harmony export */   notFoundError: () => (/* binding */ notFoundError)\n/* harmony export */ });\n/* harmony import */ var err_code__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! err-code */ \"./node_modules/err-code/index.js\");\n\nfunction dbOpenFailedError(err) {\n    err = err ?? new Error('Cannot open database');\n    return err_code__WEBPACK_IMPORTED_MODULE_0__(err, 'ERR_DB_OPEN_FAILED');\n}\nfunction dbDeleteFailedError(err) {\n    err = err ?? new Error('Delete failed');\n    return err_code__WEBPACK_IMPORTED_MODULE_0__(err, 'ERR_DB_DELETE_FAILED');\n}\nfunction dbWriteFailedError(err) {\n    err = err ?? new Error('Write failed');\n    return err_code__WEBPACK_IMPORTED_MODULE_0__(err, 'ERR_DB_WRITE_FAILED');\n}\nfunction dbReadFailedError(err) {\n    err = err ?? new Error('Read failed');\n    return err_code__WEBPACK_IMPORTED_MODULE_0__(err, 'ERR_DB_READ_FAILED');\n}\nfunction notFoundError(err) {\n    err = err ?? new Error('Not Found');\n    return err_code__WEBPACK_IMPORTED_MODULE_0__(err, 'ERR_NOT_FOUND');\n}\nfunction abortedError(err) {\n    err = err ?? new Error('Aborted');\n    return err_code__WEBPACK_IMPORTED_MODULE_0__(err, 'ERR_ABORTED');\n}\n//# sourceMappingURL=errors.js.map\n\n//# sourceURL=webpack://ems/./node_modules/datastore-core/dist/src/errors.js?");

/***/ }),

/***/ "./node_modules/datastore-core/dist/src/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/datastore-core/dist/src/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDatastore: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseDatastore),\n/* harmony export */   Errors: () => (/* reexport module object */ _errors_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   KeyTransformDatastore: () => (/* reexport safe */ _keytransform_js__WEBPACK_IMPORTED_MODULE_4__.KeyTransformDatastore),\n/* harmony export */   MemoryDatastore: () => (/* reexport safe */ _memory_js__WEBPACK_IMPORTED_MODULE_3__.MemoryDatastore),\n/* harmony export */   MountDatastore: () => (/* reexport safe */ _mount_js__WEBPACK_IMPORTED_MODULE_6__.MountDatastore),\n/* harmony export */   NamespaceDatastore: () => (/* reexport safe */ _namespace_js__WEBPACK_IMPORTED_MODULE_8__.NamespaceDatastore),\n/* harmony export */   ShardingDatastore: () => (/* reexport safe */ _sharding_js__WEBPACK_IMPORTED_MODULE_5__.ShardingDatastore),\n/* harmony export */   TieredDatastore: () => (/* reexport safe */ _tiered_js__WEBPACK_IMPORTED_MODULE_7__.TieredDatastore),\n/* harmony export */   shard: () => (/* reexport module object */ _shard_js__WEBPACK_IMPORTED_MODULE_1__)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/datastore-core/dist/src/errors.js\");\n/* harmony import */ var _shard_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shard.js */ \"./node_modules/datastore-core/dist/src/shard.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"./node_modules/datastore-core/dist/src/base.js\");\n/* harmony import */ var _memory_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./memory.js */ \"./node_modules/datastore-core/dist/src/memory.js\");\n/* harmony import */ var _keytransform_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./keytransform.js */ \"./node_modules/datastore-core/dist/src/keytransform.js\");\n/* harmony import */ var _sharding_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sharding.js */ \"./node_modules/datastore-core/dist/src/sharding.js\");\n/* harmony import */ var _mount_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mount.js */ \"./node_modules/datastore-core/dist/src/mount.js\");\n/* harmony import */ var _tiered_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tiered.js */ \"./node_modules/datastore-core/dist/src/tiered.js\");\n/* harmony import */ var _namespace_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./namespace.js */ \"./node_modules/datastore-core/dist/src/namespace.js\");\n/**\n * @packageDocumentation\n *\n * Various Datastore implementations are available.\n *\n * ## Implementations\n *\n * - Mount: [`src/mount`](src/mount.ts)\n * - Keytransform: [`src/keytransform`](src/keytransform.ts)\n * - Sharding: [`src/sharding`](src/sharding.ts)\n * - Tiered: [`src/tiered`](src/tirered.ts)\n * - Namespace: [`src/namespace`](src/namespace.ts)\n * - BlackHole: [`src/black-hole`](src/black-hole.ts)\n *\n * @example BaseDatastore\n *\n * An base store is made available to make implementing your own datastore easier:\n *\n * ```javascript\n * import { BaseDatastore } from 'datastore-core'\n *\n * class MyDatastore extends BaseDatastore {\n *   constructor () {\n *     super()\n *   }\n *\n *   async put (key, val) {\n *     // your implementation here\n *   }\n *\n *   async get (key) {\n *     // your implementation here\n *   }\n *\n *   // etc...\n * }\n * ```\n *\n * See the [MemoryDatastore](./src/memory.js) for an example of how it is used.\n *\n * @example Wrapping Stores\n *\n * ```js\n * import { Key } from 'interface-datastore'\n * import {\n *   MemoryStore,\n *   MountStore\n * } from 'datastore-core'\n *\n * const store = new MountStore({prefix: new Key('/a'), datastore: new MemoryStore()})\n * ```\n *\n * @example BlackHoleDatastore\n *\n * A datastore that does not store any data.\n *\n * ```js\n * import { BlackHoleDatastore } from 'datastore-core/black-hole'\n *\n * const store = new BlackHoleDatastore()\n * ```\n */\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/datastore-core/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/datastore-core/dist/src/keytransform.js":
/*!**************************************************************!*\
  !*** ./node_modules/datastore-core/dist/src/keytransform.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyTransformDatastore: () => (/* binding */ KeyTransformDatastore)\n/* harmony export */ });\n/* harmony import */ var it_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-map */ \"./node_modules/it-map/dist/src/index.js\");\n/* harmony import */ var it_pipe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-pipe */ \"./node_modules/it-pipe/dist/src/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"./node_modules/datastore-core/dist/src/base.js\");\n\n\n\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n */\nclass KeyTransformDatastore extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseDatastore {\n    child;\n    transform;\n    constructor(child, transform) {\n        super();\n        this.child = child;\n        this.transform = transform;\n    }\n    async put(key, val, options) {\n        await this.child.put(this.transform.convert(key), val, options);\n        return key;\n    }\n    async get(key, options) {\n        return this.child.get(this.transform.convert(key), options);\n    }\n    async has(key, options) {\n        return this.child.has(this.transform.convert(key), options);\n    }\n    async delete(key, options) {\n        await this.child.delete(this.transform.convert(key), options);\n    }\n    async *putMany(source, options = {}) {\n        const transform = this.transform;\n        const child = this.child;\n        yield* (0,it_pipe__WEBPACK_IMPORTED_MODULE_1__.pipe)(source, async function* (source) {\n            yield* (0,it_map__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(source, ({ key, value }) => ({\n                key: transform.convert(key),\n                value\n            }));\n        }, async function* (source) {\n            yield* child.putMany(source, options);\n        }, async function* (source) {\n            yield* (0,it_map__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(source, key => transform.invert(key));\n        });\n    }\n    async *getMany(source, options = {}) {\n        const transform = this.transform;\n        const child = this.child;\n        yield* (0,it_pipe__WEBPACK_IMPORTED_MODULE_1__.pipe)(source, async function* (source) {\n            yield* (0,it_map__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(source, key => transform.convert(key));\n        }, async function* (source) {\n            yield* child.getMany(source, options);\n        }, async function* (source) {\n            yield* (0,it_map__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(source, ({ key, value }) => ({\n                key: transform.invert(key),\n                value\n            }));\n        });\n    }\n    async *deleteMany(source, options = {}) {\n        const transform = this.transform;\n        const child = this.child;\n        yield* (0,it_pipe__WEBPACK_IMPORTED_MODULE_1__.pipe)(source, async function* (source) {\n            yield* (0,it_map__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(source, key => transform.convert(key));\n        }, async function* (source) {\n            yield* child.deleteMany(source, options);\n        }, async function* (source) {\n            yield* (0,it_map__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(source, key => transform.invert(key));\n        });\n    }\n    batch() {\n        const b = this.child.batch();\n        return {\n            put: (key, value) => {\n                b.put(this.transform.convert(key), value);\n            },\n            delete: (key) => {\n                b.delete(this.transform.convert(key));\n            },\n            commit: async (options) => {\n                await b.commit(options);\n            }\n        };\n    }\n    query(q, options) {\n        const query = {\n            ...q\n        };\n        query.filters = (query.filters ?? []).map(filter => {\n            return ({ key, value }) => filter({ key: this.transform.convert(key), value });\n        });\n        const { prefix } = q;\n        if (prefix != null && prefix !== '/') {\n            delete query.prefix;\n            query.filters.push(({ key }) => {\n                return this.transform.invert(key).toString().startsWith(prefix);\n            });\n        }\n        if (query.orders != null) {\n            query.orders = query.orders.map(order => {\n                return (a, b) => order({ key: this.transform.invert(a.key), value: a.value }, { key: this.transform.invert(b.key), value: b.value });\n            });\n        }\n        return (0,it_map__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.child.query(query, options), ({ key, value }) => {\n            return {\n                key: this.transform.invert(key),\n                value\n            };\n        });\n    }\n    queryKeys(q, options) {\n        const query = {\n            ...q\n        };\n        query.filters = (query.filters ?? []).map(filter => {\n            return (key) => filter(this.transform.convert(key));\n        });\n        const { prefix } = q;\n        if (prefix != null && prefix !== '/') {\n            delete query.prefix;\n            query.filters.push((key) => {\n                return this.transform.invert(key).toString().startsWith(prefix);\n            });\n        }\n        if (query.orders != null) {\n            query.orders = query.orders.map(order => {\n                return (a, b) => order(this.transform.invert(a), this.transform.invert(b));\n            });\n        }\n        return (0,it_map__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.child.queryKeys(query, options), key => {\n            return this.transform.invert(key);\n        });\n    }\n}\n//# sourceMappingURL=keytransform.js.map\n\n//# sourceURL=webpack://ems/./node_modules/datastore-core/dist/src/keytransform.js?");

/***/ }),

/***/ "./node_modules/datastore-core/dist/src/memory.js":
/*!********************************************************!*\
  !*** ./node_modules/datastore-core/dist/src/memory.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MemoryDatastore: () => (/* binding */ MemoryDatastore)\n/* harmony export */ });\n/* harmony import */ var interface_datastore_key__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! interface-datastore/key */ \"./node_modules/interface-datastore/dist/src/key.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"./node_modules/datastore-core/dist/src/base.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/datastore-core/dist/src/errors.js\");\n\n\n\nclass MemoryDatastore extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseDatastore {\n    data;\n    constructor() {\n        super();\n        this.data = new Map();\n    }\n    put(key, val) {\n        this.data.set(key.toString(), val);\n        return key;\n    }\n    get(key) {\n        const result = this.data.get(key.toString());\n        if (result == null) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.notFoundError();\n        }\n        return result;\n    }\n    has(key) {\n        return this.data.has(key.toString());\n    }\n    delete(key) {\n        this.data.delete(key.toString());\n    }\n    *_all() {\n        for (const [key, value] of this.data.entries()) {\n            yield { key: new interface_datastore_key__WEBPACK_IMPORTED_MODULE_0__.Key(key), value };\n        }\n    }\n    *_allKeys() {\n        for (const key of this.data.keys()) {\n            yield new interface_datastore_key__WEBPACK_IMPORTED_MODULE_0__.Key(key);\n        }\n    }\n}\n//# sourceMappingURL=memory.js.map\n\n//# sourceURL=webpack://ems/./node_modules/datastore-core/dist/src/memory.js?");

/***/ }),

/***/ "./node_modules/datastore-core/dist/src/mount.js":
/*!*******************************************************!*\
  !*** ./node_modules/datastore-core/dist/src/mount.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MountDatastore: () => (/* binding */ MountDatastore)\n/* harmony export */ });\n/* harmony import */ var it_filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-filter */ \"./node_modules/it-filter/dist/src/index.js\");\n/* harmony import */ var it_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-merge */ \"./node_modules/it-merge/dist/src/index.js\");\n/* harmony import */ var it_sort__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! it-sort */ \"./node_modules/it-sort/dist/src/index.js\");\n/* harmony import */ var it_take__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! it-take */ \"./node_modules/it-take/dist/src/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base.js */ \"./node_modules/datastore-core/dist/src/base.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/datastore-core/dist/src/errors.js\");\n\n\n\n\n\n\n/**\n * A datastore that can combine multiple stores inside various\n * key prefixes\n */\nclass MountDatastore extends _base_js__WEBPACK_IMPORTED_MODULE_4__.BaseDatastore {\n    mounts;\n    constructor(mounts) {\n        super();\n        this.mounts = mounts.slice();\n    }\n    /**\n     * Lookup the matching datastore for the given key\n     */\n    _lookup(key) {\n        for (const mount of this.mounts) {\n            if (mount.prefix.toString() === key.toString() || mount.prefix.isAncestorOf(key)) {\n                return {\n                    datastore: mount.datastore,\n                    mountpoint: mount.prefix\n                };\n            }\n        }\n    }\n    async put(key, value, options) {\n        const match = this._lookup(key);\n        if (match == null) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_5__.dbWriteFailedError(new Error('No datastore mounted for this key'));\n        }\n        await match.datastore.put(key, value, options);\n        return key;\n    }\n    /**\n     * @param {Key} key\n     * @param {Options} [options]\n     */\n    async get(key, options = {}) {\n        const match = this._lookup(key);\n        if (match == null) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_5__.notFoundError(new Error('No datastore mounted for this key'));\n        }\n        return match.datastore.get(key, options);\n    }\n    async has(key, options) {\n        const match = this._lookup(key);\n        if (match == null) {\n            return Promise.resolve(false);\n        }\n        return match.datastore.has(key, options);\n    }\n    async delete(key, options) {\n        const match = this._lookup(key);\n        if (match == null) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_5__.dbDeleteFailedError(new Error('No datastore mounted for this key'));\n        }\n        await match.datastore.delete(key, options);\n    }\n    batch() {\n        const batchMounts = {};\n        const lookup = (key) => {\n            const match = this._lookup(key);\n            if (match == null) {\n                throw new Error('No datastore mounted for this key');\n            }\n            const m = match.mountpoint.toString();\n            if (batchMounts[m] == null) {\n                batchMounts[m] = match.datastore.batch();\n            }\n            return {\n                batch: batchMounts[m]\n            };\n        };\n        return {\n            put: (key, value) => {\n                const match = lookup(key);\n                match.batch.put(key, value);\n            },\n            delete: (key) => {\n                const match = lookup(key);\n                match.batch.delete(key);\n            },\n            commit: async (options) => {\n                await Promise.all(Object.keys(batchMounts).map(async (p) => { await batchMounts[p].commit(options); }));\n            }\n        };\n    }\n    query(q, options) {\n        const qs = this.mounts.map(m => {\n            return m.datastore.query({\n                prefix: q.prefix,\n                filters: q.filters\n            }, options);\n        });\n        let it = (0,it_merge__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(...qs);\n        if (q.filters != null)\n            q.filters.forEach(f => { it = (0,it_filter__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(it, f); });\n        if (q.orders != null)\n            q.orders.forEach(o => { it = (0,it_sort__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(it, o); });\n        if (q.offset != null) {\n            let i = 0;\n            const offset = q.offset;\n            it = (0,it_filter__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(it, () => i++ >= offset);\n        }\n        if (q.limit != null)\n            it = (0,it_take__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(it, q.limit);\n        return it;\n    }\n    queryKeys(q, options) {\n        const qs = this.mounts.map(m => {\n            return m.datastore.queryKeys({\n                prefix: q.prefix,\n                filters: q.filters\n            }, options);\n        });\n        /** @type AsyncIterable<Key> */\n        let it = (0,it_merge__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(...qs);\n        if (q.filters != null)\n            q.filters.forEach(f => { it = (0,it_filter__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(it, f); });\n        if (q.orders != null)\n            q.orders.forEach(o => { it = (0,it_sort__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(it, o); });\n        if (q.offset != null) {\n            let i = 0;\n            const offset = q.offset;\n            it = (0,it_filter__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(it, () => i++ >= offset);\n        }\n        if (q.limit != null)\n            it = (0,it_take__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(it, q.limit);\n        return it;\n    }\n}\n//# sourceMappingURL=mount.js.map\n\n//# sourceURL=webpack://ems/./node_modules/datastore-core/dist/src/mount.js?");

/***/ }),

/***/ "./node_modules/datastore-core/dist/src/namespace.js":
/*!***********************************************************!*\
  !*** ./node_modules/datastore-core/dist/src/namespace.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NamespaceDatastore: () => (/* binding */ NamespaceDatastore)\n/* harmony export */ });\n/* harmony import */ var interface_datastore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! interface-datastore */ \"./node_modules/interface-datastore/dist/src/index.js\");\n/* harmony import */ var it_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-map */ \"./node_modules/it-map/dist/src/index.js\");\n/* harmony import */ var _keytransform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keytransform.js */ \"./node_modules/datastore-core/dist/src/keytransform.js\");\n\n\n\n/**\n * Wraps a given datastore into a keytransform which\n * makes a given prefix transparent.\n *\n * For example, if the prefix is `new Key(/hello)` a call\n * to `store.put(new Key('/world'), mydata)` would store the data under\n * `/hello/world`.\n */\nclass NamespaceDatastore extends _keytransform_js__WEBPACK_IMPORTED_MODULE_2__.KeyTransformDatastore {\n    iChild;\n    iKey;\n    constructor(child, prefix) {\n        super(child, {\n            convert(key) {\n                return prefix.child(key);\n            },\n            invert(key) {\n                if (prefix.toString() === '/') {\n                    return key;\n                }\n                if (!prefix.isAncestorOf(key)) {\n                    throw new Error(`Expected prefix: (${prefix.toString()}) in key: ${key.toString()}`);\n                }\n                return new interface_datastore__WEBPACK_IMPORTED_MODULE_0__.Key(key.toString().slice(prefix.toString().length), false);\n            }\n        });\n        this.iChild = child;\n        this.iKey = prefix;\n    }\n    query(q, options) {\n        const query = {\n            ...q\n        };\n        query.filters = (query.filters ?? []).map(filter => {\n            return ({ key, value }) => filter({ key: this.transform.invert(key), value });\n        });\n        const { prefix } = q;\n        if (prefix != null && prefix !== '/') {\n            delete query.prefix;\n            query.filters.push(({ key }) => {\n                return this.transform.invert(key).toString().startsWith(prefix);\n            });\n        }\n        if (query.orders != null) {\n            query.orders = query.orders.map(order => {\n                return (a, b) => order({ key: this.transform.invert(a.key), value: a.value }, { key: this.transform.invert(b.key), value: b.value });\n            });\n        }\n        query.filters.unshift(({ key }) => this.iKey.isAncestorOf(key));\n        return (0,it_map__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this.iChild.query(query, options), ({ key, value }) => {\n            return {\n                key: this.transform.invert(key),\n                value\n            };\n        });\n    }\n    queryKeys(q, options) {\n        const query = {\n            ...q\n        };\n        query.filters = (query.filters ?? []).map(filter => {\n            return (key) => filter(this.transform.invert(key));\n        });\n        const { prefix } = q;\n        if (prefix != null && prefix !== '/') {\n            delete query.prefix;\n            query.filters.push((key) => {\n                return this.transform.invert(key).toString().startsWith(prefix);\n            });\n        }\n        if (query.orders != null) {\n            query.orders = query.orders.map(order => {\n                return (a, b) => order(this.transform.invert(a), this.transform.invert(b));\n            });\n        }\n        query.filters.unshift(key => this.iKey.isAncestorOf(key));\n        return (0,it_map__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this.iChild.queryKeys(query, options), key => {\n            return this.transform.invert(key);\n        });\n    }\n}\n//# sourceMappingURL=namespace.js.map\n\n//# sourceURL=webpack://ems/./node_modules/datastore-core/dist/src/namespace.js?");

/***/ }),

/***/ "./node_modules/datastore-core/dist/src/shard.js":
/*!*******************************************************!*\
  !*** ./node_modules/datastore-core/dist/src/shard.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NextToLast: () => (/* binding */ NextToLast),\n/* harmony export */   PREFIX: () => (/* binding */ PREFIX),\n/* harmony export */   Prefix: () => (/* binding */ Prefix),\n/* harmony export */   SHARDING_FN: () => (/* binding */ SHARDING_FN),\n/* harmony export */   ShardBase: () => (/* binding */ ShardBase),\n/* harmony export */   Suffix: () => (/* binding */ Suffix),\n/* harmony export */   parseShardFun: () => (/* binding */ parseShardFun),\n/* harmony export */   readShardFun: () => (/* binding */ readShardFun)\n/* harmony export */ });\n/* harmony import */ var interface_datastore_key__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! interface-datastore/key */ \"./node_modules/interface-datastore/dist/src/key.js\");\n\nconst PREFIX = '/repo/flatfs/shard/';\nconst SHARDING_FN = 'SHARDING';\nclass ShardBase {\n    param;\n    name;\n    _padding;\n    constructor(param) {\n        this.param = param;\n        this.name = 'base';\n        this._padding = '';\n    }\n    fun(s) {\n        return 'implement me';\n    }\n    toString() {\n        return `${PREFIX}v1/${this.name}/${this.param}`;\n    }\n}\nclass Prefix extends ShardBase {\n    constructor(prefixLen) {\n        super(prefixLen);\n        this._padding = ''.padStart(prefixLen, '_');\n        this.name = 'prefix';\n    }\n    fun(noslash) {\n        return (noslash + this._padding).slice(0, this.param);\n    }\n}\nclass Suffix extends ShardBase {\n    constructor(suffixLen) {\n        super(suffixLen);\n        this._padding = ''.padStart(suffixLen, '_');\n        this.name = 'suffix';\n    }\n    fun(noslash) {\n        const s = this._padding + noslash;\n        return s.slice(s.length - this.param);\n    }\n}\nclass NextToLast extends ShardBase {\n    constructor(suffixLen) {\n        super(suffixLen);\n        this._padding = ''.padStart(suffixLen + 1, '_');\n        this.name = 'next-to-last';\n    }\n    fun(noslash) {\n        const s = this._padding + noslash;\n        const offset = s.length - this.param - 1;\n        return s.slice(offset, offset + this.param);\n    }\n}\n/**\n * Convert a given string to the matching sharding function\n */\nfunction parseShardFun(str) {\n    str = str.trim();\n    if (str.length === 0) {\n        throw new Error('empty shard string');\n    }\n    if (!str.startsWith(PREFIX)) {\n        throw new Error(`invalid or no path prefix: ${str}`);\n    }\n    const parts = str.slice(PREFIX.length).split('/');\n    const version = parts[0];\n    if (version !== 'v1') {\n        throw new Error(`expect 'v1' version, got '${version}'`);\n    }\n    const name = parts[1];\n    if (parts[2] == null || parts[2] === '') {\n        throw new Error('missing param');\n    }\n    const param = parseInt(parts[2], 10);\n    switch (name) {\n        case 'prefix':\n            return new Prefix(param);\n        case 'suffix':\n            return new Suffix(param);\n        case 'next-to-last':\n            return new NextToLast(param);\n        default:\n            throw new Error(`unkown sharding function: ${name}`);\n    }\n}\nconst readShardFun = async (path, store) => {\n    const key = new interface_datastore_key__WEBPACK_IMPORTED_MODULE_0__.Key(path).child(new interface_datastore_key__WEBPACK_IMPORTED_MODULE_0__.Key(SHARDING_FN));\n    // @ts-expect-error not all stores have this\n    const get = typeof store.getRaw === 'function' ? store.getRaw.bind(store) : store.get.bind(store);\n    const res = await get(key);\n    return parseShardFun(new TextDecoder().decode(res ?? '').trim());\n};\n//# sourceMappingURL=shard.js.map\n\n//# sourceURL=webpack://ems/./node_modules/datastore-core/dist/src/shard.js?");

/***/ }),

/***/ "./node_modules/datastore-core/dist/src/sharding.js":
/*!**********************************************************!*\
  !*** ./node_modules/datastore-core/dist/src/sharding.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ShardingDatastore: () => (/* binding */ ShardingDatastore)\n/* harmony export */ });\n/* harmony import */ var interface_datastore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! interface-datastore */ \"./node_modules/interface-datastore/dist/src/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"./node_modules/datastore-core/dist/src/base.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/datastore-core/dist/src/errors.js\");\n/* harmony import */ var _keytransform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./keytransform.js */ \"./node_modules/datastore-core/dist/src/keytransform.js\");\n/* harmony import */ var _shard_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shard.js */ \"./node_modules/datastore-core/dist/src/shard.js\");\n\n\n\n\n\nconst shardKey = new interface_datastore__WEBPACK_IMPORTED_MODULE_0__.Key(_shard_js__WEBPACK_IMPORTED_MODULE_4__.SHARDING_FN);\n/**\n * Backend independent abstraction of go-ds-flatfs.\n *\n * Wraps another datastore such that all values are stored\n * sharded according to the given sharding function.\n */\nclass ShardingDatastore extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseDatastore {\n    child;\n    shard;\n    constructor(store, shard) {\n        super();\n        this.child = new _keytransform_js__WEBPACK_IMPORTED_MODULE_3__.KeyTransformDatastore(store, {\n            convert: this._convertKey.bind(this),\n            invert: this._invertKey.bind(this)\n        });\n        this.shard = shard;\n    }\n    async open() {\n        this.shard = await ShardingDatastore.create(this.child, this.shard);\n    }\n    _convertKey(key) {\n        const s = key.toString();\n        if (s === shardKey.toString()) {\n            return key;\n        }\n        const parent = new interface_datastore__WEBPACK_IMPORTED_MODULE_0__.Key(this.shard.fun(s));\n        return parent.child(key);\n    }\n    _invertKey(key) {\n        const s = key.toString();\n        if (s === shardKey.toString()) {\n            return key;\n        }\n        return interface_datastore__WEBPACK_IMPORTED_MODULE_0__.Key.withNamespaces(key.list().slice(1));\n    }\n    static async create(store, shard) {\n        const hasShard = await store.has(shardKey);\n        if (!hasShard) {\n            if (shard == null) {\n                throw _errors_js__WEBPACK_IMPORTED_MODULE_2__.dbOpenFailedError(Error('Shard is required when datastore doesn\\'t have a shard key already.'));\n            }\n            await store.put(shardKey, new TextEncoder().encode(shard.toString() + '\\n'));\n        }\n        if (shard == null) {\n            shard = await (0,_shard_js__WEBPACK_IMPORTED_MODULE_4__.readShardFun)('/', store);\n        }\n        // test shards\n        const diskShard = await (0,_shard_js__WEBPACK_IMPORTED_MODULE_4__.readShardFun)('/', store);\n        const a = diskShard.toString();\n        const b = shard.toString();\n        if (a !== b) {\n            throw new Error(`specified fun ${b} does not match repo shard fun ${a}`);\n        }\n        return diskShard;\n    }\n    async put(key, val, options) {\n        await this.child.put(key, val, options);\n        return key;\n    }\n    async get(key, options) {\n        return this.child.get(key, options);\n    }\n    async has(key, options) {\n        return this.child.has(key, options);\n    }\n    async delete(key, options) {\n        await this.child.delete(key, options);\n    }\n    async *putMany(source, options = {}) {\n        yield* this.child.putMany(source, options);\n    }\n    async *getMany(source, options = {}) {\n        yield* this.child.getMany(source, options);\n    }\n    async *deleteMany(source, options = {}) {\n        yield* this.child.deleteMany(source, options);\n    }\n    batch() {\n        return this.child.batch();\n    }\n    query(q, options) {\n        const omitShard = ({ key }) => key.toString() !== shardKey.toString();\n        const tq = {\n            ...q,\n            filters: [\n                omitShard\n            ].concat(q.filters ?? [])\n        };\n        return this.child.query(tq, options);\n    }\n    queryKeys(q, options) {\n        const omitShard = (key) => key.toString() !== shardKey.toString();\n        const tq = {\n            ...q,\n            filters: [\n                omitShard\n            ].concat(q.filters ?? [])\n        };\n        return this.child.queryKeys(tq, options);\n    }\n}\n//# sourceMappingURL=sharding.js.map\n\n//# sourceURL=webpack://ems/./node_modules/datastore-core/dist/src/sharding.js?");

/***/ }),

/***/ "./node_modules/datastore-core/dist/src/tiered.js":
/*!********************************************************!*\
  !*** ./node_modules/datastore-core/dist/src/tiered.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TieredDatastore: () => (/* binding */ TieredDatastore)\n/* harmony export */ });\n/* harmony import */ var _libp2p_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/logger */ \"./node_modules/@libp2p/logger/dist/src/index.js\");\n/* harmony import */ var it_drain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-drain */ \"./node_modules/it-drain/dist/src/index.js\");\n/* harmony import */ var it_pushable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-pushable */ \"./node_modules/it-pushable/dist/src/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"./node_modules/datastore-core/dist/src/base.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/datastore-core/dist/src/errors.js\");\n\n\n\n\n\nconst log = (0,_libp2p_logger__WEBPACK_IMPORTED_MODULE_4__.logger)('datastore:core:tiered');\n/**\n * A datastore that can combine multiple stores. Puts and deletes\n * will write through to all datastores. Has and get will\n * try each store sequentially. Query will always try the\n * last one first.\n *\n */\nclass TieredDatastore extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseDatastore {\n    stores;\n    constructor(stores) {\n        super();\n        this.stores = stores.slice();\n    }\n    async put(key, value, options) {\n        try {\n            await Promise.all(this.stores.map(async (store) => { await store.put(key, value, options); }));\n            return key;\n        }\n        catch (err) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_3__.dbWriteFailedError(err);\n        }\n    }\n    async get(key, options) {\n        for (const store of this.stores) {\n            try {\n                const res = await store.get(key, options);\n                if (res != null)\n                    return res;\n            }\n            catch (err) {\n                log.error(err);\n            }\n        }\n        throw _errors_js__WEBPACK_IMPORTED_MODULE_3__.notFoundError();\n    }\n    async has(key, options) {\n        for (const s of this.stores) {\n            if (await s.has(key, options)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async delete(key, options) {\n        try {\n            await Promise.all(this.stores.map(async (store) => { await store.delete(key, options); }));\n        }\n        catch (err) {\n            throw _errors_js__WEBPACK_IMPORTED_MODULE_3__.dbDeleteFailedError(err);\n        }\n    }\n    async *putMany(source, options = {}) {\n        let error;\n        const pushables = this.stores.map(store => {\n            const source = (0,it_pushable__WEBPACK_IMPORTED_MODULE_1__.pushable)({\n                objectMode: true\n            });\n            (0,it_drain__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(store.putMany(source, options))\n                .catch(err => {\n                // store threw while putting, make sure we bubble the error up\n                error = err;\n            });\n            return source;\n        });\n        try {\n            for await (const pair of source) {\n                if (error != null) {\n                    throw error;\n                }\n                pushables.forEach(p => p.push(pair));\n                yield pair.key;\n            }\n        }\n        finally {\n            pushables.forEach(p => p.end());\n        }\n    }\n    async *deleteMany(source, options = {}) {\n        let error;\n        const pushables = this.stores.map(store => {\n            const source = (0,it_pushable__WEBPACK_IMPORTED_MODULE_1__.pushable)({\n                objectMode: true\n            });\n            (0,it_drain__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(store.deleteMany(source, options))\n                .catch(err => {\n                // store threw while deleting, make sure we bubble the error up\n                error = err;\n            });\n            return source;\n        });\n        try {\n            for await (const key of source) {\n                if (error != null) {\n                    throw error;\n                }\n                pushables.forEach(p => p.push(key));\n                yield key;\n            }\n        }\n        finally {\n            pushables.forEach(p => p.end());\n        }\n    }\n    batch() {\n        const batches = this.stores.map(store => store.batch());\n        return {\n            put: (key, value) => {\n                batches.forEach(b => { b.put(key, value); });\n            },\n            delete: (key) => {\n                batches.forEach(b => { b.delete(key); });\n            },\n            commit: async (options) => {\n                for (const batch of batches) {\n                    await batch.commit(options);\n                }\n            }\n        };\n    }\n    query(q, options) {\n        return this.stores[this.stores.length - 1].query(q, options);\n    }\n    queryKeys(q, options) {\n        return this.stores[this.stores.length - 1].queryKeys(q, options);\n    }\n}\n//# sourceMappingURL=tiered.js.map\n\n//# sourceURL=webpack://ems/./node_modules/datastore-core/dist/src/tiered.js?");

/***/ }),

/***/ "./node_modules/delay/index.js":
/*!*************************************!*\
  !*** ./node_modules/delay/index.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearDelay: () => (/* binding */ clearDelay),\n/* harmony export */   createDelay: () => (/* binding */ createDelay),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   rangeDelay: () => (/* binding */ rangeDelay)\n/* harmony export */ });\n// From https://github.com/sindresorhus/random-int/blob/c37741b56f76b9160b0b63dae4e9c64875128146/index.js#L13-L15\nconst randomInteger = (minimum, maximum) => Math.floor((Math.random() * (maximum - minimum + 1)) + minimum);\n\nconst createAbortError = () => {\n\tconst error = new Error('Delay aborted');\n\terror.name = 'AbortError';\n\treturn error;\n};\n\nconst clearMethods = new WeakMap();\n\nfunction createDelay({clearTimeout: defaultClear, setTimeout: defaultSet} = {}) {\n\t// We cannot use `async` here as we need the promise identity.\n\treturn (milliseconds, {value, signal} = {}) => {\n\t\t// TODO: Use `signal?.throwIfAborted()` when targeting Node.js 18.\n\t\tif (signal?.aborted) {\n\t\t\treturn Promise.reject(createAbortError());\n\t\t}\n\n\t\tlet timeoutId;\n\t\tlet settle;\n\t\tlet rejectFunction;\n\t\tconst clear = defaultClear ?? clearTimeout;\n\n\t\tconst signalListener = () => {\n\t\t\tclear(timeoutId);\n\t\t\trejectFunction(createAbortError());\n\t\t};\n\n\t\tconst cleanup = () => {\n\t\t\tif (signal) {\n\t\t\t\tsignal.removeEventListener('abort', signalListener);\n\t\t\t}\n\t\t};\n\n\t\tconst delayPromise = new Promise((resolve, reject) => {\n\t\t\tsettle = () => {\n\t\t\t\tcleanup();\n\t\t\t\tresolve(value);\n\t\t\t};\n\n\t\t\trejectFunction = reject;\n\t\t\ttimeoutId = (defaultSet ?? setTimeout)(settle, milliseconds);\n\t\t});\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', signalListener, {once: true});\n\t\t}\n\n\t\tclearMethods.set(delayPromise, () => {\n\t\t\tclear(timeoutId);\n\t\t\ttimeoutId = null;\n\t\t\tsettle();\n\t\t});\n\n\t\treturn delayPromise;\n\t};\n}\n\nconst delay = createDelay();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (delay);\n\nasync function rangeDelay(minimum, maximum, options = {}) {\n\treturn delay(randomInteger(minimum, maximum), options);\n}\n\nfunction clearDelay(promise) {\n\tclearMethods.get(promise)?.();\n}\n\n\n//# sourceURL=webpack://ems/./node_modules/delay/index.js?");

/***/ }),

/***/ "./node_modules/get-iterator/dist/src/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/get-iterator/dist/src/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getIterator: () => (/* binding */ getIterator)\n/* harmony export */ });\nfunction getIterator(obj) {\n    if (obj != null) {\n        if (typeof obj[Symbol.iterator] === 'function') {\n            return obj[Symbol.iterator]();\n        }\n        if (typeof obj[Symbol.asyncIterator] === 'function') {\n            return obj[Symbol.asyncIterator]();\n        }\n        if (typeof obj.next === 'function') {\n            return obj; // probably an iterator\n        }\n    }\n    throw new Error('argument is not an iterator or iterable');\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/get-iterator/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/helia/dist/src/helia-p2p.js":
/*!**************************************************!*\
  !*** ./node_modules/helia/dist/src/helia-p2p.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HeliaP2P: () => (/* binding */ HeliaP2P)\n/* harmony export */ });\n/* harmony import */ var _helia_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @helia/utils */ \"./node_modules/@helia/utils/dist/src/index.js\");\n\nclass HeliaP2P extends _helia_utils__WEBPACK_IMPORTED_MODULE_0__.Helia {\n    libp2p;\n    constructor(init) {\n        super({\n            ...init,\n            components: {\n                libp2p: init.libp2p\n            }\n        });\n        this.libp2p = init.libp2p;\n    }\n    async start() {\n        await super.start();\n        await this.libp2p.start();\n    }\n    async stop() {\n        await super.stop();\n        await this.libp2p.stop();\n    }\n}\n//# sourceMappingURL=helia-p2p.js.map\n\n//# sourceURL=webpack://ems/./node_modules/helia/dist/src/helia-p2p.js?");

/***/ }),

/***/ "./node_modules/helia/dist/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/helia/dist/src/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHelia: () => (/* binding */ createHelia),\n/* harmony export */   libp2pDefaults: () => (/* reexport safe */ _utils_libp2p_defaults_js__WEBPACK_IMPORTED_MODULE_4__.libp2pDefaults)\n/* harmony export */ });\n/* harmony import */ var _helia_block_brokers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @helia/block-brokers */ \"./node_modules/@helia/block-brokers/dist/src/index.js\");\n/* harmony import */ var _helia_routers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @helia/routers */ \"./node_modules/@helia/routers/dist/src/libp2p-routing.js\");\n/* harmony import */ var blockstore_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! blockstore-core */ \"./node_modules/blockstore-core/dist/src/index.js\");\n/* harmony import */ var datastore_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! datastore-core */ \"./node_modules/datastore-core/dist/src/index.js\");\n/* harmony import */ var _helia_p2p_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helia-p2p.js */ \"./node_modules/helia/dist/src/helia-p2p.js\");\n/* harmony import */ var _utils_libp2p_defaults_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/libp2p-defaults.js */ \"./node_modules/helia/dist/src/utils/libp2p-defaults.browser.js\");\n/* harmony import */ var _utils_libp2p_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/libp2p.js */ \"./node_modules/helia/dist/src/utils/libp2p.js\");\n/* harmony import */ var _helia_interface__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @helia/interface */ \"./node_modules/@helia/interface/dist/src/index.js\");\n/**\n * @packageDocumentation\n *\n * Exports a `createHelia` function that returns an object that implements the {@link Helia} API.\n *\n * Pass it to other modules like {@link https://www.npmjs.com/package/@helia/unixfs | @helia/unixfs} to make files available on the distributed web.\n *\n * @example\n *\n * ```typescript\n * import { createHelia } from 'helia'\n * import { unixfs } from '@helia/unixfs'\n * import { CID } from 'multiformats/cid'\n *\n * const helia = await createHelia()\n *\n * const fs = unixfs(helia)\n * fs.cat(CID.parse('bafyFoo'))\n * ```\n */\n\n\n\n\n\n\n\n// re-export interface types so people don't have to depend on @helia/interface\n// if they don't want to\n\n\nasync function createHelia(init = {}) {\n    const datastore = init.datastore ?? new datastore_core__WEBPACK_IMPORTED_MODULE_2__.MemoryDatastore();\n    const blockstore = init.blockstore ?? new blockstore_core__WEBPACK_IMPORTED_MODULE_1__.MemoryBlockstore();\n    let libp2p;\n    if (isLibp2p(init.libp2p)) {\n        libp2p = init.libp2p;\n    }\n    else {\n        libp2p = await (0,_utils_libp2p_js__WEBPACK_IMPORTED_MODULE_5__.createLibp2p)({\n            ...init,\n            libp2p: {\n                dns: init.dns,\n                ...init.libp2p,\n                // ignore the libp2p start parameter as it should be on the main init\n                // object instead\n                start: undefined\n            },\n            datastore\n        });\n    }\n    const helia = new _helia_p2p_js__WEBPACK_IMPORTED_MODULE_3__.HeliaP2P({\n        ...init,\n        libp2p,\n        datastore,\n        blockstore,\n        blockBrokers: init.blockBrokers ?? [\n            (0,_helia_block_brokers__WEBPACK_IMPORTED_MODULE_0__.trustlessGateway)(),\n            (0,_helia_block_brokers__WEBPACK_IMPORTED_MODULE_0__.bitswap)()\n        ],\n        routers: [\n            (0,_helia_routers__WEBPACK_IMPORTED_MODULE_7__.libp2pRouting)(libp2p)\n        ]\n    });\n    if (init.start !== false) {\n        await helia.start();\n    }\n    return helia;\n}\nfunction isLibp2p(obj) {\n    if (obj == null) {\n        return false;\n    }\n    // a non-exhaustive list of methods found on the libp2p object\n    const funcs = ['dial', 'dialProtocol', 'hangUp', 'handle', 'unhandle', 'getMultiaddrs', 'getProtocols'];\n    // if these are all functions it's probably a libp2p object\n    return funcs.every(m => typeof obj[m] === 'function');\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/helia/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/helia/dist/src/utils/bootstrappers.js":
/*!************************************************************!*\
  !*** ./node_modules/helia/dist/src/utils/bootstrappers.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bootstrapConfig: () => (/* binding */ bootstrapConfig)\n/* harmony export */ });\n// this list comes from https://github.com/ipfs/kubo/blob/da28fbc65a2e0f1ce59f9923823326ae2bc4f713/config/bootstrap_peers.go#L17\nconst bootstrapConfig = {\n    list: [\n        '/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN',\n        '/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',\n        '/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',\n        '/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt',\n        '/ip4/104.131.131.82/tcp/4001/p2p/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ'\n    ]\n};\n//# sourceMappingURL=bootstrappers.js.map\n\n//# sourceURL=webpack://ems/./node_modules/helia/dist/src/utils/bootstrappers.js?");

/***/ }),

/***/ "./node_modules/helia/dist/src/utils/libp2p-defaults.browser.js":
/*!**********************************************************************!*\
  !*** ./node_modules/helia/dist/src/utils/libp2p-defaults.browser.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   libp2pDefaults: () => (/* binding */ libp2pDefaults)\n/* harmony export */ });\n/* harmony import */ var _chainsafe_libp2p_noise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chainsafe/libp2p-noise */ \"./node_modules/@chainsafe/libp2p-noise/dist/src/index.js\");\n/* harmony import */ var _chainsafe_libp2p_yamux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chainsafe/libp2p-yamux */ \"./node_modules/@chainsafe/libp2p-yamux/dist/src/index.js\");\n/* harmony import */ var _helia_delegated_routing_v1_http_api_client__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @helia/delegated-routing-v1-http-api-client */ \"./node_modules/@helia/delegated-routing-v1-http-api-client/dist/src/index.js\");\n/* harmony import */ var _libp2p_autonat__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @libp2p/autonat */ \"./node_modules/@libp2p/autonat/dist/src/index.js\");\n/* harmony import */ var _libp2p_bootstrap__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @libp2p/bootstrap */ \"./node_modules/@libp2p/bootstrap/dist/src/index.js\");\n/* harmony import */ var _libp2p_circuit_relay_v2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/circuit-relay-v2 */ \"./node_modules/@libp2p/circuit-relay-v2/dist/src/transport/index.js\");\n/* harmony import */ var _libp2p_dcutr__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @libp2p/dcutr */ \"./node_modules/@libp2p/dcutr/dist/src/index.js\");\n/* harmony import */ var _libp2p_identify__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @libp2p/identify */ \"./node_modules/@libp2p/identify/dist/src/index.js\");\n/* harmony import */ var _libp2p_kad_dht__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @libp2p/kad-dht */ \"./node_modules/@libp2p/kad-dht/dist/src/index.js\");\n/* harmony import */ var _libp2p_keychain__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @libp2p/keychain */ \"./node_modules/@libp2p/keychain/dist/src/index.js\");\n/* harmony import */ var _libp2p_mplex__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/mplex */ \"./node_modules/@libp2p/mplex/dist/src/index.js\");\n/* harmony import */ var _libp2p_ping__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @libp2p/ping */ \"./node_modules/@libp2p/ping/dist/src/index.js\");\n/* harmony import */ var _libp2p_webrtc__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/webrtc */ \"./node_modules/@libp2p/webrtc/dist/src/index.js\");\n/* harmony import */ var _libp2p_websockets__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/websockets */ \"./node_modules/@libp2p/websockets/dist/src/index.js\");\n/* harmony import */ var _libp2p_webtransport__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/webtransport */ \"./node_modules/@libp2p/webtransport/dist/src/index.js\");\n/* harmony import */ var ipns_selector__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ipns/selector */ \"./node_modules/ipns/dist/src/selector.js\");\n/* harmony import */ var ipns_validator__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ipns/validator */ \"./node_modules/ipns/dist/src/validator.js\");\n/* harmony import */ var libp2p_version__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! libp2p/version */ \"./node_modules/libp2p/dist/src/version.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../version.js */ \"./node_modules/helia/dist/src/version.js\");\n/* harmony import */ var _bootstrappers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bootstrappers.js */ \"./node_modules/helia/dist/src/utils/bootstrappers.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction libp2pDefaults(options = {}) {\n    return {\n        peerId: options.peerId,\n        dns: options.dns,\n        addresses: {\n            listen: [\n                '/webrtc'\n            ]\n        },\n        transports: [\n            (0,_libp2p_circuit_relay_v2__WEBPACK_IMPORTED_MODULE_4__.circuitRelayTransport)({\n                discoverRelays: 1\n            }),\n            (0,_libp2p_webrtc__WEBPACK_IMPORTED_MODULE_5__.webRTC)(),\n            (0,_libp2p_webrtc__WEBPACK_IMPORTED_MODULE_5__.webRTCDirect)(),\n            (0,_libp2p_webtransport__WEBPACK_IMPORTED_MODULE_6__.webTransport)(),\n            (0,_libp2p_websockets__WEBPACK_IMPORTED_MODULE_7__.webSockets)()\n        ],\n        connectionEncryption: [\n            (0,_chainsafe_libp2p_noise__WEBPACK_IMPORTED_MODULE_0__.noise)()\n        ],\n        streamMuxers: [\n            (0,_chainsafe_libp2p_yamux__WEBPACK_IMPORTED_MODULE_1__.yamux)(),\n            (0,_libp2p_mplex__WEBPACK_IMPORTED_MODULE_8__.mplex)()\n        ],\n        peerDiscovery: [\n            (0,_libp2p_bootstrap__WEBPACK_IMPORTED_MODULE_9__.bootstrap)(_bootstrappers_js__WEBPACK_IMPORTED_MODULE_3__.bootstrapConfig)\n        ],\n        services: {\n            autoNAT: (0,_libp2p_autonat__WEBPACK_IMPORTED_MODULE_10__.autoNAT)(),\n            dcutr: (0,_libp2p_dcutr__WEBPACK_IMPORTED_MODULE_11__.dcutr)(),\n            delegatedRouting: () => (0,_helia_delegated_routing_v1_http_api_client__WEBPACK_IMPORTED_MODULE_12__.createDelegatedRoutingV1HttpApiClient)('https://delegated-ipfs.dev'),\n            dht: (0,_libp2p_kad_dht__WEBPACK_IMPORTED_MODULE_13__.kadDHT)({\n                clientMode: true,\n                validators: {\n                    ipns: ipns_validator__WEBPACK_IMPORTED_MODULE_14__.ipnsValidator\n                },\n                selectors: {\n                    ipns: ipns_selector__WEBPACK_IMPORTED_MODULE_15__.ipnsSelector\n                }\n            }),\n            identify: (0,_libp2p_identify__WEBPACK_IMPORTED_MODULE_16__.identify)({\n                agentVersion: `${_version_js__WEBPACK_IMPORTED_MODULE_2__.name}/${_version_js__WEBPACK_IMPORTED_MODULE_2__.version} ${libp2p_version__WEBPACK_IMPORTED_MODULE_17__.name}/${libp2p_version__WEBPACK_IMPORTED_MODULE_17__.version} UserAgent=${globalThis.navigator.userAgent}`\n            }),\n            keychain: (0,_libp2p_keychain__WEBPACK_IMPORTED_MODULE_18__.keychain)(options.keychain),\n            ping: (0,_libp2p_ping__WEBPACK_IMPORTED_MODULE_19__.ping)()\n        }\n    };\n}\n//# sourceMappingURL=libp2p-defaults.browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/helia/dist/src/utils/libp2p-defaults.browser.js?");

/***/ }),

/***/ "./node_modules/helia/dist/src/utils/libp2p.js":
/*!*****************************************************!*\
  !*** ./node_modules/helia/dist/src/utils/libp2p.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLibp2p: () => (/* binding */ createLibp2p)\n/* harmony export */ });\n/* harmony import */ var _libp2p_keychain__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/keychain */ \"./node_modules/@libp2p/keychain/dist/src/index.js\");\n/* harmony import */ var _libp2p_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/logger */ \"./node_modules/@libp2p/logger/dist/src/index.js\");\n/* harmony import */ var interface_datastore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! interface-datastore */ \"./node_modules/interface-datastore/dist/src/index.js\");\n/* harmony import */ var libp2p__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! libp2p */ \"./node_modules/libp2p/dist/src/index.js\");\n/* harmony import */ var _libp2p_defaults_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./libp2p-defaults.js */ \"./node_modules/helia/dist/src/utils/libp2p-defaults.browser.js\");\n\n\n\n\n\nasync function createLibp2p(options) {\n    const peerId = options.libp2p?.peerId;\n    const logger = options.logger ?? (0,_libp2p_logger__WEBPACK_IMPORTED_MODULE_2__.defaultLogger)();\n    const selfKey = new interface_datastore__WEBPACK_IMPORTED_MODULE_0__.Key('/pkcs8/self');\n    let chain;\n    // if no peer id was passed, try to load it from the keychain\n    if (peerId == null && options.datastore != null) {\n        chain = (0,_libp2p_keychain__WEBPACK_IMPORTED_MODULE_3__.keychain)(options.keychain)({\n            datastore: options.datastore,\n            logger\n        });\n        if (await options.datastore.has(selfKey)) {\n            // load the peer id from the keychain\n            options.libp2p = options.libp2p ?? {};\n            options.libp2p.peerId = await chain.exportPeerId('self');\n        }\n    }\n    const defaults = (0,_libp2p_defaults_js__WEBPACK_IMPORTED_MODULE_1__.libp2pDefaults)(options);\n    defaults.datastore = defaults.datastore ?? options.datastore;\n    options = options ?? {};\n    // @ts-expect-error derived ServiceMap is not compatible with ServiceFactoryMap\n    const node = await (0,libp2p__WEBPACK_IMPORTED_MODULE_4__.createLibp2p)({\n        ...defaults,\n        ...options.libp2p,\n        start: false\n    });\n    if (peerId == null && chain != null && !await options.datastore.has(selfKey)) {\n        // persist the peer id in the keychain for next time\n        await chain.importPeer('self', node.peerId);\n    }\n    return node;\n}\n//# sourceMappingURL=libp2p.js.map\n\n//# sourceURL=webpack://ems/./node_modules/helia/dist/src/utils/libp2p.js?");

/***/ }),

/***/ "./node_modules/helia/dist/src/version.js":
/*!************************************************!*\
  !*** ./node_modules/helia/dist/src/version.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nconst version = '4.1.0';\nconst name = 'helia';\n//# sourceMappingURL=version.js.map\n\n//# sourceURL=webpack://ems/./node_modules/helia/dist/src/version.js?");

/***/ }),

/***/ "./node_modules/interface-datastore/dist/src/index.js":
/*!************************************************************!*\
  !*** ./node_modules/interface-datastore/dist/src/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Key: () => (/* reexport safe */ _key_js__WEBPACK_IMPORTED_MODULE_0__.Key)\n/* harmony export */ });\n/* harmony import */ var _key_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./key.js */ \"./node_modules/interface-datastore/dist/src/key.js\");\n/* eslint-disable @typescript-eslint/ban-types */\n// this ignore is so we can use {} as the default value for the options\n// extensions below - it normally means \"any non-nullish value\" but here\n// we are using it as an intersection type - see the aside at the bottom:\n// https://github.com/typescript-eslint/typescript-eslint/issues/2063#issuecomment-675156492\n/**\n * @packageDocumentation\n *\n * A Datastore is a key/value database that lets store/retrieve binary blobs using namespaced Keys.\n *\n * It is used by IPFS to store/retrieve arbitrary metadata needed to run the node - DHT provider records, signed peer records, etc.\n *\n * ## Backed Implementations\n *\n * - File System: [`datastore-fs`](https://github.com/ipfs/js-stores/tree/main/packages/datastore-fs)\n * - IndexedDB: [`datastore-idb`](https://github.com/ipfs/js-stores/blob/main/packages/datastore-idb)\n * - level: [`datastore-level`](https://github.com/ipfs/js-stores/tree/main/packages/datastore-level) (supports any levelup compatible backend)\n * - Memory: [`datastore-core/memory`](https://github.com/ipfs/js-stores/blob/main/packages/datastore-core/src/memory.ts)\n * - S3: [`datastore-s3`](https://github.com/ipfs/js-stores/tree/main/packages/datastore-s3)\n *\n * ## Wrapper Implementations\n *\n * - Keytransform: [`datstore-core/src/keytransform`](https://github.com/ipfs/js-stores/blob/main/packages/datastore-core/src/keytransform.ts)\n * - Mount: [`datastore-core/src/mount`](https://github.com/ipfs/js-stores/blob/main/packages/datastore-core/src/mount.ts)\n * - Namespace: [`datastore-core/src/namespace`](https://github.com/ipfs/js-stores/blob/main/packages/datastore-core/src/namespace.ts)\n * - Sharding: [`datastore-core/src/sharding`](https://github.com/ipfs/js-stores/blob/main/packages/datastore-core/src/sharding.ts)\n * - Tiered: [`datstore-core/src/tiered`](https://github.com/ipfs/js-stores/blob/main/packages/datastore-core/src/tiered.ts)\n *\n * If you want the same functionality as [go-ds-flatfs](https://github.com/ipfs/go-ds-flatfs), use sharding with fs.\n *\n * @example\n *\n * ```js\n * import FsStore from 'datastore-fs'\n * import { ShardingDataStore, shard } from 'datastore-core'\n *\n * const fs = new FsStore('path/to/store')\n *\n * // flatfs now works like go-flatfs\n * const flatfs = await ShardingStore.createOrOpen(fs, new shard.NextToLast(2))\n * ```\n *\n * ### Test suite\n *\n * Available via the [`interface-datastore-tests`](https://npmjs.com/package/interface-datastore-tests) module\n *\n * ```js\n * import { interfaceDatastoreTests } from 'interface-datastore-tests'\n *\n * describe('mystore', () => {\n *   interfaceDatastoreTests({\n *     async setup () {\n *       return instanceOfMyStore\n *     },\n *     async teardown () {\n *       // cleanup resources\n *     }\n *   })\n * })\n * ```\n *\n * ### Aborting requests\n *\n * Most API methods accept an \\[AbortSignal]\\[] as part of an options object.  Implementations may listen for an `abort` event emitted by this object, or test the `signal.aborted` property. When received implementations should tear down any long-lived requests or resources created.\n *\n * ### Concurrency\n *\n * The streaming `(put|get|delete)Many` methods are intended to be used with modules such as [it-parallel-batch](https://www.npmjs.com/package/it-parallel-batch) to allow calling code to control levels of parallelisation.  The batching method ensures results are returned in the correct order, but interface implementations should be thread safe.\n *\n * ```js\n * import batch from 'it-parallel-batch'\n * const source = [{\n *   key: ..,\n *   value: ..\n * }]\n *\n * // put values into the datastore concurrently, max 10 at a time\n * for await (const { key, data } of batch(store.putMany(source), 10)) {\n *   console.info(`Put ${key}`)\n * }\n * ```\n *\n * ### Keys\n *\n * To allow a better abstraction on how to address values, there is a `Key` class which is used as identifier. It's easy to create a key from a `Uint8Array` or a `string`.\n *\n * ```js\n * const a = new Key('a')\n * const b = new Key(new Uint8Array([0, 1, 2, 3]))\n * ```\n *\n * The key scheme is inspired by file systems and Google App Engine key model. Keys are meant to be unique across a system. They are typically hierarchical, incorporating more and more specific namespaces. Thus keys can be deemed 'children' or 'ancestors' of other keys:\n *\n * - `new Key('/Comedy')`\n * - `new Key('/Comedy/MontyPython')`\n *\n * Also, every namespace can be parameterized to embed relevant object information. For example, the Key `name` (most specific namespace) could include the object type:\n *\n * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`\n */\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/interface-datastore/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/interface-datastore/dist/src/key.js":
/*!**********************************************************!*\
  !*** ./node_modules/interface-datastore/dist/src/key.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Key: () => (/* binding */ Key)\n/* harmony export */ });\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n\n\nconst pathSepS = '/';\nconst pathSepB = new TextEncoder().encode(pathSepS);\nconst pathSep = pathSepB[0];\n/**\n * A Key represents the unique identifier of an object.\n * Our Key scheme is inspired by file systems and Google App Engine key model.\n * Keys are meant to be unique across a system. Keys are hierarchical,\n * incorporating more and more specific namespaces. Thus keys can be deemed\n * 'children' or 'ancestors' of other keys:\n * - `new Key('/Comedy')`\n * - `new Key('/Comedy/MontyPython')`\n * Also, every namespace can be parametrized to embed relevant object\n * information. For example, the Key `name` (most specific namespace) could\n * include the object type:\n * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`\n *\n */\nclass Key {\n    _buf;\n    /**\n     * @param {string | Uint8Array} s\n     * @param {boolean} [clean]\n     */\n    constructor(s, clean) {\n        if (typeof s === 'string') {\n            this._buf = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_0__.fromString)(s);\n        }\n        else if (s instanceof Uint8Array) {\n            this._buf = s;\n        }\n        else {\n            throw new Error('Invalid key, should be String of Uint8Array');\n        }\n        if (clean == null) {\n            clean = true;\n        }\n        if (clean) {\n            this.clean();\n        }\n        if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {\n            throw new Error('Invalid key');\n        }\n    }\n    /**\n     * Convert to the string representation\n     *\n     * @param {import('uint8arrays/to-string').SupportedEncodings} [encoding='utf8'] - The encoding to use.\n     * @returns {string}\n     */\n    toString(encoding = 'utf8') {\n        return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)(this._buf, encoding);\n    }\n    /**\n     * Return the Uint8Array representation of the key\n     *\n     * @returns {Uint8Array}\n     */\n    uint8Array() {\n        return this._buf;\n    }\n    /**\n     * Return string representation of the key\n     *\n     * @returns {string}\n     */\n    get [Symbol.toStringTag]() {\n        return `Key(${this.toString()})`;\n    }\n    /**\n     * Constructs a key out of a namespace array.\n     *\n     * @param {Array<string>} list - The array of namespaces\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * Key.withNamespaces(['one', 'two'])\n     * // => Key('/one/two')\n     * ```\n     */\n    static withNamespaces(list) {\n        return new Key(list.join(pathSepS));\n    }\n    /**\n     * Returns a randomly (uuid) generated key.\n     *\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * Key.random()\n     * // => Key('/344502982398')\n     * ```\n     */\n    static random() {\n        return new Key(Math.random().toString().substring(2));\n    }\n    /**\n     * @param {*} other\n     */\n    static asKey(other) {\n        if (other instanceof Uint8Array || typeof other === 'string') {\n            // we can create a key from this\n            return new Key(other);\n        }\n        if (typeof other.uint8Array === 'function') {\n            // this is an older version or may have crossed the esm/cjs boundary\n            return new Key(other.uint8Array());\n        }\n        return null;\n    }\n    /**\n     * Cleanup the current key\n     *\n     * @returns {void}\n     */\n    clean() {\n        if (this._buf == null || this._buf.byteLength === 0) {\n            this._buf = pathSepB;\n        }\n        if (this._buf[0] !== pathSep) {\n            const bytes = new Uint8Array(this._buf.byteLength + 1);\n            bytes.fill(pathSep, 0, 1);\n            bytes.set(this._buf, 1);\n            this._buf = bytes;\n        }\n        // normalize does not remove trailing slashes\n        while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {\n            this._buf = this._buf.subarray(0, -1);\n        }\n    }\n    /**\n     * Check if the given key is sorted lower than ourself.\n     *\n     * @param {Key} key - The other Key to check against\n     * @returns {boolean}\n     */\n    less(key) {\n        const list1 = this.list();\n        const list2 = key.list();\n        for (let i = 0; i < list1.length; i++) {\n            if (list2.length < i + 1) {\n                return false;\n            }\n            const c1 = list1[i];\n            const c2 = list2[i];\n            if (c1 < c2) {\n                return true;\n            }\n            else if (c1 > c2) {\n                return false;\n            }\n        }\n        return list1.length < list2.length;\n    }\n    /**\n     * Returns the key with all parts in reversed order.\n     *\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()\n     * // => Key('/Actor:JohnCleese/MontyPython/Comedy')\n     * ```\n     */\n    reverse() {\n        return Key.withNamespaces(this.list().slice().reverse());\n    }\n    /**\n     * Returns the `namespaces` making up this Key.\n     *\n     * @returns {Array<string>}\n     */\n    namespaces() {\n        return this.list();\n    }\n    /** Returns the \"base\" namespace of this key.\n     *\n     * @returns {string}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()\n     * // => 'Actor:JohnCleese'\n     * ```\n     */\n    baseNamespace() {\n        const ns = this.namespaces();\n        return ns[ns.length - 1];\n    }\n    /**\n     * Returns the `list` representation of this key.\n     *\n     * @returns {Array<string>}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()\n     * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']\n     * ```\n     */\n    list() {\n        return this.toString().split(pathSepS).slice(1);\n    }\n    /**\n     * Returns the \"type\" of this key (value of last namespace).\n     *\n     * @returns {string}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()\n     * // => 'Actor'\n     * ```\n     */\n    type() {\n        return namespaceType(this.baseNamespace());\n    }\n    /**\n     * Returns the \"name\" of this key (field of last namespace).\n     *\n     * @returns {string}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()\n     * // => 'JohnCleese'\n     * ```\n     */\n    name() {\n        return namespaceValue(this.baseNamespace());\n    }\n    /**\n     * Returns an \"instance\" of this type key (appends value to namespace).\n     *\n     * @param {string} s - The string to append.\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')\n     * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n     * ```\n     */\n    instance(s) {\n        return new Key(this.toString() + ':' + s);\n    }\n    /**\n     * Returns the \"path\" of this key (parent + type).\n     *\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()\n     * // => Key('/Comedy/MontyPython/Actor')\n     * ```\n     */\n    path() {\n        let p = this.parent().toString();\n        if (!p.endsWith(pathSepS)) {\n            p += pathSepS;\n        }\n        p += this.type();\n        return new Key(p);\n    }\n    /**\n     * Returns the `parent` Key of this Key.\n     *\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key(\"/Comedy/MontyPython/Actor:JohnCleese\").parent()\n     * // => Key(\"/Comedy/MontyPython\")\n     * ```\n     */\n    parent() {\n        const list = this.list();\n        if (list.length === 1) {\n            return new Key(pathSepS);\n        }\n        return new Key(list.slice(0, -1).join(pathSepS));\n    }\n    /**\n     * Returns the `child` Key of this Key.\n     *\n     * @param {Key} key - The child Key to add\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))\n     * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n     * ```\n     */\n    child(key) {\n        if (this.toString() === pathSepS) {\n            return key;\n        }\n        else if (key.toString() === pathSepS) {\n            return this;\n        }\n        return new Key(this.toString() + key.toString(), false);\n    }\n    /**\n     * Returns whether this key is a prefix of `other`\n     *\n     * @param {Key} other - The other key to test against\n     * @returns {boolean}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')\n     * // => true\n     * ```\n     */\n    isAncestorOf(other) {\n        if (other.toString() === this.toString()) {\n            return false;\n        }\n        return other.toString().startsWith(this.toString());\n    }\n    /**\n     * Returns whether this key is a contains another as prefix.\n     *\n     * @param {Key} other - The other Key to test against\n     * @returns {boolean}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')\n     * // => true\n     * ```\n     */\n    isDecendantOf(other) {\n        if (other.toString() === this.toString()) {\n            return false;\n        }\n        return this.toString().startsWith(other.toString());\n    }\n    /**\n     * Checks if this key has only one namespace.\n     *\n     * @returns {boolean}\n     */\n    isTopLevel() {\n        return this.list().length === 1;\n    }\n    /**\n     * Concats one or more Keys into one new Key.\n     *\n     * @param {Array<Key>} keys - The array of keys to concatenate\n     * @returns {Key}\n     */\n    concat(...keys) {\n        return Key.withNamespaces([...this.namespaces(), ...flatten(keys.map(key => key.namespaces()))]);\n    }\n}\n/**\n * The first component of a namespace. `foo` in `foo:bar`\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceType(ns) {\n    const parts = ns.split(':');\n    if (parts.length < 2) {\n        return '';\n    }\n    return parts.slice(0, -1).join(':');\n}\n/**\n * The last component of a namespace, `baz` in `foo:bar:baz`.\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceValue(ns) {\n    const parts = ns.split(':');\n    return parts[parts.length - 1];\n}\n/**\n * Flatten array of arrays (only one level)\n *\n * @template T\n * @param {Array<any>} arr\n * @returns {T[]}\n */\nfunction flatten(arr) {\n    return ([]).concat(...arr);\n}\n//# sourceMappingURL=key.js.map\n\n//# sourceURL=webpack://ems/./node_modules/interface-datastore/dist/src/key.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/bitswap.js":
/*!*******************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/bitswap.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultBitswap: () => (/* binding */ DefaultBitswap)\n/* harmony export */ });\n/* harmony import */ var any_signal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! any-signal */ \"./node_modules/any-signal/dist/src/index.js\");\n/* harmony import */ var it_foreach__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-foreach */ \"./node_modules/it-foreach/dist/src/index.js\");\n/* harmony import */ var multiformats_cid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! multiformats/cid */ \"./node_modules/multiformats/dist/src/cid.js\");\n/* harmony import */ var _decision_engine_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./decision-engine/index.js */ \"./node_modules/ipfs-bitswap/dist/src/decision-engine/index.js\");\n/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./network.js */ \"./node_modules/ipfs-bitswap/dist/src/network.js\");\n/* harmony import */ var _notifications_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./notifications.js */ \"./node_modules/ipfs-bitswap/dist/src/notifications.js\");\n/* harmony import */ var _stats_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stats/index.js */ \"./node_modules/ipfs-bitswap/dist/src/stats/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/index.js */ \"./node_modules/ipfs-bitswap/dist/src/utils/index.js\");\n/* harmony import */ var _want_manager_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./want-manager/index.js */ \"./node_modules/ipfs-bitswap/dist/src/want-manager/index.js\");\n\n\n\n\n\n\n\n\n\nconst hashLoader = {\n    async getHasher() {\n        throw new Error('Not implemented');\n    }\n};\nconst defaultOptions = {\n    maxInboundStreams: 1024,\n    maxOutboundStreams: 1024,\n    incomingStreamTimeout: 30000,\n    hashLoader,\n    statsEnabled: false,\n    statsComputeThrottleTimeout: 1000,\n    statsComputeThrottleMaxQueueSize: 1000\n};\nconst statsKeys = [\n    'blocksReceived',\n    'dataReceived',\n    'dupBlksReceived',\n    'dupDataReceived',\n    'blocksSent',\n    'dataSent',\n    'providesBufferLength',\n    'wantListLength',\n    'peerCount'\n];\n/**\n * JavaScript implementation of the Bitswap 'data exchange' protocol\n * used by IPFS.\n */\nclass DefaultBitswap {\n    _libp2p;\n    _log;\n    stats;\n    network;\n    blockstore;\n    engine;\n    wm;\n    notifications;\n    started;\n    constructor(libp2p, blockstore, options = {}) {\n        this._libp2p = libp2p;\n        this._log = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.logger)(this.peerId);\n        options = Object.assign({}, defaultOptions, options);\n        // stats\n        this.stats = new _stats_index_js__WEBPACK_IMPORTED_MODULE_4__.Stats(libp2p, statsKeys, {\n            enabled: options.statsEnabled,\n            computeThrottleTimeout: options.statsComputeThrottleTimeout,\n            computeThrottleMaxQueueSize: options.statsComputeThrottleMaxQueueSize\n        });\n        // the network delivers messages\n        this.network = new _network_js__WEBPACK_IMPORTED_MODULE_5__.Network(libp2p, this, this.stats, {\n            hashLoader: options.hashLoader,\n            maxInboundStreams: options.maxInboundStreams,\n            maxOutboundStreams: options.maxOutboundStreams,\n            incomingStreamTimeout: options.incomingStreamTimeout\n        });\n        // local database\n        this.blockstore = blockstore;\n        this.engine = new _decision_engine_index_js__WEBPACK_IMPORTED_MODULE_6__.DecisionEngine(this.peerId, blockstore, this.network, this.stats, libp2p);\n        // handle message sending\n        this.wm = new _want_manager_index_js__WEBPACK_IMPORTED_MODULE_7__.WantManager(this.peerId, this.network, this.stats, libp2p);\n        this.notifications = new _notifications_js__WEBPACK_IMPORTED_MODULE_8__.Notifications(this.peerId);\n        this.started = false;\n    }\n    isStarted() {\n        return this.started;\n    }\n    get peerId() {\n        return this._libp2p.peerId;\n    }\n    /**\n     * handle messages received through the network\n     */\n    async _receiveMessage(peerId, incoming) {\n        try {\n            // Note: this allows the engine to respond to any wants in the message.\n            // Processing of the blocks in the message happens below, after the\n            // blocks have been added to the blockstore.\n            await this.engine.messageReceived(peerId, incoming);\n        }\n        catch (err) {\n            // Log instead of throwing an error so as to process as much as\n            // possible of the message. Currently `messageReceived` does not\n            // throw any errors, but this could change in the future.\n            this._log('failed to receive message', incoming);\n        }\n        if (incoming.blocks.size === 0) {\n            return;\n        }\n        /** @type { { cid: CID, wasWanted: boolean, data: Uint8Array }[] } */\n        const received = [];\n        for (const [cidStr, data] of incoming.blocks.entries()) {\n            const cid = multiformats_cid__WEBPACK_IMPORTED_MODULE_2__.CID.parse(cidStr);\n            received.push({\n                wasWanted: this.wm.wantlist.contains(cid),\n                cid,\n                data\n            });\n        }\n        // quickly send out cancels, reduces chances of duplicate block receives\n        this.wm.cancelWants(received\n            .filter(({ wasWanted }) => wasWanted)\n            .map(({ cid }) => cid));\n        await Promise.all(received.map(async ({ cid, wasWanted, data }) => { await this._handleReceivedBlock(peerId, cid, data, wasWanted); }));\n    }\n    async _handleReceivedBlock(peerId, cid, data, wasWanted) {\n        this._log('received block');\n        const has = await this.blockstore.has(cid);\n        this._updateReceiveCounters(peerId.toString(), cid, data, has);\n        if (!wasWanted) {\n            return;\n        }\n        await this.put(cid, data);\n    }\n    _updateReceiveCounters(peerIdStr, cid, data, exists) {\n        this.stats.push(peerIdStr, 'blocksReceived', 1);\n        this.stats.push(peerIdStr, 'dataReceived', data.length);\n        if (exists) {\n            this.stats.push(peerIdStr, 'dupBlksReceived', 1);\n            this.stats.push(peerIdStr, 'dupDataReceived', data.length);\n        }\n    }\n    /**\n     * handle errors on the receiving channel\n     */\n    _receiveError(err) {\n        this._log.error('ReceiveError', err);\n    }\n    /**\n     * handle new peers\n     */\n    _onPeerConnected(peerId) {\n        this.wm.connected(peerId);\n    }\n    /**\n     * handle peers being disconnected\n     */\n    _onPeerDisconnected(peerId) {\n        this.wm.disconnected(peerId);\n        this.engine.peerDisconnected(peerId);\n        this.stats.disconnected(peerId);\n    }\n    enableStats() {\n        this.stats.enable();\n    }\n    disableStats() {\n        this.stats.disable();\n    }\n    /**\n     * Return the current wantlist for a given `peerId`\n     */\n    wantlistForPeer(peerId, _options) {\n        return this.engine.wantlistForPeer(peerId);\n    }\n    /**\n     * Return ledger information for a given `peerId`\n     */\n    ledgerForPeer(peerId) {\n        return this.engine.ledgerForPeer(peerId);\n    }\n    /**\n     * Fetch a given block by cid. If the block is in the local\n     * blockstore it is returned, otherwise the block is added to the wantlist and returned once another node sends it to us.\n     */\n    async want(cid, options = {}) {\n        const fetchFromNetwork = async (cid, options) => {\n            // add it to the want list - n.b. later we will abort the AbortSignal\n            // so no need to remove the blocks from the wantlist after we have it\n            this.wm.wantBlocks([cid], options);\n            return this.notifications.wantBlock(cid, options);\n        };\n        let promptedNetwork = false;\n        const loadOrFetchFromNetwork = async (cid, options) => {\n            try {\n                // have to await here as we want to handle ERR_NOT_FOUND\n                const block = await this.blockstore.get(cid, options);\n                return block;\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    throw err;\n                }\n                if (!promptedNetwork) {\n                    promptedNetwork = true;\n                    this.network.findAndConnect(cid, options)\n                        .catch((err) => { this._log.error(err); });\n                }\n                // we don't have the block locally so fetch it from the network\n                return await fetchFromNetwork(cid, options);\n            }\n        };\n        // depending on implementation it's possible for blocks to come in while\n        // we do the async operations to get them from the blockstore leading to\n        // a race condition, so register for incoming block notifications as well\n        // as trying to get it from the datastore\n        const controller = new AbortController();\n        const signal = (0,any_signal__WEBPACK_IMPORTED_MODULE_0__.anySignal)([controller.signal, options.signal]);\n        try {\n            const block = await Promise.race([\n                this.notifications.wantBlock(cid, {\n                    ...options,\n                    signal\n                }),\n                loadOrFetchFromNetwork(cid, {\n                    ...options,\n                    signal\n                })\n            ]);\n            return block;\n        }\n        finally {\n            // since we have the block we can now abort any outstanding attempts to\n            // fetch it\n            controller.abort();\n            signal.clear();\n        }\n    }\n    /**\n     * Removes the given CIDs from the wantlist independent of any ref counts.\n     *\n     * This will cause all outstanding promises for a given block to reject.\n     *\n     * If you want to cancel the want for a block without doing that, pass an\n     * AbortSignal in to `.get` or `.getMany` and abort it.\n     */\n    unwant(cids) {\n        const cidsArray = Array.isArray(cids) ? cids : [cids];\n        this.wm.unwantBlocks(cidsArray);\n        cidsArray.forEach((cid) => { this.notifications.unwantBlock(cid); });\n    }\n    /**\n     * Removes the given keys from the want list. This may cause pending promises\n     * for blocks to never resolve.  If you wish these promises to abort instead\n     * call `unwant(cids)` instead.\n     */\n    cancelWants(cids) {\n        this.wm.cancelWants(Array.isArray(cids) ? cids : [cids]);\n    }\n    /**\n     * Put the given block to the underlying blockstore and\n     * send it to nodes that have it in their wantlist.\n     */\n    async put(cid, block, _options) {\n        await this.blockstore.put(cid, block);\n        this.notify(cid, block);\n    }\n    /**\n     * Put the given blocks to the underlying blockstore and\n     * send it to nodes that have it them their wantlist.\n     */\n    async *putMany(source, options) {\n        yield* this.blockstore.putMany((0,it_foreach__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(source, ({ cid, block }) => {\n            this.notify(cid, block);\n        }), options);\n    }\n    /**\n     * Sends notifications about the arrival of a block\n     */\n    notify(cid, block, options = {}) {\n        this.notifications.hasBlock(cid, block);\n        this.engine.receivedBlocks([{ cid, block }]);\n        // Note: Don't wait for provide to finish before returning\n        this.network.provide(cid, options).catch((err) => {\n            this._log.error('Failed to provide: %s', err.message);\n        });\n    }\n    /**\n     * Get the current list of wants\n     */\n    getWantlist() {\n        return this.wm.wantlist.entries();\n    }\n    /**\n     * Get the current list of partners\n     */\n    get peers() {\n        return this.engine.peers();\n    }\n    /**\n     * Start the bitswap node\n     */\n    async start() {\n        this.wm.start();\n        await this.network.start();\n        this.engine.start();\n        this.started = true;\n    }\n    /**\n     * Stop the bitswap node\n     */\n    async stop() {\n        this.stats.stop();\n        this.wm.stop();\n        await this.network.stop();\n        this.engine.stop();\n        this.started = false;\n    }\n}\n//# sourceMappingURL=bitswap.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/bitswap.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/constants.js":
/*!*********************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/constants.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasBlockTimeout: () => (/* binding */ hasBlockTimeout),\n/* harmony export */   kMaxPriority: () => (/* binding */ kMaxPriority),\n/* harmony export */   maxListeners: () => (/* binding */ maxListeners),\n/* harmony export */   maxProvidersPerRequest: () => (/* binding */ maxProvidersPerRequest),\n/* harmony export */   provideTimeout: () => (/* binding */ provideTimeout),\n/* harmony export */   providerRequestTimeout: () => (/* binding */ providerRequestTimeout),\n/* harmony export */   wantlistSendDebounceMs: () => (/* binding */ wantlistSendDebounceMs)\n/* harmony export */ });\nconst SECOND = 1000;\nconst maxProvidersPerRequest = 3;\nconst providerRequestTimeout = 10 * SECOND;\nconst hasBlockTimeout = 15 * SECOND;\nconst provideTimeout = 15 * SECOND;\nconst kMaxPriority = Math.pow(2, 31) - 1;\nconst maxListeners = 1000;\nconst wantlistSendDebounceMs = 1;\n//# sourceMappingURL=constants.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/constants.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/decision-engine/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/decision-engine/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DecisionEngine: () => (/* binding */ DecisionEngine)\n/* harmony export */ });\n/* harmony import */ var _libp2p_utils_tracked_map__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/utils/tracked-map */ \"./node_modules/@libp2p/utils/dist/src/tracked-map.js\");\n/* harmony import */ var multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/bases/base58 */ \"./node_modules/multiformats/dist/src/bases/base58.js\");\n/* harmony import */ var multiformats_cid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/cid */ \"./node_modules/multiformats/dist/src/cid.js\");\n/* harmony import */ var _message_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../message/index.js */ \"./node_modules/ipfs-bitswap/dist/src/message/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"./node_modules/ipfs-bitswap/dist/src/utils/index.js\");\n/* harmony import */ var _wantlist_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../wantlist/index.js */ \"./node_modules/ipfs-bitswap/dist/src/wantlist/index.js\");\n/* harmony import */ var _ledger_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ledger.js */ \"./node_modules/ipfs-bitswap/dist/src/decision-engine/ledger.js\");\n/* harmony import */ var _req_queue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./req-queue.js */ \"./node_modules/ipfs-bitswap/dist/src/decision-engine/req-queue.js\");\n/* harmony import */ var _task_merger_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./task-merger.js */ \"./node_modules/ipfs-bitswap/dist/src/decision-engine/task-merger.js\");\n\n\n\n\n\n\n\n\n\nconst WantType = _message_index_js__WEBPACK_IMPORTED_MODULE_2__.BitswapMessage.WantType;\n// The ideal size of the batched payload. We try to pop this much data off the\n// request queue, but\n// - if there isn't any more data in the queue we send whatever we have\n// - if there are several small items in the queue (eg HAVE response) followed\n//   by one big item (eg a block) that would exceed this target size, we\n//   include the big item in the message\nconst TARGET_MESSAGE_SIZE = 16 * 1024;\n// If the client sends a want-have, and the engine has the corresponding block,\n// we check the size of the block and if it's small enough we send the block\n// itself, rather than sending a HAVE.\n// This constant defines the maximum size up to which we replace a HAVE with\n// a block.\nconst MAX_SIZE_REPLACE_HAS_WITH_BLOCK = 1024;\nclass DecisionEngine {\n    _log;\n    blockstore;\n    network;\n    _stats;\n    _opts;\n    ledgerMap;\n    _running;\n    _requestQueue;\n    constructor(peerId, blockstore, network, stats, libp2p, opts = {}) {\n        this._log = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.logger)(peerId, 'engine');\n        this.blockstore = blockstore;\n        this.network = network;\n        this._stats = stats;\n        this._opts = this._processOpts(opts);\n        // A list of of ledgers by their partner id\n        this.ledgerMap = (0,_libp2p_utils_tracked_map__WEBPACK_IMPORTED_MODULE_4__.trackedMap)({\n            name: 'ipfs_bitswap_ledger_map',\n            metrics: libp2p.metrics\n        });\n        this._running = false;\n        // Queue of want-have / want-block per peer\n        this._requestQueue = new _req_queue_js__WEBPACK_IMPORTED_MODULE_5__.RequestQueue(_task_merger_js__WEBPACK_IMPORTED_MODULE_6__.DefaultTaskMerger);\n    }\n    _processOpts(opts) {\n        return {\n            maxSizeReplaceHasWithBlock: MAX_SIZE_REPLACE_HAS_WITH_BLOCK,\n            targetMessageSize: TARGET_MESSAGE_SIZE,\n            ...opts\n        };\n    }\n    _scheduleProcessTasks() {\n        setTimeout(() => {\n            this._processTasks().catch(err => {\n                this._log.error('error processing stats', err);\n            });\n        });\n    }\n    /**\n     * Pull tasks off the request queue and send a message to the corresponding\n     * peer\n     */\n    async _processTasks() {\n        if (!this._running) {\n            return;\n        }\n        const { peerId, tasks, pendingSize } = this._requestQueue.popTasks(this._opts.targetMessageSize);\n        if (tasks.length === 0) {\n            return;\n        }\n        // Create a new message\n        const msg = new _message_index_js__WEBPACK_IMPORTED_MODULE_2__.BitswapMessage(false);\n        // Amount of data in the request queue still waiting to be popped\n        msg.setPendingBytes(pendingSize);\n        // Split out want-blocks, want-haves and DONT_HAVEs\n        const blockCids = [];\n        const blockTasks = new Map();\n        for (const task of tasks) {\n            const cid = multiformats_cid__WEBPACK_IMPORTED_MODULE_1__.CID.parse(task.topic);\n            if (task.data.haveBlock) {\n                if (task.data.isWantBlock) {\n                    blockCids.push(cid);\n                    blockTasks.set(task.topic, task.data);\n                }\n                else {\n                    // Add HAVES to the message\n                    msg.addHave(cid);\n                }\n            }\n            else {\n                // Add DONT_HAVEs to the message\n                msg.addDontHave(cid);\n            }\n        }\n        const blocks = await this._getBlocks(blockCids);\n        for (const [topic, taskData] of blockTasks) {\n            const cid = multiformats_cid__WEBPACK_IMPORTED_MODULE_1__.CID.parse(topic);\n            const blk = blocks.get(topic);\n            // If the block was found (it has not been removed)\n            if (blk != null) {\n                // Add the block to the message\n                msg.addBlock(cid, blk);\n            }\n            else {\n                // The block was not found. If the client requested DONT_HAVE,\n                // add DONT_HAVE to the message.\n                if (taskData.sendDontHave) {\n                    msg.addDontHave(cid);\n                }\n            }\n        }\n        // If there's nothing in the message, bail out\n        if (msg.empty) {\n            (peerId != null) && this._requestQueue.tasksDone(peerId, tasks);\n            // Trigger the next round of task processing\n            this._scheduleProcessTasks();\n            return;\n        }\n        try {\n            // Send the message\n            (peerId != null) && await this.network.sendMessage(peerId, msg);\n            // Peform sent message accounting\n            for (const [cidStr, block] of blocks.entries()) {\n                (peerId != null) && this.messageSent(peerId, multiformats_cid__WEBPACK_IMPORTED_MODULE_1__.CID.parse(cidStr), block);\n            }\n        }\n        catch (err) {\n            this._log.error(err);\n        }\n        // Free the tasks up from the request queue\n        (peerId != null) && this._requestQueue.tasksDone(peerId, tasks);\n        // Trigger the next round of task processing\n        this._scheduleProcessTasks();\n    }\n    wantlistForPeer(peerId) {\n        const peerIdStr = peerId.toString();\n        const ledger = this.ledgerMap.get(peerIdStr);\n        return (ledger != null) ? ledger.wantlist.sortedEntries() : new Map();\n    }\n    ledgerForPeer(peerId) {\n        const peerIdStr = peerId.toString();\n        const ledger = this.ledgerMap.get(peerIdStr);\n        if (ledger == null) {\n            return undefined;\n        }\n        return {\n            peer: ledger.partner,\n            value: ledger.debtRatio(),\n            sent: ledger.accounting.bytesSent,\n            recv: ledger.accounting.bytesRecv,\n            exchanged: ledger.exchangeCount\n        };\n    }\n    peers() {\n        return Array.from(this.ledgerMap.values()).map((l) => l.partner);\n    }\n    /**\n     * Receive blocks either from an incoming message from the network, or from\n     * blocks being added by the client on the localhost (eg IPFS add)\n     */\n    receivedBlocks(blocks) {\n        if (blocks.length === 0) {\n            return;\n        }\n        // For each connected peer, check if it wants the block we received\n        for (const ledger of this.ledgerMap.values()) {\n            for (const { cid, block } of blocks) {\n                // Filter out blocks that we don't want\n                const want = ledger.wantlistContains(cid);\n                if (want == null) {\n                    continue;\n                }\n                // If the block is small enough, just send the block, even if the\n                // client asked for a HAVE\n                const blockSize = block.length;\n                const isWantBlock = this._sendAsBlock(want.wantType, blockSize);\n                let entrySize = blockSize;\n                if (!isWantBlock) {\n                    entrySize = _message_index_js__WEBPACK_IMPORTED_MODULE_2__.BitswapMessage.blockPresenceSize(want.cid);\n                }\n                this._requestQueue.pushTasks(ledger.partner, [{\n                        topic: want.cid.toString(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc),\n                        priority: want.priority,\n                        size: entrySize,\n                        data: {\n                            blockSize,\n                            isWantBlock,\n                            haveBlock: true,\n                            sendDontHave: false\n                        }\n                    }]);\n            }\n        }\n        this._scheduleProcessTasks();\n    }\n    /**\n     * Handle incoming messages\n     */\n    async messageReceived(peerId, msg) {\n        const ledger = this._findOrCreate(peerId);\n        if (msg.empty) {\n            return;\n        }\n        // If the message has a full wantlist, clear the current wantlist\n        if (msg.full) {\n            ledger.wantlist = new _wantlist_index_js__WEBPACK_IMPORTED_MODULE_7__.Wantlist();\n        }\n        // Record the amount of block data received\n        this._updateBlockAccounting(msg.blocks, ledger);\n        if (msg.wantlist.size === 0) {\n            this._scheduleProcessTasks();\n            return;\n        }\n        // Clear cancelled wants and add new wants to the ledger\n        const cancels = [];\n        const wants = [];\n        msg.wantlist.forEach((entry) => {\n            if (entry.cancel) {\n                ledger.cancelWant(entry.cid);\n                cancels.push(entry.cid);\n            }\n            else {\n                ledger.wants(entry.cid, entry.priority, entry.wantType);\n                wants.push(entry);\n            }\n        });\n        this._cancelWants(peerId, cancels);\n        await this._addWants(peerId, wants);\n        this._scheduleProcessTasks();\n    }\n    _cancelWants(peerId, cids) {\n        for (const c of cids) {\n            this._requestQueue.remove(c.toString(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc), peerId);\n        }\n    }\n    async _addWants(peerId, wants) {\n        // Get the size of each wanted block\n        const blockSizes = await this._getBlockSizes(wants.map(w => w.cid));\n        const tasks = [];\n        for (const want of wants) {\n            const id = want.cid.toString(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc);\n            const blockSize = blockSizes.get(id);\n            // If the block was not found\n            if (blockSize == null) {\n                // Only add the task to the queue if the requester wants a DONT_HAVE\n                if (want.sendDontHave) {\n                    tasks.push({\n                        topic: id,\n                        priority: want.priority,\n                        size: _message_index_js__WEBPACK_IMPORTED_MODULE_2__.BitswapMessage.blockPresenceSize(want.cid),\n                        data: {\n                            isWantBlock: want.wantType === WantType.Block,\n                            blockSize: 0,\n                            haveBlock: false,\n                            sendDontHave: want.sendDontHave\n                        }\n                    });\n                }\n            }\n            else {\n                // The block was found, add it to the queue\n                // If the block is small enough, just send the block, even if the\n                // client asked for a HAVE\n                const isWantBlock = this._sendAsBlock(want.wantType, blockSize);\n                // entrySize is the amount of space the entry takes up in the\n                // message we send to the recipient. If we're sending a block, the\n                // entrySize is the size of the block. Otherwise it's the size of\n                // a block presence entry.\n                let entrySize = blockSize;\n                if (!isWantBlock) {\n                    entrySize = _message_index_js__WEBPACK_IMPORTED_MODULE_2__.BitswapMessage.blockPresenceSize(want.cid);\n                }\n                tasks.push({\n                    topic: id,\n                    priority: want.priority,\n                    size: entrySize,\n                    data: {\n                        isWantBlock,\n                        blockSize,\n                        haveBlock: true,\n                        sendDontHave: want.sendDontHave\n                    }\n                });\n            }\n            this._requestQueue.pushTasks(peerId, tasks);\n        }\n    }\n    _sendAsBlock(wantType, blockSize) {\n        return wantType === WantType.Block ||\n            blockSize <= this._opts.maxSizeReplaceHasWithBlock;\n    }\n    async _getBlockSizes(cids) {\n        const blocks = await this._getBlocks(cids);\n        return new Map([...blocks].map(([k, v]) => [k, v.length]));\n    }\n    async _getBlocks(cids) {\n        const res = new Map();\n        await Promise.all(cids.map(async (cid) => {\n            try {\n                const block = await this.blockstore.get(cid);\n                res.set(cid.toString(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc), block);\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    this._log.error('failed to query blockstore for %s: %s', cid, err);\n                }\n            }\n        }));\n        return res;\n    }\n    _updateBlockAccounting(blocksMap, ledger) {\n        for (const block of blocksMap.values()) {\n            this._log('got block (%s bytes)', block.length);\n            ledger.receivedBytes(block.length);\n        }\n    }\n    /**\n     * Clear up all accounting things after message was sent\n     */\n    messageSent(peerId, cid, block) {\n        const ledger = this._findOrCreate(peerId);\n        ledger.sentBytes(block.length);\n        ledger.wantlist.remove(cid);\n    }\n    numBytesSentTo(peerId) {\n        return this._findOrCreate(peerId).accounting.bytesSent;\n    }\n    numBytesReceivedFrom(peerId) {\n        return this._findOrCreate(peerId).accounting.bytesRecv;\n    }\n    peerDisconnected(peerId) {\n        this.ledgerMap.delete(peerId.toString());\n    }\n    _findOrCreate(peerId) {\n        const peerIdStr = peerId.toString();\n        const ledger = this.ledgerMap.get(peerIdStr);\n        if (ledger != null) {\n            return ledger;\n        }\n        const l = new _ledger_js__WEBPACK_IMPORTED_MODULE_8__.Ledger(peerId);\n        this.ledgerMap.set(peerIdStr, l);\n        if (this._stats != null) {\n            this._stats.push(peerIdStr, 'peerCount', 1);\n        }\n        return l;\n    }\n    start() {\n        this._running = true;\n    }\n    stop() {\n        this._running = false;\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/decision-engine/index.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/decision-engine/ledger.js":
/*!**********************************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/decision-engine/ledger.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ledger: () => (/* binding */ Ledger)\n/* harmony export */ });\n/* harmony import */ var _wantlist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../wantlist/index.js */ \"./node_modules/ipfs-bitswap/dist/src/wantlist/index.js\");\n\nclass Ledger {\n    partner;\n    wantlist;\n    exchangeCount;\n    accounting;\n    lastExchange;\n    constructor(peerId) {\n        this.partner = peerId;\n        this.wantlist = new _wantlist_index_js__WEBPACK_IMPORTED_MODULE_0__.Wantlist();\n        this.exchangeCount = 0;\n        this.accounting = {\n            bytesSent: 0,\n            bytesRecv: 0\n        };\n    }\n    sentBytes(n) {\n        this.exchangeCount++;\n        this.lastExchange = (new Date()).getTime();\n        this.accounting.bytesSent += n;\n    }\n    receivedBytes(n) {\n        this.exchangeCount++;\n        this.lastExchange = (new Date()).getTime();\n        this.accounting.bytesRecv += n;\n    }\n    wants(cid, priority, wantType) {\n        this.wantlist.add(cid, priority, wantType);\n    }\n    /**\n     * @param {CID} cid\n     * @returns {void}\n     */\n    cancelWant(cid) {\n        this.wantlist.remove(cid);\n    }\n    wantlistContains(cid) {\n        return this.wantlist.get(cid);\n    }\n    debtRatio() {\n        return (this.accounting.bytesSent / (this.accounting.bytesRecv + 1)); // +1 is to prevent division by zero\n    }\n}\n//# sourceMappingURL=ledger.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/decision-engine/ledger.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/decision-engine/req-queue.js":
/*!*************************************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/decision-engine/req-queue.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestQueue: () => (/* binding */ RequestQueue)\n/* harmony export */ });\n/* harmony import */ var _utils_sorted_map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/sorted-map.js */ \"./node_modules/ipfs-bitswap/dist/src/utils/sorted-map.js\");\n\n/**\n * The task merger that is used by default.\n * Assumes that new tasks do not add any information over existing tasks,\n * and doesn't try to merge.\n */\nconst DefaultTaskMerger = {\n    hasNewInfo() {\n        return false;\n    },\n    merge() { }\n};\n/**\n * Queue of requests to be processed by the engine.\n * The requests from each peer are added to the peer's queue, sorted by\n * priority.\n * Tasks are popped in priority order from the best peer - see popTasks()\n * for more details.\n */\nclass RequestQueue {\n    _taskMerger;\n    _byPeer;\n    constructor(taskMerger = DefaultTaskMerger) {\n        this._taskMerger = taskMerger;\n        this._byPeer = new _utils_sorted_map_js__WEBPACK_IMPORTED_MODULE_0__.SortedMap([], PeerTasks.compare);\n    }\n    /**\n     * Push tasks onto the queue for the given peer\n     */\n    pushTasks(peerId, tasks) {\n        let peerTasks = this._byPeer.get(peerId.toString());\n        if (peerTasks == null) {\n            peerTasks = new PeerTasks(peerId, this._taskMerger);\n        }\n        peerTasks.pushTasks(tasks);\n        this._byPeer.set(peerId.toString(), peerTasks);\n    }\n    /**\n     * Choose the peer with the least active work (or if all have the same active\n     * work, the most pending tasks) and pop off the highest priority tasks until\n     * the total size is at least targetMinBytes.\n     * This puts the popped tasks into the \"active\" state, meaning they are\n     * actively being processed (and cannot be modified).\n     */\n    popTasks(targetMinBytes) {\n        // Get the queue of tasks for the best peer and pop off tasks up to\n        // targetMinBytes\n        const peerTasks = this._head();\n        if (peerTasks === undefined) {\n            return { tasks: [], pendingSize: 0 };\n        }\n        const { tasks, pendingSize } = peerTasks.popTasks(targetMinBytes);\n        if (tasks.length === 0) {\n            return { tasks, pendingSize };\n        }\n        const peerId = peerTasks.peerId;\n        if (peerTasks.isIdle()) {\n            // If there are no more tasks for the peer, free up its memory\n            this._byPeer.delete(peerId.toString());\n        }\n        else {\n            // If there are still tasks remaining, update the sort order of peerTasks\n            // (because it depends on the number of pending tasks)\n            this._byPeer.update(0);\n        }\n        return {\n            peerId, tasks, pendingSize\n        };\n    }\n    _head() {\n        // Shortcut\n        if (this._byPeer.size === 0) {\n            return undefined;\n        }\n        // eslint-disable-next-line no-unreachable-loop\n        for (const [, v] of this._byPeer) {\n            return v;\n        }\n        return undefined;\n    }\n    /**\n     * Remove the task with the given topic for the given peer.\n     */\n    remove(topic, peerId) {\n        const peerTasks = this._byPeer.get(peerId.toString());\n        peerTasks?.remove(topic);\n    }\n    /**\n     * Called when the tasks for the given peer complete.\n     */\n    tasksDone(peerId, tasks) {\n        const peerTasks = this._byPeer.get(peerId.toString());\n        if (peerTasks == null) {\n            return;\n        }\n        const i = this._byPeer.indexOf(peerId.toString());\n        for (const task of tasks) {\n            peerTasks.taskDone(task);\n        }\n        // Marking the tasks as done takes them out of the \"active\" state, and the\n        // sort order depends on the size of the active tasks, so we need to update\n        // the order.\n        this._byPeer.update(i);\n    }\n}\n/**\n * Queue of tasks for a particular peer, sorted by priority.\n */\nclass PeerTasks {\n    peerId;\n    _taskMerger;\n    _activeTotalSize;\n    _pending;\n    _active;\n    constructor(peerId, taskMerger) {\n        this.peerId = peerId;\n        this._taskMerger = taskMerger;\n        this._activeTotalSize = 0;\n        this._pending = new PendingTasks();\n        this._active = new Set();\n    }\n    /**\n     * Push tasks onto the queue\n     */\n    pushTasks(tasks) {\n        for (const t of tasks) {\n            this._pushTask(t);\n        }\n    }\n    _pushTask(task) {\n        // If the new task doesn't add any more information over what we\n        // already have in the active queue, then we can skip the new task\n        if (!this._taskHasMoreInfoThanActiveTasks(task)) {\n            return;\n        }\n        // If there is already a non-active (pending) task with this topic\n        const existingTask = this._pending.get(task.topic);\n        if (existingTask != null) {\n            // If the new task has a higher priority than the old task,\n            if (task.priority > existingTask.priority) {\n                // Update the priority and the task's position in the queue\n                this._pending.updatePriority(task.topic, task.priority);\n            }\n            // Merge the information from the new task into the existing task\n            this._taskMerger.merge(task, existingTask);\n            // A task with the topic exists, so we don't need to add\n            // the new task to the queue\n            return;\n        }\n        // Push the new task onto the queue\n        this._pending.add(task);\n    }\n    /**\n     * Indicates whether the new task adds any more information over tasks that are\n     * already in the active task queue\n     */\n    _taskHasMoreInfoThanActiveTasks(task) {\n        const tasksWithTopic = [];\n        for (const activeTask of this._active) {\n            if (activeTask.topic === task.topic) {\n                tasksWithTopic.push(activeTask);\n            }\n        }\n        // No tasks with that topic, so the new task adds information\n        if (tasksWithTopic.length === 0) {\n            return true;\n        }\n        return this._taskMerger.hasNewInfo(task, tasksWithTopic);\n    }\n    /**\n     * Pop tasks off the queue such that the total size is at least targetMinBytes\n     */\n    popTasks(targetMinBytes) {\n        let size = 0;\n        const tasks = [];\n        // Keep popping tasks until we get up to targetMinBytes (or one item over\n        // targetMinBytes)\n        const pendingTasks = this._pending.tasks();\n        for (let i = 0; i < pendingTasks.length && size < targetMinBytes; i++) {\n            const task = pendingTasks[i];\n            tasks.push(task);\n            size += task.size;\n            // Move tasks from pending to active\n            this._pending.delete(task.topic);\n            this._activeTotalSize += task.size;\n            this._active.add(task);\n        }\n        return {\n            tasks, pendingSize: this._pending.totalSize\n        };\n    }\n    /**\n     * Called when a task completes.\n     * Note: must be the same reference as returned from popTasks.\n     */\n    taskDone(task) {\n        if (this._active.has(task)) {\n            this._activeTotalSize -= task.size;\n            this._active.delete(task);\n        }\n    }\n    /**\n     * Remove pending tasks with the given topic\n     */\n    remove(topic) {\n        this._pending.delete(topic);\n    }\n    /**\n     * No work to be done, this PeerTasks object can be freed.\n     */\n    isIdle() {\n        return this._pending.length === 0 && this._active.size === 0;\n    }\n    /**\n     * Compare PeerTasks\n     */\n    static compare(a, b) {\n        // Move peers with no pending tasks to the back of the queue\n        if (a[1]._pending.length === 0) {\n            return 1;\n        }\n        if (b[1]._pending.length === 0) {\n            return -1;\n        }\n        // If the amount of active work is the same\n        if (a[1]._activeTotalSize === b[1]._activeTotalSize) {\n            // Choose the peer with the most pending work\n            return b[1]._pending.length - a[1]._pending.length;\n        }\n        // Choose the peer with the least amount of active work (\"keep peers busy\")\n        return a[1]._activeTotalSize - b[1]._activeTotalSize;\n    }\n}\n/**\n * Queue of pending tasks for a particular peer, sorted by priority.\n */\nclass PendingTasks {\n    _tasks;\n    constructor() {\n        this._tasks = new _utils_sorted_map_js__WEBPACK_IMPORTED_MODULE_0__.SortedMap([], this._compare);\n    }\n    get length() {\n        return this._tasks.size;\n    }\n    /**\n     * Sum of the size of all pending tasks\n     **/\n    get totalSize() {\n        return [...this._tasks.values()].reduce((a, t) => a + t.task.size, 0);\n    }\n    get(topic) {\n        return this._tasks?.get(topic)?.task;\n    }\n    add(task) {\n        this._tasks.set(task.topic, {\n            created: Date.now(),\n            task\n        });\n    }\n    delete(topic) {\n        this._tasks.delete(topic);\n    }\n    // All pending tasks, in priority order\n    tasks() {\n        return [...this._tasks.values()].map(i => i.task);\n    }\n    /**\n     * Update the priority of the task with the given topic, and update the order\n     **/\n    updatePriority(topic, priority) {\n        const obj = this._tasks.get(topic);\n        if (obj == null) {\n            return;\n        }\n        const i = this._tasks.indexOf(topic);\n        obj.task.priority = priority;\n        this._tasks.update(i);\n    }\n    /**\n     * Sort by priority desc then FIFO\n     */\n    _compare(a, b) {\n        if (a[1].task.priority === b[1].task.priority) {\n            // FIFO\n            return a[1].created - b[1].created;\n        }\n        // Priority high -> low\n        return b[1].task.priority - a[1].task.priority;\n    }\n}\n//# sourceMappingURL=req-queue.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/decision-engine/req-queue.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/decision-engine/task-merger.js":
/*!***************************************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/decision-engine/task-merger.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultTaskMerger: () => (/* binding */ DefaultTaskMerger)\n/* harmony export */ });\nconst DefaultTaskMerger = {\n    /**\n     * Indicates whether the given task has newer information than the active\n     * tasks with the same topic.\n     *\n     * @param {Task} task\n     * @param {Task[]} tasksWithTopic\n     * @returns {boolean}\n     */\n    hasNewInfo(task, tasksWithTopic) {\n        let haveBlock = false;\n        let isWantBlock = false;\n        for (const existing of tasksWithTopic) {\n            if (existing.data.haveBlock) {\n                haveBlock = true;\n            }\n            if (existing.data.isWantBlock) {\n                isWantBlock = true;\n            }\n        }\n        // If there is no active want-block and the new task is a want-block,\n        // the new task is better\n        if (!isWantBlock && task.data.isWantBlock) {\n            return true;\n        }\n        // If we didn't have the block, and the new task indicates that we now\n        // do have the block, then we must also have size information for the\n        // block, so the new task has new information.\n        if (!haveBlock && task.data.haveBlock) {\n            return true;\n        }\n        return false;\n    },\n    /**\n     * Merge the information from the given task into the existing task (with the\n     * same topic)\n     */\n    merge(newTask, existingTask) {\n        // The merge function ignores the topic and priority as these don't change.\n        //\n        // We may receive new information about a want before the want has been\n        // popped from the queue in the following scenarios:\n        //\n        // - Replace want type:\n        //   1. Client sends want-have CID1\n        //   2. Client sends want-block CID1\n        //   In this case we should replace want-have with want-block, including\n        //   updating the task size to be the block size.\n        //\n        // - Replace DONT_HAVE with want:\n        //   1. Client sends want-have CID1 or want-block CID1\n        //   2. Local node doesn't have block for CID1\n        //   3. Local node receives block for CID1 from peer\n        //   In this case we should replace DONT_HAVE with the want, including\n        //   updating the task size and block size.\n        const taskData = newTask.data;\n        const existingData = existingTask.data;\n        // If we didn't have block size information (because we didn't have the\n        // block) and we receive the block from a peer, update the task with the\n        // new block size\n        if (!existingData.haveBlock && taskData.haveBlock) {\n            existingData.haveBlock = taskData.haveBlock;\n            existingData.blockSize = taskData.blockSize;\n        }\n        // If replacing a want-have with a want-block\n        if (!existingData.isWantBlock && taskData.isWantBlock) {\n            // Change the type from want-have to want-block\n            existingData.isWantBlock = true;\n            // If the want-have was a DONT_HAVE, or the want-block has a size\n            if (!existingData.haveBlock || taskData.haveBlock) {\n                // Update the entry size\n                existingData.haveBlock = taskData.haveBlock;\n                existingTask.size = newTask.size;\n            }\n        }\n        // If the task is a want-block, make sure the entry size is equal\n        // to the block size (because we will send the whole block)\n        if (existingData.isWantBlock && existingData.haveBlock) {\n            existingTask.size = existingData.blockSize;\n        }\n    }\n};\n//# sourceMappingURL=task-merger.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/decision-engine/task-merger.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createBitswap: () => (/* binding */ createBitswap)\n/* harmony export */ });\n/* harmony import */ var _bitswap_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bitswap.js */ \"./node_modules/ipfs-bitswap/dist/src/bitswap.js\");\n/**\n * @packageDocumentation\n *\n * This module implements the [Bitswap protocol](https://docs.ipfs.tech/concepts/bitswap/) in TypeScript.\n */\n\nconst createBitswap = (libp2p, blockstore, options = {}) => {\n    return new _bitswap_js__WEBPACK_IMPORTED_MODULE_0__.DefaultBitswap(libp2p, blockstore, options);\n};\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/message/entry.js":
/*!*************************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/message/entry.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BitswapMessageEntry: () => (/* binding */ BitswapMessageEntry)\n/* harmony export */ });\n/* harmony import */ var multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/bases/base58 */ \"./node_modules/multiformats/dist/src/bases/base58.js\");\n/* harmony import */ var _wantlist_entry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../wantlist/entry.js */ \"./node_modules/ipfs-bitswap/dist/src/wantlist/entry.js\");\n\n\nclass BitswapMessageEntry {\n    entry;\n    cancel;\n    sendDontHave;\n    constructor(cid, priority, wantType, cancel, sendDontHave) {\n        this.entry = new _wantlist_entry_js__WEBPACK_IMPORTED_MODULE_1__.WantListEntry(cid, priority, wantType);\n        this.cancel = Boolean(cancel);\n        this.sendDontHave = Boolean(sendDontHave);\n    }\n    get cid() {\n        return this.entry.cid;\n    }\n    set cid(cid) {\n        this.entry.cid = cid;\n    }\n    get priority() {\n        return this.entry.priority;\n    }\n    set priority(val) {\n        this.entry.priority = val;\n    }\n    get wantType() {\n        return this.entry.wantType;\n    }\n    set wantType(val) {\n        this.entry.wantType = val;\n    }\n    get [Symbol.toStringTag]() {\n        const cidStr = this.cid.toString(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc);\n        return `BitswapMessageEntry ${cidStr} <cancel: ${this.cancel}, priority: ${this.priority}>`;\n    }\n    equals(other) {\n        return (this.cancel === other.cancel) &&\n            (this.sendDontHave === other.sendDontHave) &&\n            (this.wantType === other.wantType) &&\n            this.entry.equals(other.entry);\n    }\n}\n//# sourceMappingURL=entry.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/message/entry.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/message/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/message/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BitswapMessage: () => (/* binding */ BitswapMessage)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/bases/base58 */ \"./node_modules/multiformats/dist/src/bases/base58.js\");\n/* harmony import */ var multiformats_cid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/cid */ \"./node_modules/multiformats/dist/src/cid.js\");\n/* harmony import */ var multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! multiformats/hashes/sha2 */ \"./node_modules/multiformats/dist/src/hashes/sha2-browser.js\");\n/* harmony import */ var varint_decoder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! varint-decoder */ \"./node_modules/varint-decoder/src/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/index.js */ \"./node_modules/ipfs-bitswap/dist/src/utils/index.js\");\n/* harmony import */ var _utils_varint_encoder_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/varint-encoder.js */ \"./node_modules/ipfs-bitswap/dist/src/utils/varint-encoder.js\");\n/* harmony import */ var _entry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./entry.js */ \"./node_modules/ipfs-bitswap/dist/src/message/entry.js\");\n/* harmony import */ var _message_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./message.js */ \"./node_modules/ipfs-bitswap/dist/src/message/message.js\");\n\n\n\n\n// @ts-expect-error no types\n\n\n\n\n\nclass BitswapMessage {\n    static Entry = _entry_js__WEBPACK_IMPORTED_MODULE_4__.BitswapMessageEntry;\n    static WantType = {\n        Block: _message_js__WEBPACK_IMPORTED_MODULE_5__.Message.Wantlist.WantType.Block,\n        Have: _message_js__WEBPACK_IMPORTED_MODULE_5__.Message.Wantlist.WantType.Have\n    };\n    static BlockPresenceType = {\n        Have: _message_js__WEBPACK_IMPORTED_MODULE_5__.Message.BlockPresenceType.Have,\n        DontHave: _message_js__WEBPACK_IMPORTED_MODULE_5__.Message.BlockPresenceType.DontHave\n    };\n    static deserialize = async (raw, hashLoader) => {\n        const decoded = _message_js__WEBPACK_IMPORTED_MODULE_5__.Message.decode(raw);\n        const isFull = decoded.wantlist?.full === true;\n        const msg = new BitswapMessage(isFull);\n        decoded.wantlist?.entries.forEach((entry) => {\n            if (entry.block == null) {\n                return;\n            }\n            // note: entry.block is the CID here\n            const cid = multiformats_cid__WEBPACK_IMPORTED_MODULE_1__.CID.decode(entry.block);\n            msg.addEntry(cid, entry.priority ?? 0, entry.wantType, Boolean(entry.cancel), Boolean(entry.sendDontHave));\n        });\n        decoded.blockPresences.forEach((blockPresence) => {\n            if (blockPresence.cid == null) {\n                return;\n            }\n            const cid = multiformats_cid__WEBPACK_IMPORTED_MODULE_1__.CID.decode(blockPresence.cid);\n            if (blockPresence.type === BitswapMessage.BlockPresenceType.Have) {\n                msg.addHave(cid);\n            }\n            else {\n                msg.addDontHave(cid);\n            }\n        });\n        // Bitswap 1.0.0\n        // decoded.blocks are just the byte arrays\n        if (decoded.blocks.length > 0) {\n            await Promise.all(decoded.blocks.map(async (b) => {\n                const hash = await multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__.sha256.digest(b);\n                const cid = multiformats_cid__WEBPACK_IMPORTED_MODULE_1__.CID.createV0(hash);\n                msg.addBlock(cid, b);\n            }));\n            return msg;\n        }\n        // Bitswap 1.1.0\n        if (decoded.payload.length > 0) {\n            await Promise.all(decoded.payload.map(async (p) => {\n                if (p.prefix == null || p.data == null) {\n                    return;\n                }\n                const values = varint_decoder__WEBPACK_IMPORTED_MODULE_3__(p.prefix);\n                const cidVersion = values[0];\n                const multicodec = values[1];\n                const hashAlg = values[2];\n                const hasher = hashAlg === multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__.sha256.code ? multiformats_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__.sha256 : await hashLoader?.getHasher(hashAlg);\n                if (hasher == null) {\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_6__.CodeError('Unknown hash algorithm', 'ERR_UNKNOWN_HASH_ALG');\n                }\n                // const hashLen = values[3] // We haven't need to use this so far\n                const hash = await hasher.digest(p.data);\n                const cid = multiformats_cid__WEBPACK_IMPORTED_MODULE_1__.CID.create(cidVersion, multicodec, hash);\n                msg.addBlock(cid, p.data);\n            }));\n            msg.setPendingBytes(decoded.pendingBytes);\n            return msg;\n        }\n        return msg;\n    };\n    static blockPresenceSize = (cid) => {\n        // It's ok if this is not exactly right: it's used to estimate the size of\n        // the HAVE / DONT_HAVE on the wire, but when doing that calculation we leave\n        // plenty of padding under the maximum message size.\n        // (It's more important for this to be fast).\n        return cid.bytes.length + 1;\n    };\n    full;\n    wantlist;\n    blocks;\n    blockPresences;\n    pendingBytes;\n    constructor(full) {\n        this.full = full;\n        this.wantlist = new Map();\n        this.blocks = new Map();\n        this.blockPresences = new Map();\n        this.pendingBytes = 0;\n    }\n    get empty() {\n        return this.blocks.size === 0 &&\n            this.wantlist.size === 0 &&\n            this.blockPresences.size === 0;\n    }\n    addEntry(cid, priority, wantType, cancel, sendDontHave) {\n        if (wantType == null) {\n            wantType = BitswapMessage.WantType.Block;\n        }\n        const cidStr = cid.toString(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc);\n        const entry = this.wantlist.get(cidStr);\n        if (entry != null) {\n            // Only change priority if want is of the same type\n            if (entry.wantType === wantType) {\n                entry.priority = priority;\n            }\n            // Only change from \"dont cancel\" to \"do cancel\"\n            if (cancel === true) {\n                entry.cancel = Boolean(cancel);\n            }\n            // Only change from \"dont send\" to \"do send\" DONT_HAVE\n            if (sendDontHave === true) {\n                entry.sendDontHave = Boolean(sendDontHave);\n            }\n            // want-block overrides existing want-have\n            if (wantType === BitswapMessage.WantType.Block && entry.wantType === BitswapMessage.WantType.Have) {\n                entry.wantType = wantType;\n            }\n        }\n        else {\n            this.wantlist.set(cidStr, new _entry_js__WEBPACK_IMPORTED_MODULE_4__.BitswapMessageEntry(cid, priority, wantType, cancel, sendDontHave));\n        }\n    }\n    addBlock(cid, block) {\n        const cidStr = cid.toString(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc);\n        this.blocks.set(cidStr, block);\n    }\n    addHave(cid) {\n        const cidStr = cid.toString(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc);\n        if (!this.blockPresences.has(cidStr)) {\n            this.blockPresences.set(cidStr, BitswapMessage.BlockPresenceType.Have);\n        }\n    }\n    addDontHave(cid) {\n        const cidStr = cid.toString(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc);\n        if (!this.blockPresences.has(cidStr)) {\n            this.blockPresences.set(cidStr, BitswapMessage.BlockPresenceType.DontHave);\n        }\n    }\n    cancel(cid) {\n        const cidStr = cid.toString(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc);\n        this.wantlist.delete(cidStr);\n        this.addEntry(cid, 0, BitswapMessage.WantType.Block, true, false);\n    }\n    setPendingBytes(size) {\n        this.pendingBytes = size;\n    }\n    /**\n     * Serializes to Bitswap Message protobuf of\n     * version 1.0.0\n     */\n    serializeToBitswap100() {\n        return _message_js__WEBPACK_IMPORTED_MODULE_5__.Message.encode({\n            wantlist: {\n                entries: Array.from(this.wantlist.values()).map((entry) => {\n                    return {\n                        block: entry.cid.bytes, // cid\n                        priority: Number(entry.priority),\n                        cancel: Boolean(entry.cancel),\n                        wantType: _message_js__WEBPACK_IMPORTED_MODULE_5__.Message.Wantlist.WantType.Block,\n                        sendDontHave: false\n                    };\n                }),\n                full: Boolean(this.full)\n            },\n            blocks: Array.from(this.blocks.values())\n        });\n    }\n    /**\n     * Serializes to Bitswap Message protobuf of\n     * version 1.1.0\n     */\n    serializeToBitswap110() {\n        const msg = {\n            wantlist: {\n                entries: Array.from(this.wantlist.values()).map((entry) => {\n                    return {\n                        block: entry.cid.bytes, // cid\n                        priority: Number(entry.priority),\n                        wantType: entry.wantType,\n                        cancel: Boolean(entry.cancel),\n                        sendDontHave: Boolean(entry.sendDontHave)\n                    };\n                }),\n                full: Boolean(this.full)\n            },\n            blockPresences: [],\n            payload: [],\n            pendingBytes: this.pendingBytes,\n            blocks: []\n        };\n        for (const [cidStr, data] of this.blocks.entries()) {\n            const cid = multiformats_cid__WEBPACK_IMPORTED_MODULE_1__.CID.parse(cidStr);\n            const version = cid.version;\n            const codec = cid.code;\n            const multihash = cid.multihash.code;\n            const digestLength = cid.multihash.digest.length;\n            const prefix = (0,_utils_varint_encoder_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])([\n                version, codec, multihash, digestLength\n            ]);\n            msg.payload.push({\n                prefix,\n                data\n            });\n        }\n        for (const [cidStr, bpType] of this.blockPresences) {\n            msg.blockPresences.push({\n                cid: multiformats_cid__WEBPACK_IMPORTED_MODULE_1__.CID.parse(cidStr).bytes,\n                type: bpType\n            });\n        }\n        if (this.pendingBytes > 0) {\n            msg.pendingBytes = this.pendingBytes;\n        }\n        return _message_js__WEBPACK_IMPORTED_MODULE_5__.Message.encode(msg);\n    }\n    equals(other) {\n        if (this.full !== other.full ||\n            this.pendingBytes !== other.pendingBytes ||\n            !(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.isMapEqual)(this.wantlist, other.wantlist) ||\n            !(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.isMapEqual)(this.blocks, other.blocks) ||\n            // @TODO - Is this a bug ?\n            // @ts-expect-error - isMap equals map values to be objects not numbers\n            !(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_8__.isMapEqual)(this.blockPresences, other.blockPresences)) {\n            return false;\n        }\n        return true;\n    }\n    get [Symbol.toStringTag]() {\n        const list = Array.from(this.wantlist.keys());\n        const blocks = Array.from(this.blocks.keys());\n        return `BitswapMessage <full: ${this.full}, list: ${list}, blocks: ${blocks}>`;\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/message/index.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/message/message.js":
/*!***************************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/message/message.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Message: () => (/* binding */ Message)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nvar Message;\n(function (Message) {\n    let Wantlist;\n    (function (Wantlist) {\n        let WantType;\n        (function (WantType) {\n            WantType[\"Block\"] = \"Block\";\n            WantType[\"Have\"] = \"Have\";\n        })(WantType = Wantlist.WantType || (Wantlist.WantType = {}));\n        let __WantTypeValues;\n        (function (__WantTypeValues) {\n            __WantTypeValues[__WantTypeValues[\"Block\"] = 0] = \"Block\";\n            __WantTypeValues[__WantTypeValues[\"Have\"] = 1] = \"Have\";\n        })(__WantTypeValues || (__WantTypeValues = {}));\n        (function (WantType) {\n            WantType.codec = () => {\n                return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.enumeration)(__WantTypeValues);\n            };\n        })(WantType = Wantlist.WantType || (Wantlist.WantType = {}));\n        let Entry;\n        (function (Entry) {\n            let _codec;\n            Entry.codec = () => {\n                if (_codec == null) {\n                    _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                        if (opts.lengthDelimited !== false) {\n                            w.fork();\n                        }\n                        if ((obj.block != null && obj.block.byteLength > 0)) {\n                            w.uint32(10);\n                            w.bytes(obj.block);\n                        }\n                        if ((obj.priority != null && obj.priority !== 0)) {\n                            w.uint32(16);\n                            w.int32(obj.priority);\n                        }\n                        if ((obj.cancel != null && obj.cancel !== false)) {\n                            w.uint32(24);\n                            w.bool(obj.cancel);\n                        }\n                        if (obj.wantType != null && __WantTypeValues[obj.wantType] !== 0) {\n                            w.uint32(32);\n                            Message.Wantlist.WantType.codec().encode(obj.wantType, w);\n                        }\n                        if ((obj.sendDontHave != null && obj.sendDontHave !== false)) {\n                            w.uint32(40);\n                            w.bool(obj.sendDontHave);\n                        }\n                        if (opts.lengthDelimited !== false) {\n                            w.ldelim();\n                        }\n                    }, (reader, length) => {\n                        const obj = {\n                            block: new Uint8Array(0),\n                            priority: 0,\n                            cancel: false,\n                            wantType: WantType.Block,\n                            sendDontHave: false\n                        };\n                        const end = length == null ? reader.len : reader.pos + length;\n                        while (reader.pos < end) {\n                            const tag = reader.uint32();\n                            switch (tag >>> 3) {\n                                case 1:\n                                    obj.block = reader.bytes();\n                                    break;\n                                case 2:\n                                    obj.priority = reader.int32();\n                                    break;\n                                case 3:\n                                    obj.cancel = reader.bool();\n                                    break;\n                                case 4:\n                                    obj.wantType = Message.Wantlist.WantType.codec().decode(reader);\n                                    break;\n                                case 5:\n                                    obj.sendDontHave = reader.bool();\n                                    break;\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                            }\n                        }\n                        return obj;\n                    });\n                }\n                return _codec;\n            };\n            Entry.encode = (obj) => {\n                return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Entry.codec());\n            };\n            Entry.decode = (buf) => {\n                return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Entry.codec());\n            };\n        })(Entry = Wantlist.Entry || (Wantlist.Entry = {}));\n        let _codec;\n        Wantlist.codec = () => {\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if (obj.entries != null) {\n                        for (const value of obj.entries) {\n                            w.uint32(10);\n                            Message.Wantlist.Entry.codec().encode(value, w);\n                        }\n                    }\n                    if ((obj.full != null && obj.full !== false)) {\n                        w.uint32(16);\n                        w.bool(obj.full);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {\n                        entries: [],\n                        full: false\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.entries.push(Message.Wantlist.Entry.codec().decode(reader, reader.uint32()));\n                                break;\n                            case 2:\n                                obj.full = reader.bool();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        Wantlist.encode = (obj) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Wantlist.codec());\n        };\n        Wantlist.decode = (buf) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Wantlist.codec());\n        };\n    })(Wantlist = Message.Wantlist || (Message.Wantlist = {}));\n    let Block;\n    (function (Block) {\n        let _codec;\n        Block.codec = () => {\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if ((obj.prefix != null && obj.prefix.byteLength > 0)) {\n                        w.uint32(10);\n                        w.bytes(obj.prefix);\n                    }\n                    if ((obj.data != null && obj.data.byteLength > 0)) {\n                        w.uint32(18);\n                        w.bytes(obj.data);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {\n                        prefix: new Uint8Array(0),\n                        data: new Uint8Array(0)\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.prefix = reader.bytes();\n                                break;\n                            case 2:\n                                obj.data = reader.bytes();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        Block.encode = (obj) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Block.codec());\n        };\n        Block.decode = (buf) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Block.codec());\n        };\n    })(Block = Message.Block || (Message.Block = {}));\n    let BlockPresenceType;\n    (function (BlockPresenceType) {\n        BlockPresenceType[\"Have\"] = \"Have\";\n        BlockPresenceType[\"DontHave\"] = \"DontHave\";\n    })(BlockPresenceType = Message.BlockPresenceType || (Message.BlockPresenceType = {}));\n    let __BlockPresenceTypeValues;\n    (function (__BlockPresenceTypeValues) {\n        __BlockPresenceTypeValues[__BlockPresenceTypeValues[\"Have\"] = 0] = \"Have\";\n        __BlockPresenceTypeValues[__BlockPresenceTypeValues[\"DontHave\"] = 1] = \"DontHave\";\n    })(__BlockPresenceTypeValues || (__BlockPresenceTypeValues = {}));\n    (function (BlockPresenceType) {\n        BlockPresenceType.codec = () => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.enumeration)(__BlockPresenceTypeValues);\n        };\n    })(BlockPresenceType = Message.BlockPresenceType || (Message.BlockPresenceType = {}));\n    let BlockPresence;\n    (function (BlockPresence) {\n        let _codec;\n        BlockPresence.codec = () => {\n            if (_codec == null) {\n                _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                    if (opts.lengthDelimited !== false) {\n                        w.fork();\n                    }\n                    if ((obj.cid != null && obj.cid.byteLength > 0)) {\n                        w.uint32(10);\n                        w.bytes(obj.cid);\n                    }\n                    if (obj.type != null && __BlockPresenceTypeValues[obj.type] !== 0) {\n                        w.uint32(16);\n                        Message.BlockPresenceType.codec().encode(obj.type, w);\n                    }\n                    if (opts.lengthDelimited !== false) {\n                        w.ldelim();\n                    }\n                }, (reader, length) => {\n                    const obj = {\n                        cid: new Uint8Array(0),\n                        type: BlockPresenceType.Have\n                    };\n                    const end = length == null ? reader.len : reader.pos + length;\n                    while (reader.pos < end) {\n                        const tag = reader.uint32();\n                        switch (tag >>> 3) {\n                            case 1:\n                                obj.cid = reader.bytes();\n                                break;\n                            case 2:\n                                obj.type = Message.BlockPresenceType.codec().decode(reader);\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                        }\n                    }\n                    return obj;\n                });\n            }\n            return _codec;\n        };\n        BlockPresence.encode = (obj) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, BlockPresence.codec());\n        };\n        BlockPresence.decode = (buf) => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, BlockPresence.codec());\n        };\n    })(BlockPresence = Message.BlockPresence || (Message.BlockPresence = {}));\n    let _codec;\n    Message.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.wantlist != null) {\n                    w.uint32(10);\n                    Message.Wantlist.codec().encode(obj.wantlist, w);\n                }\n                if (obj.blocks != null) {\n                    for (const value of obj.blocks) {\n                        w.uint32(18);\n                        w.bytes(value);\n                    }\n                }\n                if (obj.payload != null) {\n                    for (const value of obj.payload) {\n                        w.uint32(26);\n                        Message.Block.codec().encode(value, w);\n                    }\n                }\n                if (obj.blockPresences != null) {\n                    for (const value of obj.blockPresences) {\n                        w.uint32(34);\n                        Message.BlockPresence.codec().encode(value, w);\n                    }\n                }\n                if ((obj.pendingBytes != null && obj.pendingBytes !== 0)) {\n                    w.uint32(40);\n                    w.int32(obj.pendingBytes);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {\n                    blocks: [],\n                    payload: [],\n                    blockPresences: [],\n                    pendingBytes: 0\n                };\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.wantlist = Message.Wantlist.codec().decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            obj.blocks.push(reader.bytes());\n                            break;\n                        case 3:\n                            obj.payload.push(Message.Block.codec().decode(reader, reader.uint32()));\n                            break;\n                        case 4:\n                            obj.blockPresences.push(Message.BlockPresence.codec().decode(reader, reader.uint32()));\n                            break;\n                        case 5:\n                            obj.pendingBytes = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    Message.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, Message.codec());\n    };\n    Message.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, Message.codec());\n    };\n})(Message || (Message = {}));\n//# sourceMappingURL=message.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/message/message.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/network.js":
/*!*******************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/network.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Network: () => (/* binding */ Network)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var it_drain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-drain */ \"./node_modules/it-drain/dist/src/index.js\");\n/* harmony import */ var it_length_prefixed__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-length-prefixed */ \"./node_modules/it-length-prefixed/dist/src/index.js\");\n/* harmony import */ var it_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! it-map */ \"./node_modules/it-map/dist/src/index.js\");\n/* harmony import */ var it_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! it-pipe */ \"./node_modules/it-pipe/dist/src/index.js\");\n/* harmony import */ var it_take__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! it-take */ \"./node_modules/it-take/dist/src/index.js\");\n/* harmony import */ var progress_events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! progress-events */ \"./node_modules/progress-events/dist/src/index.js\");\n/* harmony import */ var timeout_abort_controller__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! timeout-abort-controller */ \"./node_modules/timeout-abort-controller/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/ipfs-bitswap/dist/src/constants.js\");\n/* harmony import */ var _message_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./message/index.js */ \"./node_modules/ipfs-bitswap/dist/src/message/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/index.js */ \"./node_modules/ipfs-bitswap/dist/src/utils/index.js\");\n\n\n\n\n\n\n\n\n\n\n\nconst BITSWAP100 = '/ipfs/bitswap/1.0.0';\nconst BITSWAP110 = '/ipfs/bitswap/1.1.0';\nconst BITSWAP120 = '/ipfs/bitswap/1.2.0';\nconst DEFAULT_MAX_INBOUND_STREAMS = 1024;\nconst DEFAULT_MAX_OUTBOUND_STREAMS = 1024;\nconst DEFAULT_INCOMING_STREAM_TIMEOUT = 30000;\nclass Network {\n    _log;\n    _libp2p;\n    _bitswap;\n    _protocols;\n    _stats;\n    _running;\n    _hashLoader;\n    _maxInboundStreams;\n    _maxOutboundStreams;\n    _incomingStreamTimeout;\n    _registrarIds;\n    constructor(libp2p, bitswap, stats, options = {}) {\n        this._log = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_7__.logger)(libp2p.peerId, 'network');\n        this._libp2p = libp2p;\n        this._bitswap = bitswap;\n        this._protocols = [BITSWAP100];\n        if (options.b100Only !== true) {\n            // Latest bitswap first\n            this._protocols.unshift(BITSWAP110);\n            this._protocols.unshift(BITSWAP120);\n        }\n        this._stats = stats;\n        this._running = false;\n        // bind event listeners\n        this._onPeerConnect = this._onPeerConnect.bind(this);\n        this._onPeerDisconnect = this._onPeerDisconnect.bind(this);\n        this._onConnection = this._onConnection.bind(this);\n        this._hashLoader = options.hashLoader ?? {\n            async getHasher() {\n                throw new Error('Not implemented');\n            }\n        };\n        this._maxInboundStreams = options.maxInboundStreams ?? DEFAULT_MAX_INBOUND_STREAMS;\n        this._maxOutboundStreams = options.maxOutboundStreams ?? DEFAULT_MAX_OUTBOUND_STREAMS;\n        this._incomingStreamTimeout = options.incomingStreamTimeout ?? DEFAULT_INCOMING_STREAM_TIMEOUT;\n    }\n    async start() {\n        this._running = true;\n        await this._libp2p.handle(this._protocols, this._onConnection, {\n            maxInboundStreams: this._maxInboundStreams,\n            maxOutboundStreams: this._maxOutboundStreams\n        });\n        // register protocol with topology\n        const topology = {\n            onConnect: this._onPeerConnect,\n            onDisconnect: this._onPeerDisconnect\n        };\n        /** @type {string[]} */\n        this._registrarIds = [];\n        for (const protocol of this._protocols) {\n            this._registrarIds.push(await this._libp2p.register(protocol, topology));\n        }\n        // All existing connections are like new ones for us\n        this._libp2p.getConnections().forEach(conn => {\n            this._onPeerConnect(conn.remotePeer);\n        });\n    }\n    async stop() {\n        this._running = false;\n        // Unhandle both, libp2p doesn't care if it's not already handled\n        await this._libp2p.unhandle(this._protocols);\n        // unregister protocol and handlers\n        if (this._registrarIds != null) {\n            for (const id of this._registrarIds) {\n                this._libp2p.unregister(id);\n            }\n            this._registrarIds = [];\n        }\n    }\n    /**\n     * Handles both types of incoming bitswap messages\n     */\n    _onConnection(info) {\n        if (!this._running) {\n            return;\n        }\n        const { stream, connection } = info;\n        const controller = new timeout_abort_controller__WEBPACK_IMPORTED_MODULE_6__.TimeoutController(this._incomingStreamTimeout);\n        Promise.resolve().then(async () => {\n            this._log('incoming new bitswap %s connection from %p', stream.protocol, connection.remotePeer);\n            const abortListener = () => {\n                stream.abort(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.CodeError('Incoming Bitswap stream timed out', 'ERR_TIMEOUT'));\n            };\n            let signal = AbortSignal.timeout(this._incomingStreamTimeout);\n            signal.addEventListener('abort', abortListener);\n            await (0,it_pipe__WEBPACK_IMPORTED_MODULE_3__.pipe)(stream, (source) => it_length_prefixed__WEBPACK_IMPORTED_MODULE_1__.decode(source), async (source) => {\n                for await (const data of source) {\n                    try {\n                        const message = await _message_index_js__WEBPACK_IMPORTED_MODULE_9__.BitswapMessage.deserialize(data.subarray(), this._hashLoader);\n                        await this._bitswap._receiveMessage(connection.remotePeer, message);\n                    }\n                    catch (err) {\n                        this._bitswap._receiveError(err);\n                        break;\n                    }\n                    // we have received some data so reset the timeout controller\n                    signal.removeEventListener('abort', abortListener);\n                    signal = AbortSignal.timeout(this._incomingStreamTimeout);\n                    signal.addEventListener('abort', abortListener);\n                }\n            });\n            await stream.close({\n                signal\n            });\n        })\n            .catch(err => {\n            this._log(err);\n            stream.abort(err);\n        })\n            .finally(() => {\n            controller.clear();\n        });\n    }\n    _onPeerConnect(peerId) {\n        this._bitswap._onPeerConnected(peerId);\n    }\n    _onPeerDisconnect(peerId) {\n        this._bitswap._onPeerDisconnected(peerId);\n    }\n    /**\n     * Find providers given a `cid`.\n     */\n    findProviders(cid, options = {}) {\n        options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('bitswap:network:find-providers', cid));\n        return this._libp2p.contentRouting.findProviders(cid, options);\n    }\n    /**\n     * Find the providers of a given `cid` and connect to them.\n     */\n    async findAndConnect(cid, options) {\n        await (0,it_drain__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((0,it_take__WEBPACK_IMPORTED_MODULE_4__[\"default\"])((0,it_map__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this.findProviders(cid, options), async (provider) => this.connectTo(provider.id, options)\n            .catch(err => {\n            // Prevent unhandled promise rejection\n            this._log.error(err);\n        })), _constants_js__WEBPACK_IMPORTED_MODULE_10__.maxProvidersPerRequest))\n            .catch(err => {\n            this._log.error(err);\n        });\n    }\n    /**\n     * Tell the network we can provide content for the passed CID\n     */\n    async provide(cid, options = {}) {\n        options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('bitswap:network:provide', cid));\n        await this._libp2p.contentRouting.provide(cid, options);\n    }\n    /**\n     * Connect to the given peer\n     * Send the given msg (instance of Message) to the given peer\n     */\n    async sendMessage(peer, msg, options = {}) {\n        if (!this._running)\n            throw new Error('network isn\\'t running');\n        const stringId = peer.toString();\n        this._log('sendMessage to %s', stringId, msg);\n        options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('bitswap:network:send-wantlist', peer));\n        await this._writeMessage(peer, msg, options);\n        this._updateSentStats(peer, msg.blocks);\n    }\n    /**\n     * Connects to another peer\n     */\n    async connectTo(peer, options = {}) {\n        if (!this._running) {\n            throw new Error('network isn\\'t running');\n        }\n        options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('bitswap:network:dial', peer));\n        return this._libp2p.dial(peer, options);\n    }\n    _updateSentStats(peer, blocks) {\n        const peerId = peer.toString();\n        if (this._stats != null) {\n            for (const block of blocks.values()) {\n                this._stats.push(peerId, 'dataSent', block.length);\n            }\n            this._stats.push(peerId, 'blocksSent', blocks.size);\n        }\n    }\n    async _writeMessage(peerId, msg, options = {}) {\n        const stream = await this._libp2p.dialProtocol(peerId, [BITSWAP120, BITSWAP110, BITSWAP100]);\n        try {\n            /** @type {Uint8Array} */\n            let serialized;\n            switch (stream.protocol) {\n                case BITSWAP100:\n                    serialized = msg.serializeToBitswap100();\n                    break;\n                case BITSWAP110:\n                case BITSWAP120:\n                    serialized = msg.serializeToBitswap110();\n                    break;\n                default:\n                    throw new Error(`Unknown protocol: ${stream.protocol}`);\n            }\n            await (0,it_pipe__WEBPACK_IMPORTED_MODULE_3__.pipe)([serialized], (source) => it_length_prefixed__WEBPACK_IMPORTED_MODULE_1__.encode(source), stream);\n            await stream.close();\n        }\n        catch (err) {\n            options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_5__.CustomProgressEvent('bitswap:network:send-wantlist:error', { peer: peerId, error: err }));\n            this._log(err);\n            stream.abort(err);\n        }\n    }\n}\n//# sourceMappingURL=network.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/network.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/notifications.js":
/*!*************************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/notifications.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Notifications: () => (/* binding */ Notifications)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n/* harmony import */ var progress_events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! progress-events */ \"./node_modules/progress-events/dist/src/index.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/ipfs-bitswap/dist/src/constants.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/index.js */ \"./node_modules/ipfs-bitswap/dist/src/utils/index.js\");\n\n\n\n\n\nconst unwantEvent = (cid) => `unwant:${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(cid.multihash.bytes, 'base64')}`;\nconst blockEvent = (cid) => `block:${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_2__.toString)(cid.multihash.bytes, 'base64')}`;\nclass Notifications extends events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n    _log;\n    /**\n     * Internal module used to track events about incoming blocks,\n     * wants and unwants.\n     */\n    constructor(peerId) {\n        super();\n        this.setMaxListeners(_constants_js__WEBPACK_IMPORTED_MODULE_3__.maxListeners);\n        this._log = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_4__.logger)(peerId, 'notif');\n    }\n    /**\n     * Signal the system that we received `block`.\n     */\n    hasBlock(cid, block) {\n        const event = blockEvent(cid);\n        this._log(event);\n        this.emit(event, block);\n    }\n    /**\n     * Signal the system that we are waiting to receive the\n     * block associated with the given `cid`.\n     * Returns a Promise that resolves to the block when it is received,\n     * or undefined when the block is unwanted.\n     */\n    async wantBlock(cid, options = {}) {\n        if (cid == null) {\n            throw new Error('Not a valid cid');\n        }\n        const blockEvt = blockEvent(cid);\n        const unwantEvt = unwantEvent(cid);\n        this._log(`wantBlock:${cid}`);\n        return new Promise((resolve, reject) => {\n            const onUnwant = () => {\n                this.removeListener(blockEvt, onBlock);\n                options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_1__.CustomProgressEvent('bitswap:want-block:unwant', cid));\n                reject(new Error(`Block for ${cid} unwanted`));\n            };\n            const onBlock = (data) => {\n                this.removeListener(unwantEvt, onUnwant);\n                options.onProgress?.(new progress_events__WEBPACK_IMPORTED_MODULE_1__.CustomProgressEvent('bitswap:want-block:block', cid));\n                resolve(data);\n            };\n            this.once(unwantEvt, onUnwant);\n            this.once(blockEvt, onBlock);\n            options.signal?.addEventListener('abort', () => {\n                this.removeListener(blockEvt, onBlock);\n                this.removeListener(unwantEvt, onUnwant);\n                reject(new Error(`Want for ${cid} aborted`));\n            });\n        });\n    }\n    /**\n     * Signal that the block is not wanted anymore\n     */\n    unwantBlock(cid) {\n        const event = unwantEvent(cid);\n        this._log(event);\n        this.emit(event);\n    }\n}\n//# sourceMappingURL=notifications.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/notifications.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/stats/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/stats/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stats: () => (/* binding */ Stats)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n/* harmony import */ var _libp2p_utils_tracked_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/utils/tracked-map */ \"./node_modules/@libp2p/utils/dist/src/tracked-map.js\");\n/* harmony import */ var _stat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stat.js */ \"./node_modules/ipfs-bitswap/dist/src/stats/stat.js\");\n\n\n\nconst defaultOptions = {\n    enabled: false,\n    computeThrottleTimeout: 1000,\n    computeThrottleMaxQueueSize: 1000,\n    movingAverageIntervals: [\n        60 * 1000, // 1 minute\n        5 * 60 * 1000, // 5 minutes\n        15 * 60 * 1000 // 15 minutes\n    ]\n};\nclass Stats extends events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n    _initialCounters;\n    _options;\n    _enabled;\n    _global;\n    _peers;\n    constructor(libp2p, initialCounters = [], _options = defaultOptions) {\n        super();\n        const options = Object.assign({}, defaultOptions, _options);\n        if (typeof options.computeThrottleTimeout !== 'number') {\n            throw new Error('need computeThrottleTimeout');\n        }\n        if (typeof options.computeThrottleMaxQueueSize !== 'number') {\n            throw new Error('need computeThrottleMaxQueueSize');\n        }\n        this._initialCounters = initialCounters;\n        this._options = options;\n        this._enabled = this._options.enabled;\n        this._global = new _stat_js__WEBPACK_IMPORTED_MODULE_1__.Stat(initialCounters, options);\n        this._global.on('update', (stats) => this.emit('update', stats));\n        this._peers = (0,_libp2p_utils_tracked_map__WEBPACK_IMPORTED_MODULE_2__.trackedMap)({\n            name: 'ipfs_bitswap_stats_peers',\n            metrics: libp2p.metrics\n        });\n    }\n    enable() {\n        this._enabled = true;\n        this._options.enabled = true;\n        this._global.enable();\n    }\n    disable() {\n        this._enabled = false;\n        this._options.enabled = false;\n        this._global.disable();\n    }\n    stop() {\n        this._enabled = false;\n        this._global.stop();\n        for (const peerStat of this._peers) {\n            peerStat[1].stop();\n        }\n    }\n    get snapshot() {\n        return this._global.snapshot;\n    }\n    get movingAverages() {\n        return this._global.movingAverages;\n    }\n    forPeer(peerId) {\n        const peerIdStr = peerId.toString();\n        return this._peers.get(peerIdStr);\n    }\n    push(peer, counter, inc) {\n        if (this._enabled) {\n            this._global.push(counter, inc);\n            if (peer != null) {\n                let peerStats = this._peers.get(peer);\n                if (peerStats == null) {\n                    peerStats = new _stat_js__WEBPACK_IMPORTED_MODULE_1__.Stat(this._initialCounters, this._options);\n                    this._peers.set(peer, peerStats);\n                }\n                peerStats.push(counter, inc);\n            }\n        }\n    }\n    disconnected(peer) {\n        const peerId = peer.toString();\n        const peerStats = this._peers.get(peerId);\n        if (peerStats != null) {\n            peerStats.stop();\n            this._peers.delete(peerId);\n        }\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/stats/index.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/stats/stat.js":
/*!**********************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/stats/stat.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stat: () => (/* binding */ Stat)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n/* harmony import */ var _vascosantos_moving_average__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vascosantos/moving-average */ \"./node_modules/@vascosantos/moving-average/index.js\");\n\n\nclass Stat extends events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n    _options;\n    _queue;\n    _stats;\n    _frequencyLastTime;\n    _frequencyAccumulators;\n    _movingAverages;\n    _enabled;\n    _timeout;\n    constructor(initialCounters, options) {\n        super();\n        this._options = options;\n        this._queue = [];\n        this._stats = {};\n        this._frequencyLastTime = Date.now();\n        this._frequencyAccumulators = {};\n        this._movingAverages = {};\n        this._update = this._update.bind(this);\n        initialCounters.forEach((key) => {\n            this._stats[key] = BigInt(0);\n            this._movingAverages[key] = {};\n            this._options.movingAverageIntervals.forEach((interval) => {\n                const ma = this._movingAverages[key][interval] = _vascosantos_moving_average__WEBPACK_IMPORTED_MODULE_1__(interval);\n                ma.push(this._frequencyLastTime, 0);\n            });\n        });\n        this._enabled = this._options.enabled;\n    }\n    enable() {\n        this._enabled = true;\n    }\n    disable() {\n        this._enabled = false;\n    }\n    stop() {\n        if (this._timeout != null) {\n            clearTimeout(this._timeout);\n        }\n    }\n    get snapshot() {\n        return Object.assign({}, this._stats);\n    }\n    get movingAverages() {\n        return Object.assign({}, this._movingAverages);\n    }\n    push(counter, inc) {\n        if (this._enabled) {\n            this._queue.push([counter, inc, Date.now()]);\n            this._resetComputeTimeout();\n        }\n    }\n    _resetComputeTimeout() {\n        if (this._timeout != null) {\n            clearTimeout(this._timeout);\n        }\n        this._timeout = setTimeout(this._update, this._nextTimeout());\n    }\n    _nextTimeout() {\n        // calculate the need for an update, depending on the queue length\n        const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;\n        return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);\n    }\n    _update() {\n        this._timeout = undefined;\n        if (this._queue.length > 0) {\n            let last;\n            while (this._queue.length > 0) {\n                const op = last = this._queue.shift();\n                (op != null) && this._applyOp(op);\n            }\n            (last != null) && this._updateFrequency(last[2]); // contains timestamp of last op\n            this.emit('update', this._stats);\n        }\n    }\n    _updateFrequency(latestTime) {\n        const timeDiff = latestTime - this._frequencyLastTime;\n        if (timeDiff > 0) {\n            Object.keys(this._stats).forEach((key) => {\n                this._updateFrequencyFor(key, timeDiff, latestTime);\n            });\n        }\n        this._frequencyLastTime = latestTime;\n    }\n    _updateFrequencyFor(key, timeDiffMS, latestTime) {\n        const count = this._frequencyAccumulators[key] ?? 0;\n        this._frequencyAccumulators[key] = 0;\n        const hz = (count / timeDiffMS) * 1000;\n        let movingAverages = this._movingAverages[key];\n        if (movingAverages == null) {\n            movingAverages = this._movingAverages[key] = {};\n        }\n        this._options.movingAverageIntervals.forEach((movingAverageInterval) => {\n            let movingAverage = movingAverages[movingAverageInterval];\n            if (movingAverage == null) {\n                movingAverage = movingAverages[movingAverageInterval] = _vascosantos_moving_average__WEBPACK_IMPORTED_MODULE_1__(movingAverageInterval);\n            }\n            movingAverage.push(latestTime, hz);\n        });\n    }\n    _applyOp(op) {\n        const key = op[0];\n        const inc = op[1];\n        if (typeof inc !== 'number') {\n            throw new Error(`invalid increment number: ${inc}`);\n        }\n        if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n            this._stats[key] = BigInt(0);\n        }\n        this._stats[key] = BigInt(this._stats[key]) + BigInt(inc);\n        if (this._frequencyAccumulators[key] == null) {\n            this._frequencyAccumulators[key] = 0;\n        }\n        this._frequencyAccumulators[key] += inc;\n    }\n}\n//# sourceMappingURL=stat.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/stats/stat.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/utils/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/utils/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   groupBy: () => (/* binding */ groupBy),\n/* harmony export */   includesWith: () => (/* binding */ includesWith),\n/* harmony export */   isMapEqual: () => (/* binding */ isMapEqual),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   pullAllWith: () => (/* binding */ pullAllWith),\n/* harmony export */   sortBy: () => (/* binding */ sortBy),\n/* harmony export */   uniqWith: () => (/* binding */ uniqWith)\n/* harmony export */ });\n/* harmony import */ var _libp2p_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/logger */ \"./node_modules/@libp2p/logger/dist/src/index.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var _message_entry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../message/entry.js */ \"./node_modules/ipfs-bitswap/dist/src/message/entry.js\");\n\n\n\n/**\n * Creates a logger for the given subsystem\n */\nconst logger = (id, subsystem) => {\n    const name = ['bitswap'];\n    if (subsystem != null) {\n        name.push(subsystem);\n    }\n    if (id != null) {\n        name.push(`${id.toString().slice(0, 8)}`);\n    }\n    return (0,_libp2p_logger__WEBPACK_IMPORTED_MODULE_1__.logger)(name.join(':'));\n};\nconst includesWith = (pred, x, list) => {\n    let idx = 0;\n    const len = list.length;\n    while (idx < len) {\n        if (pred(x, list[idx])) {\n            return true;\n        }\n        idx += 1;\n    }\n    return false;\n};\nconst uniqWith = (pred, list) => {\n    let idx = 0;\n    const len = list.length;\n    const result = [];\n    let item;\n    while (idx < len) {\n        item = list[idx];\n        if (!includesWith(pred, item, result)) {\n            result[result.length] = item;\n        }\n        idx += 1;\n    }\n    return result;\n};\nconst groupBy = (pred, list) => {\n    // @ts-expect-error cannot use {} as record with these key types?\n    const output = {};\n    return list.reduce((acc, v) => {\n        const k = pred(v);\n        if (acc[k] != null) {\n            acc[k].push(v);\n        }\n        else {\n            acc[k] = [v];\n        }\n        return acc;\n    }, output);\n};\nconst pullAllWith = (pred, list, values) => {\n    return list.filter(i => {\n        return !includesWith(pred, i, values);\n    });\n};\nconst sortBy = (fn, list) => {\n    return Array.prototype.slice.call(list, 0).sort((a, b) => {\n        const aa = fn(a);\n        const bb = fn(b);\n        return aa < bb ? -1 : aa > bb ? 1 : 0;\n    });\n};\n/**\n * Is equal for Maps of BitswapMessageEntry or Uint8Arrays\n */\nconst isMapEqual = (a, b) => {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const [key, valueA] of a) {\n        const valueB = b.get(key);\n        if (valueB === undefined) {\n            return false;\n        }\n        // TODO: revisit this\n        // Support Blocks\n        if (valueA instanceof Uint8Array && valueB instanceof Uint8Array && !(0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_0__.equals)(valueA, valueB)) {\n            return false;\n        }\n        // Support BitswapMessageEntry\n        if (valueA instanceof _message_entry_js__WEBPACK_IMPORTED_MODULE_2__.BitswapMessageEntry && valueB instanceof _message_entry_js__WEBPACK_IMPORTED_MODULE_2__.BitswapMessageEntry && !valueA.equals(valueB)) {\n            return false;\n        }\n    }\n    return true;\n};\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/utils/index.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/utils/sorted-map.js":
/*!****************************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/utils/sorted-map.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SortedMap: () => (/* binding */ SortedMap)\n/* harmony export */ });\n/**\n * SortedMap is a Map whose iterator order can be defined by the user\n */\nclass SortedMap extends Map {\n    _cmp;\n    _keys;\n    constructor(entries, cmp) {\n        super();\n        this._cmp = cmp ?? this._defaultSort;\n        this._keys = [];\n        for (const [k, v] of entries ?? []) {\n            this.set(k, v);\n        }\n    }\n    /**\n     * Call update to update the position of the key when it should change.\n     * For example if the compare function sorts by the priority field, and the\n     * priority changes, call update.\n     * Call indexOf() to get the index _before_ the change happens.\n     */\n    update(i) {\n        if (i < 0 || i >= this._keys.length) {\n            return;\n        }\n        const k = this._keys[i];\n        this._keys.splice(i, 1);\n        const newIdx = this._find(k);\n        this._keys.splice(newIdx, 0, k);\n    }\n    set(k, v) {\n        // If the key is already in the map, remove it from the ordering and\n        // re-insert it below\n        if (this.has(k)) {\n            const i = this.indexOf(k);\n            this._keys.splice(i, 1);\n        }\n        // Update / insert the k/v into the map\n        super.set(k, v);\n        // Find the correct position of the newly inserted k/v in the order\n        const i = this._find(k);\n        this._keys.splice(i, 0, k);\n        return this;\n    }\n    clear() {\n        super.clear();\n        this._keys = [];\n    }\n    delete(k) {\n        if (!this.has(k)) {\n            return false;\n        }\n        const i = this.indexOf(k);\n        this._keys.splice(i, 1);\n        return super.delete(k);\n    }\n    indexOf(k) {\n        if (!this.has(k)) {\n            return -1;\n        }\n        const i = this._find(k);\n        if (this._keys[i] === k) {\n            return i;\n        }\n        // There may be more than one key with the same ordering\n        // eg { k1: <priority 5>, k2: <priority 5> }\n        // so scan outwards until the key matches\n        for (let j = 1; j < this._keys.length; j++) {\n            if (this._keys[i + j] === k)\n                return i + j;\n            if (this._keys[i - j] === k)\n                return i - j;\n        }\n        return -1; // should never happen for existing key\n    }\n    _find(k) {\n        let lower = 0;\n        let upper = this._keys.length;\n        while (lower < upper) {\n            const pivot = (lower + upper) >>> 1; // lower + (upper - lower) / 2\n            const cmp = this._kCmp(this._keys[pivot], k);\n            // console.log(`  _find ${lower}:${upper}[${pivot}] ${cmp}`)\n            if (cmp < 0) { // pivot < k\n                lower = pivot + 1;\n            }\n            else if (cmp > 0) { // pivot > k\n                upper = pivot;\n            }\n            else { // pivot == k\n                return pivot;\n            }\n        }\n        return lower;\n    }\n    *keys() {\n        for (const k of this._keys) {\n            yield k;\n        }\n        return undefined;\n    }\n    *values() {\n        for (const k of this._keys) {\n            // @ts-expect-error - return of `this.get(k)` is `Value|undefined` which is\n            // incompatible with `Value`. Typechecker can't that this contains values\n            // for all the `_keys`. ts(2322)\n            yield this.get(k);\n        }\n        return undefined;\n    }\n    *entries() {\n        for (const k of this._keys) {\n            // @ts-expect-error - return of `this.get(k)` is `Value|undefined` which is\n            // incompatible with `Value`. Typechecker can't that this contains values\n            // for all the `_keys`. ts(2322)\n            yield [k, this.get(k)];\n        }\n        return undefined;\n    }\n    *[Symbol.iterator]() {\n        yield* this.entries();\n    }\n    // @ts-expect-error - Callback in Map forEach is (V, K, Map<K, V>) => void\n    forEach(cb, thisArg = this) {\n        if (cb == null) {\n            return;\n        }\n        for (const k of this._keys) {\n            const val = this.get(k);\n            if (val == null) {\n                throw new Error('Value cannot be undefined');\n            }\n            cb.apply(thisArg, [[k, val]]);\n        }\n    }\n    _defaultSort(a, b) {\n        if (a[0] < b[0])\n            return -1;\n        if (b[0] < a[0])\n            return 1;\n        return 0;\n    }\n    _kCmp(a, b) {\n        return this._cmp(\n        // @ts-expect-error - get may return undefined\n        [a, this.get(a)], [b, this.get(b)]);\n    }\n}\n//# sourceMappingURL=sorted-map.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/utils/sorted-map.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/utils/varint-encoder.js":
/*!********************************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/utils/varint-encoder.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var varint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! varint */ \"./node_modules/varint/index.js\");\n\nfunction varintEncoder(buf) {\n    let out = new Uint8Array(buf.reduce((acc, curr) => {\n        // @ts-expect-error types are wrong\n        return acc + varint__WEBPACK_IMPORTED_MODULE_0__.encodingLength(curr); // eslint-disable-line @typescript-eslint/restrict-plus-operands\n    }, 0));\n    let offset = 0;\n    for (const num of buf) {\n        out = varint__WEBPACK_IMPORTED_MODULE_0__.encode(num, out, offset);\n        // @ts-expect-error types are wrong\n        offset += varint__WEBPACK_IMPORTED_MODULE_0__.encodingLength(num); // eslint-disable-line @typescript-eslint/restrict-plus-operands\n    }\n    return out;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (varintEncoder);\n//# sourceMappingURL=varint-encoder.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/utils/varint-encoder.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/want-manager/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/want-manager/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WantManager: () => (/* binding */ WantManager)\n/* harmony export */ });\n/* harmony import */ var _libp2p_utils_tracked_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/utils/tracked-map */ \"./node_modules/@libp2p/utils/dist/src/tracked-map.js\");\n/* harmony import */ var multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/bases/base58 */ \"./node_modules/multiformats/dist/src/bases/base58.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/ipfs-bitswap/dist/src/constants.js\");\n/* harmony import */ var _message_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../message/index.js */ \"./node_modules/ipfs-bitswap/dist/src/message/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/index.js */ \"./node_modules/ipfs-bitswap/dist/src/utils/index.js\");\n/* harmony import */ var _wantlist_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../wantlist/index.js */ \"./node_modules/ipfs-bitswap/dist/src/wantlist/index.js\");\n/* harmony import */ var _msg_queue_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./msg-queue.js */ \"./node_modules/ipfs-bitswap/dist/src/want-manager/msg-queue.js\");\n\n\n\n\n\n\n\nclass WantManager {\n    peers;\n    wantlist;\n    network;\n    _peerId;\n    _log;\n    constructor(peerId, network, stats, libp2p) {\n        this.peers = (0,_libp2p_utils_tracked_map__WEBPACK_IMPORTED_MODULE_1__.trackedMap)({\n            name: 'ipfs_bitswap_want_manager_peers',\n            metrics: libp2p.metrics\n        });\n        this.wantlist = new _wantlist_index_js__WEBPACK_IMPORTED_MODULE_2__.Wantlist(stats, libp2p);\n        this.network = network;\n        this._peerId = peerId;\n        this._log = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_3__.logger)(peerId, 'want');\n    }\n    _addEntries(cids, cancel, force, options = {}) {\n        const entries = cids.map((cid, i) => {\n            return new _message_index_js__WEBPACK_IMPORTED_MODULE_4__.BitswapMessage.Entry(cid, _constants_js__WEBPACK_IMPORTED_MODULE_5__.kMaxPriority - i, _message_index_js__WEBPACK_IMPORTED_MODULE_4__.BitswapMessage.WantType.Block, cancel);\n        });\n        entries.forEach((e) => {\n            // add changes to our wantlist\n            if (e.cancel) {\n                if (force === true) {\n                    this.wantlist.removeForce(e.cid.toString(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc));\n                }\n                else {\n                    this.wantlist.remove(e.cid);\n                }\n            }\n            else {\n                this._log('adding to wantlist');\n                // TODO: Figure out the wantType\n                // @ts-expect-error - requires wantType\n                this.wantlist.add(e.cid, e.priority);\n            }\n        });\n        // broadcast changes\n        for (const p of this.peers.values()) {\n            p.addEntries(entries, options);\n        }\n    }\n    _startPeerHandler(peerId) {\n        let mq = this.peers.get(peerId.toString());\n        if (mq != null) {\n            mq.refcnt++;\n            return;\n        }\n        mq = new _msg_queue_js__WEBPACK_IMPORTED_MODULE_6__.MsgQueue(this._peerId, peerId, this.network);\n        // new peer, give them the full wantlist\n        const fullwantlist = new _message_index_js__WEBPACK_IMPORTED_MODULE_4__.BitswapMessage(true);\n        for (const entry of this.wantlist.entries()) {\n            fullwantlist.addEntry(entry[1].cid, entry[1].priority);\n        }\n        mq.addMessage(fullwantlist);\n        this.peers.set(peerId.toString(), mq);\n        return mq;\n    }\n    _stopPeerHandler(peerId) {\n        const mq = this.peers.get(peerId.toString());\n        if (mq == null) {\n            return;\n        }\n        mq.refcnt--;\n        if (mq.refcnt > 0) {\n            return;\n        }\n        this.peers.delete(peerId.toString());\n    }\n    /**\n     * add all the cids to the wantlist\n     */\n    wantBlocks(cids, options = {}) {\n        this._addEntries(cids, false, false, options);\n        options.signal?.addEventListener('abort', () => {\n            this.cancelWants(cids);\n        });\n    }\n    /**\n     * Remove blocks of all the given keys without respecting refcounts\n     */\n    unwantBlocks(cids) {\n        this._log('unwant blocks: %s', cids.length);\n        this._addEntries(cids, true, true);\n    }\n    /**\n     * Cancel wanting all of the given keys\n     */\n    cancelWants(cids) {\n        this._log('cancel wants: %s', cids.length);\n        this._addEntries(cids, true);\n    }\n    /**\n     * Returns a list of all currently connected peers\n     */\n    connectedPeers() {\n        return Array.from(this.peers.keys());\n    }\n    connected(peerId) {\n        this._startPeerHandler(peerId);\n    }\n    disconnected(peerId) {\n        this._stopPeerHandler(peerId);\n    }\n    start() {\n    }\n    stop() {\n        this.peers.forEach((mq) => { this.disconnected(mq.peerId); });\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/want-manager/index.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/want-manager/msg-queue.js":
/*!**********************************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/want-manager/msg-queue.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MsgQueue: () => (/* binding */ MsgQueue)\n/* harmony export */ });\n/* harmony import */ var just_debounce_it__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! just-debounce-it */ \"./node_modules/just-debounce-it/index.mjs\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/ipfs-bitswap/dist/src/constants.js\");\n/* harmony import */ var _message_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../message/index.js */ \"./node_modules/ipfs-bitswap/dist/src/message/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ \"./node_modules/ipfs-bitswap/dist/src/utils/index.js\");\n\n\n\n\nclass MsgQueue {\n    peerId;\n    refcnt;\n    network;\n    _entries;\n    _log;\n    constructor(selfPeerId, otherPeerId, network) {\n        this.peerId = otherPeerId;\n        this.network = network;\n        this.refcnt = 1;\n        this._entries = [];\n        this._log = (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_1__.logger)(selfPeerId, 'msgqueue');\n        this.sendEntries = (0,just_debounce_it__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.sendEntries.bind(this), _constants_js__WEBPACK_IMPORTED_MODULE_2__.wantlistSendDebounceMs);\n    }\n    addMessage(msg, options = {}) {\n        if (msg.empty) {\n            return;\n        }\n        void this.send(msg, options);\n    }\n    addEntries(entries, options = {}) {\n        this._entries = this._entries.concat(entries);\n        this.sendEntries(options);\n    }\n    sendEntries(options = {}) {\n        if (this._entries.length === 0) {\n            return;\n        }\n        const msg = new _message_index_js__WEBPACK_IMPORTED_MODULE_3__.BitswapMessage(false);\n        this._entries.forEach((entry) => {\n            if (entry.cancel === true) {\n                msg.cancel(entry.cid);\n            }\n            else {\n                msg.addEntry(entry.cid, entry.priority);\n            }\n        });\n        this._entries = [];\n        this.addMessage(msg, options);\n    }\n    async send(msg, options = {}) {\n        try {\n            await this.network.connectTo(this.peerId, options);\n        }\n        catch (err) {\n            this._log.error('cant connect to peer %p: %s', this.peerId, err.message);\n            return;\n        }\n        this._log('sending message to peer %p', this.peerId);\n        // Note: Don't wait for sendMessage() to complete\n        this.network.sendMessage(this.peerId, msg, options).catch((err) => {\n            this._log.error('send error', err);\n        });\n    }\n}\n//# sourceMappingURL=msg-queue.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/want-manager/msg-queue.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/wantlist/entry.js":
/*!**************************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/wantlist/entry.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WantListEntry: () => (/* binding */ WantListEntry)\n/* harmony export */ });\n/* harmony import */ var multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/bases/base58 */ \"./node_modules/multiformats/dist/src/bases/base58.js\");\n\nclass WantListEntry {\n    _refCounter;\n    cid;\n    priority;\n    wantType;\n    constructor(cid, priority, wantType) {\n        // Keep track of how many requests we have for this key\n        this._refCounter = 1;\n        this.cid = cid;\n        this.priority = priority ?? 1;\n        this.wantType = wantType;\n    }\n    inc() {\n        this._refCounter += 1;\n    }\n    dec() {\n        this._refCounter = Math.max(0, this._refCounter - 1);\n    }\n    hasRefs() {\n        return this._refCounter > 0;\n    }\n    // So that console.log prints a nice description of this object\n    get [Symbol.toStringTag]() {\n        const cidStr = this.cid.toString(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc);\n        return `WantlistEntry <key: ${cidStr}, priority: ${this.priority}, refs: ${this._refCounter}>`;\n    }\n    equals(other) {\n        return (this._refCounter === other._refCounter) &&\n            this.cid.equals(other.cid) &&\n            this.priority === other.priority &&\n            this.wantType === other.wantType;\n    }\n}\n//# sourceMappingURL=entry.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/wantlist/entry.js?");

/***/ }),

/***/ "./node_modules/ipfs-bitswap/dist/src/wantlist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/ipfs-bitswap/dist/src/wantlist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Wantlist: () => (/* binding */ Wantlist)\n/* harmony export */ });\n/* harmony import */ var _libp2p_utils_tracked_map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/utils/tracked-map */ \"./node_modules/@libp2p/utils/dist/src/tracked-map.js\");\n/* harmony import */ var multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/bases/base58 */ \"./node_modules/multiformats/dist/src/bases/base58.js\");\n/* harmony import */ var _message_message_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../message/message.js */ \"./node_modules/ipfs-bitswap/dist/src/message/message.js\");\n/* harmony import */ var _entry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./entry.js */ \"./node_modules/ipfs-bitswap/dist/src/wantlist/entry.js\");\n\n\n\n\nconst WantType = {\n    Block: _message_message_js__WEBPACK_IMPORTED_MODULE_1__.Message.Wantlist.WantType.Block,\n    Have: _message_message_js__WEBPACK_IMPORTED_MODULE_1__.Message.Wantlist.WantType.Have\n};\nconst sortBy = (fn, list) => {\n    return Array.prototype.slice.call(list, 0).sort((a, b) => {\n        const aa = fn(a);\n        const bb = fn(b);\n        return aa < bb ? -1 : aa > bb ? 1 : 0;\n    });\n};\nclass Wantlist {\n    static Entry = _entry_js__WEBPACK_IMPORTED_MODULE_2__.WantListEntry;\n    set;\n    _stats;\n    constructor(stats, libp2p) {\n        this.set = (libp2p != null)\n            ? (0,_libp2p_utils_tracked_map__WEBPACK_IMPORTED_MODULE_3__.trackedMap)({\n                name: 'ipfs_bitswap_wantlist',\n                metrics: libp2p.metrics\n            })\n            : new Map();\n        this._stats = stats;\n    }\n    get length() {\n        return this.set.size;\n    }\n    add(cid, priority, wantType) {\n        const cidStr = cid.toString(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc);\n        const entry = this.set.get(cidStr);\n        if (entry != null) {\n            entry.inc();\n            entry.priority = priority;\n            // We can only overwrite want-have with want-block\n            if (entry.wantType === WantType.Have && wantType === WantType.Block) {\n                entry.wantType = wantType;\n            }\n        }\n        else {\n            this.set.set(cidStr, new _entry_js__WEBPACK_IMPORTED_MODULE_2__.WantListEntry(cid, priority, wantType));\n            if (this._stats != null) {\n                this._stats.push(undefined, 'wantListSize', 1);\n            }\n        }\n    }\n    remove(cid) {\n        const cidStr = cid.toString(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc);\n        const entry = this.set.get(cidStr);\n        if (entry == null) {\n            return;\n        }\n        entry.dec();\n        // only delete when no refs are held\n        if (entry.hasRefs()) {\n            return;\n        }\n        this.set.delete(cidStr);\n        if (this._stats != null) {\n            this._stats.push(undefined, 'wantListSize', -1);\n        }\n    }\n    removeForce(cidStr) {\n        if (this.set.has(cidStr)) {\n            this.set.delete(cidStr);\n        }\n    }\n    forEach(fn) {\n        this.set.forEach(fn);\n    }\n    entries() {\n        return this.set.entries();\n    }\n    sortedEntries() {\n        // TODO: Figure out if this is an actual bug.\n        // @ts-expect-error - Property 'key' does not exist on type 'WantListEntry'\n        return new Map(sortBy(o => o[1].key, Array.from(this.set.entries())));\n    }\n    contains(cid) {\n        const cidStr = cid.toString(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc);\n        return this.set.has(cidStr);\n    }\n    get(cid) {\n        const cidStr = cid.toString(multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_0__.base58btc);\n        return this.set.get(cidStr);\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipfs-bitswap/dist/src/wantlist/index.js?");

/***/ }),

/***/ "./node_modules/ipns/dist/src/errors.js":
/*!**********************************************!*\
  !*** ./node_modules/ipns/dist/src/errors.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERR_INVALID_EMBEDDED_KEY: () => (/* binding */ ERR_INVALID_EMBEDDED_KEY),\n/* harmony export */   ERR_INVALID_RECORD_DATA: () => (/* binding */ ERR_INVALID_RECORD_DATA),\n/* harmony export */   ERR_INVALID_VALUE: () => (/* binding */ ERR_INVALID_VALUE),\n/* harmony export */   ERR_IPNS_EXPIRED_RECORD: () => (/* binding */ ERR_IPNS_EXPIRED_RECORD),\n/* harmony export */   ERR_MISSING_PRIVATE_KEY: () => (/* binding */ ERR_MISSING_PRIVATE_KEY),\n/* harmony export */   ERR_PEER_ID_FROM_PUBLIC_KEY: () => (/* binding */ ERR_PEER_ID_FROM_PUBLIC_KEY),\n/* harmony export */   ERR_PUBLIC_KEY_FROM_ID: () => (/* binding */ ERR_PUBLIC_KEY_FROM_ID),\n/* harmony export */   ERR_RECORD_TOO_LARGE: () => (/* binding */ ERR_RECORD_TOO_LARGE),\n/* harmony export */   ERR_SIGNATURE_CREATION: () => (/* binding */ ERR_SIGNATURE_CREATION),\n/* harmony export */   ERR_SIGNATURE_VERIFICATION: () => (/* binding */ ERR_SIGNATURE_VERIFICATION),\n/* harmony export */   ERR_UNDEFINED_PARAMETER: () => (/* binding */ ERR_UNDEFINED_PARAMETER),\n/* harmony export */   ERR_UNRECOGNIZED_FORMAT: () => (/* binding */ ERR_UNRECOGNIZED_FORMAT),\n/* harmony export */   ERR_UNRECOGNIZED_VALIDITY: () => (/* binding */ ERR_UNRECOGNIZED_VALIDITY)\n/* harmony export */ });\nconst ERR_IPNS_EXPIRED_RECORD = 'ERR_IPNS_EXPIRED_RECORD';\nconst ERR_UNRECOGNIZED_VALIDITY = 'ERR_UNRECOGNIZED_VALIDITY';\nconst ERR_SIGNATURE_CREATION = 'ERR_SIGNATURE_CREATION';\nconst ERR_SIGNATURE_VERIFICATION = 'ERR_SIGNATURE_VERIFICATION';\nconst ERR_UNRECOGNIZED_FORMAT = 'ERR_UNRECOGNIZED_FORMAT';\nconst ERR_PEER_ID_FROM_PUBLIC_KEY = 'ERR_PEER_ID_FROM_PUBLIC_KEY';\nconst ERR_PUBLIC_KEY_FROM_ID = 'ERR_PUBLIC_KEY_FROM_ID';\nconst ERR_UNDEFINED_PARAMETER = 'ERR_UNDEFINED_PARAMETER';\nconst ERR_INVALID_RECORD_DATA = 'ERR_INVALID_RECORD_DATA';\nconst ERR_INVALID_VALUE = 'ERR_INVALID_VALUE';\nconst ERR_INVALID_EMBEDDED_KEY = 'ERR_INVALID_EMBEDDED_KEY';\nconst ERR_MISSING_PRIVATE_KEY = 'ERR_MISSING_PRIVATE_KEY';\nconst ERR_RECORD_TOO_LARGE = 'ERR_RECORD_TOO_LARGE';\n//# sourceMappingURL=errors.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipns/dist/src/errors.js?");

/***/ }),

/***/ "./node_modules/ipns/dist/src/pb/ipns.js":
/*!***********************************************!*\
  !*** ./node_modules/ipns/dist/src/pb/ipns.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IpnsEntry: () => (/* binding */ IpnsEntry)\n/* harmony export */ });\n/* harmony import */ var protons_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protons-runtime */ \"./node_modules/protons-runtime/dist/src/index.js\");\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nvar IpnsEntry;\n(function (IpnsEntry) {\n    let ValidityType;\n    (function (ValidityType) {\n        ValidityType[\"EOL\"] = \"EOL\";\n    })(ValidityType = IpnsEntry.ValidityType || (IpnsEntry.ValidityType = {}));\n    let __ValidityTypeValues;\n    (function (__ValidityTypeValues) {\n        __ValidityTypeValues[__ValidityTypeValues[\"EOL\"] = 0] = \"EOL\";\n    })(__ValidityTypeValues || (__ValidityTypeValues = {}));\n    (function (ValidityType) {\n        ValidityType.codec = () => {\n            return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.enumeration)(__ValidityTypeValues);\n        };\n    })(ValidityType = IpnsEntry.ValidityType || (IpnsEntry.ValidityType = {}));\n    let _codec;\n    IpnsEntry.codec = () => {\n        if (_codec == null) {\n            _codec = (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.message)((obj, w, opts = {}) => {\n                if (opts.lengthDelimited !== false) {\n                    w.fork();\n                }\n                if (obj.value != null) {\n                    w.uint32(10);\n                    w.bytes(obj.value);\n                }\n                if (obj.signatureV1 != null) {\n                    w.uint32(18);\n                    w.bytes(obj.signatureV1);\n                }\n                if (obj.validityType != null) {\n                    w.uint32(24);\n                    IpnsEntry.ValidityType.codec().encode(obj.validityType, w);\n                }\n                if (obj.validity != null) {\n                    w.uint32(34);\n                    w.bytes(obj.validity);\n                }\n                if (obj.sequence != null) {\n                    w.uint32(40);\n                    w.uint64(obj.sequence);\n                }\n                if (obj.ttl != null) {\n                    w.uint32(48);\n                    w.uint64(obj.ttl);\n                }\n                if (obj.pubKey != null) {\n                    w.uint32(58);\n                    w.bytes(obj.pubKey);\n                }\n                if (obj.signatureV2 != null) {\n                    w.uint32(66);\n                    w.bytes(obj.signatureV2);\n                }\n                if (obj.data != null) {\n                    w.uint32(74);\n                    w.bytes(obj.data);\n                }\n                if (opts.lengthDelimited !== false) {\n                    w.ldelim();\n                }\n            }, (reader, length) => {\n                const obj = {};\n                const end = length == null ? reader.len : reader.pos + length;\n                while (reader.pos < end) {\n                    const tag = reader.uint32();\n                    switch (tag >>> 3) {\n                        case 1:\n                            obj.value = reader.bytes();\n                            break;\n                        case 2:\n                            obj.signatureV1 = reader.bytes();\n                            break;\n                        case 3:\n                            obj.validityType = IpnsEntry.ValidityType.codec().decode(reader);\n                            break;\n                        case 4:\n                            obj.validity = reader.bytes();\n                            break;\n                        case 5:\n                            obj.sequence = reader.uint64();\n                            break;\n                        case 6:\n                            obj.ttl = reader.uint64();\n                            break;\n                        case 7:\n                            obj.pubKey = reader.bytes();\n                            break;\n                        case 8:\n                            obj.signatureV2 = reader.bytes();\n                            break;\n                        case 9:\n                            obj.data = reader.bytes();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                    }\n                }\n                return obj;\n            });\n        }\n        return _codec;\n    };\n    IpnsEntry.encode = (obj) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.encodeMessage)(obj, IpnsEntry.codec());\n    };\n    IpnsEntry.decode = (buf) => {\n        return (0,protons_runtime__WEBPACK_IMPORTED_MODULE_0__.decodeMessage)(buf, IpnsEntry.codec());\n    };\n})(IpnsEntry || (IpnsEntry = {}));\n//# sourceMappingURL=ipns.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipns/dist/src/pb/ipns.js?");

/***/ }),

/***/ "./node_modules/ipns/dist/src/selector.js":
/*!************************************************!*\
  !*** ./node_modules/ipns/dist/src/selector.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ipnsSelector: () => (/* binding */ ipnsSelector)\n/* harmony export */ });\n/* harmony import */ var timestamp_nano__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! timestamp-nano */ \"./node_modules/timestamp-nano/dist/timestamp.min.js\");\n/* harmony import */ var _pb_ipns_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pb/ipns.js */ \"./node_modules/ipns/dist/src/pb/ipns.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/ipns/dist/src/utils.js\");\n\n\n\nfunction ipnsSelector(key, data) {\n    const entries = data.map((buf, index) => ({\n        record: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.unmarshal)(buf),\n        index\n    }));\n    entries.sort((a, b) => {\n        // Before we'd sort based on the signature version. Unmarshal now fails if\n        // a record does not have SignatureV2, so that is no longer needed. V1-only\n        // records haven't been issues in a long time.\n        const aSeq = a.record.sequence;\n        const bSeq = b.record.sequence;\n        // choose later sequence number\n        if (aSeq > bSeq) {\n            return -1;\n        }\n        else if (aSeq < bSeq) {\n            return 1;\n        }\n        if (a.record.validityType === _pb_ipns_js__WEBPACK_IMPORTED_MODULE_2__.IpnsEntry.ValidityType.EOL && b.record.validityType === _pb_ipns_js__WEBPACK_IMPORTED_MODULE_2__.IpnsEntry.ValidityType.EOL) {\n            // choose longer lived record if sequence numbers the same\n            const recordAValidityDate = timestamp_nano__WEBPACK_IMPORTED_MODULE_0__.fromString(a.record.validity).toDate();\n            const recordBValidityDate = timestamp_nano__WEBPACK_IMPORTED_MODULE_0__.fromString(b.record.validity).toDate();\n            if (recordAValidityDate.getTime() > recordBValidityDate.getTime()) {\n                return -1;\n            }\n            if (recordAValidityDate.getTime() < recordBValidityDate.getTime()) {\n                return 1;\n            }\n        }\n        return 0;\n    });\n    return entries[0].index;\n}\n//# sourceMappingURL=selector.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipns/dist/src/selector.js?");

/***/ }),

/***/ "./node_modules/ipns/dist/src/utils.js":
/*!*********************************************!*\
  !*** ./node_modules/ipns/dist/src/utils.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCborData: () => (/* binding */ createCborData),\n/* harmony export */   extractPublicKey: () => (/* binding */ extractPublicKey),\n/* harmony export */   ipnsRecordDataForV1Sig: () => (/* binding */ ipnsRecordDataForV1Sig),\n/* harmony export */   ipnsRecordDataForV2Sig: () => (/* binding */ ipnsRecordDataForV2Sig),\n/* harmony export */   marshal: () => (/* binding */ marshal),\n/* harmony export */   normalizeValue: () => (/* binding */ normalizeValue),\n/* harmony export */   parseCborData: () => (/* binding */ parseCborData),\n/* harmony export */   peerIdFromRoutingKey: () => (/* binding */ peerIdFromRoutingKey),\n/* harmony export */   peerIdToRoutingKey: () => (/* binding */ peerIdToRoutingKey),\n/* harmony export */   unmarshal: () => (/* binding */ unmarshal)\n/* harmony export */ });\n/* harmony import */ var _libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @libp2p/crypto/keys */ \"./node_modules/@libp2p/crypto/dist/src/keys/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/peer-id/index.js\");\n/* harmony import */ var _libp2p_logger__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/logger */ \"./node_modules/@libp2p/logger/dist/src/index.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var cborg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cborg */ \"./node_modules/cborg/cborg.js\");\n/* harmony import */ var err_code__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! err-code */ \"./node_modules/err-code/index.js\");\n/* harmony import */ var multiformats_bases_base36__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! multiformats/bases/base36 */ \"./node_modules/multiformats/dist/src/bases/base36.js\");\n/* harmony import */ var multiformats_cid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! multiformats/cid */ \"./node_modules/multiformats/dist/src/cid.js\");\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uint8arrays/concat */ \"./node_modules/uint8arrays/dist/src/concat.js\");\n/* harmony import */ var uint8arrays_equals__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uint8arrays/equals */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/ipns/dist/src/errors.js\");\n/* harmony import */ var _pb_ipns_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./pb/ipns.js */ \"./node_modules/ipns/dist/src/pb/ipns.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst log = (0,_libp2p_logger__WEBPACK_IMPORTED_MODULE_8__.logger)('ipns:utils');\nconst IPNS_PREFIX = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_6__.fromString)('/ipns/');\nconst LIBP2P_CID_CODEC = 114;\n/**\n * Extracts a public key from the passed PeerId, falling\n * back to the pubKey embedded in the ipns record\n */\nconst extractPublicKey = async (peerId, record) => {\n    if (record == null || peerId == null) {\n        const error = new Error('one or more of the provided parameters are not defined');\n        log.error(error);\n        throw err_code__WEBPACK_IMPORTED_MODULE_1__(error, _errors_js__WEBPACK_IMPORTED_MODULE_9__.ERR_UNDEFINED_PARAMETER);\n    }\n    let pubKey;\n    if (record.pubKey != null) {\n        try {\n            pubKey = (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_10__.unmarshalPublicKey)(record.pubKey);\n        }\n        catch (err) {\n            log.error(err);\n            throw err;\n        }\n        const otherId = await (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_11__.peerIdFromKeys)(record.pubKey);\n        if (!otherId.equals(peerId)) {\n            throw err_code__WEBPACK_IMPORTED_MODULE_1__(new Error('Embedded public key did not match PeerID'), _errors_js__WEBPACK_IMPORTED_MODULE_9__.ERR_INVALID_EMBEDDED_KEY);\n        }\n    }\n    else if (peerId.publicKey != null) {\n        pubKey = (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_10__.unmarshalPublicKey)(peerId.publicKey);\n    }\n    if (pubKey != null) {\n        return pubKey;\n    }\n    throw err_code__WEBPACK_IMPORTED_MODULE_1__(new Error('no public key is available'), _errors_js__WEBPACK_IMPORTED_MODULE_9__.ERR_UNDEFINED_PARAMETER);\n};\n/**\n * Utility for creating the record data for being signed\n */\nconst ipnsRecordDataForV1Sig = (value, validityType, validity) => {\n    const validityTypeBuffer = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_6__.fromString)(validityType);\n    return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_4__.concat)([value, validity, validityTypeBuffer]);\n};\n/**\n * Utility for creating the record data for being signed\n */\nconst ipnsRecordDataForV2Sig = (data) => {\n    const entryData = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_6__.fromString)('ipns-signature:');\n    return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_4__.concat)([entryData, data]);\n};\nconst marshal = (obj) => {\n    if ('signatureV1' in obj) {\n        return _pb_ipns_js__WEBPACK_IMPORTED_MODULE_12__.IpnsEntry.encode({\n            value: (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_6__.fromString)(obj.value),\n            signatureV1: obj.signatureV1,\n            validityType: obj.validityType,\n            validity: (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_6__.fromString)(obj.validity),\n            sequence: obj.sequence,\n            ttl: obj.ttl,\n            pubKey: obj.pubKey,\n            signatureV2: obj.signatureV2,\n            data: obj.data\n        });\n    }\n    else {\n        return _pb_ipns_js__WEBPACK_IMPORTED_MODULE_12__.IpnsEntry.encode({\n            pubKey: obj.pubKey,\n            signatureV2: obj.signatureV2,\n            data: obj.data\n        });\n    }\n};\nfunction unmarshal(buf) {\n    const message = _pb_ipns_js__WEBPACK_IMPORTED_MODULE_12__.IpnsEntry.decode(buf);\n    // protobufjs returns bigints as numbers\n    if (message.sequence != null) {\n        message.sequence = BigInt(message.sequence);\n    }\n    // protobufjs returns bigints as numbers\n    if (message.ttl != null) {\n        message.ttl = BigInt(message.ttl);\n    }\n    // Check if we have the data field. If we don't, we fail. We've been producing\n    // V1+V2 records for quite a while and we don't support V1-only records during\n    // validation any more\n    if (message.signatureV2 == null || message.data == null) {\n        throw err_code__WEBPACK_IMPORTED_MODULE_1__(new Error('missing data or signatureV2'), _errors_js__WEBPACK_IMPORTED_MODULE_9__.ERR_SIGNATURE_VERIFICATION);\n    }\n    const data = parseCborData(message.data);\n    const value = normalizeValue(data.Value);\n    const validity = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_7__.toString)(data.Validity);\n    if (message.value != null && message.signatureV1 != null) {\n        // V1+V2\n        validateCborDataMatchesPbData(message);\n        return {\n            value,\n            validityType: _pb_ipns_js__WEBPACK_IMPORTED_MODULE_12__.IpnsEntry.ValidityType.EOL,\n            validity,\n            sequence: data.Sequence,\n            ttl: data.TTL,\n            pubKey: message.pubKey,\n            signatureV1: message.signatureV1,\n            signatureV2: message.signatureV2,\n            data: message.data\n        };\n    }\n    else if (message.signatureV2 != null) {\n        // V2-only\n        return {\n            value,\n            validityType: _pb_ipns_js__WEBPACK_IMPORTED_MODULE_12__.IpnsEntry.ValidityType.EOL,\n            validity,\n            sequence: data.Sequence,\n            ttl: data.TTL,\n            pubKey: message.pubKey,\n            signatureV2: message.signatureV2,\n            data: message.data\n        };\n    }\n    else {\n        throw new Error('invalid record: does not include signatureV1 or signatureV2');\n    }\n}\nconst peerIdToRoutingKey = (peerId) => {\n    return (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_4__.concat)([\n        IPNS_PREFIX,\n        peerId.toBytes()\n    ]);\n};\nconst peerIdFromRoutingKey = (key) => {\n    return (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_11__.peerIdFromBytes)(key.slice(IPNS_PREFIX.length));\n};\nconst createCborData = (value, validityType, validity, sequence, ttl) => {\n    let ValidityType;\n    if (validityType === _pb_ipns_js__WEBPACK_IMPORTED_MODULE_12__.IpnsEntry.ValidityType.EOL) {\n        ValidityType = 0;\n    }\n    else {\n        throw err_code__WEBPACK_IMPORTED_MODULE_1__(new Error('Unknown validity type'), _errors_js__WEBPACK_IMPORTED_MODULE_9__.ERR_UNRECOGNIZED_VALIDITY);\n    }\n    const data = {\n        Value: value,\n        Validity: validity,\n        ValidityType,\n        Sequence: sequence,\n        TTL: ttl\n    };\n    return cborg__WEBPACK_IMPORTED_MODULE_0__.encode(data);\n};\nconst parseCborData = (buf) => {\n    const data = cborg__WEBPACK_IMPORTED_MODULE_0__.decode(buf);\n    if (data.ValidityType === 0) {\n        data.ValidityType = _pb_ipns_js__WEBPACK_IMPORTED_MODULE_12__.IpnsEntry.ValidityType.EOL;\n    }\n    else {\n        throw err_code__WEBPACK_IMPORTED_MODULE_1__(new Error('Unknown validity type'), _errors_js__WEBPACK_IMPORTED_MODULE_9__.ERR_UNRECOGNIZED_VALIDITY);\n    }\n    if (Number.isInteger(data.Sequence)) {\n        // sequence must be a BigInt, but DAG-CBOR doesn't preserve this for Numbers within the safe-integer range\n        data.Sequence = BigInt(data.Sequence);\n    }\n    if (Number.isInteger(data.TTL)) {\n        // ttl must be a BigInt, but DAG-CBOR doesn't preserve this for Numbers within the safe-integer range\n        data.TTL = BigInt(data.TTL);\n    }\n    return data;\n};\n/**\n * Normalizes the given record value. It ensures it is a PeerID, a CID or a\n * string starting with '/'. PeerIDs become `/ipns/${cidV1Libp2pKey}`,\n * CIDs become `/ipfs/${cidAsV1}`.\n */\nconst normalizeValue = (value) => {\n    if (value != null) {\n        // if we have a PeerId, turn it into an ipns path\n        if ((0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_13__.isPeerId)(value)) {\n            return `/ipns/${value.toCID().toString(multiformats_bases_base36__WEBPACK_IMPORTED_MODULE_2__.base36)}`;\n        }\n        // if the value is bytes, stringify it and see if we have a path\n        if (value instanceof Uint8Array) {\n            const string = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_7__.toString)(value);\n            if (string.startsWith('/')) {\n                value = string;\n            }\n        }\n        // if we have a path, check it is a valid path\n        const string = value.toString().trim();\n        if (string.startsWith('/') && string.length > 1) {\n            return string;\n        }\n        // if we have a CID, turn it into an ipfs path\n        const cid = multiformats_cid__WEBPACK_IMPORTED_MODULE_3__.CID.asCID(value);\n        if (cid != null) {\n            // PeerID encoded as a CID\n            if (cid.code === LIBP2P_CID_CODEC) {\n                return `/ipns/${cid.toString(multiformats_bases_base36__WEBPACK_IMPORTED_MODULE_2__.base36)}`;\n            }\n            return `/ipfs/${cid.toV1().toString()}`;\n        }\n        // try parsing what we have as CID bytes or a CID string\n        try {\n            if (value instanceof Uint8Array) {\n                return `/ipfs/${multiformats_cid__WEBPACK_IMPORTED_MODULE_3__.CID.decode(value).toV1().toString()}`;\n            }\n            return `/ipfs/${multiformats_cid__WEBPACK_IMPORTED_MODULE_3__.CID.parse(string).toV1().toString()}`;\n        }\n        catch {\n            // fall through\n        }\n    }\n    throw err_code__WEBPACK_IMPORTED_MODULE_1__(new Error('Value must be a valid content path starting with /'), _errors_js__WEBPACK_IMPORTED_MODULE_9__.ERR_INVALID_VALUE);\n};\nconst validateCborDataMatchesPbData = (entry) => {\n    if (entry.data == null) {\n        throw err_code__WEBPACK_IMPORTED_MODULE_1__(new Error('Record data is missing'), _errors_js__WEBPACK_IMPORTED_MODULE_9__.ERR_INVALID_RECORD_DATA);\n    }\n    const data = parseCborData(entry.data);\n    if (!(0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_5__.equals)(data.Value, entry.value ?? new Uint8Array(0))) {\n        throw err_code__WEBPACK_IMPORTED_MODULE_1__(new Error('Field \"value\" did not match between protobuf and CBOR'), _errors_js__WEBPACK_IMPORTED_MODULE_9__.ERR_SIGNATURE_VERIFICATION);\n    }\n    if (!(0,uint8arrays_equals__WEBPACK_IMPORTED_MODULE_5__.equals)(data.Validity, entry.validity ?? new Uint8Array(0))) {\n        throw err_code__WEBPACK_IMPORTED_MODULE_1__(new Error('Field \"validity\" did not match between protobuf and CBOR'), _errors_js__WEBPACK_IMPORTED_MODULE_9__.ERR_SIGNATURE_VERIFICATION);\n    }\n    if (data.ValidityType !== entry.validityType) {\n        throw err_code__WEBPACK_IMPORTED_MODULE_1__(new Error('Field \"validityType\" did not match between protobuf and CBOR'), _errors_js__WEBPACK_IMPORTED_MODULE_9__.ERR_SIGNATURE_VERIFICATION);\n    }\n    if (data.Sequence !== entry.sequence) {\n        throw err_code__WEBPACK_IMPORTED_MODULE_1__(new Error('Field \"sequence\" did not match between protobuf and CBOR'), _errors_js__WEBPACK_IMPORTED_MODULE_9__.ERR_SIGNATURE_VERIFICATION);\n    }\n    if (data.TTL !== entry.ttl) {\n        throw err_code__WEBPACK_IMPORTED_MODULE_1__(new Error('Field \"ttl\" did not match between protobuf and CBOR'), _errors_js__WEBPACK_IMPORTED_MODULE_9__.ERR_SIGNATURE_VERIFICATION);\n    }\n};\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipns/dist/src/utils.js?");

/***/ }),

/***/ "./node_modules/ipns/dist/src/validator.js":
/*!*************************************************!*\
  !*** ./node_modules/ipns/dist/src/validator.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ipnsValidator: () => (/* binding */ ipnsValidator),\n/* harmony export */   validate: () => (/* binding */ validate)\n/* harmony export */ });\n/* harmony import */ var _libp2p_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/logger */ \"./node_modules/@libp2p/logger/dist/src/index.js\");\n/* harmony import */ var err_code__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! err-code */ \"./node_modules/err-code/index.js\");\n/* harmony import */ var timestamp_nano__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! timestamp-nano */ \"./node_modules/timestamp-nano/dist/timestamp.min.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/ipns/dist/src/errors.js\");\n/* harmony import */ var _pb_ipns_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pb/ipns.js */ \"./node_modules/ipns/dist/src/pb/ipns.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/ipns/dist/src/utils.js\");\n\n\n\n\n\n\nconst log = (0,_libp2p_logger__WEBPACK_IMPORTED_MODULE_2__.logger)('ipns:validator');\n/**\n * Limit valid IPNS record sizes to 10kb\n */\nconst MAX_RECORD_SIZE = 1024 * 10;\n/**\n * Validates the given IPNS Record against the given public key. We need a \"raw\"\n * record in order to be able to access to all of its fields.\n */\nconst validate = async (publicKey, buf) => {\n    // unmarshal ensures that (1) SignatureV2 and Data are present, (2) that ValidityType\n    // and Validity are of valid types and have a value, (3) that CBOR data matches protobuf\n    // if it's a V1+V2 record.\n    const record = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.unmarshal)(buf);\n    // Validate Signature V2\n    let isValid;\n    try {\n        const dataForSignature = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.ipnsRecordDataForV2Sig)(record.data);\n        isValid = await publicKey.verify(dataForSignature, record.signatureV2);\n    }\n    catch (err) {\n        isValid = false;\n    }\n    if (!isValid) {\n        log.error('record signature verification failed');\n        throw err_code__WEBPACK_IMPORTED_MODULE_0__(new Error('record signature verification failed'), _errors_js__WEBPACK_IMPORTED_MODULE_4__.ERR_SIGNATURE_VERIFICATION);\n    }\n    // Validate according to the validity type\n    if (record.validityType === _pb_ipns_js__WEBPACK_IMPORTED_MODULE_5__.IpnsEntry.ValidityType.EOL) {\n        if (timestamp_nano__WEBPACK_IMPORTED_MODULE_1__.fromString(record.validity).toDate().getTime() < Date.now()) {\n            log.error('record has expired');\n            throw err_code__WEBPACK_IMPORTED_MODULE_0__(new Error('record has expired'), _errors_js__WEBPACK_IMPORTED_MODULE_4__.ERR_IPNS_EXPIRED_RECORD);\n        }\n    }\n    else if (record.validityType != null) {\n        log.error('unrecognized validity type');\n        throw err_code__WEBPACK_IMPORTED_MODULE_0__(new Error('unrecognized validity type'), _errors_js__WEBPACK_IMPORTED_MODULE_4__.ERR_UNRECOGNIZED_VALIDITY);\n    }\n    log('ipns record for %s is valid', record.value);\n};\nasync function ipnsValidator(key, marshalledData) {\n    if (marshalledData.byteLength > MAX_RECORD_SIZE) {\n        throw err_code__WEBPACK_IMPORTED_MODULE_0__(new Error('record too large'), _errors_js__WEBPACK_IMPORTED_MODULE_4__.ERR_RECORD_TOO_LARGE);\n    }\n    const peerId = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.peerIdFromRoutingKey)(key);\n    const receivedRecord = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.unmarshal)(marshalledData);\n    // extract public key\n    const pubKey = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.extractPublicKey)(peerId, receivedRecord);\n    // Record validation\n    await validate(pubKey, marshalledData);\n}\n//# sourceMappingURL=validator.js.map\n\n//# sourceURL=webpack://ems/./node_modules/ipns/dist/src/validator.js?");

/***/ }),

/***/ "./node_modules/it-byte-stream/dist/src/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/it-byte-stream/dist/src/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError),\n/* harmony export */   CodeError: () => (/* binding */ CodeError),\n/* harmony export */   byteStream: () => (/* binding */ byteStream)\n/* harmony export */ });\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var _pushable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pushable.js */ \"./node_modules/it-byte-stream/dist/src/pushable.js\");\n/**\n * @packageDocumentation\n *\n * This module makes it easy to send and receive bytes over streams.\n *\n * @example\n *\n * ```typescript\n * import { byteStream } from 'it-byte-stream'\n *\n * const stream = byteStream(duplex)\n *\n * // read the next chunk\n * const bytes = await stream.read()\n *\n * // read the next five bytes\n * const fiveBytes = await stream.read(5)\n *\n * // write bytes into the stream\n * await stream.write(Uint8Array.from([0, 1, 2, 3, 4]))\n * ```\n */\n\n\nclass CodeError extends Error {\n    code;\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nclass AbortError extends CodeError {\n    type;\n    constructor(message) {\n        super(message, 'ABORT_ERR');\n        this.type = 'aborted';\n    }\n}\nfunction byteStream(duplex, opts) {\n    const write = (0,_pushable_js__WEBPACK_IMPORTED_MODULE_1__.pushable)();\n    duplex.sink(write).catch(async (err) => {\n        await write.end(err);\n    });\n    duplex.sink = async (source) => {\n        for await (const buf of source) {\n            await write.push(buf);\n        }\n        await write.end();\n    };\n    let source = duplex.source;\n    if (duplex.source[Symbol.iterator] != null) {\n        source = duplex.source[Symbol.iterator]();\n    }\n    else if (duplex.source[Symbol.asyncIterator] != null) {\n        source = duplex.source[Symbol.asyncIterator]();\n    }\n    const readBuffer = new uint8arraylist__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayList();\n    const W = {\n        read: async (bytes, options) => {\n            options?.signal?.throwIfAborted();\n            let listener;\n            const abortPromise = new Promise((resolve, reject) => {\n                listener = () => {\n                    reject(new AbortError('Read aborted'));\n                };\n                options?.signal?.addEventListener('abort', listener);\n            });\n            try {\n                if (bytes == null) {\n                    // just read whatever arrives\n                    const { done, value } = await Promise.race([\n                        source.next(),\n                        abortPromise\n                    ]);\n                    if (done === true) {\n                        return new uint8arraylist__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayList();\n                    }\n                    return value;\n                }\n                while (readBuffer.byteLength < bytes) {\n                    const { value, done } = await Promise.race([\n                        source.next(),\n                        abortPromise\n                    ]);\n                    if (done === true) {\n                        throw new CodeError('unexpected end of input', 'ERR_UNEXPECTED_EOF');\n                    }\n                    readBuffer.append(value);\n                }\n                const buf = readBuffer.sublist(0, bytes);\n                readBuffer.consume(bytes);\n                return buf;\n            }\n            finally {\n                if (listener != null) {\n                    options?.signal?.removeEventListener('abort', listener);\n                }\n            }\n        },\n        write: async (data, options) => {\n            options?.signal?.throwIfAborted();\n            // just write\n            if (data instanceof Uint8Array) {\n                await write.push(data, options);\n            }\n            else {\n                await write.push(data.subarray(), options);\n            }\n        },\n        unwrap: () => {\n            if (readBuffer.byteLength > 0) {\n                const originalStream = duplex.source;\n                duplex.source = (async function* () {\n                    if (opts?.yieldBytes === false) {\n                        yield readBuffer;\n                    }\n                    else {\n                        yield* readBuffer;\n                    }\n                    yield* originalStream;\n                }());\n            }\n            return duplex;\n        }\n    };\n    return W;\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-byte-stream/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/it-byte-stream/dist/src/pushable.js":
/*!**********************************************************!*\
  !*** ./node_modules/it-byte-stream/dist/src/pushable.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pushable: () => (/* binding */ pushable)\n/* harmony export */ });\n/* harmony import */ var p_defer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! p-defer */ \"./node_modules/p-defer/index.js\");\n/* harmony import */ var race_signal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! race-signal */ \"./node_modules/race-signal/dist/src/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ \"./node_modules/it-byte-stream/dist/src/index.js\");\n\n\n\nclass QueuelessPushable {\n    readNext;\n    haveNext;\n    ended;\n    nextResult;\n    constructor() {\n        this.ended = false;\n        this.readNext = (0,p_defer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n        this.haveNext = (0,p_defer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    async next() {\n        if (this.nextResult == null) {\n            // wait for the supplier to push a value\n            await this.haveNext.promise;\n        }\n        if (this.nextResult == null) {\n            throw new Error('HaveNext promise resolved but nextResult was undefined');\n        }\n        const nextResult = this.nextResult;\n        this.nextResult = undefined;\n        // signal to the supplier that we read the value\n        this.readNext.resolve();\n        this.readNext = (0,p_defer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n        return nextResult;\n    }\n    async throw(err) {\n        this.ended = true;\n        if (err != null) {\n            this.haveNext.reject(err);\n        }\n        const result = {\n            done: true,\n            value: undefined\n        };\n        return result;\n    }\n    async return() {\n        const result = {\n            done: true,\n            value: undefined\n        };\n        await this._push(undefined);\n        return result;\n    }\n    async push(value, options) {\n        await this._push(value, options);\n    }\n    async end(err, options) {\n        if (err != null) {\n            await this.throw(err);\n        }\n        else {\n            // abortable return\n            await this._push(undefined, options);\n        }\n    }\n    async _push(value, options) {\n        if (value != null && this.ended) {\n            throw new Error('Cannot push value onto an ended pushable');\n        }\n        // already have a value, wait for it to be read\n        if (this.nextResult != null) {\n            await this.readNext.promise;\n            if (this.nextResult != null) {\n                throw new Error('NeedNext promise resolved but nextResult was not consumed');\n            }\n        }\n        if (value != null) {\n            this.nextResult = { done: false, value };\n        }\n        else {\n            this.ended = true;\n            this.nextResult = { done: true, value: undefined };\n        }\n        // let the consumer know we have a new value\n        this.haveNext.resolve();\n        this.haveNext = (0,p_defer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n        // wait for the consumer to have finished processing the value and requested\n        // the next one or for the passed signal to abort the waiting\n        await (0,race_signal__WEBPACK_IMPORTED_MODULE_0__.raceSignal)(this.readNext.promise, options?.signal, options);\n    }\n}\nfunction pushable() {\n    return new QueuelessPushable();\n}\n//# sourceMappingURL=pushable.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-byte-stream/dist/src/pushable.js?");

/***/ }),

/***/ "./node_modules/it-drain/dist/src/index.js":
/*!*************************************************!*\
  !*** ./node_modules/it-drain/dist/src/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @packageDocumentation\n *\n * Mostly useful for tests or when you want to be explicit about consuming an iterable without doing anything with any yielded values.\n *\n * @example\n *\n * ```javascript\n * import drain from 'it-drain'\n *\n * // This can also be an iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * drain(values)\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * import drain from 'it-drain'\n *\n * const values = async function * {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * await drain(values())\n * ```\n */\nfunction isAsyncIterable(thing) {\n    return thing[Symbol.asyncIterator] != null;\n}\nfunction drain(source) {\n    if (isAsyncIterable(source)) {\n        return (async () => {\n            for await (const _ of source) { } // eslint-disable-line no-unused-vars,no-empty,@typescript-eslint/no-unused-vars\n        })();\n    }\n    else {\n        for (const _ of source) { } // eslint-disable-line no-unused-vars,no-empty,@typescript-eslint/no-unused-vars\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (drain);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-drain/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/it-foreach/dist/src/index.js":
/*!***************************************************!*\
  !*** ./node_modules/it-foreach/dist/src/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var it_peekable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-peekable */ \"./node_modules/it-peekable/dist/src/index.js\");\n/**\n * @packageDocumentation\n *\n * Calls a function for each value in an (async)iterable.\n *\n * The function can be sync or async.\n *\n * Async functions can be awaited on so may slow down processing of the (async)iterable.\n *\n * @example\n *\n * ```javascript\n * import each from 'it-foreach'\n * import drain from 'it-drain'\n *\n * // This can also be an iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * // prints 0, 1, 2, 3, 4\n * const arr = drain(\n *   each(values, console.info)\n * )\n * ```\n *\n * Async sources and callbacks must be awaited:\n *\n * ```javascript\n * import each from 'it-foreach'\n * import drain from 'it-drain'\n *\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * // prints 0, 1, 2, 3, 4\n * const arr = await drain(\n *   each(values(), console.info)\n * )\n * ```\n */\n\nfunction isAsyncIterable(thing) {\n    return thing[Symbol.asyncIterator] != null;\n}\nfunction isPromise(thing) {\n    return thing?.then != null;\n}\nfunction forEach(source, fn) {\n    if (isAsyncIterable(source)) {\n        return (async function* () {\n            for await (const val of source) {\n                const res = fn(val);\n                if (isPromise(res)) {\n                    await res;\n                }\n                yield val;\n            }\n        })();\n    }\n    // if fn function returns a promise we have to return an async generator\n    const peekable = (0,it_peekable__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(source);\n    const { value, done } = peekable.next();\n    if (done === true) {\n        return (function* () { }());\n    }\n    const res = fn(value);\n    if (typeof res?.then === 'function') {\n        return (async function* () {\n            yield value;\n            for await (const val of peekable) {\n                const res = fn(val);\n                if (isPromise(res)) {\n                    await res;\n                }\n                yield val;\n            }\n        })();\n    }\n    const func = fn;\n    return (function* () {\n        yield value;\n        for (const val of peekable) {\n            func(val);\n            yield val;\n        }\n    })();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (forEach);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-foreach/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/it-length-prefixed-stream/dist/src/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/it-length-prefixed-stream/dist/src/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   lpStream: () => (/* binding */ lpStream)\n/* harmony export */ });\n/* harmony import */ var it_byte_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-byte-stream */ \"./node_modules/it-byte-stream/dist/src/index.js\");\n/* harmony import */ var uint8_varint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8-varint */ \"./node_modules/uint8-varint/dist/src/index.js\");\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/**\n * @packageDocumentation\n *\n * This module makes it easy to send and receive length-prefixed byte arrays over streams.\n *\n * @example\n *\n * ```typescript\n * import { lpStream } from 'it-length-prefixed-stream'\n *\n * const stream = lpStream(duplex)\n *\n * // read the next length-prefixed chunk\n * const bytes = await stream.read()\n *\n * // write a length-prefixed chunk\n * await stream.write(Uint8Array.from([0, 1, 2, 3, 4]))\n *\n * // write several chunks, all individually length-prefixed\n * await stream.writeV([\n *   Uint8Array.from([0, 1, 2, 3, 4]),\n *   Uint8Array.from([5, 6, 7, 8, 9])\n * ])\n * ```\n */\n\n\n\nclass CodeError extends Error {\n    code;\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nfunction lpStream(duplex, opts = {}) {\n    const bytes = (0,it_byte_stream__WEBPACK_IMPORTED_MODULE_0__.byteStream)(duplex, opts);\n    if (opts.maxDataLength != null && opts.maxLengthLength == null) {\n        // if max data length is set but max length length is not, calculate the\n        // max length length needed to encode max data length\n        opts.maxLengthLength = uint8_varint__WEBPACK_IMPORTED_MODULE_1__.encodingLength(opts.maxDataLength);\n    }\n    const decodeLength = opts?.lengthDecoder ?? uint8_varint__WEBPACK_IMPORTED_MODULE_1__.decode;\n    const encodeLength = opts?.lengthEncoder ?? uint8_varint__WEBPACK_IMPORTED_MODULE_1__.encode;\n    const W = {\n        read: async (options) => {\n            let dataLength = -1;\n            const lengthBuffer = new uint8arraylist__WEBPACK_IMPORTED_MODULE_2__.Uint8ArrayList();\n            while (true) {\n                // read one byte at a time until we can decode a varint\n                lengthBuffer.append(await bytes.read(1, options));\n                try {\n                    dataLength = decodeLength(lengthBuffer);\n                }\n                catch (err) {\n                    if (err instanceof RangeError) {\n                        continue;\n                    }\n                    throw err;\n                }\n                if (opts?.maxLengthLength != null && lengthBuffer.byteLength > opts.maxLengthLength) {\n                    throw new CodeError('message length length too long', 'ERR_MSG_LENGTH_TOO_LONG');\n                }\n                if (dataLength > -1) {\n                    break;\n                }\n            }\n            if (opts?.maxDataLength != null && dataLength > opts.maxDataLength) {\n                throw new CodeError('message length too long', 'ERR_MSG_DATA_TOO_LONG');\n            }\n            return bytes.read(dataLength, options);\n        },\n        write: async (data, options) => {\n            // encode, write\n            await bytes.write(new uint8arraylist__WEBPACK_IMPORTED_MODULE_2__.Uint8ArrayList(encodeLength(data.byteLength), data), options);\n        },\n        writeV: async (data, options) => {\n            const list = new uint8arraylist__WEBPACK_IMPORTED_MODULE_2__.Uint8ArrayList(...data.flatMap(buf => ([encodeLength(buf.byteLength), buf])));\n            // encode, write\n            await bytes.write(list, options);\n        },\n        unwrap: () => {\n            return bytes.unwrap();\n        }\n    };\n    return W;\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-length-prefixed-stream/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/it-length-prefixed/dist/src/decode.js":
/*!************************************************************!*\
  !*** ./node_modules/it-length-prefixed/dist/src/decode.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_DATA_LENGTH: () => (/* binding */ MAX_DATA_LENGTH),\n/* harmony export */   MAX_LENGTH_LENGTH: () => (/* binding */ MAX_LENGTH_LENGTH),\n/* harmony export */   decode: () => (/* binding */ decode)\n/* harmony export */ });\n/* harmony import */ var err_code__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! err-code */ \"./node_modules/err-code/index.js\");\n/* harmony import */ var uint8_varint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8-varint */ \"./node_modules/uint8-varint/dist/src/index.js\");\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/it-length-prefixed/dist/src/utils.js\");\n/* eslint max-depth: [\"error\", 6] */\n\n\n\n\n// Maximum length of the length section of the message\nconst MAX_LENGTH_LENGTH = 8; // Varint.encode(Number.MAX_SAFE_INTEGER).length\n// Maximum length of the data section of the message\nconst MAX_DATA_LENGTH = 1024 * 1024 * 4;\nvar ReadMode;\n(function (ReadMode) {\n    ReadMode[ReadMode[\"LENGTH\"] = 0] = \"LENGTH\";\n    ReadMode[ReadMode[\"DATA\"] = 1] = \"DATA\";\n})(ReadMode || (ReadMode = {}));\nconst defaultDecoder = (buf) => {\n    const length = uint8_varint__WEBPACK_IMPORTED_MODULE_1__.decode(buf);\n    defaultDecoder.bytes = uint8_varint__WEBPACK_IMPORTED_MODULE_1__.encodingLength(length);\n    return length;\n};\ndefaultDecoder.bytes = 0;\nfunction decode(source, options) {\n    const buffer = new uint8arraylist__WEBPACK_IMPORTED_MODULE_2__.Uint8ArrayList();\n    let mode = ReadMode.LENGTH;\n    let dataLength = -1;\n    const lengthDecoder = options?.lengthDecoder ?? defaultDecoder;\n    const maxLengthLength = options?.maxLengthLength ?? MAX_LENGTH_LENGTH;\n    const maxDataLength = options?.maxDataLength ?? MAX_DATA_LENGTH;\n    function* maybeYield() {\n        while (buffer.byteLength > 0) {\n            if (mode === ReadMode.LENGTH) {\n                // read length, ignore errors for short reads\n                try {\n                    dataLength = lengthDecoder(buffer);\n                    if (dataLength < 0) {\n                        throw err_code__WEBPACK_IMPORTED_MODULE_0__(new Error('invalid message length'), 'ERR_INVALID_MSG_LENGTH');\n                    }\n                    if (dataLength > maxDataLength) {\n                        throw err_code__WEBPACK_IMPORTED_MODULE_0__(new Error('message length too long'), 'ERR_MSG_DATA_TOO_LONG');\n                    }\n                    const dataLengthLength = lengthDecoder.bytes;\n                    buffer.consume(dataLengthLength);\n                    if (options?.onLength != null) {\n                        options.onLength(dataLength);\n                    }\n                    mode = ReadMode.DATA;\n                }\n                catch (err) {\n                    if (err instanceof RangeError) {\n                        if (buffer.byteLength > maxLengthLength) {\n                            throw err_code__WEBPACK_IMPORTED_MODULE_0__(new Error('message length length too long'), 'ERR_MSG_LENGTH_TOO_LONG');\n                        }\n                        break;\n                    }\n                    throw err;\n                }\n            }\n            if (mode === ReadMode.DATA) {\n                if (buffer.byteLength < dataLength) {\n                    // not enough data, wait for more\n                    break;\n                }\n                const data = buffer.sublist(0, dataLength);\n                buffer.consume(dataLength);\n                if (options?.onData != null) {\n                    options.onData(data);\n                }\n                yield data;\n                mode = ReadMode.LENGTH;\n            }\n        }\n    }\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isAsyncIterable)(source)) {\n        return (async function* () {\n            for await (const buf of source) {\n                buffer.append(buf);\n                yield* maybeYield();\n            }\n            if (buffer.byteLength > 0) {\n                throw err_code__WEBPACK_IMPORTED_MODULE_0__(new Error('unexpected end of input'), 'ERR_UNEXPECTED_EOF');\n            }\n        })();\n    }\n    return (function* () {\n        for (const buf of source) {\n            buffer.append(buf);\n            yield* maybeYield();\n        }\n        if (buffer.byteLength > 0) {\n            throw err_code__WEBPACK_IMPORTED_MODULE_0__(new Error('unexpected end of input'), 'ERR_UNEXPECTED_EOF');\n        }\n    })();\n}\ndecode.fromReader = (reader, options) => {\n    let byteLength = 1; // Read single byte chunks until the length is known\n    const varByteSource = (async function* () {\n        while (true) {\n            try {\n                const { done, value } = await reader.next(byteLength);\n                if (done === true) {\n                    return;\n                }\n                if (value != null) {\n                    yield value;\n                }\n            }\n            catch (err) {\n                if (err.code === 'ERR_UNDER_READ') {\n                    return { done: true, value: null };\n                }\n                throw err;\n            }\n            finally {\n                // Reset the byteLength so we continue to check for varints\n                byteLength = 1;\n            }\n        }\n    }());\n    /**\n     * Once the length has been parsed, read chunk for that length\n     */\n    const onLength = (l) => { byteLength = l; };\n    return decode(varByteSource, {\n        ...(options ?? {}),\n        onLength\n    });\n};\n//# sourceMappingURL=decode.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-length-prefixed/dist/src/decode.js?");

/***/ }),

/***/ "./node_modules/it-length-prefixed/dist/src/encode.js":
/*!************************************************************!*\
  !*** ./node_modules/it-length-prefixed/dist/src/encode.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encode: () => (/* binding */ encode)\n/* harmony export */ });\n/* harmony import */ var uint8_varint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8-varint */ \"./node_modules/uint8-varint/dist/src/index.js\");\n/* harmony import */ var uint8arraylist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arraylist */ \"./node_modules/uint8arraylist/dist/src/index.js\");\n/* harmony import */ var uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/alloc */ \"./node_modules/uint8arrays/dist/src/alloc.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/it-length-prefixed/dist/src/utils.js\");\n\n\n\n\nconst defaultEncoder = (length) => {\n    const lengthLength = uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encodingLength(length);\n    const lengthBuf = (0,uint8arrays_alloc__WEBPACK_IMPORTED_MODULE_2__.allocUnsafe)(lengthLength);\n    uint8_varint__WEBPACK_IMPORTED_MODULE_0__.encode(length, lengthBuf);\n    defaultEncoder.bytes = lengthLength;\n    return lengthBuf;\n};\ndefaultEncoder.bytes = 0;\nfunction encode(source, options) {\n    options = options ?? {};\n    const encodeLength = options.lengthEncoder ?? defaultEncoder;\n    function* maybeYield(chunk) {\n        // length + data\n        const length = encodeLength(chunk.byteLength);\n        // yield only Uint8Arrays\n        if (length instanceof Uint8Array) {\n            yield length;\n        }\n        else {\n            yield* length;\n        }\n        // yield only Uint8Arrays\n        if (chunk instanceof Uint8Array) {\n            yield chunk;\n        }\n        else {\n            yield* chunk;\n        }\n    }\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isAsyncIterable)(source)) {\n        return (async function* () {\n            for await (const chunk of source) {\n                yield* maybeYield(chunk);\n            }\n        })();\n    }\n    return (function* () {\n        for (const chunk of source) {\n            yield* maybeYield(chunk);\n        }\n    })();\n}\nencode.single = (chunk, options) => {\n    options = options ?? {};\n    const encodeLength = options.lengthEncoder ?? defaultEncoder;\n    return new uint8arraylist__WEBPACK_IMPORTED_MODULE_1__.Uint8ArrayList(encodeLength(chunk.byteLength), chunk);\n};\n//# sourceMappingURL=encode.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-length-prefixed/dist/src/encode.js?");

/***/ }),

/***/ "./node_modules/it-length-prefixed/dist/src/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/it-length-prefixed/dist/src/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* reexport safe */ _decode_js__WEBPACK_IMPORTED_MODULE_1__.decode),\n/* harmony export */   encode: () => (/* reexport safe */ _encode_js__WEBPACK_IMPORTED_MODULE_0__.encode)\n/* harmony export */ });\n/* harmony import */ var _encode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./encode.js */ \"./node_modules/it-length-prefixed/dist/src/encode.js\");\n/* harmony import */ var _decode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./decode.js */ \"./node_modules/it-length-prefixed/dist/src/decode.js\");\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-length-prefixed/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/it-length-prefixed/dist/src/utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/it-length-prefixed/dist/src/utils.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable)\n/* harmony export */ });\nfunction isAsyncIterable(thing) {\n    return thing[Symbol.asyncIterator] != null;\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-length-prefixed/dist/src/utils.js?");

/***/ }),

/***/ "./node_modules/it-length/dist/src/index.js":
/*!**************************************************!*\
  !*** ./node_modules/it-length/dist/src/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @packageDocumentation\n *\n * Counts the number of items in an (async)iterable.\n *\n * N.b. will consume the iterable\n *\n * @example\n *\n * ```javascript\n * import length from 'it-length'\n *\n * // This can also be an iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * const res = length(values)\n *\n * console.info(res) // 5\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * import length from 'it-length'\n *\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const res = await length(values())\n *\n * console.info(res) // 5\n * ```\n */\nfunction isAsyncIterable(thing) {\n    return thing[Symbol.asyncIterator] != null;\n}\nfunction length(source) {\n    if (isAsyncIterable(source)) {\n        return (async () => {\n            let count = 0;\n            for await (const _ of source) { // eslint-disable-line no-unused-vars,@typescript-eslint/no-unused-vars\n                count++;\n            }\n            return count;\n        })();\n    }\n    else {\n        let count = 0;\n        for (const _ of source) { // eslint-disable-line no-unused-vars,@typescript-eslint/no-unused-vars\n            count++;\n        }\n        return count;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (length);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-length/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/it-ndjson/dist/src/index.js":
/*!**************************************************!*\
  !*** ./node_modules/it-ndjson/dist/src/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parse: () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   stringify: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"./node_modules/it-ndjson/dist/src/parse.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"./node_modules/it-ndjson/dist/src/stringify.js\");\n/**\n * @packageDocumentation\n *\n * Turn (async)iterable values into JSON and back again.\n *\n * @example\n *\n * ```javascript\n * import ndjson from 'it-ndjson'\n * import all from 'it-all'\n *\n * // This can also be an iterator, async iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * const arr = await all(ndjson.stringify(values))\n *\n * console.info(arr) // '0\\n', '1\\n', '2\\n', '3\\n', '4\\n'\n *\n * const res = await all(ndjson.parse(arr))\n *\n * console.info(res) // [0, 1, 2, 3, 4]\n * ```\n */\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-ndjson/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/it-ndjson/dist/src/parse.js":
/*!**************************************************!*\
  !*** ./node_modules/it-ndjson/dist/src/parse.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ parse)\n/* harmony export */ });\nasync function* parse(source) {\n    const matcher = /\\r?\\n/;\n    const decoder = new TextDecoder('utf8');\n    let buffer = '';\n    for await (let chunk of source) {\n        if (typeof chunk === 'string') {\n            chunk = new TextEncoder().encode(chunk);\n        }\n        buffer += decoder.decode(chunk, { stream: true });\n        const parts = buffer.split(matcher);\n        buffer = parts.pop() ?? '';\n        for (let i = 0; i < parts.length; i++) {\n            yield JSON.parse(parts[i]);\n        }\n    }\n    buffer += decoder.decode();\n    if (buffer !== '') {\n        yield JSON.parse(buffer);\n    }\n}\n//# sourceMappingURL=parse.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-ndjson/dist/src/parse.js?");

/***/ }),

/***/ "./node_modules/it-ndjson/dist/src/stringify.js":
/*!******************************************************!*\
  !*** ./node_modules/it-ndjson/dist/src/stringify.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ stringify)\n/* harmony export */ });\nasync function* stringify(source) {\n    for await (const obj of source) {\n        yield JSON.stringify(obj) + '\\n';\n    }\n}\n//# sourceMappingURL=stringify.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-ndjson/dist/src/stringify.js?");

/***/ }),

/***/ "./node_modules/it-pair/dist/src/duplex.js":
/*!*************************************************!*\
  !*** ./node_modules/it-pair/dist/src/duplex.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   duplexPair: () => (/* binding */ duplexPair)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"./node_modules/it-pair/dist/src/index.js\");\n\n/**\n * Two duplex streams that are attached to each other\n */\nfunction duplexPair() {\n    const a = (0,_index_js__WEBPACK_IMPORTED_MODULE_0__.pair)();\n    const b = (0,_index_js__WEBPACK_IMPORTED_MODULE_0__.pair)();\n    return [\n        {\n            source: a.source,\n            sink: b.sink\n        },\n        {\n            source: b.source,\n            sink: a.sink\n        }\n    ];\n}\n//# sourceMappingURL=duplex.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-pair/dist/src/duplex.js?");

/***/ }),

/***/ "./node_modules/it-pair/dist/src/index.js":
/*!************************************************!*\
  !*** ./node_modules/it-pair/dist/src/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pair: () => (/* binding */ pair)\n/* harmony export */ });\n/* harmony import */ var p_defer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-defer */ \"./node_modules/p-defer/index.js\");\n\n/**\n * A pair of streams where one drains from the other\n */\nfunction pair() {\n    const deferred = (0,p_defer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n    let piped = false;\n    return {\n        sink: async (source) => {\n            if (piped) {\n                throw new Error('already piped');\n            }\n            piped = true;\n            deferred.resolve(source);\n        },\n        source: (async function* () {\n            const source = await deferred.promise;\n            yield* source;\n        }())\n    };\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-pair/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/it-protobuf-stream/dist/src/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/it-protobuf-stream/dist/src/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pbStream: () => (/* binding */ pbStream)\n/* harmony export */ });\n/* harmony import */ var it_length_prefixed_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-length-prefixed-stream */ \"./node_modules/it-length-prefixed-stream/dist/src/index.js\");\n/**\n * @packageDocumentation\n *\n * This module makes it easy to send and receive length-prefixed Protobuf encoded\n * messages over streams.\n *\n * @example\n *\n * ```typescript\n * import { pbStream } from 'it-protobuf-stream'\n * import { MessageType } from './src/my-message-type.js'\n *\n * // RequestType and ResponseType have been generate from `.proto` files and have\n * // `.encode` and `.decode` methods for serialization/deserialization\n *\n * const stream = pbStream(duplex)\n *\n * // write a message to the stream\n * stream.write({\n *   foo: 'bar'\n * }, MessageType)\n *\n * // read a message from the stream\n * const res = await stream.read(MessageType)\n * ```\n */\n\nfunction pbStream(duplex, opts) {\n    const lp = (0,it_length_prefixed_stream__WEBPACK_IMPORTED_MODULE_0__.lpStream)(duplex, opts);\n    const W = {\n        read: async (proto, options) => {\n            // readLP, decode\n            const value = await lp.read(options);\n            return proto.decode(value);\n        },\n        write: async (message, proto, options) => {\n            // encode, writeLP\n            await lp.write(proto.encode(message), options);\n        },\n        writeV: async (messages, proto, options) => {\n            // encode, writeLP\n            await lp.writeV(messages.map(message => proto.encode(message)), options);\n        },\n        pb: (proto) => {\n            return {\n                read: async (options) => W.read(proto, options),\n                write: async (d, options) => W.write(d, proto, options),\n                writeV: async (d, options) => W.writeV(d, proto, options),\n                unwrap: () => W\n            };\n        },\n        unwrap: () => {\n            return lp.unwrap();\n        }\n    };\n    return W;\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-protobuf-stream/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/it-sort/dist/src/index.js":
/*!************************************************!*\
  !*** ./node_modules/it-sort/dist/src/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var it_all__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-all */ \"./node_modules/it-all/dist/src/index.js\");\n/**\n * @packageDocumentation\n *\n * Consumes all values from an (async)iterable and returns them sorted by the passed sort function.\n *\n * @example\n *\n * ```javascript\n * import sort from 'it-sort'\n * import all from 'it-all'\n *\n * const sorter = (a, b) => {\n *   return a.localeCompare(b)\n * }\n *\n * // This can also be an iterator, generator, etc\n * const values = ['foo', 'bar']\n *\n * const arr = all(sort(values, sorter))\n *\n * console.info(arr) // 'bar', 'foo'\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * import sort from 'it-sort'\n * import all from 'it-all'\n *\n * const sorter = (a, b) => {\n *   return a.localeCompare(b)\n * }\n *\n * const values = async function * () {\n *   yield * ['foo', 'bar']\n * }\n *\n * const arr = await all(sort(values, sorter))\n *\n * console.info(arr) // 'bar', 'foo'\n * ```\n */\n\nfunction isAsyncIterable(thing) {\n    return thing[Symbol.asyncIterator] != null;\n}\nfunction sort(source, sorter) {\n    if (isAsyncIterable(source)) {\n        return (async function* () {\n            const arr = await (0,it_all__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(source);\n            yield* arr.sort(sorter);\n        })();\n    }\n    return (function* () {\n        const arr = (0,it_all__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(source);\n        yield* arr.sort(sorter);\n    })();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sort);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-sort/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/it-take/dist/src/index.js":
/*!************************************************!*\
  !*** ./node_modules/it-take/dist/src/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @packageDocumentation\n *\n * For when you only want a few values out of an (async)iterable.\n *\n * @example\n *\n * ```javascript\n * import take from 'it-take'\n * import all from 'it-all'\n *\n * // This can also be an iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * const arr = all(take(values, 2))\n *\n * console.info(arr) // 0, 1\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * import take from 'it-take'\n * import all from 'it-all'\n *\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const arr = await all(take(values(), 2))\n *\n * console.info(arr) // 0, 1\n * ```\n */\nfunction isAsyncIterable(thing) {\n    return thing[Symbol.asyncIterator] != null;\n}\nfunction take(source, limit) {\n    if (isAsyncIterable(source)) {\n        return (async function* () {\n            let items = 0;\n            if (limit < 1) {\n                return;\n            }\n            for await (const entry of source) {\n                yield entry;\n                items++;\n                if (items === limit) {\n                    return;\n                }\n            }\n        })();\n    }\n    return (function* () {\n        let items = 0;\n        if (limit < 1) {\n            return;\n        }\n        for (const entry of source) {\n            yield entry;\n            items++;\n            if (items === limit) {\n                return;\n            }\n        }\n    })();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (take);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-take/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/it-ws/dist/src/client.js":
/*!***********************************************!*\
  !*** ./node_modules/it-ws/dist/src/client.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   connect: () => (/* binding */ connect)\n/* harmony export */ });\n/* harmony import */ var _duplex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./duplex.js */ \"./node_modules/it-ws/dist/src/duplex.js\");\n/* harmony import */ var _web_socket_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./web-socket.js */ \"./node_modules/it-ws/dist/src/web-socket.browser.js\");\n/* harmony import */ var _ws_url_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ws-url.js */ \"./node_modules/it-ws/dist/src/ws-url.js\");\n// load websocket library if we are not in the browser\n\n\n\nfunction connect(addr, opts) {\n    const location = typeof window === 'undefined' ? undefined : window.location;\n    opts = opts ?? {};\n    const url = (0,_ws_url_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(addr, location);\n    // it's necessary to stringify the URL object otherwise react-native crashes\n    const socket = new _web_socket_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](url.toString(), opts.websocket);\n    return (0,_duplex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(socket, opts);\n}\n//# sourceMappingURL=client.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-ws/dist/src/client.js?");

/***/ }),

/***/ "./node_modules/it-ws/dist/src/duplex.js":
/*!***********************************************!*\
  !*** ./node_modules/it-ws/dist/src/duplex.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _sink_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sink.js */ \"./node_modules/it-ws/dist/src/sink.js\");\n/* harmony import */ var _source_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./source.js */ \"./node_modules/it-ws/dist/src/source.js\");\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((socket, options) => {\n    options = options ?? {};\n    const connectedSource = (0,_source_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(socket);\n    let remoteAddress = options.remoteAddress;\n    let remotePort = options.remotePort;\n    if (socket.url != null) {\n        // only client->server sockets have urls, server->client connections do not\n        try {\n            const url = new URL(socket.url);\n            remoteAddress = url.hostname;\n            remotePort = parseInt(url.port, 10);\n        }\n        catch { }\n    }\n    if (remoteAddress == null || remotePort == null) {\n        throw new Error('Remote connection did not have address and/or port');\n    }\n    const duplex = {\n        sink: (0,_sink_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(socket, options),\n        source: connectedSource,\n        connected: async () => { await connectedSource.connected(); },\n        close: async () => {\n            if (socket.readyState === socket.CONNECTING || socket.readyState === socket.OPEN) {\n                await new Promise((resolve) => {\n                    socket.addEventListener('close', () => {\n                        resolve();\n                    });\n                    socket.close();\n                });\n            }\n        },\n        destroy: () => {\n            if (socket.terminate != null) {\n                socket.terminate();\n            }\n            else {\n                socket.close();\n            }\n        },\n        remoteAddress,\n        remotePort,\n        socket\n    };\n    return duplex;\n});\n//# sourceMappingURL=duplex.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-ws/dist/src/duplex.js?");

/***/ }),

/***/ "./node_modules/it-ws/dist/src/ready.js":
/*!**********************************************!*\
  !*** ./node_modules/it-ws/dist/src/ready.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (async (socket) => {\n    // if the socket is closing or closed, return end\n    if (socket.readyState >= 2) {\n        throw new Error('socket closed');\n    }\n    // if open, return\n    if (socket.readyState === 1) {\n        return;\n    }\n    await new Promise((resolve, reject) => {\n        function cleanup() {\n            socket.removeEventListener('open', handleOpen);\n            socket.removeEventListener('error', handleErr);\n        }\n        function handleOpen() {\n            cleanup();\n            resolve();\n        }\n        function handleErr(event) {\n            cleanup();\n            reject(event.error ?? new Error(`connect ECONNREFUSED ${socket.url}`));\n        }\n        socket.addEventListener('open', handleOpen);\n        socket.addEventListener('error', handleErr);\n    });\n});\n//# sourceMappingURL=ready.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-ws/dist/src/ready.js?");

/***/ }),

/***/ "./node_modules/it-ws/dist/src/sink.js":
/*!*********************************************!*\
  !*** ./node_modules/it-ws/dist/src/sink.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ready_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ready.js */ \"./node_modules/it-ws/dist/src/ready.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((socket, options) => {\n    options = options ?? {};\n    options.closeOnEnd = options.closeOnEnd !== false;\n    const sink = async (source) => {\n        for await (const data of source) {\n            try {\n                await (0,_ready_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(socket);\n            }\n            catch (err) {\n                if (err.message === 'socket closed')\n                    break;\n                throw err;\n            }\n            // the ready promise resolved without error but the socket was closing so\n            // exit the loop and don't send data\n            if (socket.readyState === socket.CLOSING || socket.readyState === socket.CLOSED) {\n                break;\n            }\n            socket.send(data);\n        }\n        if (options.closeOnEnd != null && socket.readyState <= 1) {\n            await new Promise((resolve, reject) => {\n                socket.addEventListener('close', event => {\n                    if (event.wasClean || event.code === 1006) {\n                        resolve();\n                    }\n                    else {\n                        const err = Object.assign(new Error('ws error'), { event });\n                        reject(err);\n                    }\n                });\n                setTimeout(() => { socket.close(); });\n            });\n        }\n    };\n    return sink;\n});\n//# sourceMappingURL=sink.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-ws/dist/src/sink.js?");

/***/ }),

/***/ "./node_modules/it-ws/dist/src/source.js":
/*!***********************************************!*\
  !*** ./node_modules/it-ws/dist/src/source.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var event_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! event-iterator */ \"./node_modules/event-iterator/lib/dom.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n\n\n// copied from github.com/feross/buffer\n// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(\nfunction isArrayBuffer(obj) {\n    return (obj instanceof ArrayBuffer) ||\n        (obj?.constructor?.name === 'ArrayBuffer' && typeof obj?.byteLength === 'number');\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((socket) => {\n    socket.binaryType = 'arraybuffer';\n    const connected = async () => {\n        await new Promise((resolve, reject) => {\n            if (isConnected) {\n                resolve();\n                return;\n            }\n            if (connError != null) {\n                reject(connError);\n                return;\n            }\n            const cleanUp = (cont) => {\n                socket.removeEventListener('open', onOpen);\n                socket.removeEventListener('error', onError);\n                cont();\n            };\n            const onOpen = () => { cleanUp(resolve); };\n            const onError = (event) => {\n                cleanUp(() => { reject(event.error ?? new Error(`connect ECONNREFUSED ${socket.url}`)); });\n            };\n            socket.addEventListener('open', onOpen);\n            socket.addEventListener('error', onError);\n        });\n    };\n    const source = (async function* () {\n        const messages = new event_iterator__WEBPACK_IMPORTED_MODULE_0__.EventIterator(({ push, stop, fail }) => {\n            const onMessage = (event) => {\n                let data = null;\n                if (typeof event.data === 'string') {\n                    data = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_1__.fromString)(event.data);\n                }\n                if (isArrayBuffer(event.data)) {\n                    data = new Uint8Array(event.data);\n                }\n                if (event.data instanceof Uint8Array) {\n                    data = event.data;\n                }\n                if (data == null) {\n                    return;\n                }\n                push(data);\n            };\n            const onError = (event) => { fail(event.error ?? new Error('Socket error')); };\n            socket.addEventListener('message', onMessage);\n            socket.addEventListener('error', onError);\n            socket.addEventListener('close', stop);\n            return () => {\n                socket.removeEventListener('message', onMessage);\n                socket.removeEventListener('error', onError);\n                socket.removeEventListener('close', stop);\n            };\n        }, { highWaterMark: Infinity });\n        await connected();\n        for await (const chunk of messages) {\n            yield isArrayBuffer(chunk) ? new Uint8Array(chunk) : chunk;\n        }\n    }());\n    let isConnected = socket.readyState === 1;\n    let connError;\n    socket.addEventListener('open', () => {\n        isConnected = true;\n        connError = null;\n    });\n    socket.addEventListener('close', () => {\n        isConnected = false;\n        connError = null;\n    });\n    socket.addEventListener('error', event => {\n        if (!isConnected) {\n            connError = event.error ?? new Error(`connect ECONNREFUSED ${socket.url}`);\n        }\n    });\n    return Object.assign(source, {\n        connected\n    });\n});\n//# sourceMappingURL=source.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-ws/dist/src/source.js?");

/***/ }),

/***/ "./node_modules/it-ws/dist/src/web-socket.browser.js":
/*!***********************************************************!*\
  !*** ./node_modules/it-ws/dist/src/web-socket.browser.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* eslint-env browser */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WebSocket);\n//# sourceMappingURL=web-socket.browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-ws/dist/src/web-socket.browser.js?");

/***/ }),

/***/ "./node_modules/it-ws/dist/src/ws-url.js":
/*!***********************************************!*\
  !*** ./node_modules/it-ws/dist/src/ws-url.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst map = { 'http:': 'ws:', 'https:': 'wss:' };\nconst defaultProtocol = 'ws:';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((url, location) => {\n    if (url.startsWith('//')) {\n        url = `${location?.protocol ?? defaultProtocol}${url}`;\n    }\n    if (url.startsWith('/') && location != null) {\n        const proto = location.protocol ?? defaultProtocol;\n        const host = location.host;\n        const port = location.port != null && host?.endsWith(`:${location.port}`) !== true ? `:${location.port}` : '';\n        url = `${proto}//${host}${port}${url}`;\n    }\n    const wsUrl = new URL(url);\n    for (const [httpProto, wsProto] of Object.entries(map)) {\n        if (wsUrl.protocol === httpProto) {\n            wsUrl.protocol = wsProto;\n        }\n    }\n    return wsUrl;\n});\n//# sourceMappingURL=ws-url.js.map\n\n//# sourceURL=webpack://ems/./node_modules/it-ws/dist/src/ws-url.js?");

/***/ }),

/***/ "./node_modules/just-debounce-it/index.mjs":
/*!*************************************************!*\
  !*** ./node_modules/just-debounce-it/index.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ functionDebounce)\n/* harmony export */ });\nvar functionDebounce = debounce;\n\nfunction debounce(fn, wait, callFirst) {\n  var timeout = null;\n  var debouncedFn = null;\n\n  var clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n\n      debouncedFn = null;\n      timeout = null;\n    }\n  };\n\n  var flush = function() {\n    var call = debouncedFn;\n    clear();\n\n    if (call) {\n      call();\n    }\n  };\n\n  var debounceWrapper = function() {\n    if (!wait) {\n      return fn.apply(this, arguments);\n    }\n\n    var context = this;\n    var args = arguments;\n    var callNow = callFirst && !timeout;\n    clear();\n\n    debouncedFn = function() {\n      fn.apply(context, args);\n    };\n\n    timeout = setTimeout(function() {\n      timeout = null;\n\n      if (!callNow) {\n        var call = debouncedFn;\n        debouncedFn = null;\n\n        return call();\n      }\n    }, wait);\n\n    if (callNow) {\n      return debouncedFn();\n    }\n  };\n\n  debounceWrapper.cancel = clear;\n  debounceWrapper.flush = flush;\n\n  return debounceWrapper;\n}\n\n\n\n\n//# sourceURL=webpack://ems/./node_modules/just-debounce-it/index.mjs?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/address-manager/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/address-manager/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultAddressManager: () => (/* binding */ DefaultAddressManager)\n/* harmony export */ });\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/libp2p/dist/src/address-manager/utils.js\");\n\n\n\nconst defaultAddressFilter = (addrs) => addrs;\n/**\n * If the passed multiaddr contains the passed peer id, remove it\n */\nfunction stripPeerId(ma, peerId) {\n    const observedPeerIdStr = ma.getPeerId();\n    // strip our peer id if it has been passed\n    if (observedPeerIdStr != null) {\n        const observedPeerId = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_1__.peerIdFromString)(observedPeerIdStr);\n        // use same encoding for comparison\n        if (observedPeerId.equals(peerId)) {\n            ma = ma.decapsulate((0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(`/p2p/${peerId.toString()}`));\n        }\n    }\n    return ma;\n}\nclass DefaultAddressManager {\n    log;\n    components;\n    // this is an array to allow for duplicates, e.g. multiples of `/ip4/0.0.0.0/tcp/0`\n    listen;\n    announce;\n    observed;\n    announceFilter;\n    /**\n     * Responsible for managing the peer addresses.\n     * Peers can specify their listen and announce addresses.\n     * The listen addresses will be used by the libp2p transports to listen for new connections,\n     * while the announce addresses will be used for the peer addresses' to other peers in the network.\n     */\n    constructor(components, init = {}) {\n        const { listen = [], announce = [] } = init;\n        this.components = components;\n        this.log = components.logger.forComponent('libp2p:address-manager');\n        this.listen = listen.map(ma => ma.toString());\n        this.announce = new Set(announce.map(ma => ma.toString()));\n        this.observed = new Map();\n        this.announceFilter = init.announceFilter ?? defaultAddressFilter;\n        // this method gets called repeatedly on startup when transports start listening so\n        // debounce it so we don't cause multiple self:peer:update events to be emitted\n        this._updatePeerStoreAddresses = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.debounce)(this._updatePeerStoreAddresses.bind(this), 1000);\n        // update our stored addresses when new transports listen\n        components.events.addEventListener('transport:listening', () => {\n            this._updatePeerStoreAddresses();\n        });\n        // update our stored addresses when existing transports stop listening\n        components.events.addEventListener('transport:close', () => {\n            this._updatePeerStoreAddresses();\n        });\n    }\n    _updatePeerStoreAddresses() {\n        // if announce addresses have been configured, ensure they make it into our peer\n        // record for things like identify\n        const addrs = this.getAnnounceAddrs()\n            .concat(this.components.transportManager.getAddrs())\n            .concat([...this.observed.entries()]\n            .filter(([_, metadata]) => metadata.confident)\n            .map(([str]) => (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(str))).map(ma => {\n            // strip our peer id if it is present\n            if (ma.getPeerId() === this.components.peerId.toString()) {\n                return ma.decapsulate(`/p2p/${this.components.peerId.toString()}`);\n            }\n            return ma;\n        });\n        this.components.peerStore.patch(this.components.peerId, {\n            multiaddrs: addrs\n        })\n            .catch(err => { this.log.error('error updating addresses', err); });\n    }\n    /**\n     * Get peer listen multiaddrs\n     */\n    getListenAddrs() {\n        return Array.from(this.listen).map((a) => (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(a));\n    }\n    /**\n     * Get peer announcing multiaddrs\n     */\n    getAnnounceAddrs() {\n        return Array.from(this.announce).map((a) => (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(a));\n    }\n    /**\n     * Get observed multiaddrs\n     */\n    getObservedAddrs() {\n        return Array.from(this.observed).map(([a]) => (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(a));\n    }\n    /**\n     * Add peer observed addresses\n     */\n    addObservedAddr(addr) {\n        addr = stripPeerId(addr, this.components.peerId);\n        const addrString = addr.toString();\n        // do not trigger the change:addresses event if we already know about this address\n        if (this.observed.has(addrString)) {\n            return;\n        }\n        this.observed.set(addrString, {\n            confident: false\n        });\n    }\n    confirmObservedAddr(addr) {\n        addr = stripPeerId(addr, this.components.peerId);\n        const addrString = addr.toString();\n        const metadata = this.observed.get(addrString) ?? {\n            confident: false\n        };\n        const startingConfidence = metadata.confident;\n        this.observed.set(addrString, {\n            confident: true\n        });\n        // only trigger the 'self:peer:update' event if our confidence in an address has changed\n        if (!startingConfidence) {\n            this._updatePeerStoreAddresses();\n        }\n    }\n    removeObservedAddr(addr) {\n        addr = stripPeerId(addr, this.components.peerId);\n        const addrString = addr.toString();\n        this.observed.delete(addrString);\n    }\n    getAddresses() {\n        let addrs = this.getAnnounceAddrs().map(ma => ma.toString());\n        if (addrs.length === 0) {\n            // no configured announce addrs, add configured listen addresses\n            addrs = this.components.transportManager.getAddrs().map(ma => ma.toString());\n        }\n        // add observed addresses we are confident in\n        addrs = addrs.concat(Array.from(this.observed)\n            .filter(([ma, metadata]) => metadata.confident)\n            .map(([ma]) => ma));\n        // dedupe multiaddrs\n        const addrSet = new Set(addrs);\n        // Create advertising list\n        return this.announceFilter(Array.from(addrSet)\n            .map(str => (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(str)))\n            .map(ma => {\n            // do not append our peer id to a path multiaddr as it will become invalid\n            if (ma.protos().pop()?.path === true) {\n                return ma;\n            }\n            if (ma.getPeerId() === this.components.peerId.toString()) {\n                return ma;\n            }\n            return ma.encapsulate(`/p2p/${this.components.peerId.toString()}`);\n        });\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/address-manager/index.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/address-manager/utils.js":
/*!***************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/address-manager/utils.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   debounce: () => (/* binding */ debounce)\n/* harmony export */ });\nfunction debounce(func, wait) {\n    let timeout;\n    return function () {\n        const later = function () {\n            timeout = undefined;\n            func();\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/address-manager/utils.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/components.js":
/*!****************************************************!*\
  !*** ./node_modules/libp2p/dist/src/components.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultComponents: () => (/* binding */ defaultComponents)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/startable.js\");\n/* harmony import */ var _libp2p_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/logger */ \"./node_modules/@libp2p/logger/dist/src/index.js\");\n\n\n\nclass DefaultComponents {\n    components = {};\n    _started = false;\n    constructor(init = {}) {\n        this.components = {};\n        for (const [key, value] of Object.entries(init)) {\n            this.components[key] = value;\n        }\n        if (this.components.logger == null) {\n            this.components.logger = (0,_libp2p_logger__WEBPACK_IMPORTED_MODULE_0__.defaultLogger)();\n        }\n    }\n    isStarted() {\n        return this._started;\n    }\n    async _invokeStartableMethod(methodName) {\n        await Promise.all(Object.values(this.components)\n            .filter(obj => (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.isStartable)(obj))\n            .map(async (startable) => {\n            await startable[methodName]?.();\n        }));\n    }\n    async beforeStart() {\n        await this._invokeStartableMethod('beforeStart');\n    }\n    async start() {\n        await this._invokeStartableMethod('start');\n        this._started = true;\n    }\n    async afterStart() {\n        await this._invokeStartableMethod('afterStart');\n    }\n    async beforeStop() {\n        await this._invokeStartableMethod('beforeStop');\n    }\n    async stop() {\n        await this._invokeStartableMethod('stop');\n        this._started = false;\n    }\n    async afterStop() {\n        await this._invokeStartableMethod('afterStop');\n    }\n}\nconst OPTIONAL_SERVICES = [\n    'metrics',\n    'connectionProtector',\n    'dns'\n];\nconst NON_SERVICE_PROPERTIES = [\n    'components',\n    'isStarted',\n    'beforeStart',\n    'start',\n    'afterStart',\n    'beforeStop',\n    'stop',\n    'afterStop',\n    'then',\n    '_invokeStartableMethod'\n];\nfunction defaultComponents(init = {}) {\n    const components = new DefaultComponents(init);\n    const proxy = new Proxy(components, {\n        get(target, prop, receiver) {\n            if (typeof prop === 'string' && !NON_SERVICE_PROPERTIES.includes(prop)) {\n                const service = components.components[prop];\n                if (service == null && !OPTIONAL_SERVICES.includes(prop)) {\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(`${prop} not set`, 'ERR_SERVICE_MISSING');\n                }\n                return service;\n            }\n            return Reflect.get(target, prop, receiver);\n        },\n        set(target, prop, value) {\n            if (typeof prop === 'string') {\n                components.components[prop] = value;\n            }\n            else {\n                Reflect.set(target, prop, value);\n            }\n            return true;\n        }\n    });\n    // @ts-expect-error component keys are proxied\n    return proxy;\n}\n//# sourceMappingURL=components.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/components.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/config.js":
/*!************************************************!*\
  !*** ./node_modules/libp2p/dist/src/config.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateConfig: () => (/* binding */ validateConfig)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/transport/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _libp2p_utils_address_sort__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/utils/address-sort */ \"./node_modules/@libp2p/utils/dist/src/address-sort.js\");\n/* harmony import */ var _multiformats_multiaddr_resolvers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr/resolvers */ \"./node_modules/@multiformats/multiaddr/dist/src/resolvers/index.js\");\n/* harmony import */ var merge_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! merge-options */ \"./node_modules/merge-options/index.mjs\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/libp2p/dist/src/errors.js\");\n\n\n\n\n\n\nconst DefaultConfig = {\n    addresses: {\n        listen: [],\n        announce: [],\n        noAnnounce: [],\n        announceFilter: (multiaddrs) => multiaddrs\n    },\n    connectionManager: {\n        resolvers: {\n            dnsaddr: _multiformats_multiaddr_resolvers__WEBPACK_IMPORTED_MODULE_0__.dnsaddrResolver\n        },\n        addressSorter: _libp2p_utils_address_sort__WEBPACK_IMPORTED_MODULE_2__.defaultAddressSort\n    },\n    transportManager: {\n        faultTolerance: _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.FaultTolerance.FATAL_ALL\n    }\n};\nasync function validateConfig(opts) {\n    const resultingOptions = (0,merge_options__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(DefaultConfig, opts);\n    if (resultingOptions.connectionProtector === null && globalThis.process?.env?.LIBP2P_FORCE_PNET != null) { // eslint-disable-line no-undef\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError(_errors_js__WEBPACK_IMPORTED_MODULE_5__.messages.ERR_PROTECTOR_REQUIRED, _errors_js__WEBPACK_IMPORTED_MODULE_5__.codes.ERR_PROTECTOR_REQUIRED);\n    }\n    if (!(await (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_6__.peerIdFromKeys)(resultingOptions.privateKey.public.bytes, resultingOptions.privateKey.bytes)).equals(resultingOptions.peerId)) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError('Private key doesn\\'t match peer id', _errors_js__WEBPACK_IMPORTED_MODULE_5__.codes.ERR_INVALID_KEY);\n    }\n    return resultingOptions;\n}\n//# sourceMappingURL=config.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/config.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/config/connection-gater.browser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/config/connection-gater.browser.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   connectionGater: () => (/* binding */ connectionGater)\n/* harmony export */ });\n/* harmony import */ var _libp2p_utils_private_ip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/utils/private-ip */ \"./node_modules/@libp2p/utils/dist/src/private-ip.js\");\n\n/**\n * Returns a connection gater that disallows dialling private addresses by\n * default. Browsers are severely limited in their resource usage so don't\n * waste time trying to dial undiallable addresses.\n */\nfunction connectionGater(gater = {}) {\n    return {\n        denyDialPeer: async () => false,\n        denyDialMultiaddr: async (multiaddr) => {\n            const tuples = multiaddr.stringTuples();\n            if (tuples[0][0] === 4 || tuples[0][0] === 41) {\n                return Boolean((0,_libp2p_utils_private_ip__WEBPACK_IMPORTED_MODULE_0__.isPrivateIp)(`${tuples[0][1]}`));\n            }\n            return false;\n        },\n        denyInboundConnection: async () => false,\n        denyOutboundConnection: async () => false,\n        denyInboundEncryptedConnection: async () => false,\n        denyOutboundEncryptedConnection: async () => false,\n        denyInboundUpgradedConnection: async () => false,\n        denyOutboundUpgradedConnection: async () => false,\n        filterMultiaddrForPeer: async () => true,\n        ...gater\n    };\n}\n//# sourceMappingURL=connection-gater.browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/config/connection-gater.browser.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/connection-manager/auto-dial.js":
/*!**********************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/connection-manager/auto-dial.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AutoDial: () => (/* binding */ AutoDial)\n/* harmony export */ });\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/peer-collections */ \"./node_modules/@libp2p/peer-collections/dist/src/set.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/peer-collections */ \"./node_modules/@libp2p/peer-collections/dist/src/map.js\");\n/* harmony import */ var _libp2p_utils_peer_queue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/utils/peer-queue */ \"./node_modules/@libp2p/utils/dist/src/peer-queue.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/libp2p/dist/src/connection-manager/constants.browser.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/libp2p/dist/src/connection-manager/constants.defaults.js\");\n\n\n\n\nconst defaultOptions = {\n    minConnections: _constants_js__WEBPACK_IMPORTED_MODULE_1__.MIN_CONNECTIONS,\n    maxQueueLength: _constants_js__WEBPACK_IMPORTED_MODULE_2__.AUTO_DIAL_MAX_QUEUE_LENGTH,\n    autoDialConcurrency: _constants_js__WEBPACK_IMPORTED_MODULE_2__.AUTO_DIAL_CONCURRENCY,\n    autoDialPriority: _constants_js__WEBPACK_IMPORTED_MODULE_2__.AUTO_DIAL_PRIORITY,\n    autoDialInterval: _constants_js__WEBPACK_IMPORTED_MODULE_2__.AUTO_DIAL_INTERVAL,\n    autoDialPeerRetryThreshold: _constants_js__WEBPACK_IMPORTED_MODULE_1__.AUTO_DIAL_PEER_RETRY_THRESHOLD,\n    autoDialDiscoveredPeersDebounce: _constants_js__WEBPACK_IMPORTED_MODULE_2__.AUTO_DIAL_DISCOVERED_PEERS_DEBOUNCE\n};\nclass AutoDial {\n    connectionManager;\n    peerStore;\n    queue;\n    minConnections;\n    autoDialPriority;\n    autoDialIntervalMs;\n    autoDialMaxQueueLength;\n    autoDialPeerRetryThresholdMs;\n    autoDialDiscoveredPeersDebounce;\n    autoDialInterval;\n    started;\n    running;\n    log;\n    /**\n     * Proactively tries to connect to known peers stored in the PeerStore.\n     * It will keep the number of connections below the upper limit and sort\n     * the peers to connect based on whether we know their keys and protocols.\n     */\n    constructor(components, init) {\n        this.connectionManager = components.connectionManager;\n        this.peerStore = components.peerStore;\n        this.minConnections = init.minConnections ?? defaultOptions.minConnections;\n        this.autoDialPriority = init.autoDialPriority ?? defaultOptions.autoDialPriority;\n        this.autoDialIntervalMs = init.autoDialInterval ?? defaultOptions.autoDialInterval;\n        this.autoDialMaxQueueLength = init.maxQueueLength ?? defaultOptions.maxQueueLength;\n        this.autoDialPeerRetryThresholdMs = init.autoDialPeerRetryThreshold ?? defaultOptions.autoDialPeerRetryThreshold;\n        this.autoDialDiscoveredPeersDebounce = init.autoDialDiscoveredPeersDebounce ?? defaultOptions.autoDialDiscoveredPeersDebounce;\n        this.log = components.logger.forComponent('libp2p:connection-manager:auto-dial');\n        this.started = false;\n        this.running = false;\n        this.queue = new _libp2p_utils_peer_queue__WEBPACK_IMPORTED_MODULE_3__.PeerQueue({\n            concurrency: init.autoDialConcurrency ?? defaultOptions.autoDialConcurrency,\n            metricName: 'libp2p_autodial_queue',\n            metrics: components.metrics\n        });\n        this.queue.addEventListener('error', (evt) => {\n            this.log.error('error during auto-dial', evt.detail);\n        });\n        // check the min connection limit whenever a peer disconnects\n        components.events.addEventListener('connection:close', () => {\n            this.autoDial()\n                .catch(err => {\n                this.log.error(err);\n            });\n        });\n        // sometimes peers are discovered in quick succession so add a small\n        // debounce to ensure all eligible peers are autodialed\n        let debounce;\n        // when new peers are discovered, dial them if we don't have\n        // enough connections\n        components.events.addEventListener('peer:discovery', () => {\n            clearTimeout(debounce);\n            debounce = setTimeout(() => {\n                this.autoDial()\n                    .catch(err => {\n                    this.log.error(err);\n                });\n            }, this.autoDialDiscoveredPeersDebounce);\n        });\n    }\n    isStarted() {\n        return this.started;\n    }\n    start() {\n        this.started = true;\n    }\n    afterStart() {\n        this.autoDial()\n            .catch(err => {\n            this.log.error('error while autodialing', err);\n        });\n    }\n    stop() {\n        // clear the queue\n        this.queue.clear();\n        clearTimeout(this.autoDialInterval);\n        this.started = false;\n        this.running = false;\n    }\n    async autoDial() {\n        if (!this.started || this.running) {\n            return;\n        }\n        const connections = this.connectionManager.getConnectionsMap();\n        const numConnections = connections.size;\n        // already have enough connections\n        if (numConnections >= this.minConnections) {\n            if (this.minConnections > 0) {\n                this.log.trace('have enough connections %d/%d', numConnections, this.minConnections);\n            }\n            // no need to schedule next autodial as it will be run when on\n            // connection:close event\n            return;\n        }\n        if (this.queue.size > this.autoDialMaxQueueLength) {\n            this.log('not enough connections %d/%d but auto dial queue is full', numConnections, this.minConnections);\n            this.sheduleNextAutodial();\n            return;\n        }\n        this.running = true;\n        this.log('not enough connections %d/%d - will dial peers to increase the number of connections', numConnections, this.minConnections);\n        const dialQueue = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_4__.PeerSet(\n        // @ts-expect-error boolean filter removes falsy peer IDs\n        this.connectionManager.getDialQueue()\n            .map(queue => queue.peerId)\n            .filter(Boolean));\n        // sort peers on whether we know protocols or public keys for them\n        const peers = await this.peerStore.all({\n            filters: [\n                // remove some peers\n                (peer) => {\n                    // remove peers without addresses\n                    if (peer.addresses.length === 0) {\n                        this.log.trace('not autodialing %p because they have no addresses', peer.id);\n                        return false;\n                    }\n                    // remove peers we are already connected to\n                    if (connections.has(peer.id)) {\n                        this.log.trace('not autodialing %p because they are already connected', peer.id);\n                        return false;\n                    }\n                    // remove peers we are already dialling\n                    if (dialQueue.has(peer.id)) {\n                        this.log.trace('not autodialing %p because they are already being dialed', peer.id);\n                        return false;\n                    }\n                    // remove peers already in the autodial queue\n                    if (this.queue.has(peer.id)) {\n                        this.log.trace('not autodialing %p because they are already being autodialed', peer.id);\n                        return false;\n                    }\n                    return true;\n                }\n            ]\n        });\n        // shuffle the peers - this is so peers with the same tag values will be\n        // dialled in a different order each time\n        const shuffledPeers = peers.sort(() => Math.random() > 0.5 ? 1 : -1);\n        // sort shuffled peers by tag value\n        const peerValues = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_5__.PeerMap();\n        for (const peer of shuffledPeers) {\n            if (peerValues.has(peer.id)) {\n                continue;\n            }\n            // sum all tag values\n            peerValues.set(peer.id, [...peer.tags.values()].reduce((acc, curr) => {\n                return acc + curr.value;\n            }, 0));\n        }\n        // sort by value, highest to lowest\n        const sortedPeers = shuffledPeers.sort((a, b) => {\n            const peerAValue = peerValues.get(a.id) ?? 0;\n            const peerBValue = peerValues.get(b.id) ?? 0;\n            if (peerAValue > peerBValue) {\n                return -1;\n            }\n            if (peerAValue < peerBValue) {\n                return 1;\n            }\n            return 0;\n        });\n        const peersThatHaveNotFailed = sortedPeers.filter(peer => {\n            const lastDialFailure = peer.metadata.get(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LAST_DIAL_FAILURE_KEY);\n            if (lastDialFailure == null) {\n                return true;\n            }\n            const lastDialFailureTimestamp = parseInt((0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(lastDialFailure));\n            if (isNaN(lastDialFailureTimestamp)) {\n                return true;\n            }\n            // only dial if the time since the last failure is above the retry threshold\n            return Date.now() - lastDialFailureTimestamp > this.autoDialPeerRetryThresholdMs;\n        });\n        this.log('selected %d/%d peers to dial', peersThatHaveNotFailed.length, peers.length);\n        for (const peer of peersThatHaveNotFailed) {\n            this.queue.add(async () => {\n                const numConnections = this.connectionManager.getConnectionsMap().size;\n                // Check to see if we still need to auto dial\n                if (numConnections >= this.minConnections) {\n                    this.log('got enough connections now %d/%d', numConnections, this.minConnections);\n                    this.queue.clear();\n                    return;\n                }\n                this.log('connecting to a peerStore stored peer %p', peer.id);\n                await this.connectionManager.openConnection(peer.id, {\n                    priority: this.autoDialPriority\n                });\n            }, {\n                peerId: peer.id\n            }).catch(err => {\n                this.log.error('could not connect to peerStore stored peer', err);\n            });\n        }\n        this.running = false;\n        this.sheduleNextAutodial();\n    }\n    sheduleNextAutodial() {\n        if (!this.started) {\n            return;\n        }\n        this.autoDialInterval = setTimeout(() => {\n            this.autoDial()\n                .catch(err => {\n                this.log.error('error while autodialing', err);\n            });\n        }, this.autoDialIntervalMs);\n    }\n}\n//# sourceMappingURL=auto-dial.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/connection-manager/auto-dial.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/connection-manager/connection-pruner.js":
/*!******************************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/connection-manager/connection-pruner.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConnectionPruner: () => (/* binding */ ConnectionPruner)\n/* harmony export */ });\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/peer-collections */ \"./node_modules/@libp2p/peer-collections/dist/src/map.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/libp2p/dist/src/connection-manager/constants.browser.js\");\n\n\nconst defaultOptions = {\n    maxConnections: _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_CONNECTIONS,\n    allow: []\n};\n/**\n * If we go over the max connections limit, choose some connections to close\n */\nclass ConnectionPruner {\n    maxConnections;\n    connectionManager;\n    peerStore;\n    allow;\n    events;\n    log;\n    constructor(components, init = {}) {\n        this.maxConnections = init.maxConnections ?? defaultOptions.maxConnections;\n        this.allow = init.allow ?? defaultOptions.allow;\n        this.connectionManager = components.connectionManager;\n        this.peerStore = components.peerStore;\n        this.events = components.events;\n        this.log = components.logger.forComponent('libp2p:connection-manager:connection-pruner');\n        // check the max connection limit whenever a peer connects\n        components.events.addEventListener('connection:open', () => {\n            this.maybePruneConnections()\n                .catch(err => {\n                this.log.error(err);\n            });\n        });\n    }\n    /**\n     * If we have more connections than our maximum, select some excess connections\n     * to prune based on peer value\n     */\n    async maybePruneConnections() {\n        const connections = this.connectionManager.getConnections();\n        const numConnections = connections.length;\n        const toPrune = Math.max(numConnections - this.maxConnections, 0);\n        this.log('checking max connections limit %d/%d', numConnections, this.maxConnections);\n        if (numConnections <= this.maxConnections) {\n            return;\n        }\n        this.log('max connections limit exceeded %d/%d, pruning %d connection(s)', numConnections, this.maxConnections, toPrune);\n        const peerValues = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_1__.PeerMap();\n        // work out peer values\n        for (const connection of connections) {\n            const remotePeer = connection.remotePeer;\n            if (peerValues.has(remotePeer)) {\n                continue;\n            }\n            peerValues.set(remotePeer, 0);\n            try {\n                const peer = await this.peerStore.get(remotePeer);\n                // sum all tag values\n                peerValues.set(remotePeer, [...peer.tags.values()].reduce((acc, curr) => {\n                    return acc + curr.value;\n                }, 0));\n            }\n            catch (err) {\n                if (err.code !== 'ERR_NOT_FOUND') {\n                    this.log.error('error loading peer tags', err);\n                }\n            }\n        }\n        // sort by value, lowest to highest\n        const sortedConnections = connections.sort((a, b) => {\n            const peerAValue = peerValues.get(a.remotePeer) ?? 0;\n            const peerBValue = peerValues.get(b.remotePeer) ?? 0;\n            if (peerAValue > peerBValue) {\n                return 1;\n            }\n            if (peerAValue < peerBValue) {\n                return -1;\n            }\n            // if the peers have an equal tag value then we want to close short-lived connections first\n            const connectionALifespan = a.timeline.open;\n            const connectionBLifespan = b.timeline.open;\n            if (connectionALifespan < connectionBLifespan) {\n                return 1;\n            }\n            if (connectionALifespan > connectionBLifespan) {\n                return -1;\n            }\n            return 0;\n        });\n        // close some connections\n        const toClose = [];\n        for (const connection of sortedConnections) {\n            this.log('too many connections open - closing a connection to %p', connection.remotePeer);\n            // check allow list\n            const connectionInAllowList = this.allow.some((ma) => {\n                return connection.remoteAddr.toString().startsWith(ma.toString());\n            });\n            // Connections in the allow list should be excluded from pruning\n            if (!connectionInAllowList) {\n                toClose.push(connection);\n            }\n            if (toClose.length === toPrune) {\n                break;\n            }\n        }\n        // close connections\n        await Promise.all(toClose.map(async (connection) => {\n            try {\n                await connection.close();\n            }\n            catch (err) {\n                this.log.error(err);\n            }\n        }));\n        // despatch prune event\n        this.events.safeDispatchEvent('connection:prune', { detail: toClose });\n    }\n}\n//# sourceMappingURL=connection-pruner.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/connection-manager/connection-pruner.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/connection-manager/constants.browser.js":
/*!******************************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/connection-manager/constants.browser.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTO_DIAL_CONCURRENCY: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.AUTO_DIAL_CONCURRENCY),\n/* harmony export */   AUTO_DIAL_DISCOVERED_PEERS_DEBOUNCE: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.AUTO_DIAL_DISCOVERED_PEERS_DEBOUNCE),\n/* harmony export */   AUTO_DIAL_INTERVAL: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.AUTO_DIAL_INTERVAL),\n/* harmony export */   AUTO_DIAL_MAX_QUEUE_LENGTH: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.AUTO_DIAL_MAX_QUEUE_LENGTH),\n/* harmony export */   AUTO_DIAL_PEER_RETRY_THRESHOLD: () => (/* binding */ AUTO_DIAL_PEER_RETRY_THRESHOLD),\n/* harmony export */   AUTO_DIAL_PRIORITY: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.AUTO_DIAL_PRIORITY),\n/* harmony export */   DIAL_TIMEOUT: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.DIAL_TIMEOUT),\n/* harmony export */   INBOUND_CONNECTION_THRESHOLD: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.INBOUND_CONNECTION_THRESHOLD),\n/* harmony export */   INBOUND_UPGRADE_TIMEOUT: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.INBOUND_UPGRADE_TIMEOUT),\n/* harmony export */   LAST_DIAL_FAILURE_KEY: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.LAST_DIAL_FAILURE_KEY),\n/* harmony export */   MAX_CONNECTIONS: () => (/* binding */ MAX_CONNECTIONS),\n/* harmony export */   MAX_DIAL_QUEUE_LENGTH: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.MAX_DIAL_QUEUE_LENGTH),\n/* harmony export */   MAX_INCOMING_PENDING_CONNECTIONS: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.MAX_INCOMING_PENDING_CONNECTIONS),\n/* harmony export */   MAX_PARALLEL_DIALS: () => (/* binding */ MAX_PARALLEL_DIALS),\n/* harmony export */   MAX_PEER_ADDRS_TO_DIAL: () => (/* reexport safe */ _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__.MAX_PEER_ADDRS_TO_DIAL),\n/* harmony export */   MIN_CONNECTIONS: () => (/* binding */ MIN_CONNECTIONS)\n/* harmony export */ });\n/* harmony import */ var _constants_defaults_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.defaults.js */ \"./node_modules/libp2p/dist/src/connection-manager/constants.defaults.js\");\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#minConnections\n */\nconst MIN_CONNECTIONS = 5;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxConnections\n */\nconst MAX_CONNECTIONS = 100;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxParallelDials\n */\nconst MAX_PARALLEL_DIALS = 50;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/libp2p.index.unknown.ConnectionManagerInit.html#autoDialPeerRetryThreshold\n */\nconst AUTO_DIAL_PEER_RETRY_THRESHOLD = 1000 * 60 * 7;\n//# sourceMappingURL=constants.browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/connection-manager/constants.browser.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/connection-manager/constants.defaults.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/connection-manager/constants.defaults.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTO_DIAL_CONCURRENCY: () => (/* binding */ AUTO_DIAL_CONCURRENCY),\n/* harmony export */   AUTO_DIAL_DISCOVERED_PEERS_DEBOUNCE: () => (/* binding */ AUTO_DIAL_DISCOVERED_PEERS_DEBOUNCE),\n/* harmony export */   AUTO_DIAL_INTERVAL: () => (/* binding */ AUTO_DIAL_INTERVAL),\n/* harmony export */   AUTO_DIAL_MAX_QUEUE_LENGTH: () => (/* binding */ AUTO_DIAL_MAX_QUEUE_LENGTH),\n/* harmony export */   AUTO_DIAL_PRIORITY: () => (/* binding */ AUTO_DIAL_PRIORITY),\n/* harmony export */   DIAL_TIMEOUT: () => (/* binding */ DIAL_TIMEOUT),\n/* harmony export */   INBOUND_CONNECTION_THRESHOLD: () => (/* binding */ INBOUND_CONNECTION_THRESHOLD),\n/* harmony export */   INBOUND_UPGRADE_TIMEOUT: () => (/* binding */ INBOUND_UPGRADE_TIMEOUT),\n/* harmony export */   LAST_DIAL_FAILURE_KEY: () => (/* binding */ LAST_DIAL_FAILURE_KEY),\n/* harmony export */   MAX_DIAL_QUEUE_LENGTH: () => (/* binding */ MAX_DIAL_QUEUE_LENGTH),\n/* harmony export */   MAX_INCOMING_PENDING_CONNECTIONS: () => (/* binding */ MAX_INCOMING_PENDING_CONNECTIONS),\n/* harmony export */   MAX_PEER_ADDRS_TO_DIAL: () => (/* binding */ MAX_PEER_ADDRS_TO_DIAL)\n/* harmony export */ });\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#dialTimeout\n */\nconst DIAL_TIMEOUT = 5e3;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#inboundUpgradeTimeout\n */\nconst INBOUND_UPGRADE_TIMEOUT = 2e3;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxPeerAddrsToDial\n */\nconst MAX_PEER_ADDRS_TO_DIAL = 25;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#autoDialInterval\n */\nconst AUTO_DIAL_INTERVAL = 5000;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#autoDialConcurrency\n */\nconst AUTO_DIAL_CONCURRENCY = 25;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#autoDialPriority\n */\nconst AUTO_DIAL_PRIORITY = 0;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#autoDialMaxQueueLength\n */\nconst AUTO_DIAL_MAX_QUEUE_LENGTH = 100;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/libp2p.index.unknown.ConnectionManagerInit.html#autoDialDiscoveredPeersDebounce\n */\nconst AUTO_DIAL_DISCOVERED_PEERS_DEBOUNCE = 10;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#inboundConnectionThreshold\n */\nconst INBOUND_CONNECTION_THRESHOLD = 5;\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxIncomingPendingConnections\n */\nconst MAX_INCOMING_PENDING_CONNECTIONS = 10;\n/**\n * Store as part of the peer store metadata for a given peer, the value for this\n * key is a timestamp of the last time a dial attempted failed with the relevant\n * peer stored as a string.\n *\n * Used to insure we do not endlessly try to auto dial peers we have recently\n * failed to dial.\n */\nconst LAST_DIAL_FAILURE_KEY = 'last-dial-failure';\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxDialQueueLength\n */\nconst MAX_DIAL_QUEUE_LENGTH = 500;\n//# sourceMappingURL=constants.defaults.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/connection-manager/constants.defaults.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/connection-manager/dial-queue.js":
/*!***********************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/connection-manager/dial-queue.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DialQueue: () => (/* binding */ DialQueue)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/events.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/peer-collections */ \"./node_modules/@libp2p/peer-collections/dist/src/map.js\");\n/* harmony import */ var _libp2p_utils_address_sort__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/utils/address-sort */ \"./node_modules/@libp2p/utils/dist/src/address-sort.js\");\n/* harmony import */ var _libp2p_utils_queue__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @libp2p/utils/queue */ \"./node_modules/@libp2p/utils/dist/src/queue/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr_resolvers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @multiformats/multiaddr/resolvers */ \"./node_modules/@multiformats/multiaddr/dist/src/resolvers/index.js\");\n/* harmony import */ var any_signal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! any-signal */ \"./node_modules/any-signal/dist/src/index.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../errors.js */ \"./node_modules/libp2p/dist/src/errors.js\");\n/* harmony import */ var _get_peer_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../get-peer.js */ \"./node_modules/libp2p/dist/src/get-peer.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/libp2p/dist/src/connection-manager/constants.browser.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/libp2p/dist/src/connection-manager/constants.defaults.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/libp2p/dist/src/connection-manager/utils.js\");\n/* eslint-disable max-depth */\n\n\n\n\n\n\n\n\n\n\n\n\nconst defaultOptions = {\n    addressSorter: _libp2p_utils_address_sort__WEBPACK_IMPORTED_MODULE_4__.defaultAddressSort,\n    maxParallelDials: _constants_js__WEBPACK_IMPORTED_MODULE_5__.MAX_PARALLEL_DIALS,\n    maxDialQueueLength: _constants_js__WEBPACK_IMPORTED_MODULE_6__.MAX_DIAL_QUEUE_LENGTH,\n    maxPeerAddrsToDial: _constants_js__WEBPACK_IMPORTED_MODULE_6__.MAX_PEER_ADDRS_TO_DIAL,\n    dialTimeout: _constants_js__WEBPACK_IMPORTED_MODULE_6__.DIAL_TIMEOUT,\n    resolvers: {\n        dnsaddr: _multiformats_multiaddr_resolvers__WEBPACK_IMPORTED_MODULE_1__.dnsaddrResolver\n    }\n};\nclass DialQueue {\n    queue;\n    components;\n    addressSorter;\n    maxPeerAddrsToDial;\n    maxDialQueueLength;\n    dialTimeout;\n    shutDownController;\n    connections;\n    log;\n    constructor(components, init = {}) {\n        this.addressSorter = init.addressSorter ?? defaultOptions.addressSorter;\n        this.maxPeerAddrsToDial = init.maxPeerAddrsToDial ?? defaultOptions.maxPeerAddrsToDial;\n        this.maxDialQueueLength = init.maxDialQueueLength ?? defaultOptions.maxDialQueueLength;\n        this.dialTimeout = init.dialTimeout ?? defaultOptions.dialTimeout;\n        this.connections = init.connections ?? new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_7__.PeerMap();\n        this.log = components.logger.forComponent('libp2p:connection-manager:dial-queue');\n        this.components = components;\n        this.shutDownController = new AbortController();\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.setMaxListeners)(Infinity, this.shutDownController.signal);\n        for (const [key, value] of Object.entries(init.resolvers ?? {})) {\n            _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.resolvers.set(key, value);\n        }\n        // controls dial concurrency\n        this.queue = new _libp2p_utils_queue__WEBPACK_IMPORTED_MODULE_9__.Queue({\n            concurrency: init.maxParallelDials ?? defaultOptions.maxParallelDials,\n            metricName: 'libp2p_dial_queue',\n            metrics: components.metrics\n        });\n        // a started job errored\n        this.queue.addEventListener('error', (event) => {\n            this.log.error('error in dial queue', event.detail);\n        });\n    }\n    start() {\n        this.shutDownController = new AbortController();\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.setMaxListeners)(Infinity, this.shutDownController.signal);\n    }\n    /**\n     * Clears any pending dials\n     */\n    stop() {\n        this.shutDownController.abort();\n        this.queue.abort();\n    }\n    /**\n     * Connects to a given peer, multiaddr or list of multiaddrs.\n     *\n     * If a peer is passed, all known multiaddrs will be tried. If a multiaddr or\n     * multiaddrs are passed only those will be dialled.\n     *\n     * Where a list of multiaddrs is passed, if any contain a peer id then all\n     * multiaddrs in the list must contain the same peer id.\n     *\n     * The dial to the first address that is successfully able to upgrade a\n     * connection will be used, all other dials will be aborted when that happens.\n     */\n    async dial(peerIdOrMultiaddr, options = {}) {\n        const { peerId, multiaddrs } = (0,_get_peer_js__WEBPACK_IMPORTED_MODULE_10__.getPeerAddress)(peerIdOrMultiaddr);\n        // make sure we don't have an existing connection to any of the addresses we\n        // are about to dial\n        const existingConnection = Array.from(this.connections.values()).flat().find(conn => {\n            if (options.force === true) {\n                return false;\n            }\n            if (conn.remotePeer.equals(peerId)) {\n                return true;\n            }\n            return multiaddrs.find(addr => {\n                return addr.equals(conn.remoteAddr);\n            });\n        });\n        if (existingConnection != null) {\n            this.log('already connected to %a', existingConnection.remoteAddr);\n            return existingConnection;\n        }\n        // ready to dial, all async work finished - make sure we don't have any\n        // pending dials in progress for this peer or set of multiaddrs\n        const existingDial = this.queue.queue.find(job => {\n            if (peerId?.equals(job.options.peerId) === true) {\n                return true;\n            }\n            // does the dial contain any of the target multiaddrs?\n            const addresses = job.options.multiaddrs;\n            if (addresses == null) {\n                return false;\n            }\n            for (const multiaddr of multiaddrs) {\n                if (addresses.has(multiaddr.toString())) {\n                    return true;\n                }\n            }\n            return false;\n        });\n        if (existingDial != null) {\n            this.log('joining existing dial target for %p', peerId);\n            // add all multiaddrs to the dial target\n            for (const multiaddr of multiaddrs) {\n                existingDial.options.multiaddrs.add(multiaddr.toString());\n            }\n            return existingDial.join(options);\n        }\n        if (this.queue.size >= this.maxDialQueueLength) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('Dial queue is full', 'ERR_DIAL_QUEUE_FULL');\n        }\n        this.log('creating dial target for %p', peerId, multiaddrs.map(ma => ma.toString()));\n        return this.queue.add(async (options) => {\n            // create abort conditions - need to do this before `calculateMultiaddrs` as\n            // we may be about to resolve a dns addr which can time out\n            const signal = this.createDialAbortController(options?.signal);\n            let addrsToDial;\n            try {\n                // load addresses from address book, resolve and dnsaddrs, filter\n                // undiallables, add peer IDs, etc\n                addrsToDial = await this.calculateMultiaddrs(peerId, options?.multiaddrs, {\n                    ...options,\n                    signal\n                });\n                addrsToDial.map(({ multiaddr }) => multiaddr.toString()).forEach(addr => {\n                    options?.multiaddrs.add(addr);\n                });\n            }\n            catch (err) {\n                signal.clear();\n                throw err;\n            }\n            try {\n                let dialed = 0;\n                const errors = [];\n                for (const address of addrsToDial) {\n                    if (dialed === this.maxPeerAddrsToDial) {\n                        this.log('dialed maxPeerAddrsToDial (%d) addresses for %p, not trying any others', dialed, peerId);\n                        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('Peer had more than maxPeerAddrsToDial', _errors_js__WEBPACK_IMPORTED_MODULE_12__.codes.ERR_TOO_MANY_ADDRESSES);\n                    }\n                    dialed++;\n                    try {\n                        const conn = await this.components.transportManager.dial(address.multiaddr, {\n                            ...options,\n                            signal\n                        });\n                        this.log('dial to %a succeeded', address.multiaddr);\n                        return conn;\n                    }\n                    catch (err) {\n                        this.log.error('dial failed to %a', address.multiaddr, err);\n                        if (peerId != null) {\n                            // record the failed dial\n                            try {\n                                await this.components.peerStore.patch(peerId, {\n                                    metadata: {\n                                        [_constants_js__WEBPACK_IMPORTED_MODULE_6__.LAST_DIAL_FAILURE_KEY]: (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)(Date.now().toString())\n                                    }\n                                });\n                            }\n                            catch (err) {\n                                this.log.error('could not update last dial failure key for %p', peerId, err);\n                            }\n                        }\n                        // the user/dial timeout/shutdown controller signal aborted\n                        if (signal.aborted) {\n                            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError(err.message, _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.ERR_TIMEOUT);\n                        }\n                        errors.push(err);\n                    }\n                }\n                if (errors.length === 1) {\n                    throw errors[0];\n                }\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.AggregateCodeError(errors, 'All multiaddr dials failed', _errors_js__WEBPACK_IMPORTED_MODULE_12__.codes.ERR_TRANSPORT_DIAL_FAILED);\n            }\n            finally {\n                // clean up abort signals/controllers\n                signal.clear();\n            }\n        }, {\n            peerId,\n            priority: options.priority,\n            multiaddrs: new Set(multiaddrs.map(ma => ma.toString())),\n            signal: options.signal\n        });\n    }\n    createDialAbortController(userSignal) {\n        // let any signal abort the dial\n        const signal = (0,any_signal__WEBPACK_IMPORTED_MODULE_2__.anySignal)([\n            AbortSignal.timeout(this.dialTimeout),\n            this.shutDownController.signal,\n            userSignal\n        ]);\n        // This emitter gets listened to a lot\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_8__.setMaxListeners)(Infinity, signal);\n        return signal;\n    }\n    // eslint-disable-next-line complexity\n    async calculateMultiaddrs(peerId, multiaddrs = new Set(), options = {}) {\n        const addrs = [...multiaddrs].map(ma => ({\n            multiaddr: (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(ma),\n            isCertified: false\n        }));\n        // if a peer id or multiaddr(s) with a peer id, make sure it isn't our peer id and that we are allowed to dial it\n        if (peerId != null) {\n            if (this.components.peerId.equals(peerId)) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('Tried to dial self', _errors_js__WEBPACK_IMPORTED_MODULE_12__.codes.ERR_DIALED_SELF);\n            }\n            if ((await this.components.connectionGater.denyDialPeer?.(peerId)) === true) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('The dial request is blocked by gater.allowDialPeer', _errors_js__WEBPACK_IMPORTED_MODULE_12__.codes.ERR_PEER_DIAL_INTERCEPTED);\n            }\n            // if just a peer id was passed, load available multiaddrs for this peer\n            // from the peer store\n            if (addrs.length === 0) {\n                this.log('loading multiaddrs for %p', peerId);\n                try {\n                    const peer = await this.components.peerStore.get(peerId);\n                    addrs.push(...peer.addresses);\n                    this.log('loaded multiaddrs for %p', peerId, addrs.map(({ multiaddr }) => multiaddr.toString()));\n                }\n                catch (err) {\n                    if (err.code !== _errors_js__WEBPACK_IMPORTED_MODULE_12__.codes.ERR_NOT_FOUND) {\n                        throw err;\n                    }\n                }\n            }\n            // if we still don't have any addresses for this peer, try a lookup\n            // using the peer routing\n            if (addrs.length === 0) {\n                this.log('looking up multiaddrs for %p in the peer routing', peerId);\n                try {\n                    const peerInfo = await this.components.peerRouting.findPeer(peerId);\n                    this.log('found multiaddrs for %p in the peer routing', peerId, addrs.map(({ multiaddr }) => multiaddr.toString()));\n                    addrs.push(...peerInfo.multiaddrs.map(multiaddr => ({\n                        multiaddr,\n                        isCertified: false\n                    })));\n                }\n                catch (err) {\n                    if (err.code !== _errors_js__WEBPACK_IMPORTED_MODULE_12__.codes.ERR_NO_ROUTERS_AVAILABLE) {\n                        this.log.error('looking up multiaddrs for %p in the peer routing failed', peerId, err);\n                    }\n                }\n            }\n        }\n        // resolve addresses - this can result in a one-to-many translation when\n        // dnsaddrs are resolved\n        let resolvedAddresses = (await Promise.all(addrs.map(async (addr) => {\n            const result = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_13__.resolveMultiaddrs)(addr.multiaddr, {\n                dns: this.components.dns,\n                ...options,\n                log: this.log\n            });\n            if (result.length === 1 && result[0].equals(addr.multiaddr)) {\n                return addr;\n            }\n            return result.map(multiaddr => ({\n                multiaddr,\n                isCertified: false\n            }));\n        })))\n            .flat();\n        // ensure the peer id is appended to the multiaddr\n        if (peerId != null) {\n            const peerIdMultiaddr = `/p2p/${peerId.toString()}`;\n            resolvedAddresses = resolvedAddresses.map(addr => {\n                const lastProto = addr.multiaddr.protos().pop();\n                // do not append peer id to path multiaddrs\n                if (lastProto?.path === true) {\n                    return addr;\n                }\n                // append peer id to multiaddr if it is not already present\n                if (addr.multiaddr.getPeerId() == null) {\n                    return {\n                        multiaddr: addr.multiaddr.encapsulate(peerIdMultiaddr),\n                        isCertified: addr.isCertified\n                    };\n                }\n                return addr;\n            });\n        }\n        const filteredAddrs = resolvedAddresses.filter(addr => {\n            // filter out any multiaddrs that we do not have transports for\n            if (this.components.transportManager.transportForMultiaddr(addr.multiaddr) == null) {\n                return false;\n            }\n            // if the resolved multiaddr has a PeerID but it's the wrong one, ignore it\n            // - this can happen with addresses like bootstrap.libp2p.io that resolve\n            // to multiple different peers\n            const addrPeerId = addr.multiaddr.getPeerId();\n            if (peerId != null && addrPeerId != null) {\n                return peerId.equals(addrPeerId);\n            }\n            return true;\n        });\n        // deduplicate addresses\n        const dedupedAddrs = new Map();\n        for (const addr of filteredAddrs) {\n            const maStr = addr.multiaddr.toString();\n            const existing = dedupedAddrs.get(maStr);\n            if (existing != null) {\n                existing.isCertified = existing.isCertified || addr.isCertified || false;\n                continue;\n            }\n            dedupedAddrs.set(maStr, addr);\n        }\n        const dedupedMultiaddrs = [...dedupedAddrs.values()];\n        // make sure we actually have some addresses to dial\n        if (dedupedMultiaddrs.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('The dial request has no valid addresses', _errors_js__WEBPACK_IMPORTED_MODULE_12__.codes.ERR_NO_VALID_ADDRESSES);\n        }\n        const gatedAdrs = [];\n        for (const addr of dedupedMultiaddrs) {\n            if (this.components.connectionGater.denyDialMultiaddr != null && await this.components.connectionGater.denyDialMultiaddr(addr.multiaddr)) {\n                continue;\n            }\n            gatedAdrs.push(addr);\n        }\n        const sortedGatedAddrs = gatedAdrs.sort(this.addressSorter);\n        // make sure we actually have some addresses to dial\n        if (sortedGatedAddrs.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_11__.CodeError('The connection gater denied all addresses in the dial request', _errors_js__WEBPACK_IMPORTED_MODULE_12__.codes.ERR_NO_VALID_ADDRESSES);\n        }\n        this.log.trace('addresses for %p before filtering', peerId ?? 'unknown peer', resolvedAddresses.map(({ multiaddr }) => multiaddr.toString()));\n        this.log.trace('addresses for %p after filtering', peerId ?? 'unknown peer', sortedGatedAddrs.map(({ multiaddr }) => multiaddr.toString()));\n        return sortedGatedAddrs;\n    }\n}\n//# sourceMappingURL=dial-queue.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/connection-manager/dial-queue.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/connection-manager/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/connection-manager/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultConnectionManager: () => (/* binding */ DefaultConnectionManager)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/peer-store/tags.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/peer-collections */ \"./node_modules/@libp2p/peer-collections/dist/src/map.js\");\n/* harmony import */ var _libp2p_utils_address_sort__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @libp2p/utils/address-sort */ \"./node_modules/@libp2p/utils/dist/src/address-sort.js\");\n/* harmony import */ var _libp2p_utils_rate_limiter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/utils/rate-limiter */ \"./node_modules/@libp2p/utils/dist/src/rate-limiter.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr_resolvers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @multiformats/multiaddr/resolvers */ \"./node_modules/@multiformats/multiaddr/dist/src/resolvers/index.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../errors.js */ \"./node_modules/libp2p/dist/src/errors.js\");\n/* harmony import */ var _get_peer_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../get-peer.js */ \"./node_modules/libp2p/dist/src/get-peer.js\");\n/* harmony import */ var _auto_dial_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./auto-dial.js */ \"./node_modules/libp2p/dist/src/connection-manager/auto-dial.js\");\n/* harmony import */ var _connection_pruner_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./connection-pruner.js */ \"./node_modules/libp2p/dist/src/connection-manager/connection-pruner.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/libp2p/dist/src/connection-manager/constants.browser.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/libp2p/dist/src/connection-manager/constants.defaults.js\");\n/* harmony import */ var _dial_queue_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dial-queue.js */ \"./node_modules/libp2p/dist/src/connection-manager/dial-queue.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst DEFAULT_DIAL_PRIORITY = 50;\nconst defaultOptions = {\n    minConnections: _constants_js__WEBPACK_IMPORTED_MODULE_2__.MIN_CONNECTIONS,\n    maxConnections: _constants_js__WEBPACK_IMPORTED_MODULE_2__.MAX_CONNECTIONS,\n    inboundConnectionThreshold: _constants_js__WEBPACK_IMPORTED_MODULE_3__.INBOUND_CONNECTION_THRESHOLD,\n    maxIncomingPendingConnections: _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAX_INCOMING_PENDING_CONNECTIONS,\n    autoDialConcurrency: _constants_js__WEBPACK_IMPORTED_MODULE_3__.AUTO_DIAL_CONCURRENCY,\n    autoDialPriority: _constants_js__WEBPACK_IMPORTED_MODULE_3__.AUTO_DIAL_PRIORITY,\n    autoDialMaxQueueLength: _constants_js__WEBPACK_IMPORTED_MODULE_3__.AUTO_DIAL_MAX_QUEUE_LENGTH\n};\n/**\n * Responsible for managing known connections.\n */\nclass DefaultConnectionManager {\n    started;\n    connections;\n    allow;\n    deny;\n    maxIncomingPendingConnections;\n    incomingPendingConnections;\n    maxConnections;\n    dialQueue;\n    autoDial;\n    connectionPruner;\n    inboundConnectionRateLimiter;\n    peerStore;\n    metrics;\n    events;\n    log;\n    constructor(components, init = {}) {\n        this.maxConnections = init.maxConnections ?? defaultOptions.maxConnections;\n        const minConnections = init.minConnections ?? defaultOptions.minConnections;\n        if (this.maxConnections < minConnections) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError('Connection Manager maxConnections must be greater than minConnections', _errors_js__WEBPACK_IMPORTED_MODULE_5__.codes.ERR_INVALID_PARAMETERS);\n        }\n        /**\n         * Map of connections per peer\n         */\n        this.connections = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_6__.PeerMap();\n        this.started = false;\n        this.peerStore = components.peerStore;\n        this.metrics = components.metrics;\n        this.events = components.events;\n        this.log = components.logger.forComponent('libp2p:connection-manager');\n        this.onConnect = this.onConnect.bind(this);\n        this.onDisconnect = this.onDisconnect.bind(this);\n        this.events.addEventListener('connection:open', this.onConnect);\n        this.events.addEventListener('connection:close', this.onDisconnect);\n        // allow/deny lists\n        this.allow = (init.allow ?? []).map(ma => (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(ma));\n        this.deny = (init.deny ?? []).map(ma => (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(ma));\n        this.incomingPendingConnections = 0;\n        this.maxIncomingPendingConnections = init.maxIncomingPendingConnections ?? defaultOptions.maxIncomingPendingConnections;\n        // controls individual peers trying to dial us too quickly\n        this.inboundConnectionRateLimiter = new _libp2p_utils_rate_limiter__WEBPACK_IMPORTED_MODULE_7__.RateLimiter({\n            points: init.inboundConnectionThreshold ?? defaultOptions.inboundConnectionThreshold,\n            duration: 1\n        });\n        // controls what happens when we don't have enough connections\n        this.autoDial = new _auto_dial_js__WEBPACK_IMPORTED_MODULE_8__.AutoDial({\n            connectionManager: this,\n            peerStore: components.peerStore,\n            events: components.events,\n            logger: components.logger\n        }, {\n            minConnections,\n            autoDialConcurrency: init.autoDialConcurrency ?? defaultOptions.autoDialConcurrency,\n            autoDialPriority: init.autoDialPriority ?? defaultOptions.autoDialPriority,\n            maxQueueLength: init.autoDialMaxQueueLength ?? defaultOptions.autoDialMaxQueueLength\n        });\n        // controls what happens when we have too many connections\n        this.connectionPruner = new _connection_pruner_js__WEBPACK_IMPORTED_MODULE_9__.ConnectionPruner({\n            connectionManager: this,\n            peerStore: components.peerStore,\n            events: components.events,\n            logger: components.logger\n        }, {\n            maxConnections: this.maxConnections,\n            allow: this.allow\n        });\n        this.dialQueue = new _dial_queue_js__WEBPACK_IMPORTED_MODULE_10__.DialQueue(components, {\n            addressSorter: init.addressSorter ?? _libp2p_utils_address_sort__WEBPACK_IMPORTED_MODULE_11__.defaultAddressSort,\n            maxParallelDials: init.maxParallelDials ?? _constants_js__WEBPACK_IMPORTED_MODULE_2__.MAX_PARALLEL_DIALS,\n            maxDialQueueLength: init.maxDialQueueLength ?? _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAX_DIAL_QUEUE_LENGTH,\n            maxPeerAddrsToDial: init.maxPeerAddrsToDial ?? _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAX_PEER_ADDRS_TO_DIAL,\n            dialTimeout: init.dialTimeout ?? _constants_js__WEBPACK_IMPORTED_MODULE_3__.DIAL_TIMEOUT,\n            resolvers: init.resolvers ?? {\n                dnsaddr: _multiformats_multiaddr_resolvers__WEBPACK_IMPORTED_MODULE_1__.dnsaddrResolver\n            },\n            connections: this.connections\n        });\n    }\n    isStarted() {\n        return this.started;\n    }\n    /**\n     * Starts the Connection Manager. If Metrics are not enabled on libp2p\n     * only event loop and connection limits will be monitored.\n     */\n    async start() {\n        // track inbound/outbound connections\n        this.metrics?.registerMetricGroup('libp2p_connection_manager_connections', {\n            calculate: () => {\n                const metric = {\n                    inbound: 0,\n                    outbound: 0\n                };\n                for (const conns of this.connections.values()) {\n                    for (const conn of conns) {\n                        if (conn.direction === 'inbound') {\n                            metric.inbound++;\n                        }\n                        else {\n                            metric.outbound++;\n                        }\n                    }\n                }\n                return metric;\n            }\n        });\n        // track total number of streams per protocol\n        this.metrics?.registerMetricGroup('libp2p_protocol_streams_total', {\n            label: 'protocol',\n            calculate: () => {\n                const metric = {};\n                for (const conns of this.connections.values()) {\n                    for (const conn of conns) {\n                        for (const stream of conn.streams) {\n                            const key = `${stream.direction} ${stream.protocol ?? 'unnegotiated'}`;\n                            metric[key] = (metric[key] ?? 0) + 1;\n                        }\n                    }\n                }\n                return metric;\n            }\n        });\n        // track 90th percentile of streams per protocol\n        this.metrics?.registerMetricGroup('libp2p_connection_manager_protocol_streams_per_connection_90th_percentile', {\n            label: 'protocol',\n            calculate: () => {\n                const allStreams = {};\n                for (const conns of this.connections.values()) {\n                    for (const conn of conns) {\n                        const streams = {};\n                        for (const stream of conn.streams) {\n                            const key = `${stream.direction} ${stream.protocol ?? 'unnegotiated'}`;\n                            streams[key] = (streams[key] ?? 0) + 1;\n                        }\n                        for (const [protocol, count] of Object.entries(streams)) {\n                            allStreams[protocol] = allStreams[protocol] ?? [];\n                            allStreams[protocol].push(count);\n                        }\n                    }\n                }\n                const metric = {};\n                for (let [protocol, counts] of Object.entries(allStreams)) {\n                    counts = counts.sort((a, b) => a - b);\n                    const index = Math.floor(counts.length * 0.9);\n                    metric[protocol] = counts[index];\n                }\n                return metric;\n            }\n        });\n        this.dialQueue.start();\n        this.autoDial.start();\n        this.started = true;\n        this.log('started');\n    }\n    async afterStart() {\n        // re-connect to any peers with the KEEP_ALIVE tag\n        void Promise.resolve()\n            .then(async () => {\n            const keepAlivePeers = await this.peerStore.all({\n                filters: [(peer) => {\n                        return peer.tags.has(_libp2p_interface__WEBPACK_IMPORTED_MODULE_12__.KEEP_ALIVE);\n                    }]\n            });\n            await Promise.all(keepAlivePeers.map(async (peer) => {\n                await this.openConnection(peer.id)\n                    .catch(err => {\n                    this.log.error(err);\n                });\n            }));\n        })\n            .catch(err => {\n            this.log.error(err);\n        });\n        this.autoDial.afterStart();\n    }\n    /**\n     * Stops the Connection Manager\n     */\n    async stop() {\n        this.dialQueue.stop();\n        this.autoDial.stop();\n        // Close all connections we're tracking\n        const tasks = [];\n        for (const connectionList of this.connections.values()) {\n            for (const connection of connectionList) {\n                tasks.push((async () => {\n                    try {\n                        await connection.close();\n                    }\n                    catch (err) {\n                        this.log.error(err);\n                    }\n                })());\n            }\n        }\n        this.log('closing %d connections', tasks.length);\n        await Promise.all(tasks);\n        this.connections.clear();\n        this.log('stopped');\n    }\n    onConnect(evt) {\n        void this._onConnect(evt).catch(err => {\n            this.log.error(err);\n        });\n    }\n    /**\n     * Tracks the incoming connection and check the connection limit\n     */\n    async _onConnect(evt) {\n        const { detail: connection } = evt;\n        if (!this.started) {\n            // This can happen when we are in the process of shutting down the node\n            await connection.close();\n            return;\n        }\n        const peerId = connection.remotePeer;\n        const storedConns = this.connections.get(peerId);\n        let isNewPeer = false;\n        if (storedConns != null) {\n            storedConns.push(connection);\n        }\n        else {\n            isNewPeer = true;\n            this.connections.set(peerId, [connection]);\n        }\n        // only need to store RSA public keys, all other types are embedded in the peer id\n        if (peerId.publicKey != null && peerId.type === 'RSA') {\n            await this.peerStore.patch(peerId, {\n                publicKey: peerId.publicKey\n            });\n        }\n        if (isNewPeer) {\n            this.events.safeDispatchEvent('peer:connect', { detail: connection.remotePeer });\n        }\n    }\n    /**\n     * Removes the connection from tracking\n     */\n    onDisconnect(evt) {\n        const { detail: connection } = evt;\n        if (!this.started) {\n            // This can happen when we are in the process of shutting down the node\n            return;\n        }\n        const peerId = connection.remotePeer;\n        let storedConn = this.connections.get(peerId);\n        if (storedConn != null && storedConn.length > 1) {\n            storedConn = storedConn.filter((conn) => conn.id !== connection.id);\n            this.connections.set(peerId, storedConn);\n        }\n        else if (storedConn != null) {\n            this.connections.delete(peerId);\n            this.events.safeDispatchEvent('peer:disconnect', { detail: connection.remotePeer });\n        }\n    }\n    getConnections(peerId) {\n        if (peerId != null) {\n            return this.connections.get(peerId) ?? [];\n        }\n        let conns = [];\n        for (const c of this.connections.values()) {\n            conns = conns.concat(c);\n        }\n        return conns;\n    }\n    getConnectionsMap() {\n        return this.connections;\n    }\n    async openConnection(peerIdOrMultiaddr, options = {}) {\n        if (!this.isStarted()) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CodeError('Not started', _errors_js__WEBPACK_IMPORTED_MODULE_5__.codes.ERR_NODE_NOT_STARTED);\n        }\n        options.signal?.throwIfAborted();\n        const { peerId } = (0,_get_peer_js__WEBPACK_IMPORTED_MODULE_13__.getPeerAddress)(peerIdOrMultiaddr);\n        if (peerId != null && options.force !== true) {\n            this.log('dial %p', peerId);\n            const existingConnection = this.getConnections(peerId)\n                .find(conn => !conn.transient);\n            if (existingConnection != null) {\n                this.log('had an existing non-transient connection to %p', peerId);\n                return existingConnection;\n            }\n        }\n        const connection = await this.dialQueue.dial(peerIdOrMultiaddr, {\n            ...options,\n            priority: options.priority ?? DEFAULT_DIAL_PRIORITY\n        });\n        let peerConnections = this.connections.get(connection.remotePeer);\n        if (peerConnections == null) {\n            peerConnections = [];\n            this.connections.set(connection.remotePeer, peerConnections);\n        }\n        // we get notified of connections via the Upgrader emitting \"connection\"\n        // events, double check we aren't already tracking this connection before\n        // storing it\n        let trackedConnection = false;\n        for (const conn of peerConnections) {\n            if (conn.id === connection.id) {\n                trackedConnection = true;\n            }\n        }\n        if (!trackedConnection) {\n            peerConnections.push(connection);\n        }\n        return connection;\n    }\n    async closeConnections(peerId, options = {}) {\n        const connections = this.connections.get(peerId) ?? [];\n        await Promise.all(connections.map(async (connection) => {\n            try {\n                await connection.close(options);\n            }\n            catch (err) {\n                connection.abort(err);\n            }\n        }));\n    }\n    async acceptIncomingConnection(maConn) {\n        // check deny list\n        const denyConnection = this.deny.some(ma => {\n            return maConn.remoteAddr.toString().startsWith(ma.toString());\n        });\n        if (denyConnection) {\n            this.log('connection from %a refused - connection remote address was in deny list', maConn.remoteAddr);\n            return false;\n        }\n        // check allow list\n        const allowConnection = this.allow.some(ma => {\n            return maConn.remoteAddr.toString().startsWith(ma.toString());\n        });\n        if (allowConnection) {\n            this.incomingPendingConnections++;\n            return true;\n        }\n        // check pending connections\n        if (this.incomingPendingConnections === this.maxIncomingPendingConnections) {\n            this.log('connection from %a refused - incomingPendingConnections exceeded by host', maConn.remoteAddr);\n            return false;\n        }\n        if (maConn.remoteAddr.isThinWaistAddress()) {\n            const host = maConn.remoteAddr.nodeAddress().address;\n            try {\n                await this.inboundConnectionRateLimiter.consume(host, 1);\n            }\n            catch {\n                this.log('connection from %a refused - inboundConnectionThreshold exceeded by host %s', maConn.remoteAddr, host);\n                return false;\n            }\n        }\n        if (this.getConnections().length < this.maxConnections) {\n            this.incomingPendingConnections++;\n            return true;\n        }\n        this.log('connection from %a refused - maxConnections exceeded', maConn.remoteAddr);\n        return false;\n    }\n    afterUpgradeInbound() {\n        this.incomingPendingConnections--;\n    }\n    getDialQueue() {\n        const statusMap = {\n            queued: 'queued',\n            running: 'active',\n            errored: 'error',\n            complete: 'success'\n        };\n        return this.dialQueue.queue.queue.map(job => {\n            return {\n                id: job.id,\n                status: statusMap[job.status],\n                peerId: job.options.peerId,\n                multiaddrs: [...job.options.multiaddrs].map(ma => (0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.multiaddr)(ma))\n            };\n        });\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/connection-manager/index.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/connection-manager/utils.js":
/*!******************************************************************!*\
  !*** ./node_modules/libp2p/dist/src/connection-manager/utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveMultiaddrs: () => (/* binding */ resolveMultiaddrs)\n/* harmony export */ });\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n\n/**\n * Recursively resolve DNSADDR multiaddrs\n */\nasync function resolveMultiaddrs(ma, options) {\n    // check multiaddr resolvers\n    let resolvable = false;\n    for (const key of _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.resolvers.keys()) {\n        resolvable = ma.protoNames().includes(key);\n        if (resolvable) {\n            break;\n        }\n    }\n    // return multiaddr if it is not resolvable\n    if (!resolvable) {\n        return [ma];\n    }\n    const output = await ma.resolve(options);\n    options.log('resolved %s to', ma, output.map(ma => ma.toString()));\n    return output;\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/connection-manager/utils.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/connection/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/libp2p/dist/src/connection/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConnectionImpl: () => (/* binding */ ConnectionImpl),\n/* harmony export */   createConnection: () => (/* binding */ createConnection)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/connection/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/events.js\");\n\nconst CLOSE_TIMEOUT = 500;\n/**\n * An implementation of the js-libp2p connection.\n * Any libp2p transport should use an upgrader to return this connection.\n */\nclass ConnectionImpl {\n    /**\n     * Connection identifier.\n     */\n    id;\n    /**\n     * Observed multiaddr of the remote peer\n     */\n    remoteAddr;\n    /**\n     * Remote peer id\n     */\n    remotePeer;\n    direction;\n    timeline;\n    multiplexer;\n    encryption;\n    status;\n    transient;\n    log;\n    /**\n     * User provided tags\n     *\n     */\n    tags;\n    /**\n     * Reference to the new stream function of the multiplexer\n     */\n    _newStream;\n    /**\n     * Reference to the close function of the raw connection\n     */\n    _close;\n    _abort;\n    /**\n     * Reference to the getStreams function of the muxer\n     */\n    _getStreams;\n    /**\n     * An implementation of the js-libp2p connection.\n     * Any libp2p transport should use an upgrader to return this connection.\n     */\n    constructor(init) {\n        const { remoteAddr, remotePeer, newStream, close, abort, getStreams } = init;\n        this.id = `${(parseInt(String(Math.random() * 1e9))).toString(36)}${Date.now()}`;\n        this.remoteAddr = remoteAddr;\n        this.remotePeer = remotePeer;\n        this.direction = init.direction;\n        this.status = 'open';\n        this.timeline = init.timeline;\n        this.multiplexer = init.multiplexer;\n        this.encryption = init.encryption;\n        this.transient = init.transient ?? false;\n        this.log = init.logger.forComponent(`libp2p:connection:${this.direction}:${this.id}`);\n        if (this.remoteAddr.getPeerId() == null) {\n            this.remoteAddr = this.remoteAddr.encapsulate(`/p2p/${this.remotePeer}`);\n        }\n        this._newStream = newStream;\n        this._close = close;\n        this._abort = abort;\n        this._getStreams = getStreams;\n        this.tags = [];\n    }\n    [Symbol.toStringTag] = 'Connection';\n    [_libp2p_interface__WEBPACK_IMPORTED_MODULE_0__.connectionSymbol] = true;\n    /**\n     * Get all the streams of the muxer\n     */\n    get streams() {\n        return this._getStreams();\n    }\n    /**\n     * Create a new stream from this connection\n     */\n    async newStream(protocols, options) {\n        if (this.status === 'closing') {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('the connection is being closed', 'ERR_CONNECTION_BEING_CLOSED');\n        }\n        if (this.status === 'closed') {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('the connection is closed', 'ERR_CONNECTION_CLOSED');\n        }\n        if (!Array.isArray(protocols)) {\n            protocols = [protocols];\n        }\n        if (this.transient && options?.runOnTransientConnection !== true) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('Cannot open protocol stream on transient connection', 'ERR_TRANSIENT_CONNECTION');\n        }\n        const stream = await this._newStream(protocols, options);\n        stream.direction = 'outbound';\n        return stream;\n    }\n    /**\n     * Close the connection\n     */\n    async close(options = {}) {\n        if (this.status === 'closed' || this.status === 'closing') {\n            return;\n        }\n        this.log('closing connection to %a', this.remoteAddr);\n        this.status = 'closing';\n        if (options.signal == null) {\n            const signal = AbortSignal.timeout(CLOSE_TIMEOUT);\n            (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.setMaxListeners)(Infinity, signal);\n            options = {\n                ...options,\n                signal\n            };\n        }\n        try {\n            this.log.trace('closing all streams');\n            // close all streams gracefully - this can throw if we're not multiplexed\n            await Promise.all(this.streams.map(async (s) => s.close(options)));\n            this.log.trace('closing underlying transport');\n            // close raw connection\n            await this._close(options);\n            this.log.trace('updating timeline with close time');\n            this.status = 'closed';\n            this.timeline.close = Date.now();\n        }\n        catch (err) {\n            this.log.error('error encountered during graceful close of connection to %a', this.remoteAddr, err);\n            this.abort(err);\n        }\n    }\n    abort(err) {\n        this.log.error('aborting connection to %a due to error', this.remoteAddr, err);\n        this.status = 'closing';\n        this.streams.forEach(s => { s.abort(err); });\n        this.log.error('all streams aborted', this.streams.length);\n        // Abort raw connection\n        this._abort(err);\n        this.timeline.close = Date.now();\n        this.status = 'closed';\n    }\n}\nfunction createConnection(init) {\n    return new ConnectionImpl(init);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/connection/index.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/content-routing.js":
/*!*********************************************************!*\
  !*** ./node_modules/libp2p/dist/src/content-routing.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CompoundContentRouting: () => (/* binding */ CompoundContentRouting)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/peer-collections */ \"./node_modules/@libp2p/peer-collections/dist/src/set.js\");\n/* harmony import */ var it_merge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-merge */ \"./node_modules/it-merge/dist/src/index.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/libp2p/dist/src/errors.js\");\n\n\n\n\nclass CompoundContentRouting {\n    routers;\n    started;\n    components;\n    constructor(components, init) {\n        this.routers = init.routers ?? [];\n        this.started = false;\n        this.components = components;\n    }\n    isStarted() {\n        return this.started;\n    }\n    async start() {\n        this.started = true;\n    }\n    async stop() {\n        this.started = false;\n    }\n    /**\n     * Iterates over all content routers in parallel to find providers of the given key\n     */\n    async *findProviders(key, options = {}) {\n        if (this.routers.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('No content routers available', _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        const self = this;\n        const seen = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_3__.PeerSet();\n        for await (const peer of (0,it_merge__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(...self.routers.map(router => router.findProviders(key, options)))) {\n            // the peer was yielded by a content router without multiaddrs and we\n            // failed to load them\n            if (peer == null) {\n                continue;\n            }\n            // store the addresses for the peer if found\n            if (peer.multiaddrs.length > 0) {\n                await this.components.peerStore.merge(peer.id, {\n                    multiaddrs: peer.multiaddrs\n                });\n            }\n            // deduplicate peers\n            if (seen.has(peer.id)) {\n                continue;\n            }\n            seen.add(peer.id);\n            yield peer;\n        }\n    }\n    /**\n     * Iterates over all content routers in parallel to notify it is\n     * a provider of the given key\n     */\n    async provide(key, options = {}) {\n        if (this.routers.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('No content routers available', _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        await Promise.all(this.routers.map(async (router) => {\n            await router.provide(key, options);\n        }));\n    }\n    /**\n     * Store the given key/value pair in the available content routings\n     */\n    async put(key, value, options) {\n        if (!this.isStarted()) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(_errors_js__WEBPACK_IMPORTED_MODULE_2__.messages.NOT_STARTED_YET, _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_NODE_NOT_STARTED);\n        }\n        await Promise.all(this.routers.map(async (router) => {\n            await router.put(key, value, options);\n        }));\n    }\n    /**\n     * Get the value to the given key.\n     * Times out after 1 minute by default.\n     */\n    async get(key, options) {\n        if (!this.isStarted()) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(_errors_js__WEBPACK_IMPORTED_MODULE_2__.messages.NOT_STARTED_YET, _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_NODE_NOT_STARTED);\n        }\n        return Promise.any(this.routers.map(async (router) => {\n            return router.get(key, options);\n        }));\n    }\n}\n//# sourceMappingURL=content-routing.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/content-routing.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/errors.js":
/*!************************************************!*\
  !*** ./node_modules/libp2p/dist/src/errors.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codes: () => (/* binding */ codes),\n/* harmony export */   messages: () => (/* binding */ messages)\n/* harmony export */ });\nvar messages;\n(function (messages) {\n    messages[\"NOT_STARTED_YET\"] = \"The libp2p node is not started yet\";\n    messages[\"ERR_PROTECTOR_REQUIRED\"] = \"Private network is enforced, but no protector was provided\";\n    messages[\"NOT_FOUND\"] = \"Not found\";\n})(messages || (messages = {}));\nvar codes;\n(function (codes) {\n    codes[\"ERR_PROTECTOR_REQUIRED\"] = \"ERR_PROTECTOR_REQUIRED\";\n    codes[\"ERR_PEER_DIAL_INTERCEPTED\"] = \"ERR_PEER_DIAL_INTERCEPTED\";\n    codes[\"ERR_CONNECTION_INTERCEPTED\"] = \"ERR_CONNECTION_INTERCEPTED\";\n    codes[\"ERR_INVALID_PROTOCOLS_FOR_STREAM\"] = \"ERR_INVALID_PROTOCOLS_FOR_STREAM\";\n    codes[\"ERR_CONNECTION_ENDED\"] = \"ERR_CONNECTION_ENDED\";\n    codes[\"ERR_CONNECTION_FAILED\"] = \"ERR_CONNECTION_FAILED\";\n    codes[\"ERR_NODE_NOT_STARTED\"] = \"ERR_NODE_NOT_STARTED\";\n    codes[\"ERR_ALREADY_ABORTED\"] = \"ERR_ALREADY_ABORTED\";\n    codes[\"ERR_TOO_MANY_ADDRESSES\"] = \"ERR_TOO_MANY_ADDRESSES\";\n    codes[\"ERR_NO_VALID_ADDRESSES\"] = \"ERR_NO_VALID_ADDRESSES\";\n    codes[\"ERR_RELAYED_DIAL\"] = \"ERR_RELAYED_DIAL\";\n    codes[\"ERR_DIALED_SELF\"] = \"ERR_DIALED_SELF\";\n    codes[\"ERR_DISCOVERED_SELF\"] = \"ERR_DISCOVERED_SELF\";\n    codes[\"ERR_DUPLICATE_TRANSPORT\"] = \"ERR_DUPLICATE_TRANSPORT\";\n    codes[\"ERR_ENCRYPTION_FAILED\"] = \"ERR_ENCRYPTION_FAILED\";\n    codes[\"ERR_HOP_REQUEST_FAILED\"] = \"ERR_HOP_REQUEST_FAILED\";\n    codes[\"ERR_INVALID_KEY\"] = \"ERR_INVALID_KEY\";\n    codes[\"ERR_INVALID_MESSAGE\"] = \"ERR_INVALID_MESSAGE\";\n    codes[\"ERR_INVALID_PARAMETERS\"] = \"ERR_INVALID_PARAMETERS\";\n    codes[\"ERR_INVALID_PEER\"] = \"ERR_INVALID_PEER\";\n    codes[\"ERR_MUXER_UNAVAILABLE\"] = \"ERR_MUXER_UNAVAILABLE\";\n    codes[\"ERR_NOT_FOUND\"] = \"ERR_NOT_FOUND\";\n    codes[\"ERR_TRANSPORT_UNAVAILABLE\"] = \"ERR_TRANSPORT_UNAVAILABLE\";\n    codes[\"ERR_TRANSPORT_DIAL_FAILED\"] = \"ERR_TRANSPORT_DIAL_FAILED\";\n    codes[\"ERR_UNSUPPORTED_PROTOCOL\"] = \"ERR_UNSUPPORTED_PROTOCOL\";\n    codes[\"ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED\"] = \"ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED\";\n    codes[\"ERR_INVALID_MULTIADDR\"] = \"ERR_INVALID_MULTIADDR\";\n    codes[\"ERR_SIGNATURE_NOT_VALID\"] = \"ERR_SIGNATURE_NOT_VALID\";\n    codes[\"ERR_FIND_SELF\"] = \"ERR_FIND_SELF\";\n    codes[\"ERR_NO_ROUTERS_AVAILABLE\"] = \"ERR_NO_ROUTERS_AVAILABLE\";\n    codes[\"ERR_CONNECTION_NOT_MULTIPLEXED\"] = \"ERR_CONNECTION_NOT_MULTIPLEXED\";\n    codes[\"ERR_NO_DIAL_TOKENS\"] = \"ERR_NO_DIAL_TOKENS\";\n    codes[\"ERR_INVALID_CMS\"] = \"ERR_INVALID_CMS\";\n    codes[\"ERR_MISSING_KEYS\"] = \"ERR_MISSING_KEYS\";\n    codes[\"ERR_NO_KEY\"] = \"ERR_NO_KEY\";\n    codes[\"ERR_INVALID_KEY_NAME\"] = \"ERR_INVALID_KEY_NAME\";\n    codes[\"ERR_INVALID_KEY_TYPE\"] = \"ERR_INVALID_KEY_TYPE\";\n    codes[\"ERR_KEY_ALREADY_EXISTS\"] = \"ERR_KEY_ALREADY_EXISTS\";\n    codes[\"ERR_INVALID_KEY_SIZE\"] = \"ERR_INVALID_KEY_SIZE\";\n    codes[\"ERR_KEY_NOT_FOUND\"] = \"ERR_KEY_NOT_FOUND\";\n    codes[\"ERR_OLD_KEY_NAME_INVALID\"] = \"ERR_OLD_KEY_NAME_INVALID\";\n    codes[\"ERR_NEW_KEY_NAME_INVALID\"] = \"ERR_NEW_KEY_NAME_INVALID\";\n    codes[\"ERR_PASSWORD_REQUIRED\"] = \"ERR_PASSWORD_REQUIRED\";\n    codes[\"ERR_PEM_REQUIRED\"] = \"ERR_PEM_REQUIRED\";\n    codes[\"ERR_CANNOT_READ_KEY\"] = \"ERR_CANNOT_READ_KEY\";\n    codes[\"ERR_MISSING_PRIVATE_KEY\"] = \"ERR_MISSING_PRIVATE_KEY\";\n    codes[\"ERR_MISSING_PUBLIC_KEY\"] = \"ERR_MISSING_PUBLIC_KEY\";\n    codes[\"ERR_INVALID_OLD_PASS_TYPE\"] = \"ERR_INVALID_OLD_PASS_TYPE\";\n    codes[\"ERR_INVALID_NEW_PASS_TYPE\"] = \"ERR_INVALID_NEW_PASS_TYPE\";\n    codes[\"ERR_INVALID_PASS_LENGTH\"] = \"ERR_INVALID_PASS_LENGTH\";\n    codes[\"ERR_NOT_IMPLEMENTED\"] = \"ERR_NOT_IMPLEMENTED\";\n    codes[\"ERR_WRONG_PING_ACK\"] = \"ERR_WRONG_PING_ACK\";\n    codes[\"ERR_INVALID_RECORD\"] = \"ERR_INVALID_RECORD\";\n    codes[\"ERR_ALREADY_SUCCEEDED\"] = \"ERR_ALREADY_SUCCEEDED\";\n    codes[\"ERR_NO_HANDLER_FOR_PROTOCOL\"] = \"ERR_NO_HANDLER_FOR_PROTOCOL\";\n    codes[\"ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS\"] = \"ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS\";\n    codes[\"ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS\"] = \"ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS\";\n    codes[\"ERR_CONNECTION_DENIED\"] = \"ERR_CONNECTION_DENIED\";\n    codes[\"ERR_TRANSFER_LIMIT_EXCEEDED\"] = \"ERR_TRANSFER_LIMIT_EXCEEDED\";\n})(codes || (codes = {}));\n//# sourceMappingURL=errors.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/errors.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/get-peer.js":
/*!**************************************************!*\
  !*** ./node_modules/libp2p/dist/src/get-peer.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPeerAddress: () => (/* binding */ getPeerAddress)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/peer-id/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/libp2p/dist/src/errors.js\");\n\n\n\n\n/**\n * Extracts a PeerId and/or multiaddr from the passed PeerId or Multiaddr or an array of Multiaddrs\n */\nfunction getPeerAddress(peer) {\n    if ((0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.isPeerId)(peer)) {\n        return { peerId: peer, multiaddrs: [] };\n    }\n    if (!Array.isArray(peer)) {\n        peer = [peer];\n    }\n    let peerId;\n    if (peer.length > 0) {\n        const peerIdStr = peer[0].getPeerId();\n        peerId = peerIdStr == null ? undefined : (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_2__.peerIdFromString)(peerIdStr);\n        // ensure PeerId is either not set or is consistent\n        peer.forEach(ma => {\n            if (!(0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.isMultiaddr)(ma)) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Invalid Multiaddr', _errors_js__WEBPACK_IMPORTED_MODULE_4__.codes.ERR_INVALID_MULTIADDR);\n            }\n            const maPeerIdStr = ma.getPeerId();\n            if (maPeerIdStr == null) {\n                if (peerId != null) {\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Multiaddrs must all have the same peer id or have no peer id', _errors_js__WEBPACK_IMPORTED_MODULE_4__.codes.ERR_INVALID_PARAMETERS);\n                }\n            }\n            else {\n                const maPeerId = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_2__.peerIdFromString)(maPeerIdStr);\n                if (peerId == null || !peerId.equals(maPeerId)) {\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Multiaddrs must all have the same peer id or have no peer id', _errors_js__WEBPACK_IMPORTED_MODULE_4__.codes.ERR_INVALID_PARAMETERS);\n                }\n            }\n        });\n    }\n    return {\n        peerId,\n        multiaddrs: peer\n    };\n}\n//# sourceMappingURL=get-peer.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/get-peer.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/index.js":
/*!***********************************************!*\
  !*** ./node_modules/libp2p/dist/src/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLibp2p: () => (/* binding */ createLibp2p)\n/* harmony export */ });\n/* harmony import */ var _libp2p_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libp2p.js */ \"./node_modules/libp2p/dist/src/libp2p.js\");\n/**\n * @packageDocumentation\n *\n * Use the `createLibp2p` function to create a libp2p node.\n *\n * @example\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n *\n * const node = await createLibp2p({\n *   // ...other options\n * })\n * ```\n */\n\n/**\n * Returns a new instance of the Libp2p interface, generating a new PeerId\n * if one is not passed as part of the options.\n *\n * The node will be started unless `start: false` is passed as an option.\n *\n * @example\n *\n * ```TypeScript\n * import { createLibp2p } from 'libp2p'\n * import { tcp } from '@libp2p/tcp'\n * import { mplex } from '@libp2p/mplex'\n * import { noise } from '@chainsafe/libp2p-noise'\n * import { yamux } from '@chainsafe/libp2p-yamux'\n *\n * // specify options\n * const options = {\n *   transports: [tcp()],\n *   streamMuxers: [yamux(), mplex()],\n *   connectionEncryption: [noise()]\n * }\n *\n * // create libp2p\n * const libp2p = await createLibp2p(options)\n * ```\n */\nasync function createLibp2p(options = {}) {\n    const node = await (0,_libp2p_js__WEBPACK_IMPORTED_MODULE_0__.createLibp2pNode)(options);\n    if (options.start !== false) {\n        await node.start();\n    }\n    return node;\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/libp2p.js":
/*!************************************************!*\
  !*** ./node_modules/libp2p/dist/src/libp2p.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Libp2pNode: () => (/* binding */ Libp2pNode),\n/* harmony export */   createLibp2pNode: () => (/* binding */ createLibp2pNode)\n/* harmony export */ });\n/* harmony import */ var _libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @libp2p/crypto/keys */ \"./node_modules/@libp2p/crypto/dist/src/keys/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/event-target.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/events.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/content-routing/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/peer-routing/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/peer-discovery/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/logger */ \"./node_modules/@libp2p/logger/dist/src/index.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @libp2p/peer-collections */ \"./node_modules/@libp2p/peer-collections/dist/src/set.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _libp2p_peer_id_factory__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @libp2p/peer-id-factory */ \"./node_modules/@libp2p/peer-id-factory/dist/src/index.js\");\n/* harmony import */ var _libp2p_peer_store__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @libp2p/peer-store */ \"./node_modules/@libp2p/peer-store/dist/src/index.js\");\n/* harmony import */ var _multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @multiformats/multiaddr */ \"./node_modules/@multiformats/multiaddr/dist/src/index.js\");\n/* harmony import */ var datastore_core_memory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! datastore-core/memory */ \"./node_modules/datastore-core/dist/src/memory.js\");\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/concat */ \"./node_modules/uint8arrays/dist/src/concat.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uint8arrays/from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var _address_manager_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./address-manager/index.js */ \"./node_modules/libp2p/dist/src/address-manager/index.js\");\n/* harmony import */ var _components_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components.js */ \"./node_modules/libp2p/dist/src/components.js\");\n/* harmony import */ var _config_connection_gater_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./config/connection-gater.js */ \"./node_modules/libp2p/dist/src/config/connection-gater.browser.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./config.js */ \"./node_modules/libp2p/dist/src/config.js\");\n/* harmony import */ var _connection_manager_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./connection-manager/index.js */ \"./node_modules/libp2p/dist/src/connection-manager/index.js\");\n/* harmony import */ var _content_routing_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./content-routing.js */ \"./node_modules/libp2p/dist/src/content-routing.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/libp2p/dist/src/errors.js\");\n/* harmony import */ var _peer_routing_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./peer-routing.js */ \"./node_modules/libp2p/dist/src/peer-routing.js\");\n/* harmony import */ var _registrar_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./registrar.js */ \"./node_modules/libp2p/dist/src/registrar.js\");\n/* harmony import */ var _transport_manager_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./transport-manager.js */ \"./node_modules/libp2p/dist/src/transport-manager.js\");\n/* harmony import */ var _upgrader_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./upgrader.js */ \"./node_modules/libp2p/dist/src/upgrader.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./version.js */ \"./node_modules/libp2p/dist/src/version.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Libp2pNode extends _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.TypedEventEmitter {\n    peerId;\n    peerStore;\n    contentRouting;\n    peerRouting;\n    metrics;\n    services;\n    logger;\n    status;\n    components;\n    log;\n    constructor(init) {\n        super();\n        this.status = 'stopped';\n        // event bus - components can listen to this emitter to be notified of system events\n        // and also cause them to be emitted\n        const events = new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.TypedEventEmitter();\n        const originalDispatch = events.dispatchEvent.bind(events);\n        events.dispatchEvent = (evt) => {\n            const internalResult = originalDispatch(evt);\n            const externalResult = this.dispatchEvent(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.CustomEvent(evt.type, { detail: evt.detail }));\n            return internalResult || externalResult;\n        };\n        // This emitter gets listened to a lot\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_5__.setMaxListeners)(Infinity, events);\n        this.peerId = init.peerId;\n        this.logger = init.logger ?? (0,_libp2p_logger__WEBPACK_IMPORTED_MODULE_6__.defaultLogger)();\n        this.log = this.logger.forComponent('libp2p');\n        // @ts-expect-error {} may not be of type T\n        this.services = {};\n        const components = this.components = (0,_components_js__WEBPACK_IMPORTED_MODULE_7__.defaultComponents)({\n            peerId: init.peerId,\n            privateKey: init.privateKey,\n            nodeInfo: init.nodeInfo ?? {\n                name: _version_js__WEBPACK_IMPORTED_MODULE_8__.name,\n                version: _version_js__WEBPACK_IMPORTED_MODULE_8__.version\n            },\n            logger: this.logger,\n            events,\n            datastore: init.datastore ?? new datastore_core_memory__WEBPACK_IMPORTED_MODULE_1__.MemoryDatastore(),\n            connectionGater: (0,_config_connection_gater_js__WEBPACK_IMPORTED_MODULE_9__.connectionGater)(init.connectionGater),\n            dns: init.dns\n        });\n        this.peerStore = this.configureComponent('peerStore', new _libp2p_peer_store__WEBPACK_IMPORTED_MODULE_10__.PersistentPeerStore(components, {\n            addressFilter: this.components.connectionGater.filterMultiaddrForPeer,\n            ...init.peerStore\n        }));\n        // Create Metrics\n        if (init.metrics != null) {\n            this.metrics = this.configureComponent('metrics', init.metrics(this.components));\n        }\n        components.events.addEventListener('peer:update', evt => {\n            // if there was no peer previously in the peer store this is a new peer\n            if (evt.detail.previous == null) {\n                const peerInfo = {\n                    id: evt.detail.peer.id,\n                    multiaddrs: evt.detail.peer.addresses.map(a => a.multiaddr)\n                };\n                components.events.safeDispatchEvent('peer:discovery', { detail: peerInfo });\n            }\n        });\n        // Set up connection protector if configured\n        if (init.connectionProtector != null) {\n            this.configureComponent('connectionProtector', init.connectionProtector(components));\n        }\n        // Set up the Upgrader\n        this.components.upgrader = new _upgrader_js__WEBPACK_IMPORTED_MODULE_11__.DefaultUpgrader(this.components, {\n            connectionEncryption: (init.connectionEncryption ?? []).map((fn, index) => this.configureComponent(`connection-encryption-${index}`, fn(this.components))),\n            muxers: (init.streamMuxers ?? []).map((fn, index) => this.configureComponent(`stream-muxers-${index}`, fn(this.components))),\n            inboundUpgradeTimeout: init.connectionManager.inboundUpgradeTimeout\n        });\n        // Setup the transport manager\n        this.configureComponent('transportManager', new _transport_manager_js__WEBPACK_IMPORTED_MODULE_12__.DefaultTransportManager(this.components, init.transportManager));\n        // Create the Connection Manager\n        this.configureComponent('connectionManager', new _connection_manager_index_js__WEBPACK_IMPORTED_MODULE_13__.DefaultConnectionManager(this.components, init.connectionManager));\n        // Create the Registrar\n        this.configureComponent('registrar', new _registrar_js__WEBPACK_IMPORTED_MODULE_14__.DefaultRegistrar(this.components));\n        // Addresses {listen, announce, noAnnounce}\n        this.configureComponent('addressManager', new _address_manager_index_js__WEBPACK_IMPORTED_MODULE_15__.DefaultAddressManager(this.components, init.addresses));\n        // Peer routers\n        const peerRouters = (init.peerRouters ?? []).map((fn, index) => this.configureComponent(`peer-router-${index}`, fn(this.components)));\n        this.peerRouting = this.components.peerRouting = this.configureComponent('peerRouting', new _peer_routing_js__WEBPACK_IMPORTED_MODULE_16__.DefaultPeerRouting(this.components, {\n            routers: peerRouters\n        }));\n        // Content routers\n        const contentRouters = (init.contentRouters ?? []).map((fn, index) => this.configureComponent(`content-router-${index}`, fn(this.components)));\n        this.contentRouting = this.components.contentRouting = this.configureComponent('contentRouting', new _content_routing_js__WEBPACK_IMPORTED_MODULE_17__.CompoundContentRouting(this.components, {\n            routers: contentRouters\n        }));\n        (init.peerDiscovery ?? []).forEach((fn, index) => {\n            const service = this.configureComponent(`peer-discovery-${index}`, fn(this.components));\n            service.addEventListener('peer', (evt) => {\n                this.#onDiscoveryPeer(evt);\n            });\n        });\n        // Transport modules\n        init.transports?.forEach((fn, index) => {\n            this.components.transportManager.add(this.configureComponent(`transport-${index}`, fn(this.components)));\n        });\n        // User defined modules\n        if (init.services != null) {\n            for (const name of Object.keys(init.services)) {\n                const createService = init.services[name];\n                const service = createService(this.components);\n                if (service == null) {\n                    this.log.error('service factory %s returned null or undefined instance', name);\n                    continue;\n                }\n                this.services[name] = service;\n                this.configureComponent(name, service);\n                if (service[_libp2p_interface__WEBPACK_IMPORTED_MODULE_18__.contentRoutingSymbol] != null) {\n                    this.log('registering service %s for content routing', name);\n                    contentRouters.push(service[_libp2p_interface__WEBPACK_IMPORTED_MODULE_18__.contentRoutingSymbol]);\n                }\n                if (service[_libp2p_interface__WEBPACK_IMPORTED_MODULE_19__.peerRoutingSymbol] != null) {\n                    this.log('registering service %s for peer routing', name);\n                    peerRouters.push(service[_libp2p_interface__WEBPACK_IMPORTED_MODULE_19__.peerRoutingSymbol]);\n                }\n                if (service[_libp2p_interface__WEBPACK_IMPORTED_MODULE_20__.peerDiscoverySymbol] != null) {\n                    this.log('registering service %s for peer discovery', name);\n                    service[_libp2p_interface__WEBPACK_IMPORTED_MODULE_20__.peerDiscoverySymbol].addEventListener?.('peer', (evt) => {\n                        this.#onDiscoveryPeer(evt);\n                    });\n                }\n            }\n        }\n    }\n    configureComponent(name, component) {\n        if (component == null) {\n            this.log.error('component %s was null or undefined', name);\n        }\n        this.components[name] = component;\n        return component;\n    }\n    /**\n     * Starts the libp2p node and all its subsystems\n     */\n    async start() {\n        if (this.status !== 'stopped') {\n            return;\n        }\n        this.status = 'starting';\n        this.log('libp2p is starting');\n        try {\n            await this.components.beforeStart?.();\n            await this.components.start();\n            await this.components.afterStart?.();\n            this.status = 'started';\n            this.safeDispatchEvent('start', { detail: this });\n            this.log('libp2p has started');\n        }\n        catch (err) {\n            this.log.error('An error occurred starting libp2p', err);\n            // set status to 'started' so this.stop() will stop any running components\n            this.status = 'started';\n            await this.stop();\n            throw err;\n        }\n    }\n    /**\n     * Stop the libp2p node by closing its listeners and open connections\n     */\n    async stop() {\n        if (this.status !== 'started') {\n            return;\n        }\n        this.log('libp2p is stopping');\n        this.status = 'stopping';\n        await this.components.beforeStop?.();\n        await this.components.stop();\n        await this.components.afterStop?.();\n        this.status = 'stopped';\n        this.safeDispatchEvent('stop', { detail: this });\n        this.log('libp2p has stopped');\n    }\n    getConnections(peerId) {\n        return this.components.connectionManager.getConnections(peerId);\n    }\n    getDialQueue() {\n        return this.components.connectionManager.getDialQueue();\n    }\n    getPeers() {\n        const peerSet = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_21__.PeerSet();\n        for (const conn of this.components.connectionManager.getConnections()) {\n            peerSet.add(conn.remotePeer);\n        }\n        return Array.from(peerSet);\n    }\n    async dial(peer, options = {}) {\n        return this.components.connectionManager.openConnection(peer, {\n            // ensure any userland dials take top priority in the queue\n            priority: 75,\n            ...options\n        });\n    }\n    async dialProtocol(peer, protocols, options = {}) {\n        if (protocols == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_22__.CodeError('no protocols were provided to open a stream', _errors_js__WEBPACK_IMPORTED_MODULE_23__.codes.ERR_INVALID_PROTOCOLS_FOR_STREAM);\n        }\n        protocols = Array.isArray(protocols) ? protocols : [protocols];\n        if (protocols.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_22__.CodeError('no protocols were provided to open a stream', _errors_js__WEBPACK_IMPORTED_MODULE_23__.codes.ERR_INVALID_PROTOCOLS_FOR_STREAM);\n        }\n        const connection = await this.dial(peer, options);\n        return connection.newStream(protocols, options);\n    }\n    getMultiaddrs() {\n        return this.components.addressManager.getAddresses();\n    }\n    getProtocols() {\n        return this.components.registrar.getProtocols();\n    }\n    async hangUp(peer, options = {}) {\n        if ((0,_multiformats_multiaddr__WEBPACK_IMPORTED_MODULE_0__.isMultiaddr)(peer)) {\n            peer = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_24__.peerIdFromString)(peer.getPeerId() ?? '');\n        }\n        await this.components.connectionManager.closeConnections(peer, options);\n    }\n    /**\n     * Get the public key for the given peer id\n     */\n    async getPublicKey(peer, options = {}) {\n        this.log('getPublicKey %p', peer);\n        if (peer.publicKey != null) {\n            return peer.publicKey;\n        }\n        try {\n            const peerInfo = await this.peerStore.get(peer);\n            if (peerInfo.id.publicKey != null) {\n                return peerInfo.id.publicKey;\n            }\n        }\n        catch (err) {\n            if (err.code !== _errors_js__WEBPACK_IMPORTED_MODULE_23__.codes.ERR_NOT_FOUND) {\n                throw err;\n            }\n        }\n        const peerKey = (0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_2__.concat)([\n            (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_3__.fromString)('/pk/'),\n            peer.multihash.digest\n        ]);\n        // search any available content routing methods\n        const bytes = await this.contentRouting.get(peerKey, options);\n        // ensure the returned key is valid\n        (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_25__.unmarshalPublicKey)(bytes);\n        await this.peerStore.patch(peer, {\n            publicKey: bytes\n        });\n        return bytes;\n    }\n    async handle(protocols, handler, options) {\n        if (!Array.isArray(protocols)) {\n            protocols = [protocols];\n        }\n        await Promise.all(protocols.map(async (protocol) => {\n            await this.components.registrar.handle(protocol, handler, options);\n        }));\n    }\n    async unhandle(protocols) {\n        if (!Array.isArray(protocols)) {\n            protocols = [protocols];\n        }\n        await Promise.all(protocols.map(async (protocol) => {\n            await this.components.registrar.unhandle(protocol);\n        }));\n    }\n    async register(protocol, topology) {\n        return this.components.registrar.register(protocol, topology);\n    }\n    unregister(id) {\n        this.components.registrar.unregister(id);\n    }\n    /**\n     * Called whenever peer discovery services emit `peer` events and adds peers\n     * to the peer store.\n     */\n    #onDiscoveryPeer(evt) {\n        const { detail: peer } = evt;\n        if (peer.id.toString() === this.peerId.toString()) {\n            this.log.error(new Error(_errors_js__WEBPACK_IMPORTED_MODULE_23__.codes.ERR_DISCOVERED_SELF));\n            return;\n        }\n        void this.components.peerStore.merge(peer.id, {\n            multiaddrs: peer.multiaddrs\n        })\n            .catch(err => { this.log.error(err); });\n    }\n}\n/**\n * Returns a new Libp2pNode instance - this exposes more of the internals than the\n * libp2p interface and is useful for testing and debugging.\n */\nasync function createLibp2pNode(options = {}) {\n    const peerId = options.peerId ??= await (0,_libp2p_peer_id_factory__WEBPACK_IMPORTED_MODULE_26__.createEd25519PeerId)();\n    if (peerId.privateKey == null) {\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_22__.CodeError('peer id was missing private key', 'ERR_MISSING_PRIVATE_KEY');\n    }\n    options.privateKey ??= await (0,_libp2p_crypto_keys__WEBPACK_IMPORTED_MODULE_25__.unmarshalPrivateKey)(peerId.privateKey);\n    return new Libp2pNode(await (0,_config_js__WEBPACK_IMPORTED_MODULE_27__.validateConfig)(options));\n}\n//# sourceMappingURL=libp2p.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/libp2p.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/peer-routing.js":
/*!******************************************************!*\
  !*** ./node_modules/libp2p/dist/src/peer-routing.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultPeerRouting: () => (/* binding */ DefaultPeerRouting)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/peer-collections */ \"./node_modules/@libp2p/peer-collections/dist/src/set.js\");\n/* harmony import */ var it_merge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! it-merge */ \"./node_modules/it-merge/dist/src/index.js\");\n/* harmony import */ var it_parallel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! it-parallel */ \"./node_modules/it-parallel/dist/src/index.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/libp2p/dist/src/errors.js\");\n\n\n\n\n\nclass DefaultPeerRouting {\n    log;\n    peerId;\n    peerStore;\n    routers;\n    constructor(components, init = {}) {\n        this.log = components.logger.forComponent('libp2p:peer-routing');\n        this.peerId = components.peerId;\n        this.peerStore = components.peerStore;\n        this.routers = init.routers ?? [];\n    }\n    /**\n     * Iterates over all peer routers in parallel to find the given peer\n     */\n    async findPeer(id, options) {\n        if (this.routers.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('No peer routers available', _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        if (id.toString() === this.peerId.toString()) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('Should not try to find self', _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_FIND_SELF);\n        }\n        const self = this;\n        const source = (0,it_merge__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(...this.routers.map(router => (async function* () {\n            try {\n                yield await router.findPeer(id, options);\n            }\n            catch (err) {\n                self.log.error(err);\n            }\n        })()));\n        for await (const peer of source) {\n            if (peer == null) {\n                continue;\n            }\n            // store the addresses for the peer if found\n            if (peer.multiaddrs.length > 0) {\n                await this.peerStore.merge(peer.id, {\n                    multiaddrs: peer.multiaddrs\n                });\n            }\n            return peer;\n        }\n        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(_errors_js__WEBPACK_IMPORTED_MODULE_3__.messages.NOT_FOUND, _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_NOT_FOUND);\n    }\n    /**\n     * Attempt to find the closest peers on the network to the given key\n     */\n    async *getClosestPeers(key, options = {}) {\n        if (this.routers.length === 0) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('No peer routers available', _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_NO_ROUTERS_AVAILABLE);\n        }\n        const self = this;\n        const seen = new _libp2p_peer_collections__WEBPACK_IMPORTED_MODULE_4__.PeerSet();\n        for await (const peer of (0,it_parallel__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(async function* () {\n            const source = (0,it_merge__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(...self.routers.map(router => router.getClosestPeers(key, options)));\n            for await (let peer of source) {\n                yield async () => {\n                    // find multiaddrs if they are missing\n                    if (peer.multiaddrs.length === 0) {\n                        try {\n                            peer = await self.findPeer(peer.id, {\n                                ...options,\n                                useCache: false\n                            });\n                        }\n                        catch (err) {\n                            self.log.error('could not find peer multiaddrs', err);\n                            return;\n                        }\n                    }\n                    return peer;\n                };\n            }\n        }())) {\n            if (peer == null) {\n                continue;\n            }\n            // store the addresses for the peer if found\n            if (peer.multiaddrs.length > 0) {\n                await this.peerStore.merge(peer.id, {\n                    multiaddrs: peer.multiaddrs\n                });\n            }\n            // deduplicate peers\n            if (seen.has(peer.id)) {\n                continue;\n            }\n            seen.add(peer.id);\n            yield peer;\n        }\n    }\n}\n//# sourceMappingURL=peer-routing.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/peer-routing.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/registrar.js":
/*!***************************************************!*\
  !*** ./node_modules/libp2p/dist/src/registrar.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_MAX_INBOUND_STREAMS: () => (/* binding */ DEFAULT_MAX_INBOUND_STREAMS),\n/* harmony export */   DEFAULT_MAX_OUTBOUND_STREAMS: () => (/* binding */ DEFAULT_MAX_OUTBOUND_STREAMS),\n/* harmony export */   DefaultRegistrar: () => (/* binding */ DefaultRegistrar)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var merge_options__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! merge-options */ \"./node_modules/merge-options/index.mjs\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/libp2p/dist/src/errors.js\");\n\n\n\nconst DEFAULT_MAX_INBOUND_STREAMS = 32;\nconst DEFAULT_MAX_OUTBOUND_STREAMS = 64;\n/**\n * Responsible for notifying registered protocols of events in the network.\n */\nclass DefaultRegistrar {\n    log;\n    topologies;\n    handlers;\n    components;\n    constructor(components) {\n        this.log = components.logger.forComponent('libp2p:registrar');\n        this.topologies = new Map();\n        this.handlers = new Map();\n        this.components = components;\n        this._onDisconnect = this._onDisconnect.bind(this);\n        this._onPeerUpdate = this._onPeerUpdate.bind(this);\n        this._onPeerIdentify = this._onPeerIdentify.bind(this);\n        this.components.events.addEventListener('peer:disconnect', this._onDisconnect);\n        this.components.events.addEventListener('peer:update', this._onPeerUpdate);\n        this.components.events.addEventListener('peer:identify', this._onPeerIdentify);\n    }\n    getProtocols() {\n        return Array.from(new Set([\n            ...this.handlers.keys()\n        ])).sort();\n    }\n    getHandler(protocol) {\n        const handler = this.handlers.get(protocol);\n        if (handler == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(`No handler registered for protocol ${protocol}`, _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_NO_HANDLER_FOR_PROTOCOL);\n        }\n        return handler;\n    }\n    getTopologies(protocol) {\n        const topologies = this.topologies.get(protocol);\n        if (topologies == null) {\n            return [];\n        }\n        return [\n            ...topologies.values()\n        ];\n    }\n    /**\n     * Registers the `handler` for each protocol\n     */\n    async handle(protocol, handler, opts) {\n        if (this.handlers.has(protocol)) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError(`Handler already registered for protocol ${protocol}`, _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED);\n        }\n        const options = merge_options__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bind({ ignoreUndefined: true })({\n            maxInboundStreams: DEFAULT_MAX_INBOUND_STREAMS,\n            maxOutboundStreams: DEFAULT_MAX_OUTBOUND_STREAMS\n        }, opts);\n        this.handlers.set(protocol, {\n            handler,\n            options\n        });\n        // Add new protocol to self protocols in the peer store\n        await this.components.peerStore.merge(this.components.peerId, {\n            protocols: [protocol]\n        });\n    }\n    /**\n     * Removes the handler for each protocol. The protocol\n     * will no longer be supported on streams.\n     */\n    async unhandle(protocols) {\n        const protocolList = Array.isArray(protocols) ? protocols : [protocols];\n        protocolList.forEach(protocol => {\n            this.handlers.delete(protocol);\n        });\n        // Update self protocols in the peer store\n        await this.components.peerStore.patch(this.components.peerId, {\n            protocols: this.getProtocols()\n        });\n    }\n    /**\n     * Register handlers for a set of multicodecs given\n     */\n    async register(protocol, topology) {\n        if (topology == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.CodeError('invalid topology', _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_INVALID_PARAMETERS);\n        }\n        // Create topology\n        const id = `${(Math.random() * 1e9).toString(36)}${Date.now()}`;\n        let topologies = this.topologies.get(protocol);\n        if (topologies == null) {\n            topologies = new Map();\n            this.topologies.set(protocol, topologies);\n        }\n        topologies.set(id, topology);\n        return id;\n    }\n    /**\n     * Unregister topology\n     */\n    unregister(id) {\n        for (const [protocol, topologies] of this.topologies.entries()) {\n            if (topologies.has(id)) {\n                topologies.delete(id);\n                if (topologies.size === 0) {\n                    this.topologies.delete(protocol);\n                }\n            }\n        }\n    }\n    /**\n     * Remove a disconnected peer from the record\n     */\n    _onDisconnect(evt) {\n        const remotePeer = evt.detail;\n        void this.components.peerStore.get(remotePeer)\n            .then(peer => {\n            for (const protocol of peer.protocols) {\n                const topologies = this.topologies.get(protocol);\n                if (topologies == null) {\n                    // no topologies are interested in this protocol\n                    continue;\n                }\n                for (const topology of topologies.values()) {\n                    topology.onDisconnect?.(remotePeer);\n                }\n            }\n        })\n            .catch(err => {\n            if (err.code === _errors_js__WEBPACK_IMPORTED_MODULE_2__.codes.ERR_NOT_FOUND) {\n                // peer has not completed identify so they are not in the peer store\n                return;\n            }\n            this.log.error('could not inform topologies of disconnecting peer %p', remotePeer, err);\n        });\n    }\n    /**\n     * When a peer is updated, if they have removed supported protocols notify any\n     * topologies interested in the removed protocols.\n     */\n    _onPeerUpdate(evt) {\n        const { peer, previous } = evt.detail;\n        const removed = (previous?.protocols ?? []).filter(protocol => !peer.protocols.includes(protocol));\n        for (const protocol of removed) {\n            const topologies = this.topologies.get(protocol);\n            if (topologies == null) {\n                // no topologies are interested in this protocol\n                continue;\n            }\n            for (const topology of topologies.values()) {\n                topology.onDisconnect?.(peer.id);\n            }\n        }\n    }\n    /**\n     * After identify has completed and we have received the list of supported\n     * protocols, notify any topologies interested in those protocols.\n     */\n    _onPeerIdentify(evt) {\n        const protocols = evt.detail.protocols;\n        const connection = evt.detail.connection;\n        const peerId = evt.detail.peerId;\n        for (const protocol of protocols) {\n            const topologies = this.topologies.get(protocol);\n            if (topologies == null) {\n                // no topologies are interested in this protocol\n                continue;\n            }\n            for (const topology of topologies.values()) {\n                if (connection.transient && topology.notifyOnTransient !== true) {\n                    continue;\n                }\n                topology.onConnect?.(peerId, connection);\n            }\n        }\n    }\n}\n//# sourceMappingURL=registrar.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/registrar.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/transport-manager.js":
/*!***********************************************************!*\
  !*** ./node_modules/libp2p/dist/src/transport-manager.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultTransportManager: () => (/* binding */ DefaultTransportManager)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/transport/index.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_utils_tracked_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @libp2p/utils/tracked-map */ \"./node_modules/@libp2p/utils/dist/src/tracked-map.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/libp2p/dist/src/errors.js\");\n\n\n\nclass DefaultTransportManager {\n    log;\n    components;\n    transports;\n    listeners;\n    faultTolerance;\n    started;\n    constructor(components, init = {}) {\n        this.log = components.logger.forComponent('libp2p:transports');\n        this.components = components;\n        this.started = false;\n        this.transports = new Map();\n        this.listeners = (0,_libp2p_utils_tracked_map__WEBPACK_IMPORTED_MODULE_0__.trackedMap)({\n            name: 'libp2p_transport_manager_listeners',\n            metrics: this.components.metrics\n        });\n        this.faultTolerance = init.faultTolerance ?? _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.FaultTolerance.FATAL_ALL;\n    }\n    /**\n     * Adds a `Transport` to the manager\n     */\n    add(transport) {\n        const tag = transport[Symbol.toStringTag];\n        if (tag == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('Transport must have a valid tag', _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_INVALID_KEY);\n        }\n        if (this.transports.has(tag)) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(`There is already a transport with the tag ${tag}`, _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_DUPLICATE_TRANSPORT);\n        }\n        this.log('adding transport %s', tag);\n        this.transports.set(tag, transport);\n        if (!this.listeners.has(tag)) {\n            this.listeners.set(tag, []);\n        }\n    }\n    isStarted() {\n        return this.started;\n    }\n    start() {\n        this.started = true;\n    }\n    async afterStart() {\n        // Listen on the provided transports for the provided addresses\n        const addrs = this.components.addressManager.getListenAddrs();\n        await this.listen(addrs);\n    }\n    /**\n     * Stops all listeners\n     */\n    async stop() {\n        const tasks = [];\n        for (const [key, listeners] of this.listeners) {\n            this.log('closing listeners for %s', key);\n            while (listeners.length > 0) {\n                const listener = listeners.pop();\n                if (listener == null) {\n                    continue;\n                }\n                tasks.push(listener.close());\n            }\n        }\n        await Promise.all(tasks);\n        this.log('all listeners closed');\n        for (const key of this.listeners.keys()) {\n            this.listeners.set(key, []);\n        }\n        this.started = false;\n    }\n    /**\n     * Dials the given Multiaddr over it's supported transport\n     */\n    async dial(ma, options) {\n        const transport = this.transportForMultiaddr(ma);\n        if (transport == null) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(`No transport available for address ${String(ma)}`, _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_TRANSPORT_UNAVAILABLE);\n        }\n        try {\n            return await transport.dial(ma, {\n                ...options,\n                upgrader: this.components.upgrader\n            });\n        }\n        catch (err) {\n            if (err.code == null) {\n                err.code = _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_TRANSPORT_DIAL_FAILED;\n            }\n            throw err;\n        }\n    }\n    /**\n     * Returns all Multiaddr's the listeners are using\n     */\n    getAddrs() {\n        let addrs = [];\n        for (const listeners of this.listeners.values()) {\n            for (const listener of listeners) {\n                addrs = [...addrs, ...listener.getAddrs()];\n            }\n        }\n        return addrs;\n    }\n    /**\n     * Returns all the transports instances\n     */\n    getTransports() {\n        return Array.of(...this.transports.values());\n    }\n    /**\n     * Returns all the listener instances\n     */\n    getListeners() {\n        return Array.of(...this.listeners.values()).flat();\n    }\n    /**\n     * Finds a transport that matches the given Multiaddr\n     */\n    transportForMultiaddr(ma) {\n        for (const transport of this.transports.values()) {\n            const addrs = transport.filter([ma]);\n            if (addrs.length > 0) {\n                return transport;\n            }\n        }\n    }\n    /**\n     * Starts listeners for each listen Multiaddr\n     */\n    async listen(addrs) {\n        if (!this.isStarted()) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError('Not started', _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_NODE_NOT_STARTED);\n        }\n        if (addrs == null || addrs.length === 0) {\n            this.log('no addresses were provided for listening, this node is dial only');\n            return;\n        }\n        const couldNotListen = [];\n        for (const [key, transport] of this.transports.entries()) {\n            const supportedAddrs = transport.filter(addrs);\n            const tasks = [];\n            // For each supported multiaddr, create a listener\n            for (const addr of supportedAddrs) {\n                this.log('creating listener for %s on %a', key, addr);\n                const listener = transport.createListener({\n                    upgrader: this.components.upgrader\n                });\n                let listeners = this.listeners.get(key) ?? [];\n                if (listeners == null) {\n                    listeners = [];\n                    this.listeners.set(key, listeners);\n                }\n                listeners.push(listener);\n                // Track listen/close events\n                listener.addEventListener('listening', () => {\n                    this.components.events.safeDispatchEvent('transport:listening', {\n                        detail: listener\n                    });\n                });\n                listener.addEventListener('close', () => {\n                    const index = listeners.findIndex(l => l === listener);\n                    // remove the listener\n                    listeners.splice(index, 1);\n                    this.components.events.safeDispatchEvent('transport:close', {\n                        detail: listener\n                    });\n                });\n                // We need to attempt to listen on everything\n                tasks.push(listener.listen(addr));\n            }\n            // Keep track of transports we had no addresses for\n            if (tasks.length === 0) {\n                couldNotListen.push(key);\n                continue;\n            }\n            const results = await Promise.allSettled(tasks);\n            // If we are listening on at least 1 address, succeed.\n            // TODO: we should look at adding a retry (`p-retry`) here to better support\n            // listening on remote addresses as they may be offline. We could then potentially\n            // just wait for any (`p-any`) listener to succeed on each transport before returning\n            const isListening = results.find(r => r.status === 'fulfilled');\n            if ((isListening == null) && this.faultTolerance !== _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.FaultTolerance.NO_FATAL) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(`Transport (${key}) could not listen on any available address`, _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_NO_VALID_ADDRESSES);\n            }\n        }\n        // If no transports were able to listen, throw an error. This likely\n        // means we were given addresses we do not have transports for\n        if (couldNotListen.length === this.transports.size) {\n            const message = `no valid addresses were provided for transports [${couldNotListen.join(', ')}]`;\n            if (this.faultTolerance === _libp2p_interface__WEBPACK_IMPORTED_MODULE_1__.FaultTolerance.FATAL_ALL) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_2__.CodeError(message, _errors_js__WEBPACK_IMPORTED_MODULE_3__.codes.ERR_NO_VALID_ADDRESSES);\n            }\n            this.log(`libp2p in dial mode only: ${message}`);\n        }\n    }\n    /**\n     * Removes the given transport from the manager.\n     * If a transport has any running listeners, they will be closed.\n     */\n    async remove(key) {\n        const listeners = this.listeners.get(key) ?? [];\n        this.log.trace('removing transport %s', key);\n        // Close any running listeners\n        const tasks = [];\n        this.log.trace('closing listeners for %s', key);\n        while (listeners.length > 0) {\n            const listener = listeners.pop();\n            if (listener == null) {\n                continue;\n            }\n            tasks.push(listener.close());\n        }\n        await Promise.all(tasks);\n        this.transports.delete(key);\n        this.listeners.delete(key);\n    }\n    /**\n     * Removes all transports from the manager.\n     * If any listeners are running, they will be closed.\n     *\n     * @async\n     */\n    async removeAll() {\n        const tasks = [];\n        for (const key of this.transports.keys()) {\n            tasks.push(this.remove(key));\n        }\n        await Promise.all(tasks);\n    }\n}\n//# sourceMappingURL=transport-manager.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/transport-manager.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/upgrader.js":
/*!**************************************************!*\
  !*** ./node_modules/libp2p/dist/src/upgrader.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultUpgrader: () => (/* binding */ DefaultUpgrader)\n/* harmony export */ });\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/errors.js\");\n/* harmony import */ var _libp2p_interface__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @libp2p/interface */ \"./node_modules/@libp2p/interface/dist/src/events.js\");\n/* harmony import */ var _libp2p_multistream_select__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @libp2p/multistream-select */ \"./node_modules/@libp2p/multistream-select/dist/src/handle.js\");\n/* harmony import */ var _libp2p_multistream_select__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @libp2p/multistream-select */ \"./node_modules/@libp2p/multistream-select/dist/src/select.js\");\n/* harmony import */ var _libp2p_peer_id__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @libp2p/peer-id */ \"./node_modules/@libp2p/peer-id/dist/src/index.js\");\n/* harmony import */ var _connection_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./connection/index.js */ \"./node_modules/libp2p/dist/src/connection/index.js\");\n/* harmony import */ var _connection_manager_constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./connection-manager/constants.js */ \"./node_modules/libp2p/dist/src/connection-manager/constants.defaults.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"./node_modules/libp2p/dist/src/errors.js\");\n/* harmony import */ var _registrar_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registrar.js */ \"./node_modules/libp2p/dist/src/registrar.js\");\n\n\n\n\n\n\n\nconst DEFAULT_PROTOCOL_SELECT_TIMEOUT = 30000;\nfunction findIncomingStreamLimit(protocol, registrar) {\n    try {\n        const { options } = registrar.getHandler(protocol);\n        return options.maxInboundStreams;\n    }\n    catch (err) {\n        if (err.code !== _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_NO_HANDLER_FOR_PROTOCOL) {\n            throw err;\n        }\n    }\n    return _registrar_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MAX_INBOUND_STREAMS;\n}\nfunction findOutgoingStreamLimit(protocol, registrar, options = {}) {\n    try {\n        const { options } = registrar.getHandler(protocol);\n        if (options.maxOutboundStreams != null) {\n            return options.maxOutboundStreams;\n        }\n    }\n    catch (err) {\n        if (err.code !== _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_NO_HANDLER_FOR_PROTOCOL) {\n            throw err;\n        }\n    }\n    return options.maxOutboundStreams ?? _registrar_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MAX_OUTBOUND_STREAMS;\n}\nfunction countStreams(protocol, direction, connection) {\n    let streamCount = 0;\n    connection.streams.forEach(stream => {\n        if (stream.direction === direction && stream.protocol === protocol) {\n            streamCount++;\n        }\n    });\n    return streamCount;\n}\nclass DefaultUpgrader {\n    components;\n    connectionEncryption;\n    muxers;\n    inboundUpgradeTimeout;\n    events;\n    constructor(components, init) {\n        this.components = components;\n        this.connectionEncryption = new Map();\n        init.connectionEncryption.forEach(encrypter => {\n            this.connectionEncryption.set(encrypter.protocol, encrypter);\n        });\n        this.muxers = new Map();\n        init.muxers.forEach(muxer => {\n            this.muxers.set(muxer.protocol, muxer);\n        });\n        this.inboundUpgradeTimeout = init.inboundUpgradeTimeout ?? _connection_manager_constants_js__WEBPACK_IMPORTED_MODULE_2__.INBOUND_UPGRADE_TIMEOUT;\n        this.events = components.events;\n    }\n    async shouldBlockConnection(remotePeer, maConn, connectionType) {\n        const connectionGater = this.components.connectionGater[connectionType];\n        if (connectionGater !== undefined) {\n            if (await connectionGater(remotePeer, maConn)) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(`The multiaddr connection is blocked by gater.${connectionType}`, _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_CONNECTION_INTERCEPTED);\n            }\n        }\n    }\n    /**\n     * Upgrades an inbound connection\n     */\n    async upgradeInbound(maConn, opts) {\n        const accept = await this.components.connectionManager.acceptIncomingConnection(maConn);\n        if (!accept) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('connection denied', _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_CONNECTION_DENIED);\n        }\n        let encryptedConn;\n        let remotePeer;\n        let upgradedConn;\n        let muxerFactory;\n        let cryptoProtocol;\n        const signal = AbortSignal.timeout(this.inboundUpgradeTimeout);\n        const onAbort = () => {\n            maConn.abort(new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('inbound upgrade timeout', _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.ERR_TIMEOUT));\n        };\n        signal.addEventListener('abort', onAbort, { once: true });\n        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.setMaxListeners)(Infinity, signal);\n        try {\n            if ((await this.components.connectionGater.denyInboundConnection?.(maConn)) === true) {\n                throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('The multiaddr connection is blocked by gater.acceptConnection', _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_CONNECTION_INTERCEPTED);\n            }\n            this.components.metrics?.trackMultiaddrConnection(maConn);\n            maConn.log('starting the inbound connection upgrade');\n            // Protect\n            let protectedConn = maConn;\n            if (opts?.skipProtection !== true) {\n                const protector = this.components.connectionProtector;\n                if (protector != null) {\n                    maConn.log('protecting the inbound connection');\n                    protectedConn = await protector.protect(maConn);\n                }\n            }\n            try {\n                // Encrypt the connection\n                encryptedConn = protectedConn;\n                if (opts?.skipEncryption !== true) {\n                    ({\n                        conn: encryptedConn,\n                        remotePeer,\n                        protocol: cryptoProtocol\n                    } = await this._encryptInbound(protectedConn));\n                    const maConn = {\n                        ...protectedConn,\n                        ...encryptedConn\n                    };\n                    await this.shouldBlockConnection(remotePeer, maConn, 'denyInboundEncryptedConnection');\n                }\n                else {\n                    const idStr = maConn.remoteAddr.getPeerId();\n                    if (idStr == null) {\n                        throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('inbound connection that skipped encryption must have a peer id', _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_INVALID_MULTIADDR);\n                    }\n                    const remotePeerId = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_5__.peerIdFromString)(idStr);\n                    cryptoProtocol = 'native';\n                    remotePeer = remotePeerId;\n                }\n                upgradedConn = encryptedConn;\n                if (opts?.muxerFactory != null) {\n                    muxerFactory = opts.muxerFactory;\n                }\n                else if (this.muxers.size > 0) {\n                    // Multiplex the connection\n                    const multiplexed = await this._multiplexInbound({\n                        ...protectedConn,\n                        ...encryptedConn\n                    }, this.muxers);\n                    muxerFactory = multiplexed.muxerFactory;\n                    upgradedConn = multiplexed.stream;\n                }\n            }\n            catch (err) {\n                maConn.log.error('failed to upgrade inbound connection', err);\n                throw err;\n            }\n            await this.shouldBlockConnection(remotePeer, maConn, 'denyInboundUpgradedConnection');\n            maConn.log('successfully upgraded inbound connection');\n            return this._createConnection({\n                cryptoProtocol,\n                direction: 'inbound',\n                maConn,\n                upgradedConn,\n                muxerFactory,\n                remotePeer,\n                transient: opts?.transient\n            });\n        }\n        finally {\n            signal.removeEventListener('abort', onAbort);\n            this.components.connectionManager.afterUpgradeInbound();\n        }\n    }\n    /**\n     * Upgrades an outbound connection\n     */\n    async upgradeOutbound(maConn, opts) {\n        const idStr = maConn.remoteAddr.getPeerId();\n        let remotePeerId;\n        if (idStr != null) {\n            remotePeerId = (0,_libp2p_peer_id__WEBPACK_IMPORTED_MODULE_5__.peerIdFromString)(idStr);\n            await this.shouldBlockConnection(remotePeerId, maConn, 'denyOutboundConnection');\n        }\n        let encryptedConn;\n        let remotePeer;\n        let upgradedConn;\n        let cryptoProtocol;\n        let muxerFactory;\n        this.components.metrics?.trackMultiaddrConnection(maConn);\n        maConn.log('starting the outbound connection upgrade');\n        // If the transport natively supports encryption, skip connection\n        // protector and encryption\n        // Protect\n        let protectedConn = maConn;\n        if (opts?.skipProtection !== true) {\n            const protector = this.components.connectionProtector;\n            if (protector != null) {\n                protectedConn = await protector.protect(maConn);\n            }\n        }\n        try {\n            // Encrypt the connection\n            encryptedConn = protectedConn;\n            if (opts?.skipEncryption !== true) {\n                ({\n                    conn: encryptedConn,\n                    remotePeer,\n                    protocol: cryptoProtocol\n                } = await this._encryptOutbound(protectedConn, remotePeerId));\n                const maConn = {\n                    ...protectedConn,\n                    ...encryptedConn\n                };\n                await this.shouldBlockConnection(remotePeer, maConn, 'denyOutboundEncryptedConnection');\n            }\n            else {\n                if (remotePeerId == null) {\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Encryption was skipped but no peer id was passed', _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_INVALID_PEER);\n                }\n                cryptoProtocol = 'native';\n                remotePeer = remotePeerId;\n            }\n            upgradedConn = encryptedConn;\n            if (opts?.muxerFactory != null) {\n                muxerFactory = opts.muxerFactory;\n            }\n            else if (this.muxers.size > 0) {\n                // Multiplex the connection\n                const multiplexed = await this._multiplexOutbound({\n                    ...protectedConn,\n                    ...encryptedConn\n                }, this.muxers);\n                muxerFactory = multiplexed.muxerFactory;\n                upgradedConn = multiplexed.stream;\n            }\n        }\n        catch (err) {\n            maConn.log.error('failed to upgrade outbound connection', err);\n            await maConn.close(err);\n            throw err;\n        }\n        await this.shouldBlockConnection(remotePeer, maConn, 'denyOutboundUpgradedConnection');\n        maConn.log('successfully upgraded outbound connection');\n        return this._createConnection({\n            cryptoProtocol,\n            direction: 'outbound',\n            maConn,\n            upgradedConn,\n            muxerFactory,\n            remotePeer,\n            transient: opts?.transient\n        });\n    }\n    /**\n     * A convenience method for generating a new `Connection`\n     */\n    _createConnection(opts) {\n        const { cryptoProtocol, direction, maConn, upgradedConn, remotePeer, muxerFactory, transient } = opts;\n        let muxer;\n        let newStream;\n        let connection; // eslint-disable-line prefer-const\n        if (muxerFactory != null) {\n            // Create the muxer\n            muxer = muxerFactory.createStreamMuxer({\n                direction,\n                // Run anytime a remote stream is created\n                onIncomingStream: muxedStream => {\n                    if (connection == null) {\n                        return;\n                    }\n                    void Promise.resolve()\n                        .then(async () => {\n                        const protocols = this.components.registrar.getProtocols();\n                        const { stream, protocol } = await _libp2p_multistream_select__WEBPACK_IMPORTED_MODULE_6__.handle(muxedStream, protocols, {\n                            log: muxedStream.log,\n                            yieldBytes: false\n                        });\n                        if (connection == null) {\n                            return;\n                        }\n                        connection.log('incoming stream opened on %s', protocol);\n                        const incomingLimit = findIncomingStreamLimit(protocol, this.components.registrar);\n                        const streamCount = countStreams(protocol, 'inbound', connection);\n                        if (streamCount === incomingLimit) {\n                            const err = new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(`Too many inbound protocol streams for protocol \"${protocol}\" - limit ${incomingLimit}`, _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_TOO_MANY_INBOUND_PROTOCOL_STREAMS);\n                            muxedStream.abort(err);\n                            throw err;\n                        }\n                        // after the handshake the returned stream can have early data so override\n                        // the souce/sink\n                        muxedStream.source = stream.source;\n                        muxedStream.sink = stream.sink;\n                        muxedStream.protocol = protocol;\n                        // allow closing the write end of a not-yet-negotiated stream\n                        if (stream.closeWrite != null) {\n                            muxedStream.closeWrite = stream.closeWrite;\n                        }\n                        // allow closing the read end of a not-yet-negotiated stream\n                        if (stream.closeRead != null) {\n                            muxedStream.closeRead = stream.closeRead;\n                        }\n                        // make sure we don't try to negotiate a stream we are closing\n                        if (stream.close != null) {\n                            muxedStream.close = stream.close;\n                        }\n                        // If a protocol stream has been successfully negotiated and is to be passed to the application,\n                        // the peerstore should ensure that the peer is registered with that protocol\n                        await this.components.peerStore.merge(remotePeer, {\n                            protocols: [protocol]\n                        });\n                        this.components.metrics?.trackProtocolStream(muxedStream, connection);\n                        this._onStream({ connection, stream: muxedStream, protocol });\n                    })\n                        .catch(async (err) => {\n                        connection.log.error('error handling incoming stream id %s', muxedStream.id, err.message, err.code, err.stack);\n                        if (muxedStream.timeline.close == null) {\n                            await muxedStream.close();\n                        }\n                    });\n                }\n            });\n            newStream = async (protocols, options = {}) => {\n                if (muxer == null) {\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Stream is not multiplexed', _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_MUXER_UNAVAILABLE);\n                }\n                connection.log('starting new stream for protocols %s', protocols);\n                const muxedStream = await muxer.newStream();\n                connection.log.trace('started new stream %s for protocols %s', muxedStream.id, protocols);\n                try {\n                    if (options.signal == null) {\n                        muxedStream.log('no abort signal was passed while trying to negotiate protocols %s falling back to default timeout', protocols);\n                        const signal = AbortSignal.timeout(DEFAULT_PROTOCOL_SELECT_TIMEOUT);\n                        (0,_libp2p_interface__WEBPACK_IMPORTED_MODULE_4__.setMaxListeners)(Infinity, signal);\n                        options = {\n                            ...options,\n                            signal\n                        };\n                    }\n                    muxedStream.log.trace('selecting protocol from protocols %s', protocols);\n                    const { stream, protocol } = await _libp2p_multistream_select__WEBPACK_IMPORTED_MODULE_7__.select(muxedStream, protocols, {\n                        ...options,\n                        log: muxedStream.log,\n                        yieldBytes: true\n                    });\n                    muxedStream.log('selected protocol %s', protocol);\n                    const outgoingLimit = findOutgoingStreamLimit(protocol, this.components.registrar, options);\n                    const streamCount = countStreams(protocol, 'outbound', connection);\n                    if (streamCount >= outgoingLimit) {\n                        const err = new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(`Too many outbound protocol streams for protocol \"${protocol}\" - limit ${outgoingLimit}`, _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_TOO_MANY_OUTBOUND_PROTOCOL_STREAMS);\n                        muxedStream.abort(err);\n                        throw err;\n                    }\n                    // If a protocol stream has been successfully negotiated and is to be passed to the application,\n                    // the peerstore should ensure that the peer is registered with that protocol\n                    await this.components.peerStore.merge(remotePeer, {\n                        protocols: [protocol]\n                    });\n                    // after the handshake the returned stream can have early data so override\n                    // the souce/sink\n                    muxedStream.source = stream.source;\n                    muxedStream.sink = stream.sink;\n                    muxedStream.protocol = protocol;\n                    // allow closing the write end of a not-yet-negotiated stream\n                    if (stream.closeWrite != null) {\n                        muxedStream.closeWrite = stream.closeWrite;\n                    }\n                    // allow closing the read end of a not-yet-negotiated stream\n                    if (stream.closeRead != null) {\n                        muxedStream.closeRead = stream.closeRead;\n                    }\n                    // make sure we don't try to negotiate a stream we are closing\n                    if (stream.close != null) {\n                        muxedStream.close = stream.close;\n                    }\n                    this.components.metrics?.trackProtocolStream(muxedStream, connection);\n                    return muxedStream;\n                }\n                catch (err) {\n                    connection.log.error('could not create new stream for protocols %s', protocols, err);\n                    if (muxedStream.timeline.close == null) {\n                        muxedStream.abort(err);\n                    }\n                    if (err.code != null) {\n                        throw err;\n                    }\n                    throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(String(err), _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_UNSUPPORTED_PROTOCOL);\n                }\n            };\n            // Pipe all data through the muxer\n            void Promise.all([\n                muxer.sink(upgradedConn.source),\n                upgradedConn.sink(muxer.source)\n            ]).catch(err => {\n                connection.log.error('error piping data through muxer', err);\n            });\n        }\n        const _timeline = maConn.timeline;\n        maConn.timeline = new Proxy(_timeline, {\n            set: (...args) => {\n                if (connection != null && args[1] === 'close' && args[2] != null && _timeline.close == null) {\n                    // Wait for close to finish before notifying of the closure\n                    (async () => {\n                        try {\n                            if (connection.status === 'open') {\n                                await connection.close();\n                            }\n                        }\n                        catch (err) {\n                            connection.log.error('error closing connection after timeline close', err);\n                        }\n                        finally {\n                            this.events.safeDispatchEvent('connection:close', {\n                                detail: connection\n                            });\n                        }\n                    })().catch(err => {\n                        connection.log.error('error thrown while dispatching connection:close event', err);\n                    });\n                }\n                return Reflect.set(...args);\n            }\n        });\n        maConn.timeline.upgraded = Date.now();\n        const errConnectionNotMultiplexed = () => {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('connection is not multiplexed', _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_CONNECTION_NOT_MULTIPLEXED);\n        };\n        // Create the connection\n        connection = (0,_connection_index_js__WEBPACK_IMPORTED_MODULE_8__.createConnection)({\n            remoteAddr: maConn.remoteAddr,\n            remotePeer,\n            status: 'open',\n            direction,\n            timeline: maConn.timeline,\n            multiplexer: muxer?.protocol,\n            encryption: cryptoProtocol,\n            transient,\n            logger: this.components.logger,\n            newStream: newStream ?? errConnectionNotMultiplexed,\n            getStreams: () => { if (muxer != null) {\n                return muxer.streams;\n            }\n            else {\n                return [];\n            } },\n            close: async (options) => {\n                // Ensure remaining streams are closed gracefully\n                if (muxer != null) {\n                    connection.log.trace('close muxer');\n                    await muxer.close(options);\n                }\n                connection.log.trace('close maconn');\n                // close the underlying transport\n                await maConn.close(options);\n                connection.log.trace('closed maconn');\n            },\n            abort: (err) => {\n                maConn.abort(err);\n                // Ensure remaining streams are aborted\n                if (muxer != null) {\n                    muxer.abort(err);\n                }\n            }\n        });\n        this.events.safeDispatchEvent('connection:open', {\n            detail: connection\n        });\n        return connection;\n    }\n    /**\n     * Routes incoming streams to the correct handler\n     */\n    _onStream(opts) {\n        const { connection, stream, protocol } = opts;\n        const { handler, options } = this.components.registrar.getHandler(protocol);\n        if (connection.transient && options.runOnTransientConnection !== true) {\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError('Cannot open protocol stream on transient connection', 'ERR_TRANSIENT_CONNECTION');\n        }\n        handler({ connection, stream });\n    }\n    /**\n     * Attempts to encrypt the incoming `connection` with the provided `cryptos`\n     */\n    async _encryptInbound(connection) {\n        const protocols = Array.from(this.connectionEncryption.keys());\n        connection.log('handling inbound crypto protocol selection', protocols);\n        try {\n            const { stream, protocol } = await _libp2p_multistream_select__WEBPACK_IMPORTED_MODULE_6__.handle(connection, protocols, {\n                log: connection.log\n            });\n            const encrypter = this.connectionEncryption.get(protocol);\n            if (encrypter == null) {\n                throw new Error(`no crypto module found for ${protocol}`);\n            }\n            connection.log('encrypting inbound connection using', protocol);\n            return {\n                ...await encrypter.secureInbound(this.components.peerId, stream),\n                protocol\n            };\n        }\n        catch (err) {\n            connection.log.error('encrypting inbound connection to %p failed', err);\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(err.message, _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_ENCRYPTION_FAILED);\n        }\n    }\n    /**\n     * Attempts to encrypt the given `connection` with the provided connection encrypters.\n     * The first `ConnectionEncrypter` module to succeed will be used\n     */\n    async _encryptOutbound(connection, remotePeerId) {\n        const protocols = Array.from(this.connectionEncryption.keys());\n        connection.log('selecting outbound crypto protocol', protocols);\n        try {\n            connection.log.trace('selecting encrypter from %s', protocols);\n            const { stream, protocol } = await _libp2p_multistream_select__WEBPACK_IMPORTED_MODULE_7__.select(connection, protocols, {\n                log: connection.log,\n                yieldBytes: true\n            });\n            const encrypter = this.connectionEncryption.get(protocol);\n            if (encrypter == null) {\n                throw new Error(`no crypto module found for ${protocol}`);\n            }\n            connection.log('encrypting outbound connection to %p using %s', remotePeerId, encrypter);\n            return {\n                ...await encrypter.secureOutbound(this.components.peerId, stream, remotePeerId),\n                protocol\n            };\n        }\n        catch (err) {\n            connection.log.error('encrypting outbound connection to %p failed', err);\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(err.message, _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_ENCRYPTION_FAILED);\n        }\n    }\n    /**\n     * Selects one of the given muxers via multistream-select. That\n     * muxer will be used for all future streams on the connection.\n     */\n    async _multiplexOutbound(connection, muxers) {\n        const protocols = Array.from(muxers.keys());\n        connection.log('outbound selecting muxer %s', protocols);\n        try {\n            connection.log.trace('selecting stream muxer from %s', protocols);\n            const { stream, protocol } = await _libp2p_multistream_select__WEBPACK_IMPORTED_MODULE_7__.select(connection, protocols, {\n                log: connection.log,\n                yieldBytes: true\n            });\n            connection.log('selected %s as muxer protocol', protocol);\n            const muxerFactory = muxers.get(protocol);\n            return { stream, muxerFactory };\n        }\n        catch (err) {\n            connection.log.error('error multiplexing outbound connection', err);\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(String(err), _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_MUXER_UNAVAILABLE);\n        }\n    }\n    /**\n     * Registers support for one of the given muxers via multistream-select. The\n     * selected muxer will be used for all future streams on the connection.\n     */\n    async _multiplexInbound(connection, muxers) {\n        const protocols = Array.from(muxers.keys());\n        connection.log('inbound handling muxers %s', protocols);\n        try {\n            const { stream, protocol } = await _libp2p_multistream_select__WEBPACK_IMPORTED_MODULE_6__.handle(connection, protocols, {\n                log: connection.log\n            });\n            const muxerFactory = muxers.get(protocol);\n            return { stream, muxerFactory };\n        }\n        catch (err) {\n            connection.log.error('error multiplexing inbound connection', err);\n            throw new _libp2p_interface__WEBPACK_IMPORTED_MODULE_3__.CodeError(String(err), _errors_js__WEBPACK_IMPORTED_MODULE_0__.codes.ERR_MUXER_UNAVAILABLE);\n        }\n    }\n}\n//# sourceMappingURL=upgrader.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/upgrader.js?");

/***/ }),

/***/ "./node_modules/libp2p/dist/src/version.js":
/*!*************************************************!*\
  !*** ./node_modules/libp2p/dist/src/version.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nconst version = '1.3.3';\nconst name = 'libp2p';\n//# sourceMappingURL=version.js.map\n\n//# sourceURL=webpack://ems/./node_modules/libp2p/dist/src/version.js?");

/***/ }),

/***/ "./node_modules/mortice/dist/src/browser.js":
/*!**************************************************!*\
  !*** ./node_modules/mortice/dist/src/browser.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var observable_webworkers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! observable-webworkers */ \"./node_modules/observable-webworkers/dist/src/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/mortice/dist/src/constants.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/mortice/dist/src/utils.js\");\n\n\n\nconst handleWorkerLockRequest = (emitter, masterEvent, requestType, releaseType, grantType) => {\n    return (worker, event) => {\n        if (event.data.type !== requestType) {\n            return;\n        }\n        const requestEvent = {\n            type: event.data.type,\n            name: event.data.name,\n            identifier: event.data.identifier\n        };\n        emitter.dispatchEvent(new MessageEvent(masterEvent, {\n            data: {\n                name: requestEvent.name,\n                handler: async () => {\n                    // grant lock to worker\n                    worker.postMessage({\n                        type: grantType,\n                        name: requestEvent.name,\n                        identifier: requestEvent.identifier\n                    });\n                    // wait for worker to finish\n                    await new Promise((resolve) => {\n                        const releaseEventListener = (event) => {\n                            if (event == null || event.data == null) {\n                                return;\n                            }\n                            const releaseEvent = {\n                                type: event.data.type,\n                                name: event.data.name,\n                                identifier: event.data.identifier\n                            };\n                            if (releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n                                worker.removeEventListener('message', releaseEventListener);\n                                resolve();\n                            }\n                        };\n                        worker.addEventListener('message', releaseEventListener);\n                    });\n                }\n            }\n        }));\n    };\n};\nconst makeWorkerLockRequest = (name, requestType, grantType, releaseType) => {\n    return async () => {\n        const id = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.nanoid)();\n        globalThis.postMessage({\n            type: requestType,\n            identifier: id,\n            name\n        });\n        return new Promise((resolve) => {\n            const listener = (event) => {\n                if (event == null || event.data == null) {\n                    return;\n                }\n                const responseEvent = {\n                    type: event.data.type,\n                    identifier: event.data.identifier\n                };\n                if (responseEvent.type === grantType && responseEvent.identifier === id) {\n                    globalThis.removeEventListener('message', listener);\n                    // grant lock\n                    resolve(() => {\n                        // release lock\n                        globalThis.postMessage({\n                            type: releaseType,\n                            identifier: id,\n                            name\n                        });\n                    });\n                }\n            };\n            globalThis.addEventListener('message', listener);\n        });\n    };\n};\nconst defaultOptions = {\n    singleProcess: false\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((options) => {\n    options = Object.assign({}, defaultOptions, options);\n    const isPrimary = Boolean(globalThis.document) || options.singleProcess;\n    if (isPrimary) {\n        const emitter = new EventTarget();\n        observable_webworkers__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addEventListener('message', handleWorkerLockRequest(emitter, 'requestReadLock', _constants_js__WEBPACK_IMPORTED_MODULE_1__.WORKER_REQUEST_READ_LOCK, _constants_js__WEBPACK_IMPORTED_MODULE_1__.WORKER_RELEASE_READ_LOCK, _constants_js__WEBPACK_IMPORTED_MODULE_1__.MASTER_GRANT_READ_LOCK));\n        observable_webworkers__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addEventListener('message', handleWorkerLockRequest(emitter, 'requestWriteLock', _constants_js__WEBPACK_IMPORTED_MODULE_1__.WORKER_REQUEST_WRITE_LOCK, _constants_js__WEBPACK_IMPORTED_MODULE_1__.WORKER_RELEASE_WRITE_LOCK, _constants_js__WEBPACK_IMPORTED_MODULE_1__.MASTER_GRANT_WRITE_LOCK));\n        return emitter;\n    }\n    return {\n        isWorker: true,\n        readLock: (name) => makeWorkerLockRequest(name, _constants_js__WEBPACK_IMPORTED_MODULE_1__.WORKER_REQUEST_READ_LOCK, _constants_js__WEBPACK_IMPORTED_MODULE_1__.MASTER_GRANT_READ_LOCK, _constants_js__WEBPACK_IMPORTED_MODULE_1__.WORKER_RELEASE_READ_LOCK),\n        writeLock: (name) => makeWorkerLockRequest(name, _constants_js__WEBPACK_IMPORTED_MODULE_1__.WORKER_REQUEST_WRITE_LOCK, _constants_js__WEBPACK_IMPORTED_MODULE_1__.MASTER_GRANT_WRITE_LOCK, _constants_js__WEBPACK_IMPORTED_MODULE_1__.WORKER_RELEASE_WRITE_LOCK)\n    };\n});\n//# sourceMappingURL=browser.js.map\n\n//# sourceURL=webpack://ems/./node_modules/mortice/dist/src/browser.js?");

/***/ }),

/***/ "./node_modules/mortice/dist/src/constants.js":
/*!****************************************************!*\
  !*** ./node_modules/mortice/dist/src/constants.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MASTER_GRANT_READ_LOCK: () => (/* binding */ MASTER_GRANT_READ_LOCK),\n/* harmony export */   MASTER_GRANT_WRITE_LOCK: () => (/* binding */ MASTER_GRANT_WRITE_LOCK),\n/* harmony export */   WORKER_RELEASE_READ_LOCK: () => (/* binding */ WORKER_RELEASE_READ_LOCK),\n/* harmony export */   WORKER_RELEASE_WRITE_LOCK: () => (/* binding */ WORKER_RELEASE_WRITE_LOCK),\n/* harmony export */   WORKER_REQUEST_READ_LOCK: () => (/* binding */ WORKER_REQUEST_READ_LOCK),\n/* harmony export */   WORKER_REQUEST_WRITE_LOCK: () => (/* binding */ WORKER_REQUEST_WRITE_LOCK)\n/* harmony export */ });\nconst WORKER_REQUEST_READ_LOCK = 'lock:worker:request-read';\nconst WORKER_RELEASE_READ_LOCK = 'lock:worker:release-read';\nconst MASTER_GRANT_READ_LOCK = 'lock:master:grant-read';\nconst WORKER_REQUEST_WRITE_LOCK = 'lock:worker:request-write';\nconst WORKER_RELEASE_WRITE_LOCK = 'lock:worker:release-write';\nconst MASTER_GRANT_WRITE_LOCK = 'lock:master:grant-write';\n//# sourceMappingURL=constants.js.map\n\n//# sourceURL=webpack://ems/./node_modules/mortice/dist/src/constants.js?");

/***/ }),

/***/ "./node_modules/mortice/dist/src/index.js":
/*!************************************************!*\
  !*** ./node_modules/mortice/dist/src/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ createMortice)\n/* harmony export */ });\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! p-queue */ \"./node_modules/p-queue/dist/index.js\");\n/* harmony import */ var p_timeout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-timeout */ \"./node_modules/p-timeout/index.js\");\n/* harmony import */ var _node_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node.js */ \"./node_modules/mortice/dist/src/browser.js\");\n/**\n * @packageDocumentation\n *\n * - Reads occur concurrently\n * - Writes occur one at a time\n * - No reads occur while a write operation is in progress\n * - Locks can be created with different names\n * - Reads/writes can time out\n *\n * ## Usage\n *\n * ```javascript\n * import mortice from 'mortice'\n * import delay from 'delay'\n *\n * // the lock name & options objects are both optional\n * const mutex = mortice('my-lock', {\n *\n *   // how long before write locks time out (default: 24 hours)\n *   timeout: 30000,\n *\n *    // control how many read operations are executed concurrently (default: Infinity)\n *   concurrency: 5,\n *\n *   // by default the the lock will be held on the main thread, set this to true if the\n *   // a lock should reside on each worker (default: false)\n *   singleProcess: false\n * })\n *\n * Promise.all([\n *   (async () => {\n *     const release = await mutex.readLock()\n *\n *     try {\n *       console.info('read 1')\n *     } finally {\n *       release()\n *     }\n *   })(),\n *   (async () => {\n *     const release = await mutex.readLock()\n *\n *     try {\n *       console.info('read 2')\n *     } finally {\n *       release()\n *     }\n *   })(),\n *   (async () => {\n *     const release = await mutex.writeLock()\n *\n *     try {\n *       await delay(1000)\n *\n *       console.info('write 1')\n *     } finally {\n *       release()\n *     }\n *   })(),\n *   (async () => {\n *     const release = await mutex.readLock()\n *\n *     try {\n *       console.info('read 3')\n *     } finally {\n *       release()\n *     }\n *   })()\n * ])\n * ```\n *\n *     read 1\n *     read 2\n *     <small pause>\n *     write 1\n *     read 3\n *\n * ## Browser\n *\n * Because there's no global way to evesdrop on messages sent by Web Workers, please pass all created Web Workers to the [`observable-webworkers`](https://npmjs.org/package/observable-webworkers) module:\n *\n * ```javascript\n * // main.js\n * import mortice from 'mortice'\n * import observe from 'observable-webworkers'\n *\n * // create our lock on the main thread, it will be held here\n * const mutex = mortice()\n *\n * const worker = new Worker('worker.js')\n *\n * observe(worker)\n * ```\n *\n * ```javascript\n * // worker.js\n * import mortice from 'mortice'\n * import delay from 'delay'\n *\n * const mutex = mortice()\n *\n * let release = await mutex.readLock()\n * // read something\n * release()\n *\n * release = await mutex.writeLock()\n * // write something\n * release()\n * ```\n */\n\n\n\nconst mutexes = {};\nlet implementation;\nasync function createReleaseable(queue, options) {\n    let res;\n    const p = new Promise((resolve) => {\n        res = resolve;\n    });\n    void queue.add(async () => (0,p_timeout__WEBPACK_IMPORTED_MODULE_0__[\"default\"])((async () => {\n        await new Promise((resolve) => {\n            res(() => {\n                resolve();\n            });\n        });\n    })(), {\n        milliseconds: options.timeout\n    }));\n    return p;\n}\nconst createMutex = (name, options) => {\n    if (implementation.isWorker === true) {\n        return {\n            readLock: implementation.readLock(name, options),\n            writeLock: implementation.writeLock(name, options)\n        };\n    }\n    const masterQueue = new p_queue__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({ concurrency: 1 });\n    let readQueue;\n    return {\n        async readLock() {\n            // If there's already a read queue, just add the task to it\n            if (readQueue != null) {\n                return createReleaseable(readQueue, options);\n            }\n            // Create a new read queue\n            readQueue = new p_queue__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                concurrency: options.concurrency,\n                autoStart: false\n            });\n            const localReadQueue = readQueue;\n            // Add the task to the read queue\n            const readPromise = createReleaseable(readQueue, options);\n            void masterQueue.add(async () => {\n                // Start the task only once the master queue has completed processing\n                // any previous tasks\n                localReadQueue.start();\n                // Once all the tasks in the read queue have completed, remove it so\n                // that the next read lock will occur after any write locks that were\n                // started in the interim\n                await localReadQueue.onIdle()\n                    .then(() => {\n                    if (readQueue === localReadQueue) {\n                        readQueue = null;\n                    }\n                });\n            });\n            return readPromise;\n        },\n        async writeLock() {\n            // Remove the read queue reference, so that any later read locks will be\n            // added to a new queue that starts after this write lock has been\n            // released\n            readQueue = null;\n            return createReleaseable(masterQueue, options);\n        }\n    };\n};\nconst defaultOptions = {\n    name: 'lock',\n    concurrency: Infinity,\n    timeout: 84600000,\n    singleProcess: false\n};\nfunction createMortice(options) {\n    const opts = Object.assign({}, defaultOptions, options);\n    if (implementation == null) {\n        implementation = (0,_node_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(opts);\n        if (implementation.isWorker !== true) {\n            // we are master, set up worker requests\n            implementation.addEventListener('requestReadLock', (event) => {\n                if (mutexes[event.data.name] == null) {\n                    return;\n                }\n                void mutexes[event.data.name].readLock()\n                    .then(async (release) => event.data.handler().finally(() => { release(); }));\n            });\n            implementation.addEventListener('requestWriteLock', async (event) => {\n                if (mutexes[event.data.name] == null) {\n                    return;\n                }\n                void mutexes[event.data.name].writeLock()\n                    .then(async (release) => event.data.handler().finally(() => { release(); }));\n            });\n        }\n    }\n    if (mutexes[opts.name] == null) {\n        mutexes[opts.name] = createMutex(opts.name, opts);\n    }\n    return mutexes[opts.name];\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/mortice/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/mortice/dist/src/utils.js":
/*!************************************************!*\
  !*** ./node_modules/mortice/dist/src/utils.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   nanoid: () => (/* binding */ nanoid)\n/* harmony export */ });\nconst nanoid = (size = 21) => {\n    return Math.random().toString().substring(2);\n};\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://ems/./node_modules/mortice/dist/src/utils.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Codec: () => (/* binding */ Codec),\n/* harmony export */   baseX: () => (/* binding */ baseX),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   or: () => (/* binding */ or),\n/* harmony export */   rfc4648: () => (/* binding */ rfc4648)\n/* harmony export */ });\n/* harmony import */ var _vendor_base_x_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../vendor/base-x.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/vendor/base-x.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bytes.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bytes.js\");\n\n\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nconst or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nclass Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nconst from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nconst baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = (0,_vendor_base_x_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.coerce)(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nconst rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base10.js":
/*!************************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base10.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base10: () => (/* binding */ base10)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base10 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n});\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base10.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base16.js":
/*!************************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base16.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base16: () => (/* binding */ base16),\n/* harmony export */   base16upper: () => (/* binding */ base16upper)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base16 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n});\nconst base16upper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n});\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base16.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base2.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base2.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base2: () => (/* binding */ base2)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base2 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n});\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base2.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base256emoji.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base256emoji.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base256emoji: () => (/* binding */ base256emoji)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base.js\");\n\nconst alphabet = Array.from('\\uD83D\\uDE80\\uD83E\\uDE90\\u2604\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09\\u2600\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02\\u2764\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09\\u263A\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E\\u270C\\u2728\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D\\u2763\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33\\u270B\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13\\u2B50\\u2705\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6\\u2714\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90\\u2639\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20\\u261D\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B\\u26BD\\uD83E\\uDD19\\u2615\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81\\u26A1\\uD83C\\uDF1E\\uD83C\\uDF88\\u274C\\u270A\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C\\u2708\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74\\u25B6\\u27A1\\u2753\\uD83D\\uDC8E\\uD83D\\uDCB8\\u2B07\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A\\u26A0\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37\\u260E\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51\\u2744\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42');\nconst alphabetBytesToChars = alphabet.reduce((p, c, i) => {\n  p[i] = c;\n  return p;\n}, []);\nconst alphabetCharsToBytes = alphabet.reduce((p, c, i) => {\n  p[c.codePointAt(0)] = i;\n  return p;\n}, []);\nfunction encode(data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c];\n    return p;\n  }, '');\n}\nfunction decode(str) {\n  const byts = [];\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[char.codePointAt(0)];\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${ char }`);\n    }\n    byts.push(byt);\n  }\n  return new Uint8Array(byts);\n}\nconst base256emoji = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.from)({\n  prefix: '\\uD83D\\uDE80',\n  name: 'base256emoji',\n  encode,\n  decode\n});\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base256emoji.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base32.js":
/*!************************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base32.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base32: () => (/* binding */ base32),\n/* harmony export */   base32hex: () => (/* binding */ base32hex),\n/* harmony export */   base32hexpad: () => (/* binding */ base32hexpad),\n/* harmony export */   base32hexpadupper: () => (/* binding */ base32hexpadupper),\n/* harmony export */   base32hexupper: () => (/* binding */ base32hexupper),\n/* harmony export */   base32pad: () => (/* binding */ base32pad),\n/* harmony export */   base32padupper: () => (/* binding */ base32padupper),\n/* harmony export */   base32upper: () => (/* binding */ base32upper),\n/* harmony export */   base32z: () => (/* binding */ base32z)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base32 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n});\nconst base32upper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n});\nconst base32pad = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n});\nconst base32padupper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n});\nconst base32hex = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n});\nconst base32hexupper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n});\nconst base32hexpad = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n});\nconst base32hexpadupper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n});\nconst base32z = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n});\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base32.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base36.js":
/*!************************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base36.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base36: () => (/* binding */ base36),\n/* harmony export */   base36upper: () => (/* binding */ base36upper)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base36 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nconst base36upper = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base36.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base58.js":
/*!************************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base58.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base58btc: () => (/* binding */ base58btc),\n/* harmony export */   base58flickr: () => (/* binding */ base58flickr)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base58btc = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nconst base58flickr = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.baseX)({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base58.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base64.js":
/*!************************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base64.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64: () => (/* binding */ base64),\n/* harmony export */   base64pad: () => (/* binding */ base64pad),\n/* harmony export */   base64url: () => (/* binding */ base64url),\n/* harmony export */   base64urlpad: () => (/* binding */ base64urlpad)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base64 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n});\nconst base64pad = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n});\nconst base64url = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n});\nconst base64urlpad = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n});\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base64.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base8.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base8.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base8: () => (/* binding */ base8)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base.js\");\n\nconst base8 = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.rfc4648)({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n});\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base8.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/bases/identity.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/bases/identity.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   identity: () => (/* binding */ identity)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bytes.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bytes.js\");\n\n\nconst identity = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.from)({\n  prefix: '\\0',\n  name: 'identity',\n  encode: buf => (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.toString)(buf),\n  decode: str => (0,_bytes_js__WEBPACK_IMPORTED_MODULE_1__.fromString)(str)\n});\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/bases/identity.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/basics.js":
/*!******************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/basics.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CID: () => (/* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_14__.CID),\n/* harmony export */   bases: () => (/* binding */ bases),\n/* harmony export */   bytes: () => (/* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_14__.bytes),\n/* harmony export */   codecs: () => (/* binding */ codecs),\n/* harmony export */   digest: () => (/* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_14__.digest),\n/* harmony export */   hasher: () => (/* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_14__.hasher),\n/* harmony export */   hashes: () => (/* binding */ hashes),\n/* harmony export */   varint: () => (/* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_14__.varint)\n/* harmony export */ });\n/* harmony import */ var _bases_identity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bases/identity.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/identity.js\");\n/* harmony import */ var _bases_base2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bases/base2.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base2.js\");\n/* harmony import */ var _bases_base8_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bases/base8.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base8.js\");\n/* harmony import */ var _bases_base10_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bases/base10.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base10.js\");\n/* harmony import */ var _bases_base16_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bases/base16.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base16.js\");\n/* harmony import */ var _bases_base32_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./bases/base32.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base32.js\");\n/* harmony import */ var _bases_base36_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./bases/base36.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base36.js\");\n/* harmony import */ var _bases_base58_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./bases/base58.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base58.js\");\n/* harmony import */ var _bases_base64_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./bases/base64.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base64.js\");\n/* harmony import */ var _bases_base256emoji_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./bases/base256emoji.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base256emoji.js\");\n/* harmony import */ var _hashes_sha2_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./hashes/sha2.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/sha2-browser.js\");\n/* harmony import */ var _hashes_identity_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./hashes/identity.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/identity.js\");\n/* harmony import */ var _codecs_raw_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./codecs/raw.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/codecs/raw.js\");\n/* harmony import */ var _codecs_json_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./codecs/json.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/codecs/json.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./index.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst bases = {\n  ..._bases_identity_js__WEBPACK_IMPORTED_MODULE_0__,\n  ..._bases_base2_js__WEBPACK_IMPORTED_MODULE_1__,\n  ..._bases_base8_js__WEBPACK_IMPORTED_MODULE_2__,\n  ..._bases_base10_js__WEBPACK_IMPORTED_MODULE_3__,\n  ..._bases_base16_js__WEBPACK_IMPORTED_MODULE_4__,\n  ..._bases_base32_js__WEBPACK_IMPORTED_MODULE_5__,\n  ..._bases_base36_js__WEBPACK_IMPORTED_MODULE_6__,\n  ..._bases_base58_js__WEBPACK_IMPORTED_MODULE_7__,\n  ..._bases_base64_js__WEBPACK_IMPORTED_MODULE_8__,\n  ..._bases_base256emoji_js__WEBPACK_IMPORTED_MODULE_9__\n};\nconst hashes = {\n  ..._hashes_sha2_js__WEBPACK_IMPORTED_MODULE_10__,\n  ..._hashes_identity_js__WEBPACK_IMPORTED_MODULE_11__\n};\nconst codecs = {\n  raw: _codecs_raw_js__WEBPACK_IMPORTED_MODULE_12__,\n  json: _codecs_json_js__WEBPACK_IMPORTED_MODULE_13__\n};\n\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/basics.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/bytes.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/bytes.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coerce: () => (/* binding */ coerce),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   fromString: () => (/* binding */ fromString),\n/* harmony export */   isBinary: () => (/* binding */ isBinary),\n/* harmony export */   toHex: () => (/* binding */ toHex),\n/* harmony export */   toString: () => (/* binding */ toString)\n/* harmony export */ });\nconst empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\n\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/bytes.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/cid.js":
/*!***************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/cid.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CID: () => (/* binding */ CID)\n/* harmony export */ });\n/* harmony import */ var _varint_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./varint.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/varint.js\");\n/* harmony import */ var _hashes_digest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hashes/digest.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/digest.js\");\n/* harmony import */ var _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bases/base58.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base58.js\");\n/* harmony import */ var _bases_base32_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bases/base32.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bases/base32.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bytes.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bytes.js\");\n\n\n\n\n\nclass CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest} = this.multihash;\n        const multihash = _hashes_digest_js__WEBPACK_IMPORTED_MODULE_1__.create(code, digest);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && _hashes_digest_js__WEBPACK_IMPORTED_MODULE_1__.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || _bases_base32_js__WEBPACK_IMPORTED_MODULE_3__.base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest = _hashes_digest_js__WEBPACK_IMPORTED_MODULE_1__.decode(multihash);\n      return CID.create(version, code, digest);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes) {\n    const specs = CID.inspectBytes(bytes);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_4__.coerce)(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest = new _hashes_digest_js__WEBPACK_IMPORTED_MODULE_1__.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n    return [\n      cid,\n      bytes.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = _varint_js__WEBPACK_IMPORTED_MODULE_0__.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc;\n      return [\n        _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix,\n        decoder.decode(`${ _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix }${ source }`)\n      ];\n    }\n  case _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix: {\n      const decoder = base || _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc;\n      return [\n        _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case _bases_base32_js__WEBPACK_IMPORTED_MODULE_3__.base32.prefix: {\n      const decoder = base || _bases_base32_js__WEBPACK_IMPORTED_MODULE_3__.base32;\n      return [\n        _bases_base32_js__WEBPACK_IMPORTED_MODULE_3__.base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== _bases_base58_js__WEBPACK_IMPORTED_MODULE_2__.base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = _varint_js__WEBPACK_IMPORTED_MODULE_0__.encodingLength(version);\n  const hashOffset = codeOffset + _varint_js__WEBPACK_IMPORTED_MODULE_0__.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  _varint_js__WEBPACK_IMPORTED_MODULE_0__.encodeTo(version, bytes, 0);\n  _varint_js__WEBPACK_IMPORTED_MODULE_0__.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/cid.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/codecs/json.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/codecs/json.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   code: () => (/* binding */ code),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   name: () => (/* binding */ name)\n/* harmony export */ });\nconst textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nconst name = 'json';\nconst code = 512;\nconst encode = node => textEncoder.encode(JSON.stringify(node));\nconst decode = data => JSON.parse(textDecoder.decode(data));\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/codecs/json.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/codecs/raw.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/codecs/raw.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   code: () => (/* binding */ code),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   name: () => (/* binding */ name)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bytes.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bytes.js\");\n\nconst name = 'raw';\nconst code = 85;\nconst encode = node => (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.coerce)(node);\nconst decode = data => (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.coerce)(data);\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/codecs/raw.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/digest.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/digest.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Digest: () => (/* binding */ Digest),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   equals: () => (/* binding */ equals)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bytes.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bytes.js\");\n/* harmony import */ var _varint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../varint.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/varint.js\");\n\n\nconst create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = _varint_js__WEBPACK_IMPORTED_MODULE_1__.encodingLength(code);\n  const digestOffset = sizeOffset + _varint_js__WEBPACK_IMPORTED_MODULE_1__.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  _varint_js__WEBPACK_IMPORTED_MODULE_1__.encodeTo(code, bytes, 0);\n  _varint_js__WEBPACK_IMPORTED_MODULE_1__.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nconst decode = multihash => {\n  const bytes = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.coerce)(multihash);\n  const [code, sizeOffset] = _varint_js__WEBPACK_IMPORTED_MODULE_1__.decode(bytes);\n  const [size, digestOffset] = _varint_js__WEBPACK_IMPORTED_MODULE_1__.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes);\n};\nconst equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && (0,_bytes_js__WEBPACK_IMPORTED_MODULE_0__.equals)(a.bytes, b.bytes);\n  }\n};\nclass Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/digest.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/hasher.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/hasher.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hasher: () => (/* binding */ Hasher),\n/* harmony export */   from: () => (/* binding */ from)\n/* harmony export */ });\n/* harmony import */ var _digest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./digest.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/digest.js\");\n\nconst from = ({name, code, encode}) => new Hasher(name, code, encode);\nclass Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? _digest_js__WEBPACK_IMPORTED_MODULE_0__.create(this.code, result) : result.then(digest => _digest_js__WEBPACK_IMPORTED_MODULE_0__.create(this.code, digest));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/hasher.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/identity.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/identity.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   identity: () => (/* binding */ identity)\n/* harmony export */ });\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bytes.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bytes.js\");\n/* harmony import */ var _digest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./digest.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/digest.js\");\n\n\nconst code = 0;\nconst name = 'identity';\nconst encode = _bytes_js__WEBPACK_IMPORTED_MODULE_0__.coerce;\nconst digest = input => _digest_js__WEBPACK_IMPORTED_MODULE_1__.create(code, encode(input));\nconst identity = {\n  code,\n  name,\n  encode,\n  digest\n};\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/identity.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/sha2-browser.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/sha2-browser.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sha256: () => (/* binding */ sha256),\n/* harmony export */   sha512: () => (/* binding */ sha512)\n/* harmony export */ });\n/* harmony import */ var _hasher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hasher.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/hasher.js\");\n\nconst sha = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));\nconst sha256 = (0,_hasher_js__WEBPACK_IMPORTED_MODULE_0__.from)({\n  name: 'sha2-256',\n  code: 18,\n  encode: sha('SHA-256')\n});\nconst sha512 = (0,_hasher_js__WEBPACK_IMPORTED_MODULE_0__.from)({\n  name: 'sha2-512',\n  code: 19,\n  encode: sha('SHA-512')\n});\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/sha2-browser.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CID: () => (/* reexport safe */ _cid_js__WEBPACK_IMPORTED_MODULE_0__.CID),\n/* harmony export */   bytes: () => (/* reexport module object */ _bytes_js__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   digest: () => (/* reexport module object */ _hashes_digest_js__WEBPACK_IMPORTED_MODULE_4__),\n/* harmony export */   hasher: () => (/* reexport module object */ _hashes_hasher_js__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   varint: () => (/* reexport module object */ _varint_js__WEBPACK_IMPORTED_MODULE_1__)\n/* harmony export */ });\n/* harmony import */ var _cid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cid.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/cid.js\");\n/* harmony import */ var _varint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./varint.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/varint.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bytes.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/bytes.js\");\n/* harmony import */ var _hashes_hasher_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hashes/hasher.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/hasher.js\");\n/* harmony import */ var _hashes_digest_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hashes/digest.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/hashes/digest.js\");\n\n\n\n\n\n\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/index.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/src/varint.js":
/*!******************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/src/varint.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encodeTo: () => (/* binding */ encodeTo),\n/* harmony export */   encodingLength: () => (/* binding */ encodingLength)\n/* harmony export */ });\n/* harmony import */ var _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vendor/varint.js */ \"./node_modules/multihashes/node_modules/multiformats/esm/vendor/varint.js\");\n\nconst decode = (data, offset = 0) => {\n  const code = _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].decode(data, offset);\n  return [\n    code,\n    _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].decode.bytes\n  ];\n};\nconst encodeTo = (int, target, offset = 0) => {\n  _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].encode(int, target, offset);\n  return target;\n};\nconst encodingLength = int => {\n  return _vendor_varint_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].encodingLength(int);\n};\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/src/varint.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/vendor/base-x.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/vendor/base-x.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction base(ALPHABET, name) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode(source) {\n    if (source instanceof Uint8Array);\n    else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === ' ') {\n      return;\n    }\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    if (source[psz] === ' ') {\n      return;\n    }\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${ name } character`);\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_brrp__multiformats_scope_baseX);\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/vendor/base-x.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/multiformats/esm/vendor/varint.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/multiformats/esm/vendor/varint.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar encode_1 = encode;\nvar MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n  while (num >= INT) {\n    out[offset++] = num & 255 | MSB;\n    num /= 128;\n  }\n  while (num & MSBALL) {\n    out[offset++] = num & 255 | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  encode.bytes = offset - oldOffset + 1;\n  return out;\n}\nvar decode = read;\nvar MSB$1 = 128, REST$1 = 127;\nfunction read(buf, offset) {\n  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint');\n    }\n    b = buf[counter++];\n    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1);\n  read.bytes = counter - offset;\n  return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (value) {\n  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\n};\nvar varint = {\n  encode: encode_1,\n  decode: decode,\n  encodingLength: length\n};\nvar _brrp_varint = varint;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_brrp_varint);\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/multiformats/esm/vendor/varint.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/uint8arrays/esm/src/alloc.js":
/*!****************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/uint8arrays/esm/src/alloc.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   alloc: () => (/* binding */ alloc),\n/* harmony export */   allocUnsafe: () => (/* binding */ allocUnsafe)\n/* harmony export */ });\n/* harmony import */ var _util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/as-uint8array.js */ \"./node_modules/multihashes/node_modules/uint8arrays/esm/src/util/as-uint8array.js\");\n\nfunction alloc(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.alloc != null) {\n    return (0,_util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_0__.asUint8Array)(globalThis.Buffer.alloc(size));\n  }\n  return new Uint8Array(size);\n}\nfunction allocUnsafe(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {\n    return (0,_util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_0__.asUint8Array)(globalThis.Buffer.allocUnsafe(size));\n  }\n  return new Uint8Array(size);\n}\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/uint8arrays/esm/src/alloc.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/uint8arrays/esm/src/concat.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/uint8arrays/esm/src/concat.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concat: () => (/* binding */ concat)\n/* harmony export */ });\n/* harmony import */ var _alloc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alloc.js */ \"./node_modules/multihashes/node_modules/uint8arrays/esm/src/alloc.js\");\n/* harmony import */ var _util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/as-uint8array.js */ \"./node_modules/multihashes/node_modules/uint8arrays/esm/src/util/as-uint8array.js\");\n\n\nfunction concat(arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0);\n  }\n  const output = (0,_alloc_js__WEBPACK_IMPORTED_MODULE_0__.allocUnsafe)(length);\n  let offset = 0;\n  for (const arr of arrays) {\n    output.set(arr, offset);\n    offset += arr.length;\n  }\n  return (0,_util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_1__.asUint8Array)(output);\n}\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/uint8arrays/esm/src/concat.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/uint8arrays/esm/src/from-string.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/uint8arrays/esm/src/from-string.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromString: () => (/* binding */ fromString)\n/* harmony export */ });\n/* harmony import */ var _util_bases_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/bases.js */ \"./node_modules/multihashes/node_modules/uint8arrays/esm/src/util/bases.js\");\n/* harmony import */ var _util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/as-uint8array.js */ \"./node_modules/multihashes/node_modules/uint8arrays/esm/src/util/as-uint8array.js\");\n\n\nfunction fromString(string, encoding = 'utf8') {\n  const base = _util_bases_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"][encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return (0,_util_as_uint8array_js__WEBPACK_IMPORTED_MODULE_1__.asUint8Array)(globalThis.Buffer.from(string, 'utf-8'));\n  }\n  return base.decoder.decode(`${ base.prefix }${ string }`);\n}\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/uint8arrays/esm/src/from-string.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/uint8arrays/esm/src/to-string.js":
/*!********************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/uint8arrays/esm/src/to-string.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toString: () => (/* binding */ toString)\n/* harmony export */ });\n/* harmony import */ var _util_bases_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/bases.js */ \"./node_modules/multihashes/node_modules/uint8arrays/esm/src/util/bases.js\");\n\nfunction toString(array, encoding = 'utf8') {\n  const base = _util_bases_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"][encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');\n  }\n  return base.encoder.encode(array).substring(1);\n}\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/uint8arrays/esm/src/to-string.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/uint8arrays/esm/src/util/as-uint8array.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/uint8arrays/esm/src/util/as-uint8array.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asUint8Array: () => (/* binding */ asUint8Array)\n/* harmony export */ });\nfunction asUint8Array(buf) {\n  if (globalThis.Buffer != null) {\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n  return buf;\n}\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/uint8arrays/esm/src/util/as-uint8array.js?");

/***/ }),

/***/ "./node_modules/multihashes/node_modules/uint8arrays/esm/src/util/bases.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/multihashes/node_modules/uint8arrays/esm/src/util/bases.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var multiformats_basics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/basics */ \"./node_modules/multihashes/node_modules/multiformats/esm/src/basics.js\");\n/* harmony import */ var _alloc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../alloc.js */ \"./node_modules/multihashes/node_modules/uint8arrays/esm/src/alloc.js\");\n\n\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: { decode }\n  };\n}\nconst string = createCodec('utf8', 'u', buf => {\n  const decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, str => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', buf => {\n  let string = 'a';\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n  return string;\n}, str => {\n  str = str.substring(1);\n  const buf = (0,_alloc_js__WEBPACK_IMPORTED_MODULE_1__.allocUnsafe)(str.length);\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n});\nconst BASES = {\n  utf8: string,\n  'utf-8': string,\n  hex: multiformats_basics__WEBPACK_IMPORTED_MODULE_0__.bases.base16,\n  latin1: ascii,\n  ascii: ascii,\n  binary: ascii,\n  ...multiformats_basics__WEBPACK_IMPORTED_MODULE_0__.bases\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BASES);\n\n//# sourceURL=webpack://ems/./node_modules/multihashes/node_modules/uint8arrays/esm/src/util/bases.js?");

/***/ }),

/***/ "./node_modules/observable-webworkers/dist/src/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/observable-webworkers/dist/src/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst events = {};\nconst observable = (worker) => {\n    worker.addEventListener('message', (event) => {\n        observable.dispatchEvent('message', worker, event);\n    });\n    if (worker.port != null) {\n        worker.port.addEventListener('message', (event) => {\n            observable.dispatchEvent('message', worker, event);\n        });\n    }\n};\nobservable.addEventListener = (type, fn) => {\n    if (events[type] == null) {\n        events[type] = [];\n    }\n    events[type].push(fn);\n};\nobservable.removeEventListener = (type, fn) => {\n    if (events[type] == null) {\n        return;\n    }\n    events[type] = events[type]\n        .filter(listener => listener === fn);\n};\nobservable.dispatchEvent = function (type, worker, event) {\n    if (events[type] == null) {\n        return;\n    }\n    events[type].forEach(fn => fn(worker, event));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (observable);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/observable-webworkers/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/p-event/index.js":
/*!***************************************!*\
  !*** ./node_modules/p-event/index.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TimeoutError: () => (/* reexport safe */ p_timeout__WEBPACK_IMPORTED_MODULE_0__.TimeoutError),\n/* harmony export */   pEvent: () => (/* binding */ pEvent),\n/* harmony export */   pEventIterator: () => (/* binding */ pEventIterator),\n/* harmony export */   pEventMultiple: () => (/* binding */ pEventMultiple)\n/* harmony export */ });\n/* harmony import */ var p_timeout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-timeout */ \"./node_modules/p-timeout/index.js\");\n\n\nconst normalizeEmitter = emitter => {\n\tconst addListener = emitter.addEventListener || emitter.on || emitter.addListener;\n\tconst removeListener = emitter.removeEventListener || emitter.off || emitter.removeListener;\n\n\tif (!addListener || !removeListener) {\n\t\tthrow new TypeError('Emitter is not compatible');\n\t}\n\n\treturn {\n\t\taddListener: addListener.bind(emitter),\n\t\tremoveListener: removeListener.bind(emitter),\n\t};\n};\n\nfunction pEventMultiple(emitter, event, options) {\n\tlet cancel;\n\tconst returnValue = new Promise((resolve, reject) => {\n\t\toptions = {\n\t\t\trejectionEvents: ['error'],\n\t\t\tmultiArgs: false,\n\t\t\tresolveImmediately: false,\n\t\t\t...options,\n\t\t};\n\n\t\tif (!(options.count >= 0 && (options.count === Number.POSITIVE_INFINITY || Number.isInteger(options.count)))) {\n\t\t\tthrow new TypeError('The `count` option should be at least 0 or more');\n\t\t}\n\n\t\toptions.signal?.throwIfAborted();\n\n\t\t// Allow multiple events\n\t\tconst events = [event].flat();\n\n\t\tconst items = [];\n\t\tconst {addListener, removeListener} = normalizeEmitter(emitter);\n\n\t\tconst onItem = (...arguments_) => {\n\t\t\tconst value = options.multiArgs ? arguments_ : arguments_[0];\n\n\t\t\t// eslint-disable-next-line unicorn/no-array-callback-reference\n\t\t\tif (options.filter && !options.filter(value)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\titems.push(value);\n\n\t\t\tif (options.count === items.length) {\n\t\t\t\tcancel();\n\t\t\t\tresolve(items);\n\t\t\t}\n\t\t};\n\n\t\tconst rejectHandler = error => {\n\t\t\tcancel();\n\t\t\treject(error);\n\t\t};\n\n\t\tcancel = () => {\n\t\t\tfor (const event of events) {\n\t\t\t\tremoveListener(event, onItem);\n\t\t\t}\n\n\t\t\tfor (const rejectionEvent of options.rejectionEvents) {\n\t\t\t\tremoveListener(rejectionEvent, rejectHandler);\n\t\t\t}\n\t\t};\n\n\t\tfor (const event of events) {\n\t\t\taddListener(event, onItem);\n\t\t}\n\n\t\tfor (const rejectionEvent of options.rejectionEvents) {\n\t\t\taddListener(rejectionEvent, rejectHandler);\n\t\t}\n\n\t\tif (options.signal) {\n\t\t\toptions.signal.addEventListener('abort', () => {\n\t\t\t\trejectHandler(options.signal.reason);\n\t\t\t}, {once: true});\n\t\t}\n\n\t\tif (options.resolveImmediately) {\n\t\t\tresolve(items);\n\t\t}\n\t});\n\n\treturnValue.cancel = cancel;\n\n\tif (typeof options.timeout === 'number') {\n\t\tconst timeout = (0,p_timeout__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(returnValue, {milliseconds: options.timeout});\n\t\ttimeout.cancel = cancel;\n\t\treturn timeout;\n\t}\n\n\treturn returnValue;\n}\n\nfunction pEvent(emitter, event, options) {\n\tif (typeof options === 'function') {\n\t\toptions = {filter: options};\n\t}\n\n\toptions = {\n\t\t...options,\n\t\tcount: 1,\n\t\tresolveImmediately: false,\n\t};\n\n\tconst arrayPromise = pEventMultiple(emitter, event, options);\n\tconst promise = arrayPromise.then(array => array[0]);\n\tpromise.cancel = arrayPromise.cancel;\n\n\treturn promise;\n}\n\nfunction pEventIterator(emitter, event, options) {\n\tif (typeof options === 'function') {\n\t\toptions = {filter: options};\n\t}\n\n\t// Allow multiple events\n\tconst events = [event].flat();\n\n\toptions = {\n\t\trejectionEvents: ['error'],\n\t\tresolutionEvents: [],\n\t\tlimit: Number.POSITIVE_INFINITY,\n\t\tmultiArgs: false,\n\t\t...options,\n\t};\n\n\tconst {limit} = options;\n\tconst isValidLimit = limit >= 0 && (limit === Number.POSITIVE_INFINITY || Number.isInteger(limit));\n\tif (!isValidLimit) {\n\t\tthrow new TypeError('The `limit` option should be a non-negative integer or Infinity');\n\t}\n\n\toptions.signal?.throwIfAborted();\n\n\tif (limit === 0) {\n\t\t// Return an empty async iterator to avoid any further cost\n\t\treturn {\n\t\t\t[Symbol.asyncIterator]() {\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tasync next() {\n\t\t\t\treturn {\n\t\t\t\t\tdone: true,\n\t\t\t\t\tvalue: undefined,\n\t\t\t\t};\n\t\t\t},\n\t\t};\n\t}\n\n\tconst {addListener, removeListener} = normalizeEmitter(emitter);\n\n\tlet isDone = false;\n\tlet error;\n\tlet hasPendingError = false;\n\tconst nextQueue = [];\n\tconst valueQueue = [];\n\tlet eventCount = 0;\n\tlet isLimitReached = false;\n\n\tconst valueHandler = (...arguments_) => {\n\t\teventCount++;\n\t\tisLimitReached = eventCount === limit;\n\n\t\tconst value = options.multiArgs ? arguments_ : arguments_[0];\n\n\t\tif (nextQueue.length > 0) {\n\t\t\tconst {resolve} = nextQueue.shift();\n\n\t\t\tresolve({done: false, value});\n\n\t\t\tif (isLimitReached) {\n\t\t\t\tcancel();\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueQueue.push(value);\n\n\t\tif (isLimitReached) {\n\t\t\tcancel();\n\t\t}\n\t};\n\n\tconst cancel = () => {\n\t\tisDone = true;\n\n\t\tfor (const event of events) {\n\t\t\tremoveListener(event, valueHandler);\n\t\t}\n\n\t\tfor (const rejectionEvent of options.rejectionEvents) {\n\t\t\tremoveListener(rejectionEvent, rejectHandler);\n\t\t}\n\n\t\tfor (const resolutionEvent of options.resolutionEvents) {\n\t\t\tremoveListener(resolutionEvent, resolveHandler);\n\t\t}\n\n\t\twhile (nextQueue.length > 0) {\n\t\t\tconst {resolve} = nextQueue.shift();\n\t\t\tresolve({done: true, value: undefined});\n\t\t}\n\t};\n\n\tconst rejectHandler = (...arguments_) => {\n\t\terror = options.multiArgs ? arguments_ : arguments_[0];\n\n\t\tif (nextQueue.length > 0) {\n\t\t\tconst {reject} = nextQueue.shift();\n\t\t\treject(error);\n\t\t} else {\n\t\t\thasPendingError = true;\n\t\t}\n\n\t\tcancel();\n\t};\n\n\tconst resolveHandler = (...arguments_) => {\n\t\tconst value = options.multiArgs ? arguments_ : arguments_[0];\n\n\t\t// eslint-disable-next-line unicorn/no-array-callback-reference\n\t\tif (options.filter && !options.filter(value)) {\n\t\t\tcancel();\n\t\t\treturn;\n\t\t}\n\n\t\tif (nextQueue.length > 0) {\n\t\t\tconst {resolve} = nextQueue.shift();\n\t\t\tresolve({done: true, value});\n\t\t} else {\n\t\t\tvalueQueue.push(value);\n\t\t}\n\n\t\tcancel();\n\t};\n\n\tfor (const event of events) {\n\t\taddListener(event, valueHandler);\n\t}\n\n\tfor (const rejectionEvent of options.rejectionEvents) {\n\t\taddListener(rejectionEvent, rejectHandler);\n\t}\n\n\tfor (const resolutionEvent of options.resolutionEvents) {\n\t\taddListener(resolutionEvent, resolveHandler);\n\t}\n\n\tif (options.signal) {\n\t\toptions.signal.addEventListener('abort', () => {\n\t\t\trejectHandler(options.signal.reason);\n\t\t}, {once: true});\n\t}\n\n\treturn {\n\t\t[Symbol.asyncIterator]() {\n\t\t\treturn this;\n\t\t},\n\t\tasync next() {\n\t\t\tif (valueQueue.length > 0) {\n\t\t\t\tconst value = valueQueue.shift();\n\t\t\t\treturn {\n\t\t\t\t\tdone: isDone && valueQueue.length === 0 && !isLimitReached,\n\t\t\t\t\tvalue,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (hasPendingError) {\n\t\t\t\thasPendingError = false;\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\tif (isDone) {\n\t\t\t\treturn {\n\t\t\t\t\tdone: true,\n\t\t\t\t\tvalue: undefined,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tnextQueue.push({resolve, reject});\n\t\t\t});\n\t\t},\n\t\tasync return(value) {\n\t\t\tcancel();\n\t\t\treturn {\n\t\t\t\tdone: isDone,\n\t\t\t\tvalue,\n\t\t\t};\n\t\t},\n\t};\n}\n\n\n\n\n//# sourceURL=webpack://ems/./node_modules/p-event/index.js?");

/***/ }),

/***/ "./node_modules/race-event/dist/src/index.js":
/*!***************************************************!*\
  !*** ./node_modules/race-event/dist/src/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError),\n/* harmony export */   raceEvent: () => (/* binding */ raceEvent)\n/* harmony export */ });\n/**\n * @packageDocumentation\n *\n * Race an event against an AbortSignal, taking care to remove any event\n * listeners that were added.\n *\n * @example Getting started\n *\n * ```TypeScript\n * import { raceEvent } from 'race-event'\n *\n * const controller = new AbortController()\n * const emitter = new EventTarget()\n *\n * setTimeout(() => {\n *   controller.abort()\n * }, 500)\n *\n * setTimeout(() => {\n *   // too late\n *   emitter.dispatchEvent(new CustomEvent('event'))\n * }, 1000)\n *\n * // throws an AbortError\n * const resolve = await raceEvent(emitter, 'event', controller.signal)\n * ```\n *\n * @example Customising the thrown AbortError\n *\n * The error message and `.code` property of the thrown `AbortError` can be\n * specified by passing options:\n *\n * ```TypeScript\n * import { raceEvent } from 'race-event'\n *\n * const controller = new AbortController()\n * const emitter = new EventTarget()\n *\n * setTimeout(() => {\n *   controller.abort()\n * }, 500)\n *\n * // throws a Error: Oh no!\n * const resolve = await raceEvent(emitter, 'event', controller.signal, {\n *   errorMessage: 'Oh no!',\n *   errorCode: 'ERR_OH_NO'\n * })\n * ```\n *\n * @example Only resolving on specific events\n *\n * Where multiple events with the same type are emitted, a `filter` function can\n * be passed to only resolve on one of them:\n *\n * ```TypeScript\n * import { raceEvent } from 'race-event'\n *\n * const controller = new AbortController()\n * const emitter = new EventTarget()\n *\n * // throws a Error: Oh no!\n * const resolve = await raceEvent(emitter, 'event', controller.signal, {\n *   filter: (evt: Event) => {\n *     return evt.detail.foo === 'bar'\n *   }\n * })\n * ```\n *\n * @example Terminating early by throwing from the filter\n *\n * You can cause listening for the event to cease and all event listeners to be\n * removed by throwing from the filter:\n *\n * ```TypeScript\n * import { raceEvent } from 'race-event'\n *\n * const controller = new AbortController()\n * const emitter = new EventTarget()\n *\n * // throws Error: Cannot continue\n * const resolve = await raceEvent(emitter, 'event', controller.signal, {\n *   filter: (evt) => {\n *     if (...reasons) {\n *       throw new Error('Cannot continue')\n *     }\n *\n *     return true\n *   }\n * })\n * ```\n */\n/**\n * An abort error class that extends error\n */\nclass AbortError extends Error {\n    type;\n    code;\n    constructor(message, code) {\n        super(message ?? 'The operation was aborted');\n        this.type = 'aborted';\n        this.name = 'AbortError';\n        this.code = code ?? 'ABORT_ERR';\n    }\n}\n/**\n * Race a promise against an abort signal\n */\nasync function raceEvent(emitter, eventName, signal, opts) {\n    // create the error here so we have more context in the stack trace\n    const error = new AbortError(opts?.errorMessage, opts?.errorCode);\n    if (signal?.aborted === true) {\n        return Promise.reject(error);\n    }\n    return new Promise((resolve, reject) => {\n        const eventListener = (evt) => {\n            try {\n                if (opts?.filter?.(evt) === false) {\n                    return;\n                }\n            }\n            catch (err) {\n                emitter.removeEventListener(eventName, eventListener);\n                signal?.removeEventListener('abort', abortListener);\n                reject(err);\n                return;\n            }\n            emitter.removeEventListener(eventName, eventListener);\n            signal?.removeEventListener('abort', abortListener);\n            resolve(evt);\n        };\n        const abortListener = () => {\n            emitter.removeEventListener(eventName, eventListener);\n            signal?.removeEventListener('abort', abortListener);\n            reject(error);\n        };\n        emitter.addEventListener(eventName, eventListener);\n        signal?.addEventListener('abort', abortListener);\n    });\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/race-event/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/race-signal/dist/src/index.js":
/*!****************************************************!*\
  !*** ./node_modules/race-signal/dist/src/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError),\n/* harmony export */   raceSignal: () => (/* binding */ raceSignal)\n/* harmony export */ });\n/**\n * An abort error class that extends error\n */\nclass AbortError extends Error {\n    type;\n    code;\n    constructor(message, code) {\n        super(message ?? 'The operation was aborted');\n        this.type = 'aborted';\n        this.name = 'AbortError';\n        this.code = code ?? 'ABORT_ERR';\n    }\n}\n/**\n * Race a promise against an abort signal\n */\nasync function raceSignal(promise, signal, opts) {\n    if (signal == null) {\n        return promise;\n    }\n    if (signal.aborted) {\n        return Promise.reject(new AbortError(opts?.errorMessage, opts?.errorCode));\n    }\n    let listener;\n    // create the error here so we have more context in the stack trace\n    const error = new AbortError(opts?.errorMessage, opts?.errorCode);\n    try {\n        return await Promise.race([\n            promise,\n            new Promise((resolve, reject) => {\n                listener = () => {\n                    reject(error);\n                };\n                signal.addEventListener('abort', listener);\n            })\n        ]);\n    }\n    finally {\n        if (listener != null) {\n            signal.removeEventListener('abort', listener);\n        }\n    }\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/race-signal/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/uint8arrays/dist/src/compare.js":
/*!******************************************************!*\
  !*** ./node_modules/uint8arrays/dist/src/compare.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compare: () => (/* binding */ compare)\n/* harmony export */ });\n/**\n * Can be used with Array.sort to sort and array with Uint8Array entries\n */\nfunction compare(a, b) {\n    for (let i = 0; i < a.byteLength; i++) {\n        if (a[i] < b[i]) {\n            return -1;\n        }\n        if (a[i] > b[i]) {\n            return 1;\n        }\n    }\n    if (a.byteLength > b.byteLength) {\n        return 1;\n    }\n    if (a.byteLength < b.byteLength) {\n        return -1;\n    }\n    return 0;\n}\n//# sourceMappingURL=compare.js.map\n\n//# sourceURL=webpack://ems/./node_modules/uint8arrays/dist/src/compare.js?");

/***/ }),

/***/ "./node_modules/uint8arrays/dist/src/index.js":
/*!****************************************************!*\
  !*** ./node_modules/uint8arrays/dist/src/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compare: () => (/* reexport safe */ _compare__WEBPACK_IMPORTED_MODULE_2__.compare),\n/* harmony export */   concat: () => (/* reexport safe */ _concat__WEBPACK_IMPORTED_MODULE_3__.concat),\n/* harmony export */   equals: () => (/* reexport safe */ _equals_js__WEBPACK_IMPORTED_MODULE_0__.equals),\n/* harmony export */   fromString: () => (/* reexport safe */ _from_string__WEBPACK_IMPORTED_MODULE_4__.fromString),\n/* harmony export */   toString: () => (/* reexport safe */ _to_string__WEBPACK_IMPORTED_MODULE_5__.toString),\n/* harmony export */   xor: () => (/* reexport safe */ _xor_js__WEBPACK_IMPORTED_MODULE_1__.xor)\n/* harmony export */ });\n/* harmony import */ var _equals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./equals.js */ \"./node_modules/uint8arrays/dist/src/equals.js\");\n/* harmony import */ var _xor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xor.js */ \"./node_modules/uint8arrays/dist/src/xor.js\");\n/* harmony import */ var _compare__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! #compare */ \"./node_modules/uint8arrays/dist/src/compare.js\");\n/* harmony import */ var _concat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! #concat */ \"./node_modules/uint8arrays/dist/src/concat.js\");\n/* harmony import */ var _from_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! #from-string */ \"./node_modules/uint8arrays/dist/src/from-string.js\");\n/* harmony import */ var _to_string__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! #to-string */ \"./node_modules/uint8arrays/dist/src/to-string.js\");\n/**\n * @packageDocumentation\n *\n * `Uint8Array`s bring memory-efficient(ish) byte handling to browsers - they are similar to Node.js `Buffer`s but lack a lot of the utility methods present on that class.\n *\n * This module exports a number of function that let you do common operations - joining Uint8Arrays together, seeing if they have the same contents etc.\n *\n * Since Node.js `Buffer`s are also `Uint8Array`s, it falls back to `Buffer` internally where it makes sense for performance reasons.\n *\n * ## alloc(size)\n *\n * Create a new `Uint8Array`. When running under Node.js, `Buffer` will be used in preference to `Uint8Array`.\n *\n * ### Example\n *\n * ```js\n * import { alloc } from 'uint8arrays/alloc'\n *\n * const buf = alloc(100)\n * ```\n *\n * ## allocUnsafe(size)\n *\n * Create a new `Uint8Array`. When running under Node.js, `Buffer` will be used in preference to `Uint8Array`.\n *\n * On platforms that support it, memory referenced by the returned `Uint8Array` will not be initialized.\n *\n * ### Example\n *\n * ```js\n * import { allocUnsafe } from 'uint8arrays/alloc'\n *\n * const buf = allocUnsafe(100)\n * ```\n *\n * ## compare(a, b)\n *\n * Compare two `Uint8Arrays`\n *\n * ### Example\n *\n * ```js\n * import { compare } from 'uint8arrays/compare'\n *\n * const arrays = [\n *   Uint8Array.from([3, 4, 5]),\n *   Uint8Array.from([0, 1, 2])\n * ]\n *\n * const sorted = arrays.sort(compare)\n *\n * console.info(sorted)\n * // [\n * //    Uint8Array[0, 1, 2]\n * //    Uint8Array[3, 4, 5]\n * // ]\n * ```\n *\n * ## concat(arrays, \\[length])\n *\n * Concatenate one or more `Uint8Array`s and return a `Uint8Array` with their contents.\n *\n * If you know the length of the arrays, pass it as a second parameter, otherwise it will be calculated by traversing the list of arrays.\n *\n * ### Example\n *\n * ```js\n * import { concat } from 'uint8arrays/concat'\n *\n * const arrays = [\n *   Uint8Array.from([0, 1, 2]),\n *   Uint8Array.from([3, 4, 5])\n * ]\n *\n * const all = concat(arrays, 6)\n *\n * console.info(all)\n * // Uint8Array[0, 1, 2, 3, 4, 5]\n * ```\n *\n * ## equals(a, b)\n *\n * Returns true if the two arrays are the same array or if they have the same length and contents.\n *\n * ### Example\n *\n * ```js\n * import { equals } from 'uint8arrays/equals'\n *\n * const a = Uint8Array.from([0, 1, 2])\n * const b = Uint8Array.from([3, 4, 5])\n * const c = Uint8Array.from([0, 1, 2])\n *\n * console.info(equals(a, b)) // false\n * console.info(equals(a, c)) // true\n * console.info(equals(a, a)) // true\n * ```\n *\n * ## fromString(string, encoding = 'utf8')\n *\n * Returns a new `Uint8Array` created from the passed string and interpreted as the passed encoding.\n *\n * Supports `utf8` and any of the [multibase encodings](https://github.com/multiformats/multibase/blob/master/multibase.csv) as implemented by the [multiformats module](https://www.npmjs.com/package/multiformats).\n *\n * ### Example\n *\n * ```js\n * import { fromString } from 'uint8arrays/from-string'\n *\n * console.info(fromString('hello world')) // Uint8Array[104, 101 ...\n * console.info(fromString('00010203aabbcc', 'base16')) // Uint8Array[0, 1 ...\n * console.info(fromString('AAECA6q7zA', 'base64')) // Uint8Array[0, 1 ...\n * console.info(fromString('01234', 'ascii')) // Uint8Array[48, 49 ...\n * ```\n *\n * ## toString(array, encoding = 'utf8')\n *\n * Returns a string created from the passed `Uint8Array` in the passed encoding.\n *\n * Supports `utf8` and any of the [multibase encodings](https://github.com/multiformats/multibase/blob/master/multibase.csv) as implemented by the [multiformats module](https://www.npmjs.com/package/multiformats).\n *\n * ### Example\n *\n * ```js\n * import { toString } from 'uint8arrays/to-string'\n *\n * console.info(toString(Uint8Array.from([104, 101...]))) // 'hello world'\n * console.info(toString(Uint8Array.from([0, 1, 2...]), 'base16')) // '00010203aabbcc'\n * console.info(toString(Uint8Array.from([0, 1, 2...]), 'base64')) // 'AAECA6q7zA'\n * console.info(toString(Uint8Array.from([48, 49, 50...]), 'ascii')) // '01234'\n * ```\n *\n * ## xor(a, b)\n *\n * Returns a `Uint8Array` containing `a` and `b` xored together.\n *\n * ### Example\n *\n * ```js\n * import { xor } from 'uint8arrays/xor'\n *\n * console.info(xor(Uint8Array.from([1, 0]), Uint8Array.from([0, 1]))) // Uint8Array[1, 1]\n * ```\n */\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://ems/./node_modules/uint8arrays/dist/src/index.js?");

/***/ }),

/***/ "./node_modules/uint8arrays/dist/src/to-string.js":
/*!********************************************************!*\
  !*** ./node_modules/uint8arrays/dist/src/to-string.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toString: () => (/* binding */ toString)\n/* harmony export */ });\n/* harmony import */ var _util_bases_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/bases.js */ \"./node_modules/uint8arrays/dist/src/util/bases.js\");\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nfunction toString(array, encoding = 'utf8') {\n    const base = _util_bases_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"][encoding];\n    if (base == null) {\n        throw new Error(`Unsupported encoding \"${encoding}\"`);\n    }\n    // strip multibase prefix\n    return base.encoder.encode(array).substring(1);\n}\n//# sourceMappingURL=to-string.js.map\n\n//# sourceURL=webpack://ems/./node_modules/uint8arrays/dist/src/to-string.js?");

/***/ }),

/***/ "./node_modules/uint8arrays/dist/src/xor.js":
/*!**************************************************!*\
  !*** ./node_modules/uint8arrays/dist/src/xor.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   xor: () => (/* binding */ xor)\n/* harmony export */ });\n/* harmony import */ var _alloc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! #alloc */ \"./node_modules/uint8arrays/dist/src/alloc.js\");\n/* harmony import */ var _util_as_uint8array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! #util/as-uint8array */ \"./node_modules/uint8arrays/dist/src/util/as-uint8array.js\");\n\n\n/**\n * Returns the xor distance between two arrays\n */\nfunction xor(a, b) {\n    if (a.length !== b.length) {\n        throw new Error('Inputs should have the same length');\n    }\n    const result = (0,_alloc__WEBPACK_IMPORTED_MODULE_0__.allocUnsafe)(a.length);\n    for (let i = 0; i < a.length; i++) {\n        result[i] = a[i] ^ b[i];\n    }\n    return (0,_util_as_uint8array__WEBPACK_IMPORTED_MODULE_1__.asUint8Array)(result);\n}\n//# sourceMappingURL=xor.js.map\n\n//# sourceURL=webpack://ems/./node_modules/uint8arrays/dist/src/xor.js?");

/***/ }),

/***/ "./node_modules/wherearewe/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/wherearewe/src/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isElectron: () => (/* binding */ isElectron),\n/* harmony export */   isElectronMain: () => (/* binding */ isElectronMain),\n/* harmony export */   isElectronRenderer: () => (/* binding */ isElectronRenderer),\n/* harmony export */   isEnvWithDom: () => (/* binding */ isEnvWithDom),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isReactNative: () => (/* binding */ isReactNative),\n/* harmony export */   isTest: () => (/* binding */ isTest),\n/* harmony export */   isWebWorker: () => (/* binding */ isWebWorker)\n/* harmony export */ });\n/* harmony import */ var is_electron__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! is-electron */ \"./node_modules/is-electron/index.js\");\n\n\nconst isEnvWithDom = typeof window === 'object' && typeof document === 'object' && document.nodeType === 9\nconst isElectron = is_electron__WEBPACK_IMPORTED_MODULE_0__()\n\n/**\n * Detects browser main thread  **NOT** web worker or service worker\n */\nconst isBrowser = isEnvWithDom && !isElectron\nconst isElectronMain = isElectron && !isEnvWithDom\nconst isElectronRenderer = isElectron && isEnvWithDom\nconst isNode = typeof globalThis.process !== 'undefined' && typeof globalThis.process.release !== 'undefined' && globalThis.process.release.name === 'node' && !isElectron\n// @ts-ignore\n// eslint-disable-next-line no-undef\nconst isWebWorker = typeof importScripts === 'function' && typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope\n\n// defeat bundlers replacing process.env.NODE_ENV with \"development\" or whatever\nconst isTest = typeof globalThis.process !== 'undefined' && typeof globalThis.process.env !== 'undefined' && globalThis.process.env['NODE' + (() => '_')() + 'ENV'] === 'test'\nconst isReactNative = typeof navigator !== 'undefined' && navigator.product === 'ReactNative'\n\n\n//# sourceURL=webpack://ems/./node_modules/wherearewe/src/index.js?");

/***/ })

}])